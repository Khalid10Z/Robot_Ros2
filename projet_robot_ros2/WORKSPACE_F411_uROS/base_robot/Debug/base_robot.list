
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e5fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f0  0801e7a0  0801e7a0  0002e7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f890  0801f890  00030260  2**0
                  CONTENTS
  4 .ARM          00000008  0801f890  0801f890  0002f890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f898  0801f898  00030260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f898  0801f898  0002f898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f89c  0801f89c  0002f89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0801f8a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e6f8  20000260  0801fb00  00030260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e958  0801fb00  0003e958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY
 12 .debug_info   000e6832  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00017f06  00000000  00000000  00116ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000043c0  00000000  00000000  0012e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000b778  00000000  00000000  00132d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a0f  00000000  00000000  0013e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00071a2f  00000000  00000000  00162f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8467  00000000  00000000  001d493e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  0028cda5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011774  00000000  00000000  0028ce50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00057bbf  00000000  00000000  0029e5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000260 	.word	0x20000260
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801e784 	.word	0x0801e784

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000264 	.word	0x20000264
 80001dc:	0801e784 	.word	0x0801e784

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <millis>:
// Locally used functions (private)
//---------------------------------------------------------
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte);

uint8_t millis()
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 80010e8:	1dba      	adds	r2, r7, #6
 80010ea:	79f9      	ldrb	r1, [r7, #7]
 80010ec:	2301      	movs	r3, #1
 80010ee:	2053      	movs	r0, #83	; 0x53
 80010f0:	f001 f86a 	bl	80021c8 <i2c1_WriteRegBuffer>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <writeReg16Bit>:
// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	79f9      	ldrb	r1, [r7, #7]
 8001122:	2302      	movs	r3, #2
 8001124:	2053      	movs	r0, #83	; 0x53
 8001126:	f001 f84f 	bl	80021c8 <i2c1_WriteRegBuffer>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <writeReg32Bit>:
// Write a 32-bit register
void writeReg32Bit(uint8_t reg, uint32_t value){
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	6039      	str	r1, [r7, #0]
 800113c:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[4];
		tab[3]= ((value >> 24) & 0xFF);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	0e1b      	lsrs	r3, r3, #24
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73fb      	strb	r3, [r7, #15]
		tab[2]= ((value >> 16) & 0xFF);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	0c1b      	lsrs	r3, r3, #16
 800114a:	b2db      	uxtb	r3, r3
 800114c:	73bb      	strb	r3, [r7, #14]
		tab[1]= ((value >> 8) & 0xFF);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	b2db      	uxtb	r3, r3
 8001154:	737b      	strb	r3, [r7, #13]
		tab[0] = ((value ) & 0xFF);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	733b      	strb	r3, [r7, #12]
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	79f9      	ldrb	r1, [r7, #7]
 8001162:	2304      	movs	r3, #4
 8001164:	2053      	movs	r0, #83	; 0x53
 8001166:	f001 f82f 	bl	80021c8 <i2c1_WriteRegBuffer>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <readReg>:
// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 8001180:	f107 020f 	add.w	r2, r7, #15
 8001184:	79f9      	ldrb	r1, [r7, #7]
 8001186:	2301      	movs	r3, #1
 8001188:	2053      	movs	r0, #83	; 0x53
 800118a:	f000 ffeb 	bl	8002164 <i2c1_ReadRegBuffer>
  	return value;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <readReg16Bit>:
// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer(0x53,reg,tab,2);
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	79f9      	ldrb	r1, [r7, #7]
 80011a8:	2302      	movs	r3, #2
 80011aa:	2053      	movs	r0, #83	; 0x53
 80011ac:	f000 ffda 	bl	8002164 <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	81fb      	strh	r3, [r7, #14]
  	return value;
 80011c0:	89fb      	ldrh	r3, [r7, #14]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <readMulti>:


// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	6039      	str	r1, [r7, #0]
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	4613      	mov	r3, r2
 80011d8:	71bb      	strb	r3, [r7, #6]
	uint8_t value=0;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  while (count-- > 0)
 80011de:	e00b      	b.n	80011f8 <readMulti+0x2e>
  {
	  i2c1_ReadRegBuffer(0x53,reg,&value,1);
 80011e0:	f107 020f 	add.w	r2, r7, #15
 80011e4:	79f9      	ldrb	r1, [r7, #7]
 80011e6:	2301      	movs	r3, #1
 80011e8:	2053      	movs	r0, #83	; 0x53
 80011ea:	f000 ffbb 	bl	8002164 <i2c1_ReadRegBuffer>
    *(dst++) = value;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	603a      	str	r2, [r7, #0]
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	701a      	strb	r2, [r3, #0]
  while (count-- > 0)
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	1e5a      	subs	r2, r3, #1
 80011fc:	71ba      	strb	r2, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ee      	bne.n	80011e0 <readMulti+0x16>
  }
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <VL53L0X_validateInterface>:
uint8_t VL53L0X_getAddress() {
  return g_i2cAddr;
}
//===========================================================================
uint8_t VL53L0X_validateInterface()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint16_t var=0;
 8001212:	2300      	movs	r3, #0
 8001214:	80fb      	strh	r3, [r7, #6]
	var = readReg(0xC0);
 8001216:	20c0      	movs	r0, #192	; 0xc0
 8001218:	f7ff ffab 	bl	8001172 <readReg>
 800121c:	4603      	mov	r3, r0
 800121e:	80fb      	strh	r3, [r7, #6]
	if ( var == 0xEE)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	2bee      	cmp	r3, #238	; 0xee
 8001224:	d121      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
	{
		var =readReg(0xC1);
 8001226:	20c1      	movs	r0, #193	; 0xc1
 8001228:	f7ff ffa3 	bl	8001172 <readReg>
 800122c:	4603      	mov	r3, r0
 800122e:	80fb      	strh	r3, [r7, #6]
		if ( var == 0xAA)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	2baa      	cmp	r3, #170	; 0xaa
 8001234:	d119      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
		{
			var =readReg(0xC2);
 8001236:	20c2      	movs	r0, #194	; 0xc2
 8001238:	f7ff ff9b 	bl	8001172 <readReg>
 800123c:	4603      	mov	r3, r0
 800123e:	80fb      	strh	r3, [r7, #6]
			if ( var == 0x10)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	2b10      	cmp	r3, #16
 8001244:	d111      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
			{
				var =readReg16Bit(0x51);
 8001246:	2051      	movs	r0, #81	; 0x51
 8001248:	f7ff ffa6 	bl	8001198 <readReg16Bit>
 800124c:	4603      	mov	r3, r0
 800124e:	80fb      	strh	r3, [r7, #6]
				if ( var == 0x0096) // doc 0x0099 ??
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	2b96      	cmp	r3, #150	; 0x96
 8001254:	d109      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
				{
					var =readReg16Bit(0x61);
 8001256:	2061      	movs	r0, #97	; 0x61
 8001258:	f7ff ff9e 	bl	8001198 <readReg16Bit>
 800125c:	4603      	mov	r3, r0
 800125e:	80fb      	strh	r3, [r7, #6]
					if ( var == 0x0000)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
					{
						return 0;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <VL53L0X_validateInterface+0x60>
					}
				}
			}
		}
	}
	return -1;
 800126a:	23ff      	movs	r3, #255	; 0xff
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <VL53L0X_init>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t VL53L0X_init( ){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  //****************************************************************************
  // DATA INIT
  // "Set I2C standard mode"
  writeReg(I2C_MODE, 0x00);
 800127a:	2100      	movs	r1, #0
 800127c:	2088      	movs	r0, #136	; 0x88
 800127e:	f7ff ff2b 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 8001282:	2101      	movs	r1, #1
 8001284:	2080      	movs	r0, #128	; 0x80
 8001286:	f7ff ff27 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x01);
 800128a:	2101      	movs	r1, #1
 800128c:	20ff      	movs	r0, #255	; 0xff
 800128e:	f7ff ff23 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 8001292:	2100      	movs	r1, #0
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ff1f 	bl	80010d8 <writeReg>
  g_stopVariable = readReg(0x91);
 800129a:	2091      	movs	r0, #145	; 0x91
 800129c:	f7ff ff69 	bl	8001172 <readReg>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4bde      	ldr	r3, [pc, #888]	; (8001620 <VL53L0X_init+0x3ac>)
 80012a6:	701a      	strb	r2, [r3, #0]
  writeReg(SYSRANGE_START, 0x01);
 80012a8:	2101      	movs	r1, #1
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff ff14 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 80012b0:	2100      	movs	r1, #0
 80012b2:	20ff      	movs	r0, #255	; 0xff
 80012b4:	f7ff ff10 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2080      	movs	r0, #128	; 0x80
 80012bc:	f7ff ff0c 	bl	80010d8 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80012c0:	2060      	movs	r0, #96	; 0x60
 80012c2:	f7ff ff56 	bl	8001172 <readReg>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f043 0312 	orr.w	r3, r3, #18
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	2060      	movs	r0, #96	; 0x60
 80012d2:	f7ff ff01 	bl	80010d8 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(0.25);
 80012d6:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80012da:	f000 f9a5 	bl	8001628 <VL53L0X_setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80012de:	21ff      	movs	r1, #255	; 0xff
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff fef9 	bl	80010d8 <writeReg>
  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80012e6:	1dba      	adds	r2, r7, #6
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f9eb 	bl	80016c8 <VL53L0X_getSpadInfo>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <VL53L0X_init+0x88>
 80012f8:	2300      	movs	r3, #0
 80012fa:	e18d      	b.n	8001618 <VL53L0X_init+0x3a4>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80012fc:	463b      	mov	r3, r7
 80012fe:	2206      	movs	r2, #6
 8001300:	4619      	mov	r1, r3
 8001302:	20b0      	movs	r0, #176	; 0xb0
 8001304:	f7ff ff61 	bl	80011ca <readMulti>
  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)
  writeReg(INTERNAL_TUNING_2, 0x01);
 8001308:	2101      	movs	r1, #1
 800130a:	20ff      	movs	r0, #255	; 0xff
 800130c:	f7ff fee4 	bl	80010d8 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001310:	2100      	movs	r1, #0
 8001312:	204f      	movs	r0, #79	; 0x4f
 8001314:	f7ff fee0 	bl	80010d8 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001318:	212c      	movs	r1, #44	; 0x2c
 800131a:	204e      	movs	r0, #78	; 0x4e
 800131c:	f7ff fedc 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 8001320:	2100      	movs	r1, #0
 8001322:	20ff      	movs	r0, #255	; 0xff
 8001324:	f7ff fed8 	bl	80010d8 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001328:	21b4      	movs	r1, #180	; 0xb4
 800132a:	20b6      	movs	r0, #182	; 0xb6
 800132c:	f7ff fed4 	bl	80010d8 <writeReg>
  // -- VL53L0X_set_reference_spads() end
  //****************************************************************************
  // LOAD TUNING SETTINGS
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001330:	2101      	movs	r1, #1
 8001332:	20ff      	movs	r0, #255	; 0xff
 8001334:	f7ff fed0 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 8001338:	2100      	movs	r1, #0
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fecc 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001340:	2100      	movs	r1, #0
 8001342:	20ff      	movs	r0, #255	; 0xff
 8001344:	f7ff fec8 	bl	80010d8 <writeReg>
  writeReg(SYSTEM_RANGE_CONFIG, 0x00);
 8001348:	2100      	movs	r1, #0
 800134a:	2009      	movs	r0, #9
 800134c:	f7ff fec4 	bl	80010d8 <writeReg>
  writeReg(0x10, 0x00);
 8001350:	2100      	movs	r1, #0
 8001352:	2010      	movs	r0, #16
 8001354:	f7ff fec0 	bl	80010d8 <writeReg>
  writeReg(0x11, 0x00);
 8001358:	2100      	movs	r1, #0
 800135a:	2011      	movs	r0, #17
 800135c:	f7ff febc 	bl	80010d8 <writeReg>

  writeReg(0x24, 0x01);
 8001360:	2101      	movs	r1, #1
 8001362:	2024      	movs	r0, #36	; 0x24
 8001364:	f7ff feb8 	bl	80010d8 <writeReg>
  writeReg(0x25, 0xFF);
 8001368:	21ff      	movs	r1, #255	; 0xff
 800136a:	2025      	movs	r0, #37	; 0x25
 800136c:	f7ff feb4 	bl	80010d8 <writeReg>
  writeReg(0x75, 0x00);
 8001370:	2100      	movs	r1, #0
 8001372:	2075      	movs	r0, #117	; 0x75
 8001374:	f7ff feb0 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001378:	2101      	movs	r1, #1
 800137a:	20ff      	movs	r0, #255	; 0xff
 800137c:	f7ff feac 	bl	80010d8 <writeReg>
  writeReg(0x4E, 0x2C);
 8001380:	212c      	movs	r1, #44	; 0x2c
 8001382:	204e      	movs	r0, #78	; 0x4e
 8001384:	f7ff fea8 	bl	80010d8 <writeReg>
  writeReg(0x48, 0x00);
 8001388:	2100      	movs	r1, #0
 800138a:	2048      	movs	r0, #72	; 0x48
 800138c:	f7ff fea4 	bl	80010d8 <writeReg>
  writeReg(0x30, 0x20);
 8001390:	2120      	movs	r1, #32
 8001392:	2030      	movs	r0, #48	; 0x30
 8001394:	f7ff fea0 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001398:	2100      	movs	r1, #0
 800139a:	20ff      	movs	r0, #255	; 0xff
 800139c:	f7ff fe9c 	bl	80010d8 <writeReg>
  writeReg(0x30, 0x09);
 80013a0:	2109      	movs	r1, #9
 80013a2:	2030      	movs	r0, #48	; 0x30
 80013a4:	f7ff fe98 	bl	80010d8 <writeReg>
  writeReg(0x54, 0x00);
 80013a8:	2100      	movs	r1, #0
 80013aa:	2054      	movs	r0, #84	; 0x54
 80013ac:	f7ff fe94 	bl	80010d8 <writeReg>
  writeReg(0x31, 0x04);
 80013b0:	2104      	movs	r1, #4
 80013b2:	2031      	movs	r0, #49	; 0x31
 80013b4:	f7ff fe90 	bl	80010d8 <writeReg>
  writeReg(0x32, 0x03);
 80013b8:	2103      	movs	r1, #3
 80013ba:	2032      	movs	r0, #50	; 0x32
 80013bc:	f7ff fe8c 	bl	80010d8 <writeReg>
  writeReg(0x40, 0x83);
 80013c0:	2183      	movs	r1, #131	; 0x83
 80013c2:	2040      	movs	r0, #64	; 0x40
 80013c4:	f7ff fe88 	bl	80010d8 <writeReg>
  writeReg(0x46, 0x25);
 80013c8:	2125      	movs	r1, #37	; 0x25
 80013ca:	2046      	movs	r0, #70	; 0x46
 80013cc:	f7ff fe84 	bl	80010d8 <writeReg>
  writeReg(0x60, 0x00);
 80013d0:	2100      	movs	r1, #0
 80013d2:	2060      	movs	r0, #96	; 0x60
 80013d4:	f7ff fe80 	bl	80010d8 <writeReg>
  writeReg(0x27, 0x00);
 80013d8:	2100      	movs	r1, #0
 80013da:	2027      	movs	r0, #39	; 0x27
 80013dc:	f7ff fe7c 	bl	80010d8 <writeReg>
  writeReg(0x50, 0x06);
 80013e0:	2106      	movs	r1, #6
 80013e2:	2050      	movs	r0, #80	; 0x50
 80013e4:	f7ff fe78 	bl	80010d8 <writeReg>
  writeReg(0x51, 0x00);
 80013e8:	2100      	movs	r1, #0
 80013ea:	2051      	movs	r0, #81	; 0x51
 80013ec:	f7ff fe74 	bl	80010d8 <writeReg>
  writeReg(0x52, 0x96);
 80013f0:	2196      	movs	r1, #150	; 0x96
 80013f2:	2052      	movs	r0, #82	; 0x52
 80013f4:	f7ff fe70 	bl	80010d8 <writeReg>
  writeReg(0x56, 0x08);
 80013f8:	2108      	movs	r1, #8
 80013fa:	2056      	movs	r0, #86	; 0x56
 80013fc:	f7ff fe6c 	bl	80010d8 <writeReg>
  writeReg(0x57, 0x30);
 8001400:	2130      	movs	r1, #48	; 0x30
 8001402:	2057      	movs	r0, #87	; 0x57
 8001404:	f7ff fe68 	bl	80010d8 <writeReg>
  writeReg(0x61, 0x00);
 8001408:	2100      	movs	r1, #0
 800140a:	2061      	movs	r0, #97	; 0x61
 800140c:	f7ff fe64 	bl	80010d8 <writeReg>
  writeReg(0x62, 0x00);
 8001410:	2100      	movs	r1, #0
 8001412:	2062      	movs	r0, #98	; 0x62
 8001414:	f7ff fe60 	bl	80010d8 <writeReg>
  writeReg(0x64, 0x00);
 8001418:	2100      	movs	r1, #0
 800141a:	2064      	movs	r0, #100	; 0x64
 800141c:	f7ff fe5c 	bl	80010d8 <writeReg>
  writeReg(0x65, 0x00);
 8001420:	2100      	movs	r1, #0
 8001422:	2065      	movs	r0, #101	; 0x65
 8001424:	f7ff fe58 	bl	80010d8 <writeReg>
  writeReg(0x66, 0xA0);
 8001428:	21a0      	movs	r1, #160	; 0xa0
 800142a:	2066      	movs	r0, #102	; 0x66
 800142c:	f7ff fe54 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001430:	2101      	movs	r1, #1
 8001432:	20ff      	movs	r0, #255	; 0xff
 8001434:	f7ff fe50 	bl	80010d8 <writeReg>
  writeReg(0x22, 0x32);
 8001438:	2132      	movs	r1, #50	; 0x32
 800143a:	2022      	movs	r0, #34	; 0x22
 800143c:	f7ff fe4c 	bl	80010d8 <writeReg>
  writeReg(0x47, 0x14);
 8001440:	2114      	movs	r1, #20
 8001442:	2047      	movs	r0, #71	; 0x47
 8001444:	f7ff fe48 	bl	80010d8 <writeReg>
  writeReg(0x49, 0xFF);
 8001448:	21ff      	movs	r1, #255	; 0xff
 800144a:	2049      	movs	r0, #73	; 0x49
 800144c:	f7ff fe44 	bl	80010d8 <writeReg>
  writeReg(0x4A, 0x00);
 8001450:	2100      	movs	r1, #0
 8001452:	204a      	movs	r0, #74	; 0x4a
 8001454:	f7ff fe40 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001458:	2100      	movs	r1, #0
 800145a:	20ff      	movs	r0, #255	; 0xff
 800145c:	f7ff fe3c 	bl	80010d8 <writeReg>
  writeReg(0x7A, 0x0A);
 8001460:	210a      	movs	r1, #10
 8001462:	207a      	movs	r0, #122	; 0x7a
 8001464:	f7ff fe38 	bl	80010d8 <writeReg>
  writeReg(0x7B, 0x00);
 8001468:	2100      	movs	r1, #0
 800146a:	207b      	movs	r0, #123	; 0x7b
 800146c:	f7ff fe34 	bl	80010d8 <writeReg>
  writeReg(0x78, 0x21);
 8001470:	2121      	movs	r1, #33	; 0x21
 8001472:	2078      	movs	r0, #120	; 0x78
 8001474:	f7ff fe30 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001478:	2101      	movs	r1, #1
 800147a:	20ff      	movs	r0, #255	; 0xff
 800147c:	f7ff fe2c 	bl	80010d8 <writeReg>
  writeReg(0x23, 0x34);
 8001480:	2134      	movs	r1, #52	; 0x34
 8001482:	2023      	movs	r0, #35	; 0x23
 8001484:	f7ff fe28 	bl	80010d8 <writeReg>
  writeReg(0x42, 0x00);
 8001488:	2100      	movs	r1, #0
 800148a:	2042      	movs	r0, #66	; 0x42
 800148c:	f7ff fe24 	bl	80010d8 <writeReg>
  writeReg(0x44, 0xFF);
 8001490:	21ff      	movs	r1, #255	; 0xff
 8001492:	2044      	movs	r0, #68	; 0x44
 8001494:	f7ff fe20 	bl	80010d8 <writeReg>
  writeReg(0x45, 0x26);
 8001498:	2126      	movs	r1, #38	; 0x26
 800149a:	2045      	movs	r0, #69	; 0x45
 800149c:	f7ff fe1c 	bl	80010d8 <writeReg>
  writeReg(0x46, 0x05);
 80014a0:	2105      	movs	r1, #5
 80014a2:	2046      	movs	r0, #70	; 0x46
 80014a4:	f7ff fe18 	bl	80010d8 <writeReg>
  writeReg(0x40, 0x40);
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	2040      	movs	r0, #64	; 0x40
 80014ac:	f7ff fe14 	bl	80010d8 <writeReg>
  writeReg(0x0E, 0x06);
 80014b0:	2106      	movs	r1, #6
 80014b2:	200e      	movs	r0, #14
 80014b4:	f7ff fe10 	bl	80010d8 <writeReg>
  writeReg(0x20, 0x1A);
 80014b8:	211a      	movs	r1, #26
 80014ba:	2020      	movs	r0, #32
 80014bc:	f7ff fe0c 	bl	80010d8 <writeReg>
  writeReg(0x43, 0x40);
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	2043      	movs	r0, #67	; 0x43
 80014c4:	f7ff fe08 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 80014c8:	2100      	movs	r1, #0
 80014ca:	20ff      	movs	r0, #255	; 0xff
 80014cc:	f7ff fe04 	bl	80010d8 <writeReg>
  writeReg(0x34, 0x03);
 80014d0:	2103      	movs	r1, #3
 80014d2:	2034      	movs	r0, #52	; 0x34
 80014d4:	f7ff fe00 	bl	80010d8 <writeReg>
  writeReg(0x35, 0x44);
 80014d8:	2144      	movs	r1, #68	; 0x44
 80014da:	2035      	movs	r0, #53	; 0x35
 80014dc:	f7ff fdfc 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 80014e0:	2101      	movs	r1, #1
 80014e2:	20ff      	movs	r0, #255	; 0xff
 80014e4:	f7ff fdf8 	bl	80010d8 <writeReg>
  writeReg(0x31, 0x04);
 80014e8:	2104      	movs	r1, #4
 80014ea:	2031      	movs	r0, #49	; 0x31
 80014ec:	f7ff fdf4 	bl	80010d8 <writeReg>
  writeReg(0x4B, 0x09);
 80014f0:	2109      	movs	r1, #9
 80014f2:	204b      	movs	r0, #75	; 0x4b
 80014f4:	f7ff fdf0 	bl	80010d8 <writeReg>
  writeReg(0x4C, 0x05);
 80014f8:	2105      	movs	r1, #5
 80014fa:	204c      	movs	r0, #76	; 0x4c
 80014fc:	f7ff fdec 	bl	80010d8 <writeReg>
  writeReg(0x4D, 0x04);
 8001500:	2104      	movs	r1, #4
 8001502:	204d      	movs	r0, #77	; 0x4d
 8001504:	f7ff fde8 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001508:	2100      	movs	r1, #0
 800150a:	20ff      	movs	r0, #255	; 0xff
 800150c:	f7ff fde4 	bl	80010d8 <writeReg>
  writeReg(0x44, 0x00);
 8001510:	2100      	movs	r1, #0
 8001512:	2044      	movs	r0, #68	; 0x44
 8001514:	f7ff fde0 	bl	80010d8 <writeReg>
  writeReg(0x45, 0x20);
 8001518:	2120      	movs	r1, #32
 800151a:	2045      	movs	r0, #69	; 0x45
 800151c:	f7ff fddc 	bl	80010d8 <writeReg>
  writeReg(0x47, 0x08);
 8001520:	2108      	movs	r1, #8
 8001522:	2047      	movs	r0, #71	; 0x47
 8001524:	f7ff fdd8 	bl	80010d8 <writeReg>
  writeReg(0x48, 0x28);
 8001528:	2128      	movs	r1, #40	; 0x28
 800152a:	2048      	movs	r0, #72	; 0x48
 800152c:	f7ff fdd4 	bl	80010d8 <writeReg>
  writeReg(0x67, 0x00);
 8001530:	2100      	movs	r1, #0
 8001532:	2067      	movs	r0, #103	; 0x67
 8001534:	f7ff fdd0 	bl	80010d8 <writeReg>
  writeReg(0x70, 0x04);
 8001538:	2104      	movs	r1, #4
 800153a:	2070      	movs	r0, #112	; 0x70
 800153c:	f7ff fdcc 	bl	80010d8 <writeReg>
  writeReg(0x71, 0x01);
 8001540:	2101      	movs	r1, #1
 8001542:	2071      	movs	r0, #113	; 0x71
 8001544:	f7ff fdc8 	bl	80010d8 <writeReg>
  writeReg(0x72, 0xFE);
 8001548:	21fe      	movs	r1, #254	; 0xfe
 800154a:	2072      	movs	r0, #114	; 0x72
 800154c:	f7ff fdc4 	bl	80010d8 <writeReg>
  writeReg(0x76, 0x00);
 8001550:	2100      	movs	r1, #0
 8001552:	2076      	movs	r0, #118	; 0x76
 8001554:	f7ff fdc0 	bl	80010d8 <writeReg>
  writeReg(0x77, 0x00);
 8001558:	2100      	movs	r1, #0
 800155a:	2077      	movs	r0, #119	; 0x77
 800155c:	f7ff fdbc 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001560:	2101      	movs	r1, #1
 8001562:	20ff      	movs	r0, #255	; 0xff
 8001564:	f7ff fdb8 	bl	80010d8 <writeReg>
  writeReg(0x0D, 0x01);
 8001568:	2101      	movs	r1, #1
 800156a:	200d      	movs	r0, #13
 800156c:	f7ff fdb4 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001570:	2100      	movs	r1, #0
 8001572:	20ff      	movs	r0, #255	; 0xff
 8001574:	f7ff fdb0 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 8001578:	2101      	movs	r1, #1
 800157a:	2080      	movs	r0, #128	; 0x80
 800157c:	f7ff fdac 	bl	80010d8 <writeReg>
  writeReg(0x01, 0xF8);
 8001580:	21f8      	movs	r1, #248	; 0xf8
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fda8 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001588:	2101      	movs	r1, #1
 800158a:	20ff      	movs	r0, #255	; 0xff
 800158c:	f7ff fda4 	bl	80010d8 <writeReg>
  writeReg(0x8E, 0x01);
 8001590:	2101      	movs	r1, #1
 8001592:	208e      	movs	r0, #142	; 0x8e
 8001594:	f7ff fda0 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001598:	2101      	movs	r1, #1
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fd9c 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 80015a0:	2100      	movs	r1, #0
 80015a2:	20ff      	movs	r0, #255	; 0xff
 80015a4:	f7ff fd98 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2080      	movs	r0, #128	; 0x80
 80015ac:	f7ff fd94 	bl	80010d8 <writeReg>
  //***************************************************************************
  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80015b0:	2104      	movs	r1, #4
 80015b2:	200a      	movs	r0, #10
 80015b4:	f7ff fd90 	bl	80010d8 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80015b8:	2084      	movs	r0, #132	; 0x84
 80015ba:	f7ff fdda 	bl	8001172 <readReg>
 80015be:	4603      	mov	r3, r0
 80015c0:	f023 0310 	bic.w	r3, r3, #16
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4619      	mov	r1, r3
 80015c8:	2084      	movs	r0, #132	; 0x84
 80015ca:	f7ff fd85 	bl	80010d8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80015ce:	2101      	movs	r1, #1
 80015d0:	200b      	movs	r0, #11
 80015d2:	f7ff fd81 	bl	80010d8 <writeReg>
  //***************************************************************************
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80015d6:	21e8      	movs	r1, #232	; 0xe8
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fd7d 	bl	80010d8 <writeReg>
  //***************************************************************************
  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())
  // -- VL53L0X_perform_vhv_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80015de:	2101      	movs	r1, #1
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff fd79 	bl	80010d8 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x40)) { return false; }
 80015e6:	2040      	movs	r0, #64	; 0x40
 80015e8:	f000 f854 	bl	8001694 <VL53L0X_performSingleRefCalibration>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <VL53L0X_init+0x382>
 80015f2:	2300      	movs	r3, #0
 80015f4:	e010      	b.n	8001618 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // -- VL53L0X_perform_phase_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80015f6:	2102      	movs	r1, #2
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fd6d 	bl	80010d8 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x00)) { return false; }
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f848 	bl	8001694 <VL53L0X_performSingleRefCalibration>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <VL53L0X_init+0x39a>
 800160a:	2300      	movs	r3, #0
 800160c:	e004      	b.n	8001618 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800160e:	21e8      	movs	r1, #232	; 0xe8
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff fd61 	bl	80010d8 <writeReg>
  //***************************************************************************
  return true;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000027c 	.word	0x2000027c
 8001624:	00000000 	.word	0x00000000

08001628 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t VL53L0X_setSignalRateLimit(float limit_Mcps)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001632:	edd7 7a01 	vldr	s15, [r7, #4]
 8001636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	d40a      	bmi.n	8001656 <VL53L0X_setSignalRateLimit+0x2e>
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7fe ff99 	bl	8000578 <__aeabi_f2d>
 8001646:	a311      	add	r3, pc, #68	; (adr r3, 800168c <VL53L0X_setSignalRateLimit+0x64>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7ff fa7c 	bl	8000b48 <__aeabi_dcmpgt>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <VL53L0X_setSignalRateLimit+0x32>
 8001656:	2300      	movs	r3, #0
 8001658:	e00f      	b.n	800167a <VL53L0X_setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800165a:	edd7 7a01 	vldr	s15, [r7, #4]
 800165e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001688 <VL53L0X_setSignalRateLimit+0x60>
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166a:	ee17 3a90 	vmov	r3, s15
 800166e:	b29b      	uxth	r3, r3
 8001670:	4619      	mov	r1, r3
 8001672:	2044      	movs	r0, #68	; 0x44
 8001674:	f7ff fd42 	bl	80010fc <writeReg16Bit>
  return true;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	f3af 8000 	nop.w
 8001688:	43000000 	.word	0x43000000
 800168c:	0a3d70a4 	.word	0x0a3d70a4
 8001690:	407fffd7 	.word	0x407fffd7

08001694 <VL53L0X_performSingleRefCalibration>:
  return temp;
}
//=============================================================================
// based on VL53L0X_perform_single_ref_calibration()
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fd15 	bl	80010d8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80016ae:	2101      	movs	r1, #1
 80016b0:	200b      	movs	r0, #11
 80016b2:	f7ff fd11 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 80016b6:	2100      	movs	r1, #0
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fd0d 	bl	80010d8 <writeReg>
  return true;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <VL53L0X_getSpadInfo>:
//=============================================================================
// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
uint8_t VL53L0X_getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80016d2:	2101      	movs	r1, #1
 80016d4:	2080      	movs	r0, #128	; 0x80
 80016d6:	f7ff fcff 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x01);
 80016da:	2101      	movs	r1, #1
 80016dc:	20ff      	movs	r0, #255	; 0xff
 80016de:	f7ff fcfb 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x00);
 80016e2:	2100      	movs	r1, #0
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fcf7 	bl	80010d8 <writeReg>

  writeReg(0xFF, 0x06);
 80016ea:	2106      	movs	r1, #6
 80016ec:	20ff      	movs	r0, #255	; 0xff
 80016ee:	f7ff fcf3 	bl	80010d8 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 80016f2:	2083      	movs	r0, #131	; 0x83
 80016f4:	f7ff fd3d 	bl	8001172 <readReg>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4619      	mov	r1, r3
 8001702:	2083      	movs	r0, #131	; 0x83
 8001704:	f7ff fce8 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x07);
 8001708:	2107      	movs	r1, #7
 800170a:	20ff      	movs	r0, #255	; 0xff
 800170c:	f7ff fce4 	bl	80010d8 <writeReg>
  writeReg(0x81, 0x01);
 8001710:	2101      	movs	r1, #1
 8001712:	2081      	movs	r0, #129	; 0x81
 8001714:	f7ff fce0 	bl	80010d8 <writeReg>

  writeReg(0x80, 0x01);
 8001718:	2101      	movs	r1, #1
 800171a:	2080      	movs	r0, #128	; 0x80
 800171c:	f7ff fcdc 	bl	80010d8 <writeReg>

  writeReg(0x94, 0x6b);
 8001720:	216b      	movs	r1, #107	; 0x6b
 8001722:	2094      	movs	r0, #148	; 0x94
 8001724:	f7ff fcd8 	bl	80010d8 <writeReg>
  writeReg(0x83, 0x00);
 8001728:	2100      	movs	r1, #0
 800172a:	2083      	movs	r0, #131	; 0x83
 800172c:	f7ff fcd4 	bl	80010d8 <writeReg>
  startTimeout();
 8001730:	f7ff fcca 	bl	80010c8 <millis>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <VL53L0X_getSpadInfo+0x12c>)
 800173a:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 800173c:	e010      	b.n	8001760 <VL53L0X_getSpadInfo+0x98>
  {
    if (checkTimeoutExpired()) { return false; }
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <VL53L0X_getSpadInfo+0x130>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <VL53L0X_getSpadInfo+0x98>
 8001746:	f7ff fcbf 	bl	80010c8 <millis>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <VL53L0X_getSpadInfo+0x12c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <VL53L0X_getSpadInfo+0x130>)
 8001756:	8812      	ldrh	r2, [r2, #0]
 8001758:	4293      	cmp	r3, r2
 800175a:	dd01      	ble.n	8001760 <VL53L0X_getSpadInfo+0x98>
 800175c:	2300      	movs	r3, #0
 800175e:	e044      	b.n	80017ea <VL53L0X_getSpadInfo+0x122>
  while (readReg(0x83) == 0x00)
 8001760:	2083      	movs	r0, #131	; 0x83
 8001762:	f7ff fd06 	bl	8001172 <readReg>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0e8      	beq.n	800173e <VL53L0X_getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 800176c:	2101      	movs	r1, #1
 800176e:	2083      	movs	r0, #131	; 0x83
 8001770:	f7ff fcb2 	bl	80010d8 <writeReg>
  tmp = readReg(0x92);
 8001774:	2092      	movs	r0, #146	; 0x92
 8001776:	f7ff fcfc 	bl	8001172 <readReg>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	09db      	lsrs	r3, r3, #7
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf14      	ite	ne
 8001798:	2301      	movne	r3, #1
 800179a:	2300      	moveq	r3, #0
 800179c:	b2da      	uxtb	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 80017a2:	2100      	movs	r1, #0
 80017a4:	2081      	movs	r0, #129	; 0x81
 80017a6:	f7ff fc97 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x06);
 80017aa:	2106      	movs	r1, #6
 80017ac:	20ff      	movs	r0, #255	; 0xff
 80017ae:	f7ff fc93 	bl	80010d8 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 80017b2:	2083      	movs	r0, #131	; 0x83
 80017b4:	f7ff fcdd 	bl	8001172 <readReg>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	2083      	movs	r0, #131	; 0x83
 80017c4:	f7ff fc88 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x01);
 80017c8:	2101      	movs	r1, #1
 80017ca:	20ff      	movs	r0, #255	; 0xff
 80017cc:	f7ff fc84 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x01);
 80017d0:	2101      	movs	r1, #1
 80017d2:	2000      	movs	r0, #0
 80017d4:	f7ff fc80 	bl	80010d8 <writeReg>

  writeReg(0xFF, 0x00);
 80017d8:	2100      	movs	r1, #0
 80017da:	20ff      	movs	r0, #255	; 0xff
 80017dc:	f7ff fc7c 	bl	80010d8 <writeReg>
  writeReg(0x80, 0x00);
 80017e0:	2100      	movs	r1, #0
 80017e2:	2080      	movs	r0, #128	; 0x80
 80017e4:	f7ff fc78 	bl	80010d8 <writeReg>

  return true;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000027e 	.word	0x2000027e
 80017f8:	20000280 	.word	0x20000280

080017fc <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous(uint32_t period_ms)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 8001804:	2101      	movs	r1, #1
 8001806:	2080      	movs	r0, #128	; 0x80
 8001808:	f7ff fc66 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x01);
 800180c:	2101      	movs	r1, #1
 800180e:	20ff      	movs	r0, #255	; 0xff
 8001810:	f7ff fc62 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x00);
 8001814:	2100      	movs	r1, #0
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fc5e 	bl	80010d8 <writeReg>
  writeReg(0x91, g_stopVariable);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <VL53L0X_startContinuous+0x88>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	2091      	movs	r0, #145	; 0x91
 8001824:	f7ff fc58 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x01);
 8001828:	2101      	movs	r1, #1
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fc54 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x00);
 8001830:	2100      	movs	r1, #0
 8001832:	20ff      	movs	r0, #255	; 0xff
 8001834:	f7ff fc50 	bl	80010d8 <writeReg>
  writeReg(0x80, 0x00);
 8001838:	2100      	movs	r1, #0
 800183a:	2080      	movs	r0, #128	; 0x80
 800183c:	f7ff fc4c 	bl	80010d8 <writeReg>

  if (period_ms != 0)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <VL53L0X_startContinuous+0x76>
  {
    // continuous timed mode
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 8001846:	20f8      	movs	r0, #248	; 0xf8
 8001848:	f7ff fca6 	bl	8001198 <readReg16Bit>
 800184c:	4603      	mov	r3, r0
 800184e:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <VL53L0X_startContinuous+0x64>
    {
      period_ms *= osc_calibrate_val;
 8001856:	89fa      	ldrh	r2, [r7, #14]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	607b      	str	r3, [r7, #4]
    }
    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	2004      	movs	r0, #4
 8001864:	f7ff fc65 	bl	8001132 <writeReg32Bit>
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8001868:	2104      	movs	r1, #4
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fc34 	bl	80010d8 <writeReg>
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8001870:	e003      	b.n	800187a <VL53L0X_startContinuous+0x7e>
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8001872:	2102      	movs	r1, #2
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fc2f 	bl	80010d8 <writeReg>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000027c 	.word	0x2000027c

08001888 <VL53L0X_readRangeContinuousMillimeters>:
  writeReg(0x00, 0x01);
  writeReg(0xFF, 0x00);
}
//=============================================================================
uint16_t VL53L0X_readRangeContinuousMillimeters()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
    }
  }
*/
  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 800188e:	201e      	movs	r0, #30
 8001890:	f7ff fc82 	bl	8001198 <readReg16Bit>
 8001894:	4603      	mov	r3, r0
 8001896:	80fb      	strh	r3, [r7, #6]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001898:	2101      	movs	r1, #1
 800189a:	200b      	movs	r0, #11
 800189c:	f7ff fc1c 	bl	80010d8 <writeReg>

  return range;
 80018a0:	88fb      	ldrh	r3, [r7, #6]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <captDistIR_Init+0x5c>)
 80018b2:	4a16      	ldr	r2, [pc, #88]	; (800190c <captDistIR_Init+0x60>)
 80018b4:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <captDistIR_Init+0x5c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <captDistIR_Init+0x5c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <captDistIR_Init+0x5c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <captDistIR_Init+0x5c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <captDistIR_Init+0x5c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <captDistIR_Init+0x5c>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <captDistIR_Init+0x5c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <captDistIR_Init+0x5c>)
 80018e2:	2202      	movs	r2, #2
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <captDistIR_Init+0x5c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <captDistIR_Init+0x5c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <captDistIR_Init+0x5c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <captDistIR_Init+0x5c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 80018fe:	4802      	ldr	r0, [pc, #8]	; (8001908 <captDistIR_Init+0x5c>)
 8001900:	f003 f810 	bl	8004924 <HAL_ADC_Init>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000284 	.word	0x20000284
 800190c:	40012000 	.word	0x40012000

08001910 <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <captDistIR_Get+0x80>)
 800191a:	2204      	movs	r2, #4
 800191c:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <captDistIR_Get+0x80>)
 8001920:	2201      	movs	r2, #1
 8001922:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <captDistIR_Get+0x80>)
 8001926:	2203      	movs	r2, #3
 8001928:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 800192a:	4919      	ldr	r1, [pc, #100]	; (8001990 <captDistIR_Get+0x80>)
 800192c:	4819      	ldr	r0, [pc, #100]	; (8001994 <captDistIR_Get+0x84>)
 800192e:	f003 f8e5 	bl	8004afc <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 8001932:	4818      	ldr	r0, [pc, #96]	; (8001994 <captDistIR_Get+0x84>)
 8001934:	f003 f82a 	bl	800498c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 8001938:	210a      	movs	r1, #10
 800193a:	4816      	ldr	r0, [pc, #88]	; (8001994 <captDistIR_Get+0x84>)
 800193c:	f003 f892 	bl	8004a64 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 8001940:	4814      	ldr	r0, [pc, #80]	; (8001994 <captDistIR_Get+0x84>)
 8001942:	f003 f8ce 	bl	8004ae2 <HAL_ADC_GetValue>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <captDistIR_Get+0x80>)
 8001950:	2208      	movs	r2, #8
 8001952:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <captDistIR_Get+0x80>)
 8001956:	2201      	movs	r2, #1
 8001958:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <captDistIR_Get+0x80>)
 800195c:	2203      	movs	r2, #3
 800195e:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001960:	490b      	ldr	r1, [pc, #44]	; (8001990 <captDistIR_Get+0x80>)
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <captDistIR_Get+0x84>)
 8001964:	f003 f8ca 	bl	8004afc <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <captDistIR_Get+0x84>)
 800196a:	f003 f80f 	bl	800498c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 800196e:	210a      	movs	r1, #10
 8001970:	4808      	ldr	r0, [pc, #32]	; (8001994 <captDistIR_Get+0x84>)
 8001972:	f003 f877 	bl	8004a64 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <captDistIR_Get+0x84>)
 8001978:	f003 f8b3 	bl	8004ae2 <HAL_ADC_GetValue>
 800197c:	4602      	mov	r2, r0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3304      	adds	r3, #4
 8001982:	601a      	str	r2, [r3, #0]

	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200002c8 	.word	0x200002c8
 8001994:	20000284 	.word	0x20000284

08001998 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80019a4:	f00b f830 	bl	800ca08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80019a8:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <pvPortMallocMicroROS+0x174>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80019b0:	f000 f98c 	bl	8001ccc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80019b4:	4b56      	ldr	r3, [pc, #344]	; (8001b10 <pvPortMallocMicroROS+0x178>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 808e 	bne.w	8001ade <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01d      	beq.n	8001a04 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80019c8:	2208      	movs	r2, #8
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d014      	beq.n	8001a04 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f023 0307 	bic.w	r3, r3, #7
 80019e0:	3308      	adds	r3, #8
 80019e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00a      	beq.n	8001a04 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f2:	f383 8811 	msr	BASEPRI, r3
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a00:	bf00      	nop
 8001a02:	e7fe      	b.n	8001a02 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d069      	beq.n	8001ade <pvPortMallocMicroROS+0x146>
 8001a0a:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <pvPortMallocMicroROS+0x17c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d864      	bhi.n	8001ade <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001a14:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <pvPortMallocMicroROS+0x180>)
 8001a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001a18:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <pvPortMallocMicroROS+0x180>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a1e:	e004      	b.n	8001a2a <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d903      	bls.n	8001a3c <pvPortMallocMicroROS+0xa4>
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f1      	bne.n	8001a20 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <pvPortMallocMicroROS+0x174>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d04b      	beq.n	8001ade <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	4413      	add	r3, r2
 8001a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	1ad2      	subs	r2, r2, r3
 8001a60:	2308      	movs	r3, #8
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d91f      	bls.n	8001aa8 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00a      	beq.n	8001a90 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8001a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7e:	f383 8811 	msr	BASEPRI, r3
 8001a82:	f3bf 8f6f 	isb	sy
 8001a86:	f3bf 8f4f 	dsb	sy
 8001a8a:	613b      	str	r3, [r7, #16]
}
 8001a8c:	bf00      	nop
 8001a8e:	e7fe      	b.n	8001a8e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	1ad2      	subs	r2, r2, r3
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001aa2:	69b8      	ldr	r0, [r7, #24]
 8001aa4:	f000 f974 	bl	8001d90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <pvPortMallocMicroROS+0x17c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	4a18      	ldr	r2, [pc, #96]	; (8001b14 <pvPortMallocMicroROS+0x17c>)
 8001ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <pvPortMallocMicroROS+0x17c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <pvPortMallocMicroROS+0x184>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d203      	bcs.n	8001aca <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <pvPortMallocMicroROS+0x17c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <pvPortMallocMicroROS+0x184>)
 8001ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <pvPortMallocMicroROS+0x178>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001ade:	f00a ffa1 	bl	800ca24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af0:	f383 8811 	msr	BASEPRI, r3
 8001af4:	f3bf 8f6f 	isb	sy
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	60fb      	str	r3, [r7, #12]
}
 8001afe:	bf00      	nop
 8001b00:	e7fe      	b.n	8001b00 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8001b02:	69fb      	ldr	r3, [r7, #28]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200042e0 	.word	0x200042e0
 8001b10:	200042ec 	.word	0x200042ec
 8001b14:	200042e4 	.word	0x200042e4
 8001b18:	200042d8 	.word	0x200042d8
 8001b1c:	200042e8 	.word	0x200042e8

08001b20 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d048      	beq.n	8001bc4 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001b32:	2308      	movs	r3, #8
 8001b34:	425b      	negs	r3, r3
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4413      	add	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <vPortFreeMicroROS+0xac>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <vPortFreeMicroROS+0x44>
	__asm volatile
 8001b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b52:	f383 8811 	msr	BASEPRI, r3
 8001b56:	f3bf 8f6f 	isb	sy
 8001b5a:	f3bf 8f4f 	dsb	sy
 8001b5e:	60fb      	str	r3, [r7, #12]
}
 8001b60:	bf00      	nop
 8001b62:	e7fe      	b.n	8001b62 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00a      	beq.n	8001b82 <vPortFreeMicroROS+0x62>
	__asm volatile
 8001b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b70:	f383 8811 	msr	BASEPRI, r3
 8001b74:	f3bf 8f6f 	isb	sy
 8001b78:	f3bf 8f4f 	dsb	sy
 8001b7c:	60bb      	str	r3, [r7, #8]
}
 8001b7e:	bf00      	nop
 8001b80:	e7fe      	b.n	8001b80 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <vPortFreeMicroROS+0xac>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d019      	beq.n	8001bc4 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d115      	bne.n	8001bc4 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <vPortFreeMicroROS+0xac>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001ba8:	f00a ff2e 	bl	800ca08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <vPortFreeMicroROS+0xb0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <vPortFreeMicroROS+0xb0>)
 8001bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001bba:	6938      	ldr	r0, [r7, #16]
 8001bbc:	f000 f8e8 	bl	8001d90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001bc0:	f00a ff30 	bl	800ca24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001bc4:	bf00      	nop
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200042ec 	.word	0x200042ec
 8001bd0:	200042e4 	.word	0x200042e4

08001bd4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001be0:	2308      	movs	r3, #8
 8001be2:	425b      	negs	r3, r3
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4413      	add	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <getBlockSize+0x38>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

	return count;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200042ec 	.word	0x200042ec

08001c10 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001c1a:	f00a fef5 	bl	800ca08 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001c1e:	6838      	ldr	r0, [r7, #0]
 8001c20:	f7ff feba 	bl	8001998 <pvPortMallocMicroROS>
 8001c24:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	425b      	negs	r3, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <pvPortReallocMicroROS+0x70>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001c4e:	e007      	b.n	8001c60 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	1c53      	adds	r3, r2, #1
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1c59      	adds	r1, r3, #1
 8001c5a:	61b9      	str	r1, [r7, #24]
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1e5a      	subs	r2, r3, #1
 8001c64:	617a      	str	r2, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f2      	bne.n	8001c50 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff58 	bl	8001b20 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001c70:	f00a fed8 	bl	800ca24 <xTaskResumeAll>

	return newmem;
 8001c74:	693b      	ldr	r3, [r7, #16]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200042ec 	.word	0x200042ec

08001c84 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001c8e:	f00a febb 	bl	800ca08 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001c9c:	6978      	ldr	r0, [r7, #20]
 8001c9e:	f7ff fe7b 	bl	8001998 <pvPortMallocMicroROS>
 8001ca2:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001ca8:	e004      	b.n	8001cb4 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	613a      	str	r2, [r7, #16]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	617a      	str	r2, [r7, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f5      	bne.n	8001caa <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001cbe:	f00a feb1 	bl	800ca24 <xTaskResumeAll>
  	return mem;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001cd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <prvHeapInit+0xac>)
 8001cda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00c      	beq.n	8001d00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3307      	adds	r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f023 0307 	bic.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <prvHeapInit+0xac>)
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d04:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <prvHeapInit+0xb0>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <prvHeapInit+0xb0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	4413      	add	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001d18:	2208      	movs	r2, #8
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0307 	bic.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <prvHeapInit+0xb4>)
 8001d2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <prvHeapInit+0xb4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <prvHeapInit+0xb4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	1ad2      	subs	r2, r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <prvHeapInit+0xb4>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <prvHeapInit+0xb8>)
 8001d5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <prvHeapInit+0xbc>)
 8001d62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <prvHeapInit+0xc0>)
 8001d66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d6a:	601a      	str	r2, [r3, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	200002d8 	.word	0x200002d8
 8001d7c:	200042d8 	.word	0x200042d8
 8001d80:	200042e0 	.word	0x200042e0
 8001d84:	200042e8 	.word	0x200042e8
 8001d88:	200042e4 	.word	0x200042e4
 8001d8c:	200042ec 	.word	0x200042ec

08001d90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <prvInsertBlockIntoFreeList+0xac>)
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e002      	b.n	8001da4 <prvInsertBlockIntoFreeList+0x14>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d8f7      	bhi.n	8001d9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	4413      	add	r3, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d108      	bne.n	8001dd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	441a      	add	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	441a      	add	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d118      	bne.n	8001e18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <prvInsertBlockIntoFreeList+0xb0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d00d      	beq.n	8001e0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	441a      	add	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e008      	b.n	8001e20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <prvInsertBlockIntoFreeList+0xb0>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e003      	b.n	8001e20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d002      	beq.n	8001e2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200042d8 	.word	0x200042d8
 8001e40:	200042e0 	.word	0x200042e0

08001e44 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e52:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e58:	4904      	ldr	r1, [pc, #16]	; (8001e6c <cubemx_transport_open+0x28>)
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f008 f852 	bl	8009f04 <HAL_UART_Receive_DMA>
    return true;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200042f0 	.word	0x200042f0

08001e70 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e7e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f008 f86f 	bl	8009f64 <HAL_UART_DMAStop>
    return true;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001ea4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d11c      	bne.n	8001eec <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f007 ffa4 	bl	8009e08 <HAL_UART_Transmit_DMA>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001ec4:	e002      	b.n	8001ecc <cubemx_transport_write+0x3c>
            osDelay(1);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f009 fabc 	bl	800b444 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <cubemx_transport_write+0x4e>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d1f3      	bne.n	8001ec6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <cubemx_transport_write+0x58>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	e002      	b.n	8001eee <cubemx_transport_write+0x5e>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001eec:	2300      	movs	r3, #0
    }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f0c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f12:	b672      	cpsid	i
}
 8001f14:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001f22:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <cubemx_transport_read+0x9c>)
 8001f24:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f26:	b662      	cpsie	i
}
 8001f28:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f009 fa87 	bl	800b444 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <cubemx_transport_read+0xa0>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <cubemx_transport_read+0x9c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d103      	bne.n	8001f4a <cubemx_transport_read+0x52>
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dbe3      	blt.n	8001f12 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001f4e:	e011      	b.n	8001f74 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <cubemx_transport_read+0xa0>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	440b      	add	r3, r1
 8001f5a:	4910      	ldr	r1, [pc, #64]	; (8001f9c <cubemx_transport_read+0xa4>)
 8001f5c:	5c8a      	ldrb	r2, [r1, r2]
 8001f5e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <cubemx_transport_read+0xa0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <cubemx_transport_read+0xa0>)
 8001f6c:	6013      	str	r3, [r2, #0]
        wrote++;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <cubemx_transport_read+0xa0>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <cubemx_transport_read+0x9c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d003      	beq.n	8001f88 <cubemx_transport_read+0x90>
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d3e3      	bcc.n	8001f50 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001f88:	69bb      	ldr	r3, [r7, #24]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20004af4 	.word	0x20004af4
 8001f98:	20004af0 	.word	0x20004af0
 8001f9c:	200042f0 	.word	0x200042f0

08001fa0 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <MX_GPIO_Init+0xd0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a2c      	ldr	r2, [pc, #176]	; (8002070 <MX_GPIO_Init+0xd0>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <MX_GPIO_Init+0xd0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <MX_GPIO_Init+0xd0>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <MX_GPIO_Init+0xd0>)
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b23      	ldr	r3, [pc, #140]	; (8002070 <MX_GPIO_Init+0xd0>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <MX_GPIO_Init+0xd0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <MX_GPIO_Init+0xd0>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <MX_GPIO_Init+0xd0>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <MX_GPIO_Init+0xd0>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <MX_GPIO_Init+0xd0>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <MX_GPIO_Init+0xd0>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2120      	movs	r1, #32
 800202a:	4812      	ldr	r0, [pc, #72]	; (8002074 <MX_GPIO_Init+0xd4>)
 800202c:	f003 fdc0 	bl	8005bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002036:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800203a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_GPIO_Init+0xd8>)
 8002048:	f003 fc2e 	bl	80058a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800204c:	2320      	movs	r3, #32
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	4804      	ldr	r0, [pc, #16]	; (8002074 <MX_GPIO_Init+0xd4>)
 8002064:	f003 fc20 	bl	80058a8 <HAL_GPIO_Init>

}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000
 8002078:	40020800 	.word	0x40020800

0800207c <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800208c:	d017      	beq.n	80020be <HAL_GPIO_EXTI_Callback+0x42>
 800208e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002092:	dc16      	bgt.n	80020c2 <HAL_GPIO_EXTI_Callback+0x46>
 8002094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002098:	d00e      	beq.n	80020b8 <HAL_GPIO_EXTI_Callback+0x3c>
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	dc10      	bgt.n	80020c2 <HAL_GPIO_EXTI_Callback+0x46>
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d010      	beq.n	80020c6 <HAL_GPIO_EXTI_Callback+0x4a>
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	dc0c      	bgt.n	80020c2 <HAL_GPIO_EXTI_Callback+0x46>
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d002      	beq.n	80020b2 <HAL_GPIO_EXTI_Callback+0x36>
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d00c      	beq.n	80020ca <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 80020b0:	e007      	b.n	80020c2 <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 80020b2:	f001 fc0b 	bl	80038cc <quadEncoder_CallbackIndexR>
					break;
 80020b6:	e009      	b.n	80020cc <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 80020b8:	f001 fbdc 	bl	8003874 <quadEncoder_CallbackIndexL>
					break;
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80020be:	bf00      	nop
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 80020c2:	bf00      	nop
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80020c6:	bf00      	nop
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80020ca:	bf00      	nop


	}
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MX_I2C1_Init+0x50>)
 80020da:	4a13      	ldr	r2, [pc, #76]	; (8002128 <MX_I2C1_Init+0x54>)
 80020dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_I2C1_Init+0x50>)
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <MX_I2C1_Init+0x58>)
 80020e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_I2C1_Init+0x50>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_I2C1_Init+0x50>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_I2C1_Init+0x50>)
 80020f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <MX_I2C1_Init+0x50>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_I2C1_Init+0x50>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <MX_I2C1_Init+0x50>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_I2C1_Init+0x50>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002110:	4804      	ldr	r0, [pc, #16]	; (8002124 <MX_I2C1_Init+0x50>)
 8002112:	f003 fd7f 	bl	8005c14 <HAL_I2C_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800211c:	f001 f8da 	bl	80032d4 <Error_Handler>
  }

}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20004af8 	.word	0x20004af8
 8002128:	40005400 	.word	0x40005400
 800212c:	00061a80 	.word	0x00061a80

08002130 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	4603      	mov	r3, r0
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	b29b      	uxth	r3, r3
 8002142:	89f9      	ldrh	r1, [r7, #14]
 8002144:	2264      	movs	r2, #100	; 0x64
 8002146:	9200      	str	r2, [sp, #0]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <i2c1_WriteBuffer+0x30>)
 800214c:	f003 fea6 	bl	8005e9c <HAL_I2C_Master_Transmit>
 8002150:	4603      	mov	r3, r0
 8002152:	617b      	str	r3, [r7, #20]
	return status;
 8002154:	697b      	ldr	r3, [r7, #20]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20004af8 	.word	0x20004af8

08002164 <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	60ba      	str	r2, [r7, #8]
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4603      	mov	r3, r0
 8002170:	81fb      	strh	r3, [r7, #14]
 8002172:	460b      	mov	r3, r1
 8002174:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 8002176:	7b7b      	ldrb	r3, [r7, #13]
 8002178:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 800217a:	f107 0213 	add.w	r2, r7, #19
 800217e:	89f9      	ldrh	r1, [r7, #14]
 8002180:	2364      	movs	r3, #100	; 0x64
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2301      	movs	r3, #1
 8002186:	480f      	ldr	r0, [pc, #60]	; (80021c4 <i2c1_ReadRegBuffer+0x60>)
 8002188:	f003 fe88 	bl	8005e9c <HAL_I2C_Master_Transmit>
 800218c:	4603      	mov	r3, r0
 800218e:	617b      	str	r3, [r7, #20]
        if( status )
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10f      	bne.n	80021b6 <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2164      	movs	r1, #100	; 0x64
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	89f9      	ldrh	r1, [r7, #14]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <i2c1_ReadRegBuffer+0x60>)
 80021ac:	f003 ff74 	bl	8006098 <HAL_I2C_Master_Receive>
 80021b0:	4603      	mov	r3, r0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e000      	b.n	80021b8 <i2c1_ReadRegBuffer+0x54>
            break;
 80021b6:	bf00      	nop
    }while(0);
    return status;
 80021b8:	697b      	ldr	r3, [r7, #20]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20004af8 	.word	0x20004af8

080021c8 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60ba      	str	r2, [r7, #8]
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4603      	mov	r3, r0
 80021d4:	81fb      	strh	r3, [r7, #14]
 80021d6:	460b      	mov	r3, r1
 80021d8:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 80021da:	7b7b      	ldrb	r3, [r7, #13]
 80021dc:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	3301      	adds	r3, #1
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f017 fc63 	bl	8019ab4 <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f107 0214 	add.w	r2, r7, #20
 80021fa:	89f9      	ldrh	r1, [r7, #14]
 80021fc:	2064      	movs	r0, #100	; 0x64
 80021fe:	9000      	str	r0, [sp, #0]
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <i2c1_WriteRegBuffer+0x4c>)
 8002202:	f003 fe4b 	bl	8005e9c <HAL_I2C_Master_Transmit>
 8002206:	4603      	mov	r3, r0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800220c:	4618      	mov	r0, r3
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20004af8 	.word	0x20004af8

08002218 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif


PUTCHAR_PROTOTYPE
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002220:	1d39      	adds	r1, r7, #4
 8002222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002226:	2201      	movs	r2, #1
 8002228:	4803      	ldr	r0, [pc, #12]	; (8002238 <__io_putchar+0x20>)
 800222a:	f007 fd5b 	bl	8009ce4 <HAL_UART_Transmit>
  return ch;
 800222e:	687b      	ldr	r3, [r7, #4]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20004b90 	.word	0x20004b90

0800223c <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <MX_USART1_UART_Init+0x50>)
 8002244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800224c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002262:	220c      	movs	r2, #12
 8002264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002274:	f007 fce9 	bl	8009c4a <HAL_UART_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800227e:	f001 f829 	bl	80032d4 <Error_Handler>
  }
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20004b4c 	.word	0x20004b4c
 800228c:	40011000 	.word	0x40011000

08002290 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <MX_USART2_UART_Init+0x50>)
 8002298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 800229c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b6:	220c      	movs	r2, #12
 80022b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c8:	f007 fcbf 	bl	8009c4a <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022d2:	f000 ffff 	bl	80032d4 <Error_Handler>
  }
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20004b90 	.word	0x20004b90
 80022e0:	40004400 	.word	0x40004400

080022e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_DMA_Init+0x88>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a1e      	ldr	r2, [pc, #120]	; (800236c <MX_DMA_Init+0x88>)
 80022f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_DMA_Init+0x88>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <MX_DMA_Init+0x88>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a17      	ldr	r2, [pc, #92]	; (800236c <MX_DMA_Init+0x88>)
 8002310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <MX_DMA_Init+0x88>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2105      	movs	r1, #5
 8002326:	2010      	movs	r0, #16
 8002328:	f002 fe84 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800232c:	2010      	movs	r0, #16
 800232e:	f002 fe9d 	bl	800506c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2105      	movs	r1, #5
 8002336:	2011      	movs	r0, #17
 8002338:	f002 fe7c 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800233c:	2011      	movs	r0, #17
 800233e:	f002 fe95 	bl	800506c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2105      	movs	r1, #5
 8002346:	203a      	movs	r0, #58	; 0x3a
 8002348:	f002 fe74 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800234c:	203a      	movs	r0, #58	; 0x3a
 800234e:	f002 fe8d 	bl	800506c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2105      	movs	r1, #5
 8002356:	2046      	movs	r0, #70	; 0x46
 8002358:	f002 fe6c 	bl	8005034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800235c:	2046      	movs	r0, #70	; 0x46
 800235e:	f002 fe85 	bl	800506c <HAL_NVIC_EnableIRQ>

}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	461a      	mov	r2, r3
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	207c      	movs	r0, #124	; 0x7c
 8002384:	f7ff fed4 	bl	8002130 <i2c1_WriteBuffer>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
 800239a:	460b      	mov	r3, r1
 800239c:	71bb      	strb	r3, [r7, #6]
 800239e:	4613      	mov	r3, r2
 80023a0:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 80023a2:	79bb      	ldrb	r3, [r7, #6]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d906      	bls.n	80023b6 <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 80023a8:	4b33      	ldr	r3, [pc, #204]	; (8002478 <groveLCD_begin+0xe8>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b31      	ldr	r3, [pc, #196]	; (8002478 <groveLCD_begin+0xe8>)
 80023b4:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 80023b6:	4a31      	ldr	r2, [pc, #196]	; (800247c <groveLCD_begin+0xec>)
 80023b8:	79bb      	ldrb	r3, [r7, #6]
 80023ba:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <groveLCD_begin+0xf0>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 80023c2:	797b      	ldrb	r3, [r7, #5]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <groveLCD_begin+0x4c>
 80023c8:	79bb      	ldrb	r3, [r7, #6]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d106      	bne.n	80023dc <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 80023ce:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <groveLCD_begin+0xe8>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <groveLCD_begin+0xe8>)
 80023da:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 80023dc:	2032      	movs	r0, #50	; 0x32
 80023de:	f002 fa7d 	bl	80048dc <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 80023e2:	4b25      	ldr	r3, [pc, #148]	; (8002478 <groveLCD_begin+0xe8>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	f043 0320 	orr.w	r3, r3, #32
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f89b 	bl	8002528 <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 80023f2:	2005      	movs	r0, #5
 80023f4:	f002 fa72 	bl	80048dc <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 80023f8:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <groveLCD_begin+0xe8>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f043 0320 	orr.w	r3, r3, #32
 8002400:	b2db      	uxtb	r3, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f890 	bl	8002528 <groveLCD_command>
    HAL_Delay(5);
 8002408:	2005      	movs	r0, #5
 800240a:	f002 fa67 	bl	80048dc <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <groveLCD_begin+0xe8>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	f043 0320 	orr.w	r3, r3, #32
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f885 	bl	8002528 <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <groveLCD_begin+0xe8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	f043 0320 	orr.w	r3, r3, #32
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f87d 	bl	8002528 <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <groveLCD_begin+0xf4>)
 8002430:	2204      	movs	r2, #4
 8002432:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8002434:	f000 f862 	bl	80024fc <groveLCD_display>

    // clear it off
    groveLCD_clear();
 8002438:	f000 f831 	bl	800249e <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <groveLCD_begin+0xf8>)
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <groveLCD_begin+0xf8>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f86b 	bl	8002528 <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 8002452:	2100      	movs	r1, #0
 8002454:	2000      	movs	r0, #0
 8002456:	f000 f8a4 	bl	80025a2 <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 800245a:	21ff      	movs	r1, #255	; 0xff
 800245c:	2008      	movs	r0, #8
 800245e:	f000 f8a0 	bl	80025a2 <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 8002462:	2120      	movs	r1, #32
 8002464:	2001      	movs	r0, #1
 8002466:	f000 f89c 	bl	80025a2 <groveLCD_setReg>

    groveLCD_setColorWhite();
 800246a:	f000 f80f 	bl	800248c <groveLCD_setColorWhite>

}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20004d54 	.word	0x20004d54
 800247c:	20004d57 	.word	0x20004d57
 8002480:	20004d58 	.word	0x20004d58
 8002484:	20004d55 	.word	0x20004d55
 8002488:	20004d56 	.word	0x20004d56

0800248c <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
 8002490:	22ff      	movs	r2, #255	; 0xff
 8002492:	21ff      	movs	r1, #255	; 0xff
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	f000 f896 	bl	80025c6 <groveLCD_setRGB>
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}

0800249e <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80024a2:	2001      	movs	r0, #1
 80024a4:	f000 f840 	bl	8002528 <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 80024a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024ac:	f002 fa16 	bl	80048dc <HAL_Delay>
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	460a      	mov	r2, r1
 80024be:	71fb      	strb	r3, [r7, #7]
 80024c0:	4613      	mov	r3, r2
 80024c2:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <groveLCD_setCursor+0x20>
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e003      	b.n	80024dc <groveLCD_setCursor+0x28>
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	733b      	strb	r3, [r7, #12]
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	2102      	movs	r1, #2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff3f 	bl	8002370 <i2c_send_byteS>
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <groveLCD_display+0x28>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <groveLCD_display+0x28>)
 800250c:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <groveLCD_display+0x28>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f805 	bl	8002528 <groveLCD_command>
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20004d55 	.word	0x20004d55

08002528 <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	733b      	strb	r3, [r7, #12]
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	2102      	movs	r1, #2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff15 	bl	8002370 <i2c_send_byteS>
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 8002558:	2340      	movs	r3, #64	; 0x40
 800255a:	733b      	strb	r3, [r7, #12]
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	2102      	movs	r1, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff02 	bl	8002370 <i2c_send_byteS>
    return 1; // assume sucess
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 800257e:	e007      	b.n	8002590 <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ffe2 	bl	800254e <groveLCD_write>
		s++;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3301      	adds	r3, #1
 800258e:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f3      	bne.n	8002580 <groveLCD_putString+0xa>
	}
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	460a      	mov	r2, r1
 80025ac:	71fb      	strb	r3, [r7, #7]
 80025ae:	4613      	mov	r3, r2
 80025b0:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 80025b2:	1dba      	adds	r2, r7, #6
 80025b4:	79f9      	ldrb	r1, [r7, #7]
 80025b6:	2301      	movs	r3, #1
 80025b8:	20c4      	movs	r0, #196	; 0xc4
 80025ba:	f7ff fe05 	bl	80021c8 <i2c1_WriteRegBuffer>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	71fb      	strb	r3, [r7, #7]
 80025d0:	460b      	mov	r3, r1
 80025d2:	71bb      	strb	r3, [r7, #6]
 80025d4:	4613      	mov	r3, r2
 80025d6:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	4619      	mov	r1, r3
 80025dc:	2004      	movs	r0, #4
 80025de:	f7ff ffe0 	bl	80025a2 <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	4619      	mov	r1, r3
 80025e6:	2003      	movs	r0, #3
 80025e8:	f7ff ffdb 	bl	80025a2 <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 80025ec:	797b      	ldrb	r3, [r7, #5]
 80025ee:	4619      	mov	r1, r3
 80025f0:	2002      	movs	r0, #2
 80025f2:	f7ff ffd6 	bl	80025a2 <groveLCD_setReg>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <groveLCD_term_printf>:
    if(color > 3)return ;
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
}
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002600:	b40f      	push	{r0, r1, r2, r3}
 8002602:	b5b0      	push	{r4, r5, r7, lr}
 8002604:	b0a4      	sub	sp, #144	; 0x90
 8002606:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002608:	2300      	movs	r3, #0
 800260a:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 800260c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002610:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 8002612:	e1cd      	b.n	80029b0 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 8002614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b25      	cmp	r3, #37	; 0x25
 800261c:	f040 81bd 	bne.w	800299a <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8002620:	2300      	movs	r3, #0
 8002622:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002624:	2301      	movs	r3, #1
 8002626:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8002628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800262c:	3301      	adds	r3, #1
 800262e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002632:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b30      	cmp	r3, #48	; 0x30
 800263a:	d106      	bne.n	800264a <groveLCD_term_printf+0x4a>
 800263c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002640:	3301      	adds	r3, #1
 8002642:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002646:	2300      	movs	r3, #0
 8002648:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 800264a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 8002654:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002658:	2b30      	cmp	r3, #48	; 0x30
 800265a:	d92c      	bls.n	80026b6 <groveLCD_term_printf+0xb6>
 800265c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002660:	2b39      	cmp	r3, #57	; 0x39
 8002662:	d828      	bhi.n	80026b6 <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 8002664:	2300      	movs	r3, #0
 8002666:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 8002668:	e012      	b.n	8002690 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 800266a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	673a      	str	r2, [r7, #112]	; 0x70
 8002670:	3388      	adds	r3, #136	; 0x88
 8002672:	443b      	add	r3, r7
 8002674:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002678:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 800267c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002680:	3301      	adds	r3, #1
 8002682:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002686:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 8002690:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002694:	2b2f      	cmp	r3, #47	; 0x2f
 8002696:	d903      	bls.n	80026a0 <groveLCD_term_printf+0xa0>
 8002698:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800269c:	2b39      	cmp	r3, #57	; 0x39
 800269e:	d9e4      	bls.n	800266a <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 80026a0:	463a      	mov	r2, r7
 80026a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a4:	4413      	add	r3, r2
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 80026aa:	463b      	mov	r3, r7
 80026ac:	210a      	movs	r1, #10
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 ff4e 	bl	8004550 <str2num>
 80026b4:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 80026b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80026ba:	2b25      	cmp	r3, #37	; 0x25
 80026bc:	d03c      	beq.n	8002738 <groveLCD_term_printf+0x138>
 80026be:	2b25      	cmp	r3, #37	; 0x25
 80026c0:	f2c0 8164 	blt.w	800298c <groveLCD_term_printf+0x38c>
 80026c4:	2b78      	cmp	r3, #120	; 0x78
 80026c6:	f300 8161 	bgt.w	800298c <groveLCD_term_printf+0x38c>
 80026ca:	2b63      	cmp	r3, #99	; 0x63
 80026cc:	f2c0 815e 	blt.w	800298c <groveLCD_term_printf+0x38c>
 80026d0:	3b63      	subs	r3, #99	; 0x63
 80026d2:	2b15      	cmp	r3, #21
 80026d4:	f200 815a 	bhi.w	800298c <groveLCD_term_printf+0x38c>
 80026d8:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <groveLCD_term_printf+0xe0>)
 80026da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026de:	bf00      	nop
 80026e0:	08002741 	.word	0x08002741
 80026e4:	0800276b 	.word	0x0800276b
 80026e8:	0800298d 	.word	0x0800298d
 80026ec:	0800286b 	.word	0x0800286b
 80026f0:	0800298d 	.word	0x0800298d
 80026f4:	0800298d 	.word	0x0800298d
 80026f8:	0800298d 	.word	0x0800298d
 80026fc:	0800298d 	.word	0x0800298d
 8002700:	0800298d 	.word	0x0800298d
 8002704:	0800298d 	.word	0x0800298d
 8002708:	0800298d 	.word	0x0800298d
 800270c:	0800298d 	.word	0x0800298d
 8002710:	080027db 	.word	0x080027db
 8002714:	08002807 	.word	0x08002807
 8002718:	0800298d 	.word	0x0800298d
 800271c:	0800298d 	.word	0x0800298d
 8002720:	08002759 	.word	0x08002759
 8002724:	0800298d 	.word	0x0800298d
 8002728:	080027af 	.word	0x080027af
 800272c:	0800298d 	.word	0x0800298d
 8002730:	0800298d 	.word	0x0800298d
 8002734:	0800283f 	.word	0x0800283f
				case '%':
					groveLCD_write('%');
 8002738:	2025      	movs	r0, #37	; 0x25
 800273a:	f7ff ff08 	bl	800254e <groveLCD_write>
					break;
 800273e:	e132      	b.n	80029a6 <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 8002740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002742:	1d1a      	adds	r2, r3, #4
 8002744:	64ba      	str	r2, [r7, #72]	; 0x48
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 800274c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fefc 	bl	800254e <groveLCD_write>
					break;
 8002756:	e126      	b.n	80029a6 <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 8002758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275a:	1d1a      	adds	r2, r3, #4
 800275c:	64ba      	str	r2, [r7, #72]	; 0x48
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 8002762:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002764:	f7ff ff07 	bl	8002576 <groveLCD_putString>
					break;
 8002768:	e11d      	b.n	80029a6 <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 800276a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276c:	1d1a      	adds	r2, r3, #4
 800276e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 8002776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800277a:	2b00      	cmp	r3, #0
 800277c:	da07      	bge.n	800278e <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 800277e:	202d      	movs	r0, #45	; 0x2d
 8002780:	f7ff fee5 	bl	800254e <groveLCD_write>
						ul = -(long)ul;
 8002784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002788:	425b      	negs	r3, r3
 800278a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 800278e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002790:	f107 000c 	add.w	r0, r7, #12
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002798:	220a      	movs	r2, #10
 800279a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800279e:	f001 fe53 	bl	8004448 <num2str>
					groveLCD_putString(s);
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fee5 	bl	8002576 <groveLCD_putString>
					break;
 80027ac:	e0fb      	b.n	80029a6 <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 80027ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b0:	1d1a      	adds	r2, r3, #4
 80027b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 80027ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027bc:	f107 000c 	add.w	r0, r7, #12
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027c4:	220a      	movs	r2, #10
 80027c6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80027ca:	f001 fe3d 	bl	8004448 <num2str>
					groveLCD_putString(s);
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fecf 	bl	8002576 <groveLCD_putString>
					break;
 80027d8:	e0e5      	b.n	80029a6 <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 80027da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027dc:	1d1a      	adds	r2, r3, #4
 80027de:	64ba      	str	r2, [r7, #72]	; 0x48
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 80027e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027e8:	f107 000c 	add.w	r0, r7, #12
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027f0:	2208      	movs	r2, #8
 80027f2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80027f6:	f001 fe27 	bl	8004448 <num2str>
					groveLCD_putString(s);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff feb9 	bl	8002576 <groveLCD_putString>
					break;
 8002804:	e0cf      	b.n	80029a6 <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 8002806:	2030      	movs	r0, #48	; 0x30
 8002808:	f7ff fea1 	bl	800254e <groveLCD_write>
					groveLCD_write('x');
 800280c:	2078      	movs	r0, #120	; 0x78
 800280e:	f7ff fe9e 	bl	800254e <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 8002812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002814:	1d1a      	adds	r2, r3, #4
 8002816:	64ba      	str	r2, [r7, #72]	; 0x48
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 800281e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002820:	f107 000c 	add.w	r0, r7, #12
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002828:	2210      	movs	r2, #16
 800282a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800282e:	f001 fe0b 	bl	8004448 <num2str>
					groveLCD_putString(s);
 8002832:	f107 030c 	add.w	r3, r7, #12
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fe9d 	bl	8002576 <groveLCD_putString>
					break;
 800283c:	e0b3      	b.n	80029a6 <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 800283e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002840:	1d1a      	adds	r2, r3, #4
 8002842:	64ba      	str	r2, [r7, #72]	; 0x48
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 800284a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800284c:	f107 000c 	add.w	r0, r7, #12
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002854:	2210      	movs	r2, #16
 8002856:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800285a:	f001 fdf5 	bl	8004448 <num2str>
					groveLCD_putString(s);
 800285e:	f107 030c 	add.w	r3, r7, #12
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fe87 	bl	8002576 <groveLCD_putString>
					break;
 8002868:	e09d      	b.n	80029a6 <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 800286a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10c      	bne.n	800288a <groveLCD_term_printf+0x28a>
 8002870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002872:	3307      	adds	r3, #7
 8002874:	f023 0307 	bic.w	r3, r3, #7
 8002878:	f103 0208 	add.w	r2, r3, #8
 800287c:	64ba      	str	r2, [r7, #72]	; 0x48
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8002886:	2301      	movs	r3, #1
 8002888:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 800288a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800288c:	3307      	adds	r3, #7
 800288e:	f023 0307 	bic.w	r3, r3, #7
 8002892:	f103 0208 	add.w	r2, r3, #8
 8002896:	64ba      	str	r2, [r7, #72]	; 0x48
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 80028a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	0fc2      	lsrs	r2, r0, #31
 80028ae:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80028b2:	0fcb      	lsrs	r3, r1, #31
 80028b4:	4613      	mov	r3, r2
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 80028bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c2:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 80028c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ce:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 80028d2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80028d6:	eddf 6a40 	vldr	s13, [pc, #256]	; 80029d8 <groveLCD_term_printf+0x3d8>
 80028da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 80028e2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80028e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 80028f2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	0dc2      	lsrs	r2, r0, #23
 8002900:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002904:	0dcb      	lsrs	r3, r1, #23
 8002906:	4613      	mov	r3, r2
 8002908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 800290e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	0d02      	lsrs	r2, r0, #20
 800291c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002920:	0d0b      	lsrs	r3, r1, #20
 8002922:	4613      	mov	r3, r2
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292a:	4313      	orrs	r3, r2
 800292c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 800292e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002930:	3b7f      	subs	r3, #127	; 0x7f
 8002932:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 8002934:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002936:	f7fd fe1f 	bl	8000578 <__aeabi_f2d>
 800293a:	4604      	mov	r4, r0
 800293c:	460d      	mov	r5, r1
 800293e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002940:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80029d0 <groveLCD_term_printf+0x3d0>
 8002944:	f001 ff14 	bl	8004770 <myPow>
 8002948:	ec53 2b10 	vmov	r2, r3, d0
 800294c:	4620      	mov	r0, r4
 800294e:	4629      	mov	r1, r5
 8002950:	f7fd fe6a 	bl	8000628 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	f7fe f95c 	bl	8000c18 <__aeabi_d2f>
 8002960:	4603      	mov	r3, r0
 8002962:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 8002964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d102      	bne.n	8002970 <groveLCD_term_printf+0x370>
 800296a:	202d      	movs	r0, #45	; 0x2d
 800296c:	f7ff fdef 	bl	800254e <groveLCD_write>
					float2str((char*)s, f, 5);
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	2105      	movs	r1, #5
 8002976:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800297a:	4618      	mov	r0, r3
 800297c:	f001 fea8 	bl	80046d0 <float2str>
					groveLCD_putString((char*)s);
 8002980:	f107 030c 	add.w	r3, r7, #12
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fdf6 	bl	8002576 <groveLCD_putString>
					break;
 800298a:	e00c      	b.n	80029a6 <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 800298c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fddb 	bl	800254e <groveLCD_write>
 8002998:	e005      	b.n	80029a6 <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 800299a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fdd4 	bl	800254e <groveLCD_write>
		fmt++;
 80029a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029aa:	3301      	adds	r3, #1
 80029ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 80029b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f47f ae2c 	bne.w	8002614 <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3788      	adds	r7, #136	; 0x88
 80029c2:	46bd      	mov	sp, r7
 80029c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80029c8:	b004      	add	sp, #16
 80029ca:	4770      	bx	lr
 80029cc:	f3af 8000 	nop.w
 80029d0:	00000000 	.word	0x00000000
 80029d4:	40000000 	.word	0x40000000
 80029d8:	49800000 	.word	0x49800000

080029dc <manual_mode>:
char current_message[18];
int speed_consigne = 130;

int tracking_move=2;

static void manual_mode(void *pvParameters) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	for(;;){
		 if (tracking_move==3) { // Obstacle à gauche
 80029e4:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <manual_mode+0xc4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d10c      	bne.n	8002a06 <manual_mode+0x2a>
		            // Tourner à droite
		            motorLeft_SetDuty(speed_consigne); // Moteur gauche rapide
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <manual_mode+0xc8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fe35 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(100); // Moteur droit lent
 80029f6:	2064      	movs	r0, #100	; 0x64
 80029f8:	f000 fe42 	bl	8003680 <motorRight_SetDuty>
		            vTaskDelay(pdMS_TO_TICKS(500)); // Tourner pendant 0.5s
 80029fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a00:	f009 fe58 	bl	800c6b4 <vTaskDelay>
 8002a04:	e048      	b.n	8002a98 <manual_mode+0xbc>


		        } else if (tracking_move==4) { // Obstacle à droite
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <manual_mode+0xc4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d10c      	bne.n	8002a28 <manual_mode+0x4c>
		            // Tourner à gauche
		            motorLeft_SetDuty(100); // Moteur gauche lent
 8002a0e:	2064      	movs	r0, #100	; 0x64
 8002a10:	f000 fe26 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(speed_consigne); // Moteur droit rapide
 8002a14:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <manual_mode+0xc8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fe31 	bl	8003680 <motorRight_SetDuty>
		            vTaskDelay(pdMS_TO_TICKS(500)); // Tourner pendant 0.5s
 8002a1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a22:	f009 fe47 	bl	800c6b4 <vTaskDelay>
 8002a26:	e037      	b.n	8002a98 <manual_mode+0xbc>
		        } else if (tracking_move==2) { // Obstacle à l'arrière
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <manual_mode+0xc4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d10e      	bne.n	8002a4e <manual_mode+0x72>
		            // Avancer pour éviter l'obstacle
		            motorLeft_SetDuty(speed_consigne);
 8002a30:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <manual_mode+0xc8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fe13 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(speed_consigne);
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <manual_mode+0xc8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fe1e 	bl	8003680 <motorRight_SetDuty>
		            vTaskDelay(pdMS_TO_TICKS(500)); // Avancer pendant 0.5s
 8002a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a48:	f009 fe34 	bl	800c6b4 <vTaskDelay>
 8002a4c:	e024      	b.n	8002a98 <manual_mode+0xbc>
		        } else if (tracking_move==1) {
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <manual_mode+0xc4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d112      	bne.n	8002a7c <manual_mode+0xa0>
		            // Pas d'obstacle, mode aléatoire
		            motorLeft_SetDuty(200 - speed_consigne);
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <manual_mode+0xc8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fdfe 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(200 -speed_consigne);
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <manual_mode+0xc8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fe07 	bl	8003680 <motorRight_SetDuty>
		            vTaskDelay(pdMS_TO_TICKS(1000)); // Changer de vitesse toutes les 1 seconde
 8002a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a76:	f009 fe1d 	bl	800c6b4 <vTaskDelay>
 8002a7a:	e00d      	b.n	8002a98 <manual_mode+0xbc>
		        }else  if (tracking_move==5){
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <manual_mode+0xc4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d109      	bne.n	8002a98 <manual_mode+0xbc>
		            // Pas d'obstacle, mode aléatoire
		            motorLeft_SetDuty(100);
 8002a84:	2064      	movs	r0, #100	; 0x64
 8002a86:	f000 fdeb 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(100);
 8002a8a:	2064      	movs	r0, #100	; 0x64
 8002a8c:	f000 fdf8 	bl	8003680 <motorRight_SetDuty>
		            vTaskDelay(pdMS_TO_TICKS(1000)); // Changer de vitesse toutes les 1 seconde
 8002a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a94:	f009 fe0e 	bl	800c6b4 <vTaskDelay>
		        }
		 vTaskDelay(5);
 8002a98:	2005      	movs	r0, #5
 8002a9a:	f009 fe0b 	bl	800c6b4 <vTaskDelay>
		 if (tracking_move==3) { // Obstacle à gauche
 8002a9e:	e7a1      	b.n	80029e4 <manual_mode+0x8>
 8002aa0:	20000008 	.word	0x20000008
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <random_mode>:

}
int front_capt[2];
uint16_t back_capt;

static void random_mode(void *pvParameters) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

    for (;;) {
        // Lire les capteurs
    	int front_distance[2];
    	uint16_t back_distance;
        captDistIR_Get(front_distance);  // Capteurs avant
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe ff2b 	bl	8001910 <captDistIR_Get>
        back_distance = VL53L0X_readRangeContinuousMillimeters();  // Capteur arrière
 8002aba:	f7fe fee5 	bl	8001888 <VL53L0X_readRangeContinuousMillimeters>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	82fb      	strh	r3, [r7, #22]
        mes_vl53 = back_distance;
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <random_mode+0xa0>)
 8002ac4:	8afb      	ldrh	r3, [r7, #22]
 8002ac6:	8013      	strh	r3, [r2, #0]
        // Vérifier les obstacles
        if (front_distance[1] > 1000) { // Obstacle à gauche
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ace:	dd0c      	ble.n	8002aea <random_mode+0x42>
            // Tourner à droite
            motorLeft_SetDuty(speed_consigne); // Moteur gauche rapide
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <random_mode+0xa4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fdc3 	bl	8003660 <motorLeft_SetDuty>
            motorRight_SetDuty(100); // Moteur droit lent
 8002ada:	2064      	movs	r0, #100	; 0x64
 8002adc:	f000 fdd0 	bl	8003680 <motorRight_SetDuty>
           // strcpy(current_message, "Obstacle Gauche!");
            vTaskDelay(pdMS_TO_TICKS(500)); // Tourner pendant 0.5s
 8002ae0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ae4:	f009 fde6 	bl	800c6b4 <vTaskDelay>
 8002ae8:	e7e2      	b.n	8002ab0 <random_mode+0x8>
        } else if (front_distance[0] > 1000) { // Obstacle à droite
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af0:	dd0c      	ble.n	8002b0c <random_mode+0x64>
            // Tourner à gauche
            motorLeft_SetDuty(100); // Moteur gauche lent
 8002af2:	2064      	movs	r0, #100	; 0x64
 8002af4:	f000 fdb4 	bl	8003660 <motorLeft_SetDuty>
            motorRight_SetDuty(speed_consigne); // Moteur droit rapide
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <random_mode+0xa4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fdbf 	bl	8003680 <motorRight_SetDuty>
           // strcpy(current_message, "Obstacle Droite!");
            vTaskDelay(pdMS_TO_TICKS(500)); // Tourner pendant 0.5s
 8002b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b06:	f009 fdd5 	bl	800c6b4 <vTaskDelay>
 8002b0a:	e7d1      	b.n	8002ab0 <random_mode+0x8>
        } else if (back_distance < 200) { // Obstacle à droite
 8002b0c:	8afb      	ldrh	r3, [r7, #22]
 8002b0e:	2bc7      	cmp	r3, #199	; 0xc7
 8002b10:	d80a      	bhi.n	8002b28 <random_mode+0x80>
            // Tourner à gauche
            motorLeft_SetDuty(100); // Moteur gauche lent
 8002b12:	2064      	movs	r0, #100	; 0x64
 8002b14:	f000 fda4 	bl	8003660 <motorLeft_SetDuty>
            motorRight_SetDuty(100); // Moteur droit rapide
 8002b18:	2064      	movs	r0, #100	; 0x64
 8002b1a:	f000 fdb1 	bl	8003680 <motorRight_SetDuty>
           // strcpy(current_message, "Obstacle Droite!");
            vTaskDelay(pdMS_TO_TICKS(500)); // Tourner pendant 0.5s
 8002b1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b22:	f009 fdc7 	bl	800c6b4 <vTaskDelay>
 8002b26:	e7c3      	b.n	8002ab0 <random_mode+0x8>
        }  else {
            motorLeft_SetDuty(speed_consigne);
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <random_mode+0xa4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fd97 	bl	8003660 <motorLeft_SetDuty>
            motorRight_SetDuty(speed_consigne);
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <random_mode+0xa4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fda2 	bl	8003680 <motorRight_SetDuty>
            vTaskDelay(pdMS_TO_TICKS(1000)); // Changer de vitesse toutes les 1 seconde
 8002b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b40:	f009 fdb8 	bl	800c6b4 <vTaskDelay>
    for (;;) {
 8002b44:	e7b4      	b.n	8002ab0 <random_mode+0x8>
 8002b46:	bf00      	nop
 8002b48:	20004d74 	.word	0x20004d74
 8002b4c:	20000004 	.word	0x20000004

08002b50 <lcd_print>:
        }
    }
}

static void lcd_print(void *pvParameters) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    static char previous_lcd_message[16] = "";
    groveLCD_begin(16, 2, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	2010      	movs	r0, #16
 8002b5e:	f7ff fc17 	bl	8002390 <groveLCD_begin>
    groveLCD_display();
 8002b62:	f7ff fccb 	bl	80024fc <groveLCD_display>

    for (;;) {
        if (strcmp(previous_lcd_message, current_message) != 0) {
 8002b66:	490b      	ldr	r1, [pc, #44]	; (8002b94 <lcd_print+0x44>)
 8002b68:	480b      	ldr	r0, [pc, #44]	; (8002b98 <lcd_print+0x48>)
 8002b6a:	f7fd fb39 	bl	80001e0 <strcmp>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <lcd_print+0x3c>
            groveLCD_setCursor(0, 0); // Positionne le curseur
 8002b74:	2100      	movs	r1, #0
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7ff fc9c 	bl	80024b4 <groveLCD_setCursor>
            groveLCD_term_printf("%s", current_message);  // Affiche le message
 8002b7c:	4905      	ldr	r1, [pc, #20]	; (8002b94 <lcd_print+0x44>)
 8002b7e:	4807      	ldr	r0, [pc, #28]	; (8002b9c <lcd_print+0x4c>)
 8002b80:	f7ff fd3e 	bl	8002600 <groveLCD_term_printf>
            // Sauvegarde le message actuel
            strcpy(previous_lcd_message, current_message);
 8002b84:	4903      	ldr	r1, [pc, #12]	; (8002b94 <lcd_print+0x44>)
 8002b86:	4804      	ldr	r0, [pc, #16]	; (8002b98 <lcd_print+0x48>)
 8002b88:	f018 f95a 	bl	801ae40 <strcpy>
        }

        // Pause pour limiter les mises à jour de l'écran
        vTaskDelay(pdMS_TO_TICKS(200));  // Mise à jour toutes les 100 ms
 8002b8c:	20c8      	movs	r0, #200	; 0xc8
 8002b8e:	f009 fd91 	bl	800c6b4 <vTaskDelay>
        if (strcmp(previous_lcd_message, current_message) != 0) {
 8002b92:	e7e8      	b.n	8002b66 <lcd_print+0x16>
 8002b94:	20004d80 	.word	0x20004d80
 8002b98:	20004e04 	.word	0x20004e04
 8002b9c:	0801e7ac 	.word	0x0801e7ac

08002ba0 <track_mode>:
		vTaskDelay(1);
	}
}

char dirTracking[100];
static void track_mode(void *pvParameters) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

	for(;;){
		 if (strcmp(dirTracking, "right")==0) { // Obstacle à gauche
 8002ba8:	4925      	ldr	r1, [pc, #148]	; (8002c40 <track_mode+0xa0>)
 8002baa:	4826      	ldr	r0, [pc, #152]	; (8002c44 <track_mode+0xa4>)
 8002bac:	f7fd fb18 	bl	80001e0 <strcmp>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d112      	bne.n	8002bdc <track_mode+0x3c>
		            // Tourner à droite un peu et attendre un autre mouvement
		            motorLeft_SetDuty(speed_consigne);
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <track_mode+0xa8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fd50 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(100); // Moteur droit lent
 8002bc0:	2064      	movs	r0, #100	; 0x64
 8002bc2:	f000 fd5d 	bl	8003680 <motorRight_SetDuty>
		            vTaskDelay(pdMS_TO_TICKS(500)); // Tourner pendant 0.5s
 8002bc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bca:	f009 fd73 	bl	800c6b4 <vTaskDelay>
		            motorLeft_SetDuty(100); // Moteur gauche rapide
 8002bce:	2064      	movs	r0, #100	; 0x64
 8002bd0:	f000 fd46 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(100);
 8002bd4:	2064      	movs	r0, #100	; 0x64
 8002bd6:	f000 fd53 	bl	8003680 <motorRight_SetDuty>
 8002bda:	e02d      	b.n	8002c38 <track_mode+0x98>

		        } else if (strcmp(dirTracking, "left")==0) { // Obstacle à droite
 8002bdc:	491b      	ldr	r1, [pc, #108]	; (8002c4c <track_mode+0xac>)
 8002bde:	4819      	ldr	r0, [pc, #100]	; (8002c44 <track_mode+0xa4>)
 8002be0:	f7fd fafe 	bl	80001e0 <strcmp>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d112      	bne.n	8002c10 <track_mode+0x70>
		            // Tourner à gauche un peu et attendre un autre mouvement
		            motorLeft_SetDuty(100); // Moteur gauche lent
 8002bea:	2064      	movs	r0, #100	; 0x64
 8002bec:	f000 fd38 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(speed_consigne); // Moteur droit rapide
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <track_mode+0xa8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fd43 	bl	8003680 <motorRight_SetDuty>
		            vTaskDelay(pdMS_TO_TICKS(500)); // Tourner pendant 0.5s
 8002bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bfe:	f009 fd59 	bl	800c6b4 <vTaskDelay>
		            motorLeft_SetDuty(100); // Moteur gauche rapide
 8002c02:	2064      	movs	r0, #100	; 0x64
 8002c04:	f000 fd2c 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(100);
 8002c08:	2064      	movs	r0, #100	; 0x64
 8002c0a:	f000 fd39 	bl	8003680 <motorRight_SetDuty>
 8002c0e:	e013      	b.n	8002c38 <track_mode+0x98>

		        } else { // Forward
		            // Avancer
		            motorLeft_SetDuty(speed_consigne);
 8002c10:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <track_mode+0xa8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fd23 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(speed_consigne);
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <track_mode+0xa8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fd2e 	bl	8003680 <motorRight_SetDuty>
		            vTaskDelay(pdMS_TO_TICKS(500)); // Avancer pendant 0.5s
 8002c24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c28:	f009 fd44 	bl	800c6b4 <vTaskDelay>
		            motorLeft_SetDuty(100); // Moteur gauche rapide
 8002c2c:	2064      	movs	r0, #100	; 0x64
 8002c2e:	f000 fd17 	bl	8003660 <motorLeft_SetDuty>
		            motorRight_SetDuty(100);
 8002c32:	2064      	movs	r0, #100	; 0x64
 8002c34:	f000 fd24 	bl	8003680 <motorRight_SetDuty>
		        }
		 vTaskDelay(5);
 8002c38:	2005      	movs	r0, #5
 8002c3a:	f009 fd3b 	bl	800c6b4 <vTaskDelay>
		 if (strcmp(dirTracking, "right")==0) { // Obstacle à gauche
 8002c3e:	e7b3      	b.n	8002ba8 <track_mode+0x8>
 8002c40:	0801e7b0 	.word	0x0801e7b0
 8002c44:	20004da0 	.word	0x20004da0
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	0801e7b8 	.word	0x0801e7b8

08002c50 <send_data>:
	}

}


static void send_data(void *pvParameters) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

	for(;;){
	captDistIR_Get(front_capt);
 8002c58:	4806      	ldr	r0, [pc, #24]	; (8002c74 <send_data+0x24>)
 8002c5a:	f7fe fe59 	bl	8001910 <captDistIR_Get>
	back_capt = VL53L0X_readRangeContinuousMillimeters();
 8002c5e:	f7fe fe13 	bl	8001888 <VL53L0X_readRangeContinuousMillimeters>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <send_data+0x28>)
 8002c68:	801a      	strh	r2, [r3, #0]
	vTaskDelay(5);
 8002c6a:	2005      	movs	r0, #5
 8002c6c:	f009 fd22 	bl	800c6b4 <vTaskDelay>
	captDistIR_Get(front_capt);
 8002c70:	e7f2      	b.n	8002c58 <send_data+0x8>
 8002c72:	bf00      	nop
 8002c74:	20004d94 	.word	0x20004d94
 8002c78:	20004d9c 	.word	0x20004d9c

08002c7c <change_mode>:
	}

}

void change_mode(void) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
    if (mode_courant == 0) {
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <change_mode+0xb0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d119      	bne.n	8002cbc <change_mode+0x40>
        vTaskSuspend(manualTaskHandle);
 8002c88:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <change_mode+0xb4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f009 fd45 	bl	800c71c <vTaskSuspend>
        vTaskSuspend(trackingTaskHandle);
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <change_mode+0xb8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f009 fd40 	bl	800c71c <vTaskSuspend>
        strcpy(current_message, "random");
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <change_mode+0xbc>)
 8002c9e:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <change_mode+0xc0>)
 8002ca0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ca4:	6018      	str	r0, [r3, #0]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	8019      	strh	r1, [r3, #0]
 8002caa:	3302      	adds	r3, #2
 8002cac:	0c0a      	lsrs	r2, r1, #16
 8002cae:	701a      	strb	r2, [r3, #0]
        vTaskResume(randomTaskHandle);
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <change_mode+0xc4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f009 fdd9 	bl	800c86c <vTaskResume>
        vTaskSuspend(randomTaskHandle);
        vTaskSuspend(manualTaskHandle);
        strcpy(current_message, "tracking");
        vTaskResume(trackingTaskHandle);
    }
}
 8002cba:	e035      	b.n	8002d28 <change_mode+0xac>
    } else if (mode_courant == 1) {
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <change_mode+0xb0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d119      	bne.n	8002cf8 <change_mode+0x7c>
        vTaskSuspend(randomTaskHandle);
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <change_mode+0xc4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f009 fd27 	bl	800c71c <vTaskSuspend>
        vTaskSuspend(trackingTaskHandle);
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <change_mode+0xb8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f009 fd22 	bl	800c71c <vTaskSuspend>
        strcpy(current_message, "manual");
 8002cd8:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <change_mode+0xbc>)
 8002cda:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <change_mode+0xc8>)
 8002cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce0:	6018      	str	r0, [r3, #0]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	8019      	strh	r1, [r3, #0]
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	0c0a      	lsrs	r2, r1, #16
 8002cea:	701a      	strb	r2, [r3, #0]
        vTaskResume(manualTaskHandle);
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <change_mode+0xb4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f009 fdbb 	bl	800c86c <vTaskResume>
}
 8002cf6:	e017      	b.n	8002d28 <change_mode+0xac>
    } else if (mode_courant==2){
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <change_mode+0xb0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d113      	bne.n	8002d28 <change_mode+0xac>
        vTaskSuspend(randomTaskHandle);
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <change_mode+0xc4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f009 fd09 	bl	800c71c <vTaskSuspend>
        vTaskSuspend(manualTaskHandle);
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <change_mode+0xb4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f009 fd04 	bl	800c71c <vTaskSuspend>
        strcpy(current_message, "tracking");
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <change_mode+0xbc>)
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <change_mode+0xcc>)
 8002d18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d1a:	c303      	stmia	r3!, {r0, r1}
 8002d1c:	701a      	strb	r2, [r3, #0]
        vTaskResume(trackingTaskHandle);
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <change_mode+0xb8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f009 fda2 	bl	800c86c <vTaskResume>
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20004d6c 	.word	0x20004d6c
 8002d34:	20004d70 	.word	0x20004d70
 8002d38:	20004d80 	.word	0x20004d80
 8002d3c:	0801e7c0 	.word	0x0801e7c0
 8002d40:	20004d68 	.word	0x20004d68
 8002d44:	0801e7c8 	.word	0x0801e7c8
 8002d48:	0801e7d0 	.word	0x0801e7d0

08002d4c <main>:

//

//=========================================================================
int main(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af02      	add	r7, sp, #8
  int ret=0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]

  HAL_Init();
 8002d56:	f001 fd7f 	bl	8004858 <HAL_Init>
  SystemClock_Config();
 8002d5a:	f001 fb0b 	bl	8004374 <SystemClock_Config>
  MX_GPIO_Init();
 8002d5e:	f7ff f91f 	bl	8001fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d62:	f7ff fabf 	bl	80022e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002d66:	f7ff fa69 	bl	800223c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002d6a:	f7ff fa91 	bl	8002290 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002d6e:	f7ff f9b1 	bl	80020d4 <MX_I2C1_Init>

  motorCommand_Init();
 8002d72:	f000 fc19 	bl	80035a8 <motorCommand_Init>
  quadEncoder_Init();
 8002d76:	f000 fc93 	bl	80036a0 <quadEncoder_Init>
  captDistIR_Init();
 8002d7a:	f7fe fd97 	bl	80018ac <captDistIR_Init>

  HAL_Delay(500);
 8002d7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d82:	f001 fdab 	bl	80048dc <HAL_Delay>

  // Affichage via UART2 sur Terminal série $ minicom -D /dev/ttyACM0
  printf("hello\r\n"); // REM : ne pas oublier le \n
 8002d86:	4853      	ldr	r0, [pc, #332]	; (8002ed4 <main+0x188>)
 8002d88:	f017 feba 	bl	801ab00 <puts>

  VL53L0X_init();
 8002d8c:	f7fe fa72 	bl	8001274 <VL53L0X_init>

  ret = VL53L0X_validateInterface();
 8002d90:	f7fe fa3c 	bl	800120c <VL53L0X_validateInterface>
 8002d94:	4603      	mov	r3, r0
 8002d96:	60fb      	str	r3, [r7, #12]
  if(ret ==0)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d103      	bne.n	8002da6 <main+0x5a>
  {
	  printf("VL53L0X OK\r\n");
 8002d9e:	484e      	ldr	r0, [pc, #312]	; (8002ed8 <main+0x18c>)
 8002da0:	f017 feae 	bl	801ab00 <puts>
 8002da4:	e002      	b.n	8002dac <main+0x60>
  }


  else
  {
	  printf("!! PROBLEME VL53L0X !!\r\n");
 8002da6:	484d      	ldr	r0, [pc, #308]	; (8002edc <main+0x190>)
 8002da8:	f017 feaa 	bl	801ab00 <puts>
  }
  VL53L0X_startContinuous(0);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fd25 	bl	80017fc <VL53L0X_startContinuous>

  int a, b;


  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 8002db2:	2200      	movs	r2, #0
 8002db4:	2102      	movs	r1, #2
 8002db6:	2010      	movs	r0, #16
 8002db8:	f7ff faea 	bl	8002390 <groveLCD_begin>
  HAL_Delay(100);
 8002dbc:	2064      	movs	r0, #100	; 0x64
 8002dbe:	f001 fd8d 	bl	80048dc <HAL_Delay>
  groveLCD_display();
 8002dc2:	f7ff fb9b 	bl	80024fc <groveLCD_display>
  a=5; b=2;
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	2302      	movs	r3, #2
 8002dcc:	607b      	str	r3, [r7, #4]
  groveLCD_term_printf("%d+%d=%d",a,b,a+b);
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4841      	ldr	r0, [pc, #260]	; (8002ee0 <main+0x194>)
 8002dda:	f7ff fc11 	bl	8002600 <groveLCD_term_printf>
  groveLCD_setCursor(0,0);
 8002dde:	2100      	movs	r1, #0
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7ff fb67 	bl	80024b4 <groveLCD_setCursor>
  groveLCD_term_printf("hello");
 8002de6:	483f      	ldr	r0, [pc, #252]	; (8002ee4 <main+0x198>)
 8002de8:	f7ff fc0a 	bl	8002600 <groveLCD_term_printf>


  HAL_Delay(50);
 8002dec:	2032      	movs	r0, #50	; 0x32
 8002dee:	f001 fd75 	bl	80048dc <HAL_Delay>

	 speed = quadEncoder_GetSpeedL();
	 speed = quadEncoder_GetSpeedR;
#endif

  osKernelInitialize();
 8002df2:	f008 fadd 	bl	800b3b0 <osKernelInitialize>

  messageSemaphore = xSemaphoreCreateMutex();
 8002df6:	2001      	movs	r0, #1
 8002df8:	f008 fd7f 	bl	800b8fa <xQueueCreateMutex>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4a3a      	ldr	r2, [pc, #232]	; (8002ee8 <main+0x19c>)
 8002e00:	6013      	str	r3, [r2, #0]
  if (messageSemaphore == NULL) {
 8002e02:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <main+0x19c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <main+0xc4>
      printf("Failed to create semaphore for message synchronization\n");
 8002e0a:	4838      	ldr	r0, [pc, #224]	; (8002eec <main+0x1a0>)
 8002e0c:	f017 fe78 	bl	801ab00 <puts>
  }

  xTaskCreate( microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
 8002e10:	2300      	movs	r3, #0
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	2318      	movs	r3, #24
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e1e:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <main+0x1a4>)
 8002e20:	4834      	ldr	r0, [pc, #208]	; (8002ef4 <main+0x1a8>)
 8002e22:	f009 faec 	bl	800c3fe <xTaskCreate>
  xTaskCreate(lcd_print, "LCD", 128, NULL, 5, NULL);
 8002e26:	2300      	movs	r3, #0
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2280      	movs	r2, #128	; 0x80
 8002e32:	4931      	ldr	r1, [pc, #196]	; (8002ef8 <main+0x1ac>)
 8002e34:	4831      	ldr	r0, [pc, #196]	; (8002efc <main+0x1b0>)
 8002e36:	f009 fae2 	bl	800c3fe <xTaskCreate>
  xTaskCreate(send_data, "Send data", 128, NULL, 6, NULL);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	2306      	movs	r3, #6
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	492e      	ldr	r1, [pc, #184]	; (8002f00 <main+0x1b4>)
 8002e48:	482e      	ldr	r0, [pc, #184]	; (8002f04 <main+0x1b8>)
 8002e4a:	f009 fad8 	bl	800c3fe <xTaskCreate>
  //xTaskCreate(task_E_echantillonage, "Send data", 128, NULL, 7, NULL);

  xTaskCreate(random_mode, "Random Mode", 128, NULL, 11, &randomTaskHandle);
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <main+0x1bc>)
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	230b      	movs	r3, #11
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2300      	movs	r3, #0
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	492c      	ldr	r1, [pc, #176]	; (8002f0c <main+0x1c0>)
 8002e5c:	482c      	ldr	r0, [pc, #176]	; (8002f10 <main+0x1c4>)
 8002e5e:	f009 face 	bl	800c3fe <xTaskCreate>
  xTaskCreate(manual_mode, "Manual Mode", 128, NULL, 12, &manualTaskHandle);
 8002e62:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <main+0x1c8>)
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	230c      	movs	r3, #12
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	492a      	ldr	r1, [pc, #168]	; (8002f18 <main+0x1cc>)
 8002e70:	482a      	ldr	r0, [pc, #168]	; (8002f1c <main+0x1d0>)
 8002e72:	f009 fac4 	bl	800c3fe <xTaskCreate>
  xTaskCreate(track_mode, "Tracking Mode", 128, NULL, 13, &trackingTaskHandle);
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <main+0x1d4>)
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	230d      	movs	r3, #13
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	4928      	ldr	r1, [pc, #160]	; (8002f24 <main+0x1d8>)
 8002e84:	4828      	ldr	r0, [pc, #160]	; (8002f28 <main+0x1dc>)
 8002e86:	f009 faba 	bl	800c3fe <xTaskCreate>
        uiRight += Ki * errRight;
( signed portCHAR * ) "task E", 128 /* stack size */, NULL, 30, NULL );
	xTaskCreate( task_F, ( signed portCHAR * ) "task F", 128 /* stack size */, NULL, 29, NULL );
#endif

	vSemaphoreCreateBinary(xSemaphore);
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f008 fcbc 	bl	800b80c <xQueueGenericCreate>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <main+0x1e0>)
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <main+0x1e0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <main+0x164>
 8002ea2:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <main+0x1e0>)
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f008 fd3e 	bl	800b92c <xQueueGenericSend>
	xSemaphoreTake( xSemaphore, portMAX_DELAY );
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <main+0x1e0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f008 ffb1 	bl	800be20 <xQueueSemaphoreTake>

	qh = xQueueCreate( 1, sizeof(struct AMessage ) );
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2108      	movs	r1, #8
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f008 fca2 	bl	800b80c <xQueueGenericCreate>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <main+0x1e4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8002ece:	f008 fa93 	bl	800b3f8 <osKernelStart>

  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <main+0x186>
 8002ed4:	0801e7dc 	.word	0x0801e7dc
 8002ed8:	0801e7e4 	.word	0x0801e7e4
 8002edc:	0801e7f0 	.word	0x0801e7f0
 8002ee0:	0801e808 	.word	0x0801e808
 8002ee4:	0801e814 	.word	0x0801e814
 8002ee8:	20004d64 	.word	0x20004d64
 8002eec:	0801e81c 	.word	0x0801e81c
 8002ef0:	0801e854 	.word	0x0801e854
 8002ef4:	08003025 	.word	0x08003025
 8002ef8:	0801e864 	.word	0x0801e864
 8002efc:	08002b51 	.word	0x08002b51
 8002f00:	0801e868 	.word	0x0801e868
 8002f04:	08002c51 	.word	0x08002c51
 8002f08:	20004d68 	.word	0x20004d68
 8002f0c:	0801e874 	.word	0x0801e874
 8002f10:	08002aa9 	.word	0x08002aa9
 8002f14:	20004d6c 	.word	0x20004d6c
 8002f18:	0801e880 	.word	0x0801e880
 8002f1c:	080029dd 	.word	0x080029dd
 8002f20:	20004d70 	.word	0x20004d70
 8002f24:	0801e88c 	.word	0x0801e88c
 8002f28:	08002ba1 	.word	0x08002ba1
 8002f2c:	20004d5c 	.word	0x20004d5c
 8002f30:	20004d60 	.word	0x20004d60

08002f34 <subscription_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void subscription_callback(const void *msgin) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
    const std_msgs__msg__String *msg = (const std_msgs__msg__String *)msgin;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	613b      	str	r3, [r7, #16]
    if (msg && msg->data.data) {
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03c      	beq.n	8002fc0 <subscription_callback+0x8c>
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d038      	beq.n	8002fc0 <subscription_callback+0x8c>
        char *data = msg->data.data;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]
        int mode = 0, speed = 0, direction = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

        char *token = strtok(data, ";");
 8002f60:	491b      	ldr	r1, [pc, #108]	; (8002fd0 <subscription_callback+0x9c>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f018 fdc8 	bl	801baf8 <strtok>
 8002f68:	60b8      	str	r0, [r7, #8]
        if (token) mode = atoi(token);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <subscription_callback+0x44>
 8002f70:	68b8      	ldr	r0, [r7, #8]
 8002f72:	f016 fc17 	bl	80197a4 <atoi>
 8002f76:	61f8      	str	r0, [r7, #28]
        if ((token = strtok(NULL, ";"))) speed = atoi(token);
 8002f78:	4915      	ldr	r1, [pc, #84]	; (8002fd0 <subscription_callback+0x9c>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f018 fdbc 	bl	801baf8 <strtok>
 8002f80:	60b8      	str	r0, [r7, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <subscription_callback+0x5c>
 8002f88:	68b8      	ldr	r0, [r7, #8]
 8002f8a:	f016 fc0b 	bl	80197a4 <atoi>
 8002f8e:	61b8      	str	r0, [r7, #24]
        if ((token = strtok(NULL, ";"))) direction = atoi(token);
 8002f90:	490f      	ldr	r1, [pc, #60]	; (8002fd0 <subscription_callback+0x9c>)
 8002f92:	2000      	movs	r0, #0
 8002f94:	f018 fdb0 	bl	801baf8 <strtok>
 8002f98:	60b8      	str	r0, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <subscription_callback+0x74>
 8002fa0:	68b8      	ldr	r0, [r7, #8]
 8002fa2:	f016 fbff 	bl	80197a4 <atoi>
 8002fa6:	6178      	str	r0, [r7, #20]

    	  mode_courant=mode;
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <subscription_callback+0xa0>)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	6013      	str	r3, [r2, #0]
          speed_consigne=speed;
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <subscription_callback+0xa4>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6013      	str	r3, [r2, #0]
          tracking_move=direction;
 8002fb4:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <subscription_callback+0xa8>)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	6013      	str	r3, [r2, #0]
          change_mode();
 8002fba:	f7ff fe5f 	bl	8002c7c <change_mode>
    if (msg && msg->data.data) {
 8002fbe:	e003      	b.n	8002fc8 <subscription_callback+0x94>

    } else {
        printf("Received NULL message or data\n");
 8002fc0:	4807      	ldr	r0, [pc, #28]	; (8002fe0 <subscription_callback+0xac>)
 8002fc2:	f017 fd9d 	bl	801ab00 <puts>
    }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	0801e89c 	.word	0x0801e89c
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	20000008 	.word	0x20000008
 8002fe0:	0801e8a0 	.word	0x0801e8a0

08002fe4 <Tracking_subscription_callback>:

void Tracking_subscription_callback(const void * msgin){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

    const std_msgs__msg__String *msg = (const std_msgs__msg__String *)msgin;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	60fb      	str	r3, [r7, #12]

    // Ensure msg and msg->data.data are valid
    if (msg && msg->data.data) {
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <Tracking_subscription_callback+0x28>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <Tracking_subscription_callback+0x28>
        strcpy(dirTracking, msg->data.data);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	4805      	ldr	r0, [pc, #20]	; (800301c <Tracking_subscription_callback+0x38>)
 8003006:	f017 ff1b 	bl	801ae40 <strcpy>
 800300a:	e003      	b.n	8003014 <Tracking_subscription_callback+0x30>
    } else {
        printf("Received NULL message or data\n\r");
 800300c:	4804      	ldr	r0, [pc, #16]	; (8003020 <Tracking_subscription_callback+0x3c>)
 800300e:	f017 fcf1 	bl	801a9f4 <iprintf>
    }
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20004da0 	.word	0x20004da0
 8003020:	0801e8c0 	.word	0x0801e8c0

08003024 <microros_task>:


void microros_task(void *argument)
{
 8003024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003028:	b0da      	sub	sp, #360	; 0x168
 800302a:	af02      	add	r7, sp, #8
 800302c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003030:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003034:	6018      	str	r0, [r3, #0]
  rmw_uros_set_custom_transport( true, (void *) &huart1, cubemx_transport_open,  cubemx_transport_close,  cubemx_transport_write, cubemx_transport_read);
 8003036:	4b88      	ldr	r3, [pc, #544]	; (8003258 <microros_task+0x234>)
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	4b88      	ldr	r3, [pc, #544]	; (800325c <microros_task+0x238>)
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4b88      	ldr	r3, [pc, #544]	; (8003260 <microros_task+0x23c>)
 8003040:	4a88      	ldr	r2, [pc, #544]	; (8003264 <microros_task+0x240>)
 8003042:	4989      	ldr	r1, [pc, #548]	; (8003268 <microros_task+0x244>)
 8003044:	2001      	movs	r0, #1
 8003046:	f00c fbc9 	bl	800f7dc <rmw_uros_set_custom_transport>

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800304a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800304e:	4618      	mov	r0, r3
 8003050:	f00c f930 	bl	800f2b4 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8003054:	4b85      	ldr	r3, [pc, #532]	; (800326c <microros_task+0x248>)
 8003056:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  freeRTOS_allocator.deallocate = microros_deallocate;
 800305a:	4b85      	ldr	r3, [pc, #532]	; (8003270 <microros_task+0x24c>)
 800305c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  freeRTOS_allocator.reallocate = microros_reallocate;
 8003060:	4b84      	ldr	r3, [pc, #528]	; (8003274 <microros_task+0x250>)
 8003062:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8003066:	4b84      	ldr	r3, [pc, #528]	; (8003278 <microros_task+0x254>)
 8003068:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800306c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003070:	4618      	mov	r0, r3
 8003072:	f00c f92d 	bl	800f2d0 <rcutils_set_default_allocator>
 8003076:	4603      	mov	r3, r0
 8003078:	f083 0301 	eor.w	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <microros_task+0x68>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8003082:	f240 2107 	movw	r1, #519	; 0x207
 8003086:	487d      	ldr	r0, [pc, #500]	; (800327c <microros_task+0x258>)
 8003088:	f017 fcb4 	bl	801a9f4 <iprintf>
  }

  // micro-ROS app
  rclc_support_t support;
  rcl_allocator_t allocator;
  allocator = rcl_get_default_allocator();
 800308c:	463b      	mov	r3, r7
 800308e:	4618      	mov	r0, r3
 8003090:	f00c f93e 	bl	800f310 <rcutils_get_default_allocator>
 8003094:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003098:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800309c:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 80030a0:	461d      	mov	r5, r3
 80030a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	6023      	str	r3, [r4, #0]

  // create node
  rcl_node_t node;
  rcl_node_options_t node_ops = rcl_node_get_default_options();
 80030aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030ae:	4618      	mov	r0, r3
 80030b0:	f00b fb4a 	bl	800e748 <rcl_node_get_default_options>
  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 80030b4:	f00b fa22 	bl	800e4fc <rcl_get_zero_initialized_init_options>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  rcl_init_options_init(&init_options, allocator);
 80030be:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 80030c2:	466a      	mov	r2, sp
 80030c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80030d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	4620      	mov	r0, r4
 80030d8:	f00b fa12 	bl	800e500 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, ROS_DOMAIN_ID);
 80030dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030e0:	210b      	movs	r1, #11
 80030e2:	4618      	mov	r0, r3
 80030e4:	f00b fb28 	bl	800e738 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80030e8:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80030ec:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80030f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	f00b fff2 	bl	800f0e4 <rclc_support_init_with_options>
  rclc_node_init_default(&node, "STM32_Node","", &support);
 8003100:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003104:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8003108:	4a5d      	ldr	r2, [pc, #372]	; (8003280 <microros_task+0x25c>)
 800310a:	495e      	ldr	r1, [pc, #376]	; (8003284 <microros_task+0x260>)
 800310c:	f00c f826 	bl	800f15c <rclc_node_init_default>

  // create publisher
  rcl_publisher_t publisher;
 std_msgs__msg__String sensor_dist_back_msg;
 rclc_publisher_init_default(&publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/sensor/dist_back");
 8003110:	f00d fd34 	bl	8010b7c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8003114:	4602      	mov	r2, r0
 8003116:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 800311a:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800311e:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <microros_task+0x264>)
 8003120:	f00c f858 	bl	800f1d4 <rclc_publisher_init_default>

  // create subscriber
  rcl_subscription_t subscriber; //Move
  std_msgs__msg__String str_msg;
  rclc_subscription_init_default(&subscriber,&node,ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/command/move");
 8003124:	f00d fd2a 	bl	8010b7c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8003128:	4602      	mov	r2, r0
 800312a:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 800312e:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8003132:	4b56      	ldr	r3, [pc, #344]	; (800328c <microros_task+0x268>)
 8003134:	f00c f882 	bl	800f23c <rclc_subscription_init_default>

  // create subscriber
  rcl_subscription_t tracking_subscriber; //Tracking
  std_msgs__msg__String tracking_str_msg;
  rclc_subscription_init_default(&tracking_subscriber,&node,ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/command/tracking");
 8003138:	f00d fd20 	bl	8010b7c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 800313c:	4602      	mov	r2, r0
 800313e:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8003142:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003146:	4b52      	ldr	r3, [pc, #328]	; (8003290 <microros_task+0x26c>)
 8003148:	f00c f878 	bl	800f23c <rclc_subscription_init_default>

  // Add subscription to the executor
  rclc_executor_t executor;
  rclc_executor_init(&executor, &support.context, 3, &allocator); // ! 'NUMBER OF HANDLES' A MODIFIER EN FONCTION DU NOMBRE DE TOPICS
 800314c:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003154:	1d19      	adds	r1, r3, #4
 8003156:	f107 0020 	add.w	r0, r7, #32
 800315a:	4613      	mov	r3, r2
 800315c:	2203      	movs	r2, #3
 800315e:	f00b fd63 	bl	800ec28 <rclc_executor_init>
  rclc_executor_add_subscription(&executor, &subscriber, &str_msg, &subscription_callback, ON_NEW_DATA);
 8003162:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8003166:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800316a:	f107 0020 	add.w	r0, r7, #32
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	4b48      	ldr	r3, [pc, #288]	; (8003294 <microros_task+0x270>)
 8003174:	f00b fdcc 	bl	800ed10 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &tracking_subscriber, &tracking_str_msg, &Tracking_subscription_callback, ON_NEW_DATA);
 8003178:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800317c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003180:	f107 0020 	add.w	r0, r7, #32
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4b43      	ldr	r3, [pc, #268]	; (8003298 <microros_task+0x274>)
 800318a:	f00b fdc1 	bl	800ed10 <rclc_executor_add_subscription>



  str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 800318e:	2064      	movs	r0, #100	; 0x64
 8003190:	f016 fc80 	bl	8019a94 <malloc>
 8003194:	4603      	mov	r3, r0
 8003196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  str_msg.data.size = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  str_msg.data.capacity = ARRAY_LEN;
 80031a0:	2364      	movs	r3, #100	; 0x64
 80031a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


  tracking_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 80031a6:	2064      	movs	r0, #100	; 0x64
 80031a8:	f016 fc74 	bl	8019a94 <malloc>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  tracking_str_msg.data.size = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  tracking_str_msg.data.capacity = ARRAY_LEN;
 80031b8:	2364      	movs	r3, #100	; 0x64
 80031ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  sensor_dist_back_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 80031be:	2064      	movs	r0, #100	; 0x64
 80031c0:	f016 fc68 	bl	8019a94 <malloc>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  sensor_dist_back_msg.data.size = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  sensor_dist_back_msg.data.capacity = ARRAY_LEN;
 80031d0:	2364      	movs	r3, #100	; 0x64
 80031d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  for(;;)
  {
	  sprintf(str_msg.data.data, "%d;%d;%d;%d", (int32_t)back_capt,(int32_t)front_capt[0],(int32_t)front_capt[1],(int16_t)abs(quadEncoder_GetSpeedR()));
 80031d6:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 80031da:	4b30      	ldr	r3, [pc, #192]	; (800329c <microros_task+0x278>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	4698      	mov	r8, r3
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <microros_task+0x27c>)
 80031e2:	681e      	ldr	r6, [r3, #0]
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <microros_task+0x27c>)
 80031e6:	685c      	ldr	r4, [r3, #4]
 80031e8:	f000 faf2 	bl	80037d0 <quadEncoder_GetSpeedR>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bfb8      	it	lt
 80031f2:	425b      	neglt	r3, r3
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	b21b      	sxth	r3, r3
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	9400      	str	r4, [sp, #0]
 80031fc:	4633      	mov	r3, r6
 80031fe:	4642      	mov	r2, r8
 8003200:	4928      	ldr	r1, [pc, #160]	; (80032a4 <microros_task+0x280>)
 8003202:	4628      	mov	r0, r5
 8003204:	f017 fdac 	bl	801ad60 <siprintf>
	  str_msg.data.size = strlen(str_msg.data.data);
 8003208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800320c:	4618      	mov	r0, r3
 800320e:	f7fc fff1 	bl	80001f4 <strlen>
 8003212:	4603      	mov	r3, r0
 8003214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

      rcl_ret_t ret = rcl_publish(&publisher, &str_msg, NULL);
 8003218:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800321c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003220:	2200      	movs	r2, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f00b fbe8 	bl	800e9f8 <rcl_publish>
 8003228:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c

		if (ret != RCL_RET_OK)
 800322c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <microros_task+0x21a>
		{
		  printf("Error publishing (line %d)\n\r", __LINE__);
 8003234:	f240 2146 	movw	r1, #582	; 0x246
 8003238:	481b      	ldr	r0, [pc, #108]	; (80032a8 <microros_task+0x284>)
 800323a:	f017 fbdb 	bl	801a9f4 <iprintf>
		}
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 800323e:	f107 0120 	add.w	r1, r7, #32
 8003242:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <microros_task+0x288>)
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	4608      	mov	r0, r1
 800324a:	f00b ff15 	bl	800f078 <rclc_executor_spin_some>
    osDelay(10);
 800324e:	200a      	movs	r0, #10
 8003250:	f008 f8f8 	bl	800b444 <osDelay>
  {
 8003254:	e7bf      	b.n	80031d6 <microros_task+0x1b2>
 8003256:	bf00      	nop
 8003258:	08001ef9 	.word	0x08001ef9
 800325c:	08001e91 	.word	0x08001e91
 8003260:	08001e71 	.word	0x08001e71
 8003264:	08001e45 	.word	0x08001e45
 8003268:	20004b4c 	.word	0x20004b4c
 800326c:	080032e1 	.word	0x080032e1
 8003270:	08003325 	.word	0x08003325
 8003274:	0800335d 	.word	0x0800335d
 8003278:	080033c9 	.word	0x080033c9
 800327c:	0801e8e0 	.word	0x0801e8e0
 8003280:	0801e908 	.word	0x0801e908
 8003284:	0801e90c 	.word	0x0801e90c
 8003288:	0801e918 	.word	0x0801e918
 800328c:	0801e92c 	.word	0x0801e92c
 8003290:	0801e93c 	.word	0x0801e93c
 8003294:	08002f35 	.word	0x08002f35
 8003298:	08002fe5 	.word	0x08002fe5
 800329c:	20004d9c 	.word	0x20004d9c
 80032a0:	20004d94 	.word	0x20004d94
 80032a4:	0801e950 	.word	0x0801e950
 80032a8:	0801e95c 	.word	0x0801e95c
 80032ac:	00989680 	.word	0x00989680

080032b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80032c2:	f001 faeb 	bl	800489c <HAL_IncTick>
  }
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40000800 	.word	0x40000800

080032d4 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80032d8:	b672      	cpsid	i
}
 80032da:	bf00      	nop
  __disable_irq();
  while (1)
 80032dc:	e7fe      	b.n	80032dc <Error_Handler+0x8>
	...

080032e0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <microros_allocate+0x3c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <microros_allocate+0x3c>)
 80032f8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <microros_allocate+0x40>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <microros_allocate+0x40>)
 8003308:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fe fb44 	bl	8001998 <pvPortMallocMicroROS>
 8003310:	4603      	mov	r3, r0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20004e14 	.word	0x20004e14
 8003320:	20004e18 	.word	0x20004e18

08003324 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00c      	beq.n	800334e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fe fc4d 	bl	8001bd4 <getBlockSize>
 800333a:	4603      	mov	r3, r0
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <microros_deallocate+0x34>)
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	461a      	mov	r2, r3
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <microros_deallocate+0x34>)
 8003346:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fe fbe9 	bl	8001b20 <vPortFreeMicroROS>
  }
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20004e18 	.word	0x20004e18

0800335c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <microros_reallocate+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4413      	add	r3, r2
 8003372:	461a      	mov	r2, r3
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <microros_reallocate+0x64>)
 8003376:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <microros_reallocate+0x68>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4413      	add	r3, r2
 8003382:	461a      	mov	r2, r3
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <microros_reallocate+0x68>)
 8003386:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800338e:	68b8      	ldr	r0, [r7, #8]
 8003390:	f7fe fb02 	bl	8001998 <pvPortMallocMicroROS>
 8003394:	4603      	mov	r3, r0
 8003396:	e00e      	b.n	80033b6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f7fe fc1b 	bl	8001bd4 <getBlockSize>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <microros_reallocate+0x68>)
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <microros_reallocate+0x68>)
 80033aa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7fe fc2e 	bl	8001c10 <pvPortReallocMicroROS>
 80033b4:	4603      	mov	r3, r0
  }
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20004e14 	.word	0x20004e14
 80033c4:	20004e18 	.word	0x20004e18

080033c8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	fb02 f303 	mul.w	r3, r2, r3
 80033dc:	4a0c      	ldr	r2, [pc, #48]	; (8003410 <microros_zero_allocate+0x48>)
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <microros_zero_allocate+0x48>)
 80033e6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	4a08      	ldr	r2, [pc, #32]	; (8003414 <microros_zero_allocate+0x4c>)
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <microros_zero_allocate+0x4c>)
 80033fa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7fe fc40 	bl	8001c84 <pvPortCallocMicroROS>
 8003404:	4603      	mov	r3, r0
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20004e14 	.word	0x20004e14
 8003414:	20004e18 	.word	0x20004e18

08003418 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800342a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800342e:	a320      	add	r3, pc, #128	; (adr r3, 80034b0 <UTILS_NanosecondsToTimespec+0x98>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f7fd fc40 	bl	8000cb8 <__aeabi_ldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003446:	a31a      	add	r3, pc, #104	; (adr r3, 80034b0 <UTILS_NanosecondsToTimespec+0x98>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f7fd fc34 	bl	8000cb8 <__aeabi_ldivmod>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	da20      	bge.n	800349e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <UTILS_NanosecondsToTimespec+0x90>)
 8003462:	fb82 1203 	smull	r1, r2, r2, r3
 8003466:	1712      	asrs	r2, r2, #28
 8003468:	17db      	asrs	r3, r3, #31
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	3301      	adds	r3, #1
 800346e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	17c8      	asrs	r0, r1, #31
 800347a:	460c      	mov	r4, r1
 800347c:	4605      	mov	r5, r0
 800347e:	ebb2 0804 	subs.w	r8, r2, r4
 8003482:	eb63 0905 	sbc.w	r9, r3, r5
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	4906      	ldr	r1, [pc, #24]	; (80034ac <UTILS_NanosecondsToTimespec+0x94>)
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	441a      	add	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]
    }
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034a8:	44b82fa1 	.word	0x44b82fa1
 80034ac:	3b9aca00 	.word	0x3b9aca00
 80034b0:	3b9aca00 	.word	0x3b9aca00
 80034b4:	00000000 	.word	0x00000000

080034b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80034b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034bc:	b08e      	sub	sp, #56	; 0x38
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6278      	str	r0, [r7, #36]	; 0x24
 80034c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80034c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034c8:	2300      	movs	r3, #0
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80034da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034de:	4618      	mov	r0, r3
 80034e0:	f009 fd20 	bl	800cf24 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	17da      	asrs	r2, r3, #31
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	61fa      	str	r2, [r7, #28]
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	69b9      	ldr	r1, [r7, #24]
 80034f6:	000b      	movs	r3, r1
 80034f8:	2200      	movs	r2, #0
 80034fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	2200      	movs	r2, #0
 8003502:	461c      	mov	r4, r3
 8003504:	4615      	mov	r5, r2
 8003506:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800350a:	1911      	adds	r1, r2, r4
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	416b      	adcs	r3, r5
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003516:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800351a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	f04f 0400 	mov.w	r4, #0
 8003526:	f04f 0500 	mov.w	r5, #0
 800352a:	015d      	lsls	r5, r3, #5
 800352c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003530:	0154      	lsls	r4, r2, #5
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	ebb2 0800 	subs.w	r8, r2, r0
 800353a:	eb63 0901 	sbc.w	r9, r3, r1
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800354a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800354e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	eb18 0a00 	adds.w	sl, r8, r0
 800355a:	eb49 0b01 	adc.w	fp, r9, r1
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800356a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800356e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003572:	ebb2 040a 	subs.w	r4, r2, sl
 8003576:	603c      	str	r4, [r7, #0]
 8003578:	eb63 030b 	sbc.w	r3, r3, fp
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003582:	4623      	mov	r3, r4
 8003584:	181b      	adds	r3, r3, r0
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	462b      	mov	r3, r5
 800358a:	eb41 0303 	adc.w	r3, r1, r3
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003596:	f7ff ff3f 	bl	8003418 <UTILS_NanosecondsToTimespec>

    return 0;
 800359a:	2300      	movs	r3, #0
 800359c:	4618      	mov	r0, r3
 800359e:	3738      	adds	r7, #56	; 0x38
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080035a8 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 80035b2:	4b25      	ldr	r3, [pc, #148]	; (8003648 <motorCommand_Init+0xa0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a25      	ldr	r2, [pc, #148]	; (800364c <motorCommand_Init+0xa4>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	0d9b      	lsrs	r3, r3, #22
 80035be:	3b01      	subs	r3, #1
 80035c0:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 80035c2:	4b23      	ldr	r3, [pc, #140]	; (8003650 <motorCommand_Init+0xa8>)
 80035c4:	4a23      	ldr	r2, [pc, #140]	; (8003654 <motorCommand_Init+0xac>)
 80035c6:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 80035c8:	4b21      	ldr	r3, [pc, #132]	; (8003650 <motorCommand_Init+0xa8>)
 80035ca:	22c7      	movs	r2, #199	; 0xc7
 80035cc:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 80035ce:	4a20      	ldr	r2, [pc, #128]	; (8003650 <motorCommand_Init+0xa8>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 80035d4:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <motorCommand_Init+0xa8>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <motorCommand_Init+0xa8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 80035e0:	481b      	ldr	r0, [pc, #108]	; (8003650 <motorCommand_Init+0xa8>)
 80035e2:	f005 fc51 	bl	8008e88 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <motorCommand_Init+0xb0>)
 80035e8:	2260      	movs	r2, #96	; 0x60
 80035ea:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <motorCommand_Init+0xb0>)
 80035ee:	2205      	movs	r2, #5
 80035f0:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035f2:	4b19      	ldr	r3, [pc, #100]	; (8003658 <motorCommand_Init+0xb0>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035f8:	4b17      	ldr	r3, [pc, #92]	; (8003658 <motorCommand_Init+0xb0>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 80035fe:	2200      	movs	r2, #0
 8003600:	4915      	ldr	r1, [pc, #84]	; (8003658 <motorCommand_Init+0xb0>)
 8003602:	4813      	ldr	r0, [pc, #76]	; (8003650 <motorCommand_Init+0xa8>)
 8003604:	f005 fff2 	bl	80095ec <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8003608:	2204      	movs	r2, #4
 800360a:	4913      	ldr	r1, [pc, #76]	; (8003658 <motorCommand_Init+0xb0>)
 800360c:	4810      	ldr	r0, [pc, #64]	; (8003650 <motorCommand_Init+0xa8>)
 800360e:	f005 ffed 	bl	80095ec <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <motorCommand_Init+0xa8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2264      	movs	r2, #100	; 0x64
 8003618:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 800361a:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <motorCommand_Init+0xa8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2264      	movs	r2, #100	; 0x64
 8003620:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8003622:	2100      	movs	r1, #0
 8003624:	480a      	ldr	r0, [pc, #40]	; (8003650 <motorCommand_Init+0xa8>)
 8003626:	f005 fceb 	bl	8009000 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 800362a:	2104      	movs	r1, #4
 800362c:	4808      	ldr	r0, [pc, #32]	; (8003650 <motorCommand_Init+0xa8>)
 800362e:	f005 fce7 	bl	8009000 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003638:	4808      	ldr	r0, [pc, #32]	; (800365c <motorCommand_Init+0xb4>)
 800363a:	f002 fab9 	bl	8005bb0 <HAL_GPIO_WritePin>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000010 	.word	0x20000010
 800364c:	6b5fca6b 	.word	0x6b5fca6b
 8003650:	20004e1c 	.word	0x20004e1c
 8003654:	40000400 	.word	0x40000400
 8003658:	20004e64 	.word	0x20004e64
 800365c:	40020000 	.word	0x40020000

08003660 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <motorLeft_SetDuty+0x1c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	20004e1c 	.word	0x20004e1c

08003680 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <motorRight_SetDuty+0x1c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	20004e1c 	.word	0x20004e1c

080036a0 <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 80036a6:	4b35      	ldr	r3, [pc, #212]	; (800377c <quadEncoder_Init+0xdc>)
 80036a8:	4a35      	ldr	r2, [pc, #212]	; (8003780 <quadEncoder_Init+0xe0>)
 80036aa:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 80036ac:	4b33      	ldr	r3, [pc, #204]	; (800377c <quadEncoder_Init+0xdc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b2:	4b32      	ldr	r3, [pc, #200]	; (800377c <quadEncoder_Init+0xdc>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 80036b8:	4b30      	ldr	r3, [pc, #192]	; (800377c <quadEncoder_Init+0xdc>)
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <quadEncoder_Init+0xdc>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036c6:	2303      	movs	r3, #3
 80036c8:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036ce:	2301      	movs	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80036d2:	2308      	movs	r3, #8
 80036d4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 80036d6:	230f      	movs	r3, #15
 80036d8:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 80036de:	2301      	movs	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80036e2:	2308      	movs	r3, #8
 80036e4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 80036e6:	230f      	movs	r3, #15
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4823      	ldr	r0, [pc, #140]	; (800377c <quadEncoder_Init+0xdc>)
 80036f0:	f005 fd36 	bl	8009160 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 80036f4:	4b21      	ldr	r3, [pc, #132]	; (800377c <quadEncoder_Init+0xdc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 80036fc:	2100      	movs	r1, #0
 80036fe:	481f      	ldr	r0, [pc, #124]	; (800377c <quadEncoder_Init+0xdc>)
 8003700:	f005 fdde 	bl	80092c0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003704:	2104      	movs	r1, #4
 8003706:	481d      	ldr	r0, [pc, #116]	; (800377c <quadEncoder_Init+0xdc>)
 8003708:	f005 fdda 	bl	80092c0 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <quadEncoder_Init+0xe4>)
 800370e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003712:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <quadEncoder_Init+0xe4>)
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371a:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <quadEncoder_Init+0xe4>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8003720:	4b18      	ldr	r3, [pc, #96]	; (8003784 <quadEncoder_Init+0xe4>)
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003728:	4b16      	ldr	r3, [pc, #88]	; (8003784 <quadEncoder_Init+0xe4>)
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800372e:	2303      	movs	r3, #3
 8003730:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003732:	2300      	movs	r3, #0
 8003734:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003736:	2301      	movs	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 800373a:	2308      	movs	r3, #8
 800373c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 800373e:	230f      	movs	r3, #15
 8003740:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003746:	2301      	movs	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 800374a:	2308      	movs	r3, #8
 800374c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 800374e:	230f      	movs	r3, #15
 8003750:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	4619      	mov	r1, r3
 8003756:	480b      	ldr	r0, [pc, #44]	; (8003784 <quadEncoder_Init+0xe4>)
 8003758:	f005 fd02 	bl	8009160 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <quadEncoder_Init+0xe4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2200      	movs	r2, #0
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003764:	2100      	movs	r1, #0
 8003766:	4807      	ldr	r0, [pc, #28]	; (8003784 <quadEncoder_Init+0xe4>)
 8003768:	f005 fdaa 	bl	80092c0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 800376c:	2104      	movs	r1, #4
 800376e:	4805      	ldr	r0, [pc, #20]	; (8003784 <quadEncoder_Init+0xe4>)
 8003770:	f005 fda6 	bl	80092c0 <HAL_TIM_Encoder_Start>
}
 8003774:	bf00      	nop
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20004e80 	.word	0x20004e80
 8003780:	40010000 	.word	0x40010000
 8003784:	20004ec8 	.word	0x20004ec8

08003788 <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8003794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f641 129b 	movw	r2, #6555	; 0x199b
 80037ac:	fb02 f303 	mul.w	r3, r2, r3
 80037b0:	4a06      	ldr	r2, [pc, #24]	; (80037cc <quadEncoder_PosCalcR+0x44>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	099b      	lsrs	r3, r3, #6
 80037b8:	461a      	mov	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 80037d4:	4824      	ldr	r0, [pc, #144]	; (8003868 <quadEncoder_GetSpeedR+0x98>)
 80037d6:	f7ff ffd7 	bl	8003788 <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 80037da:	4b23      	ldr	r3, [pc, #140]	; (8003868 <quadEncoder_GetSpeedR+0x98>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b29a      	uxth	r2, r3
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <quadEncoder_GetSpeedR+0x98>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b21a      	sxth	r2, r3
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 80037ee:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 80037f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	db10      	blt.n	800381c <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 80037fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003804:	db1a      	blt.n	800383c <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8003806:	4b19      	ldr	r3, [pc, #100]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 8003808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380c:	b29b      	uxth	r3, r3
 800380e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003812:	b29b      	uxth	r3, r3
 8003814:	b21a      	sxth	r2, r3
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	e00f      	b.n	800383c <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 800381e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003822:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003826:	da09      	bge.n	800383c <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8003828:	4b10      	ldr	r3, [pc, #64]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 800382a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003834:	b29b      	uxth	r3, r3
 8003836:	b21a      	sxth	r2, r3
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 800383a:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 800383e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003842:	461a      	mov	r2, r3
 8003844:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	4a08      	ldr	r2, [pc, #32]	; (8003870 <quadEncoder_GetSpeedR+0xa0>)
 800384e:	fb82 1203 	smull	r1, r2, r2, r3
 8003852:	1412      	asrs	r2, r2, #16
 8003854:	17db      	asrs	r3, r3, #31
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	b21a      	sxth	r2, r3
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 800385c:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 800385e:	4b03      	ldr	r3, [pc, #12]	; (800386c <quadEncoder_GetSpeedR+0x9c>)
 8003860:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20004f18 	.word	0x20004f18
 800386c:	20004f20 	.word	0x20004f20
 8003870:	66673335 	.word	0x66673335

08003874 <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <quadEncoder_CallbackIndexL+0x4c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b10      	cmp	r3, #16
 8003884:	d105      	bne.n	8003892 <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <quadEncoder_CallbackIndexL+0x50>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3b01      	subs	r3, #1
 800388c:	4a0d      	ldr	r2, [pc, #52]	; (80038c4 <quadEncoder_CallbackIndexL+0x50>)
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e004      	b.n	800389c <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <quadEncoder_CallbackIndexL+0x50>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <quadEncoder_CallbackIndexL+0x50>)
 800389a:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <quadEncoder_CallbackIndexL+0x4c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 80038a4:	2100      	movs	r1, #0
 80038a6:	4806      	ldr	r0, [pc, #24]	; (80038c0 <quadEncoder_CallbackIndexL+0x4c>)
 80038a8:	f005 fd0a 	bl	80092c0 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 80038ac:	2104      	movs	r1, #4
 80038ae:	4804      	ldr	r0, [pc, #16]	; (80038c0 <quadEncoder_CallbackIndexL+0x4c>)
 80038b0:	f005 fd06 	bl	80092c0 <HAL_TIM_Encoder_Start>

				Left_first_index_reached = 1;
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <quadEncoder_CallbackIndexL+0x54>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20004e80 	.word	0x20004e80
 80038c4:	20004f10 	.word	0x20004f10
 80038c8:	20004d78 	.word	0x20004d78

080038cc <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <quadEncoder_CallbackIndexR+0x4c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d105      	bne.n	80038ea <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <quadEncoder_CallbackIndexR+0x50>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	4a0d      	ldr	r2, [pc, #52]	; (800391c <quadEncoder_CallbackIndexR+0x50>)
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	e004      	b.n	80038f4 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <quadEncoder_CallbackIndexR+0x50>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3301      	adds	r3, #1
 80038f0:	4a0a      	ldr	r2, [pc, #40]	; (800391c <quadEncoder_CallbackIndexR+0x50>)
 80038f2:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <quadEncoder_CallbackIndexR+0x4c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2200      	movs	r2, #0
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 80038fc:	2100      	movs	r1, #0
 80038fe:	4806      	ldr	r0, [pc, #24]	; (8003918 <quadEncoder_CallbackIndexR+0x4c>)
 8003900:	f005 fcde 	bl	80092c0 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003904:	2104      	movs	r1, #4
 8003906:	4804      	ldr	r0, [pc, #16]	; (8003918 <quadEncoder_CallbackIndexR+0x4c>)
 8003908:	f005 fcda 	bl	80092c0 <HAL_TIM_Encoder_Start>

				Right_first_index_reached = 1;
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <quadEncoder_CallbackIndexR+0x54>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20004ec8 	.word	0x20004ec8
 800391c:	20004f14 	.word	0x20004f14
 8003920:	20004d7c 	.word	0x20004d7c

08003924 <HAL_MspInit>:
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);
void HAL_GPIO_MspInit(void);

void HAL_MspInit(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	4b33      	ldr	r3, [pc, #204]	; (80039fc <HAL_MspInit+0xd8>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	4a32      	ldr	r2, [pc, #200]	; (80039fc <HAL_MspInit+0xd8>)
 8003934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003938:	6453      	str	r3, [r2, #68]	; 0x44
 800393a:	4b30      	ldr	r3, [pc, #192]	; (80039fc <HAL_MspInit+0xd8>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <HAL_MspInit+0xd8>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <HAL_MspInit+0xd8>)
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003954:	6413      	str	r3, [r2, #64]	; 0x40
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <HAL_MspInit+0xd8>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_MspInit+0xd8>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a24      	ldr	r2, [pc, #144]	; (80039fc <HAL_MspInit+0xd8>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <HAL_MspInit+0xd8>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_MspInit+0xd8>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <HAL_MspInit+0xd8>)
 8003988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_MspInit+0xd8>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <HAL_MspInit+0xd8>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	4a16      	ldr	r2, [pc, #88]	; (80039fc <HAL_MspInit+0xd8>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6313      	str	r3, [r2, #48]	; 0x30
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <HAL_MspInit+0xd8>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_MspInit+0xd8>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <HAL_MspInit+0xd8>)
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <HAL_MspInit+0xd8>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	210f      	movs	r1, #15
 80039d6:	f06f 0001 	mvn.w	r0, #1
 80039da:	f001 fb2b 	bl	8005034 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 80039de:	f000 f8a3 	bl	8003b28 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 80039e2:	f000 f823 	bl	8003a2c <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 80039e6:	f000 f861 	bl	8003aac <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 80039ea:	f000 f8ff 	bl	8003bec <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 80039ee:	f000 f807 	bl	8003a00 <HAL_GPIO_MspInit>

}
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800

08003a00 <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a06:	2310      	movs	r3, #16
 8003a08:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // hal_gpio.h
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003a12:	2301      	movs	r3, #1
 8003a14:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4803      	ldr	r0, [pc, #12]	; (8003a28 <HAL_GPIO_MspInit+0x28>)
 8003a1c:	f001 ff44 	bl	80058a8 <HAL_GPIO_Init>

}
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40020400 	.word	0x40020400

08003a2c <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003a4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a52:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003a54:	2302      	movs	r3, #2
 8003a56:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8003a60:	2301      	movs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	1d3b      	adds	r3, r7, #4
 8003a66:	4619      	mov	r1, r3
 8003a68:	480e      	ldr	r0, [pc, #56]	; (8003aa4 <HAL_Encoder_Timer1_MspInit+0x78>)
 8003a6a:	f001 ff1d 	bl	80058a8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a72:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003a78:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	4619      	mov	r1, r3
 8003a82:	4809      	ldr	r0, [pc, #36]	; (8003aa8 <HAL_Encoder_Timer1_MspInit+0x7c>)
 8003a84:	f001 ff10 	bl	80058a8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2107      	movs	r1, #7
 8003a8c:	2028      	movs	r0, #40	; 0x28
 8003a8e:	f001 fad1 	bl	8005034 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a92:	2028      	movs	r0, #40	; 0x28
 8003a94:	f001 faea 	bl	800506c <HAL_NVIC_EnableIRQ>
}
 8003a98:	bf00      	nop
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020400 	.word	0x40020400

08003aac <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_Encoder_Timer2_MspInit+0x70>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_Encoder_Timer2_MspInit+0x70>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <HAL_Encoder_Timer2_MspInit+0x70>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003ada:	2301      	movs	r3, #1
 8003adc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 8003ade:	2301      	movs	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	480e      	ldr	r0, [pc, #56]	; (8003b20 <HAL_Encoder_Timer2_MspInit+0x74>)
 8003ae8:	f001 fede 	bl	80058a8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003aec:	2301      	movs	r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003af0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003af4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4809      	ldr	r0, [pc, #36]	; (8003b24 <HAL_Encoder_Timer2_MspInit+0x78>)
 8003b00:	f001 fed2 	bl	80058a8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8003b04:	2200      	movs	r2, #0
 8003b06:	2106      	movs	r1, #6
 8003b08:	2006      	movs	r0, #6
 8003b0a:	f001 fa93 	bl	8005034 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003b0e:	2006      	movs	r0, #6
 8003b10:	f001 faac 	bl	800506c <HAL_NVIC_EnableIRQ>
}
 8003b14:	bf00      	nop
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40020000 	.word	0x40020000
 8003b24:	40020800 	.word	0x40020800

08003b28 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <HAL_PWM_Timer3_MspInit+0xb4>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <HAL_PWM_Timer3_MspInit+0xb4>)
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_PWM_Timer3_MspInit+0xb4>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b4a:	2340      	movs	r3, #64	; 0x40
 8003b4c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b52:	2301      	movs	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003b56:	2301      	movs	r3, #1
 8003b58:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	4619      	mov	r1, r3
 8003b62:	481f      	ldr	r0, [pc, #124]	; (8003be0 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003b64:	f001 fea0 	bl	80058a8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b70:	2301      	movs	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003b74:	2301      	movs	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8003b78:	2302      	movs	r3, #2
 8003b7a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4818      	ldr	r0, [pc, #96]	; (8003be4 <HAL_PWM_Timer3_MspInit+0xbc>)
 8003b82:	f001 fe91 	bl	80058a8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pull = GPIO_NOPULL;

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);*/

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b86:	2308      	movs	r3, #8
 8003b88:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003b92:	2302      	movs	r3, #2
 8003b94:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4813      	ldr	r0, [pc, #76]	; (8003be8 <HAL_PWM_Timer3_MspInit+0xc0>)
 8003b9c:	f001 fe84 	bl	80058a8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	2108      	movs	r1, #8
 8003ba4:	4810      	ldr	r0, [pc, #64]	; (8003be8 <HAL_PWM_Timer3_MspInit+0xc0>)
 8003ba6:	f002 f803 	bl	8005bb0 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bae:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bbc:	1d3b      	adds	r3, r7, #4
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4807      	ldr	r0, [pc, #28]	; (8003be0 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003bc2:	f001 fe71 	bl	80058a8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bcc:	4804      	ldr	r0, [pc, #16]	; (8003be0 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003bce:	f001 ffef 	bl	8005bb0 <HAL_GPIO_WritePin>




}
 8003bd2:	bf00      	nop
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40020000 	.word	0x40020000
 8003be4:	40020800 	.word	0x40020800
 8003be8:	40020400 	.word	0x40020400

08003bec <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_adcir_MspInit+0x58>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <HAL_adcir_MspInit+0x58>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6453      	str	r3, [r2, #68]	; 0x44
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_adcir_MspInit+0x58>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8003c0e:	2310      	movs	r3, #16
 8003c10:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c12:	2303      	movs	r3, #3
 8003c14:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1a:	1d3b      	adds	r3, r7, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	480a      	ldr	r0, [pc, #40]	; (8003c48 <HAL_adcir_MspInit+0x5c>)
 8003c20:	f001 fe42 	bl	80058a8 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8003c24:	2301      	movs	r3, #1
 8003c26:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4805      	ldr	r0, [pc, #20]	; (8003c4c <HAL_adcir_MspInit+0x60>)
 8003c36:	f001 fe37 	bl	80058a8 <HAL_GPIO_Init>

}
 8003c3a:	bf00      	nop
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40020000 	.word	0x40020000
 8003c4c:	40020400 	.word	0x40020400

08003c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <HAL_I2C_MspInit+0xa4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d13c      	bne.n	8003cec <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <HAL_I2C_MspInit+0xa8>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <HAL_I2C_MspInit+0xa8>)
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6313      	str	r3, [r2, #48]	; 0x30
 8003c82:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <HAL_I2C_MspInit+0xa8>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c94:	2312      	movs	r3, #18
 8003c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4814      	ldr	r0, [pc, #80]	; (8003cfc <HAL_I2C_MspInit+0xac>)
 8003cac:	f001 fdfc 	bl	80058a8 <HAL_GPIO_Init>

    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <HAL_I2C_MspInit+0xa8>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	4a0f      	ldr	r2, [pc, #60]	; (8003cf8 <HAL_I2C_MspInit+0xa8>)
 8003cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_I2C_MspInit+0xa8>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2102      	movs	r1, #2
 8003cd0:	2020      	movs	r0, #32
 8003cd2:	f001 f9af 	bl	8005034 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003cd6:	2020      	movs	r0, #32
 8003cd8:	f001 f9c8 	bl	800506c <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	210b      	movs	r1, #11
 8003ce0:	201f      	movs	r0, #31
 8003ce2:	f001 f9a7 	bl	8005034 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003ce6:	201f      	movs	r0, #31
 8003ce8:	f001 f9c0 	bl	800506c <HAL_NVIC_EnableIRQ>
  }

}
 8003cec:	bf00      	nop
 8003cee:	3728      	adds	r7, #40	; 0x28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40005400 	.word	0x40005400
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40020400 	.word	0x40020400

08003d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	; 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	f107 031c 	add.w	r3, r7, #28
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4aa2      	ldr	r2, [pc, #648]	; (8003fa8 <HAL_UART_MspInit+0x2a8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f040 80a5 	bne.w	8003e6e <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	4ba0      	ldr	r3, [pc, #640]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	4a9f      	ldr	r2, [pc, #636]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003d2e:	f043 0310 	orr.w	r3, r3, #16
 8003d32:	6453      	str	r3, [r2, #68]	; 0x44
 8003d34:	4b9d      	ldr	r3, [pc, #628]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	4b99      	ldr	r3, [pc, #612]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	4a98      	ldr	r2, [pc, #608]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d50:	4b96      	ldr	r3, [pc, #600]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d6e:	2307      	movs	r3, #7
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	4619      	mov	r1, r3
 8003d78:	488d      	ldr	r0, [pc, #564]	; (8003fb0 <HAL_UART_MspInit+0x2b0>)
 8003d7a:	f001 fd95 	bl	80058a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d7e:	2340      	movs	r3, #64	; 0x40
 8003d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d8e:	2307      	movs	r3, #7
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d92:	f107 031c 	add.w	r3, r7, #28
 8003d96:	4619      	mov	r1, r3
 8003d98:	4886      	ldr	r0, [pc, #536]	; (8003fb4 <HAL_UART_MspInit+0x2b4>)
 8003d9a:	f001 fd85 	bl	80058a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003d9e:	4b86      	ldr	r3, [pc, #536]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003da0:	4a86      	ldr	r2, [pc, #536]	; (8003fbc <HAL_UART_MspInit+0x2bc>)
 8003da2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003da4:	4b84      	ldr	r3, [pc, #528]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003daa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dac:	4b82      	ldr	r3, [pc, #520]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003db2:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003db8:	4b7f      	ldr	r3, [pc, #508]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dc0:	4b7d      	ldr	r3, [pc, #500]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dc6:	4b7c      	ldr	r3, [pc, #496]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003dcc:	4b7a      	ldr	r3, [pc, #488]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003dd4:	4b78      	ldr	r3, [pc, #480]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003dd6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003dda:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ddc:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003de2:	4875      	ldr	r0, [pc, #468]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003de4:	f001 f950 	bl	8005088 <HAL_DMA_Init>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8003dee:	f7ff fa71 	bl	80032d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a70      	ldr	r2, [pc, #448]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
 8003df8:	4a6f      	ldr	r2, [pc, #444]	; (8003fb8 <HAL_UART_MspInit+0x2b8>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003dfe:	4b70      	ldr	r3, [pc, #448]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e00:	4a70      	ldr	r2, [pc, #448]	; (8003fc4 <HAL_UART_MspInit+0x2c4>)
 8003e02:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003e04:	4b6e      	ldr	r3, [pc, #440]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e0c:	4b6c      	ldr	r3, [pc, #432]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e0e:	2240      	movs	r2, #64	; 0x40
 8003e10:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e12:	4b6b      	ldr	r3, [pc, #428]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e18:	4b69      	ldr	r3, [pc, #420]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e20:	4b67      	ldr	r3, [pc, #412]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e26:	4b66      	ldr	r3, [pc, #408]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e2c:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e32:	4b63      	ldr	r3, [pc, #396]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e38:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e3a:	4b61      	ldr	r3, [pc, #388]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e40:	485f      	ldr	r0, [pc, #380]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e42:	f001 f921 	bl	8005088 <HAL_DMA_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8003e4c:	f7ff fa42 	bl	80032d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a5b      	ldr	r2, [pc, #364]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e54:	635a      	str	r2, [r3, #52]	; 0x34
 8003e56:	4a5a      	ldr	r2, [pc, #360]	; (8003fc0 <HAL_UART_MspInit+0x2c0>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2105      	movs	r1, #5
 8003e60:	2025      	movs	r0, #37	; 0x25
 8003e62:	f001 f8e7 	bl	8005034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e66:	2025      	movs	r0, #37	; 0x25
 8003e68:	f001 f900 	bl	800506c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e6c:	e098      	b.n	8003fa0 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a55      	ldr	r2, [pc, #340]	; (8003fc8 <HAL_UART_MspInit+0x2c8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	f040 8093 	bne.w	8003fa0 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a4a      	ldr	r2, [pc, #296]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b48      	ldr	r3, [pc, #288]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	4b44      	ldr	r3, [pc, #272]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	4a43      	ldr	r2, [pc, #268]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea6:	4b41      	ldr	r3, [pc, #260]	; (8003fac <HAL_UART_MspInit+0x2ac>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003eb2:	230c      	movs	r3, #12
 8003eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ec2:	2307      	movs	r3, #7
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec6:	f107 031c 	add.w	r3, r7, #28
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4838      	ldr	r0, [pc, #224]	; (8003fb0 <HAL_UART_MspInit+0x2b0>)
 8003ece:	f001 fceb 	bl	80058a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003ed2:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003ed4:	4a3e      	ldr	r2, [pc, #248]	; (8003fd0 <HAL_UART_MspInit+0x2d0>)
 8003ed6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003ed8:	4b3c      	ldr	r3, [pc, #240]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ede:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ee0:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee6:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003eec:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ef2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ef4:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003efa:	4b34      	ldr	r3, [pc, #208]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003f00:	4b32      	ldr	r3, [pc, #200]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f08:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003f0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003f0e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f10:	4b2e      	ldr	r3, [pc, #184]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f16:	482d      	ldr	r0, [pc, #180]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003f18:	f001 f8b6 	bl	8005088 <HAL_DMA_Init>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003f22:	f7ff f9d7 	bl	80032d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a28      	ldr	r2, [pc, #160]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <HAL_UART_MspInit+0x2cc>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003f32:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f34:	4a28      	ldr	r2, [pc, #160]	; (8003fd8 <HAL_UART_MspInit+0x2d8>)
 8003f36:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003f38:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f40:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f42:	2240      	movs	r2, #64	; 0x40
 8003f44:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f46:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f4c:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f52:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f54:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003f60:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f66:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003f6c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f6e:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f74:	4817      	ldr	r0, [pc, #92]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f76:	f001 f887 	bl	8005088 <HAL_DMA_Init>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8003f80:	f7ff f9a8 	bl	80032d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f88:	635a      	str	r2, [r3, #52]	; 0x34
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <HAL_UART_MspInit+0x2d4>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003f90:	2200      	movs	r2, #0
 8003f92:	2105      	movs	r1, #5
 8003f94:	2026      	movs	r0, #38	; 0x26
 8003f96:	f001 f84d 	bl	8005034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f9a:	2026      	movs	r0, #38	; 0x26
 8003f9c:	f001 f866 	bl	800506c <HAL_NVIC_EnableIRQ>
}
 8003fa0:	bf00      	nop
 8003fa2:	3730      	adds	r7, #48	; 0x30
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40011000 	.word	0x40011000
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	20004bd4 	.word	0x20004bd4
 8003fbc:	40026440 	.word	0x40026440
 8003fc0:	20004c34 	.word	0x20004c34
 8003fc4:	400264b8 	.word	0x400264b8
 8003fc8:	40004400 	.word	0x40004400
 8003fcc:	20004c94 	.word	0x20004c94
 8003fd0:	40026088 	.word	0x40026088
 8003fd4:	20004cf4 	.word	0x20004cf4
 8003fd8:	400260a0 	.word	0x400260a0

08003fdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	; 0x30
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003fec:	2300      	movs	r3, #0
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <HAL_InitTick+0xd4>)
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	4a2e      	ldr	r2, [pc, #184]	; (80040b0 <HAL_InitTick+0xd4>)
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <HAL_InitTick+0xd4>)
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004008:	f107 020c 	add.w	r2, r7, #12
 800400c:	f107 0310 	add.w	r3, r7, #16
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f004 ff06 	bl	8008e24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004018:	f004 fef0 	bl	8008dfc <HAL_RCC_GetPCLK2Freq>
 800401c:	4603      	mov	r3, r0
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <HAL_InitTick+0xd8>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0c9b      	lsrs	r3, r3, #18
 800402c:	3b01      	subs	r3, #1
 800402e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8004030:	4b21      	ldr	r3, [pc, #132]	; (80040b8 <HAL_InitTick+0xdc>)
 8004032:	4a22      	ldr	r2, [pc, #136]	; (80040bc <HAL_InitTick+0xe0>)
 8004034:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_InitTick+0xdc>)
 8004038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800403c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800403e:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <HAL_InitTick+0xdc>)
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004044:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <HAL_InitTick+0xdc>)
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404a:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_InitTick+0xdc>)
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_InitTick+0xdc>)
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8004056:	4818      	ldr	r0, [pc, #96]	; (80040b8 <HAL_InitTick+0xdc>)
 8004058:	f004 ff16 	bl	8008e88 <HAL_TIM_Base_Init>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11b      	bne.n	80040a2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800406a:	4813      	ldr	r0, [pc, #76]	; (80040b8 <HAL_InitTick+0xdc>)
 800406c:	f004 ff66 	bl	8008f3c <HAL_TIM_Base_Start_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800407a:	2b00      	cmp	r3, #0
 800407c:	d111      	bne.n	80040a2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800407e:	201e      	movs	r0, #30
 8004080:	f000 fff4 	bl	800506c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	d808      	bhi.n	800409c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800408a:	2200      	movs	r2, #0
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	201e      	movs	r0, #30
 8004090:	f000 ffd0 	bl	8005034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_InitTick+0xe4>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e002      	b.n	80040a2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80040a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3730      	adds	r7, #48	; 0x30
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	431bde83 	.word	0x431bde83
 80040b8:	20004f24 	.word	0x20004f24
 80040bc:	40000800 	.word	0x40000800
 80040c0:	20000028 	.word	0x20000028

080040c4 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  while (1)
 80040c8:	e7fe      	b.n	80040c8 <NMI_Handler+0x4>

080040ca <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0

  while (1)
 80040ce:	e7fe      	b.n	80040ce <HardFault_Handler+0x4>

080040d0 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  while (1)
 80040d4:	e7fe      	b.n	80040d4 <MemManage_Handler+0x4>

080040d6 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  while (1)
 80040da:	e7fe      	b.n	80040da <BusFault_Handler+0x4>

080040dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  while (1)
 80040e0:	e7fe      	b.n	80040e0 <UsageFault_Handler+0x4>

080040e2 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <DMA1_Stream5_IRQHandler+0x10>)
 80040f6:	f001 f95f 	bl	80053b8 <HAL_DMA_IRQHandler>
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20004c94 	.word	0x20004c94

08004104 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004108:	4802      	ldr	r0, [pc, #8]	; (8004114 <DMA1_Stream6_IRQHandler+0x10>)
 800410a:	f001 f955 	bl	80053b8 <HAL_DMA_IRQHandler>
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20004cf4 	.word	0x20004cf4

08004118 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <TIM4_IRQHandler+0x10>)
 800411e:	f005 f95d 	bl	80093dc <HAL_TIM_IRQHandler>
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20004f24 	.word	0x20004f24

0800412c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <USART1_IRQHandler+0x10>)
 8004132:	f005 ff97 	bl	800a064 <HAL_UART_IRQHandler>
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20004b4c 	.word	0x20004b4c

08004140 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <USART2_IRQHandler+0x10>)
 8004146:	f005 ff8d 	bl	800a064 <HAL_UART_IRQHandler>
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20004b90 	.word	0x20004b90

08004154 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004158:	4802      	ldr	r0, [pc, #8]	; (8004164 <DMA2_Stream2_IRQHandler+0x10>)
 800415a:	f001 f92d 	bl	80053b8 <HAL_DMA_IRQHandler>
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20004bd4 	.word	0x20004bd4

08004168 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800416c:	4802      	ldr	r0, [pc, #8]	; (8004178 <DMA2_Stream7_IRQHandler+0x10>)
 800416e:	f001 f923 	bl	80053b8 <HAL_DMA_IRQHandler>
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20004c34 	.word	0x20004c34

0800417c <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004180:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004184:	f001 fd2e 	bl	8005be4 <HAL_GPIO_EXTI_IRQHandler>
}
 8004188:	bf00      	nop
 800418a:	bd80      	pop	{r7, pc}

0800418c <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004190:	2001      	movs	r0, #1
 8004192:	f001 fd27 	bl	8005be4 <HAL_GPIO_EXTI_IRQHandler>
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80041a0:	4802      	ldr	r0, [pc, #8]	; (80041ac <I2C1_EV_IRQHandler+0x10>)
 80041a2:	f002 f99f 	bl	80064e4 <HAL_I2C_EV_IRQHandler>
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20004af8 	.word	0x20004af8

080041b0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 80041b4:	4802      	ldr	r0, [pc, #8]	; (80041c0 <I2C1_ER_IRQHandler+0x10>)
 80041b6:	f002 fb06 	bl	80067c6 <HAL_I2C_ER_IRQHandler>
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20004af8 	.word	0x20004af8

080041c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
	return 1;
 80041c8:	2301      	movs	r3, #1
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <_kill>:

int _kill(int pid, int sig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041de:	f015 faed 	bl	80197bc <__errno>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2216      	movs	r2, #22
 80041e6:	601a      	str	r2, [r3, #0]
	return -1;
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <_exit>:

void _exit (int status)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ffe7 	bl	80041d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004206:	e7fe      	b.n	8004206 <_exit+0x12>

08004208 <_read>:
}

//__attribute__((weak)) int _read(int file, char *ptr, int len)
int _read(int file, char *ptr, int len)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e00a      	b.n	8004230 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800421a:	f3af 8000 	nop.w
 800421e:	4601      	mov	r1, r0
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	60ba      	str	r2, [r7, #8]
 8004226:	b2ca      	uxtb	r2, r1
 8004228:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3301      	adds	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	dbf0      	blt.n	800421a <_read+0x12>
	}

return len;
 8004238:	687b      	ldr	r3, [r7, #4]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_write>:

//__attribute__((weak)) int _write(int file, char *ptr, int len)
int _write(int file, char *ptr, int len)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b086      	sub	sp, #24
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e009      	b.n	8004268 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	60ba      	str	r2, [r7, #8]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fd ffdb 	bl	8002218 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	3301      	adds	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	dbf1      	blt.n	8004254 <_write+0x12>
	}
	return len;
 8004270:	687b      	ldr	r3, [r7, #4]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <_close>:

int _close(int file)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
	return -1;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042a2:	605a      	str	r2, [r3, #4]
	return 0;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <_isatty>:

int _isatty(int file)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
	return 1;
 80042ba:	2301      	movs	r3, #1
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
	return 0;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <_sbrk+0x5c>)
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <_sbrk+0x60>)
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <_sbrk+0x64>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <_sbrk+0x64>)
 8004302:	4a12      	ldr	r2, [pc, #72]	; (800434c <_sbrk+0x68>)
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <_sbrk+0x64>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	429a      	cmp	r2, r3
 8004312:	d207      	bcs.n	8004324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004314:	f015 fa52 	bl	80197bc <__errno>
 8004318:	4603      	mov	r3, r0
 800431a:	220c      	movs	r2, #12
 800431c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004322:	e009      	b.n	8004338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004324:	4b08      	ldr	r3, [pc, #32]	; (8004348 <_sbrk+0x64>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <_sbrk+0x64>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	4a05      	ldr	r2, [pc, #20]	; (8004348 <_sbrk+0x64>)
 8004334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004336:	68fb      	ldr	r3, [r7, #12]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20020000 	.word	0x20020000
 8004344:	00000400 	.word	0x00000400
 8004348:	20004f70 	.word	0x20004f70
 800434c:	2000e958 	.word	0x2000e958

08004350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <SystemInit+0x20>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <SystemInit+0x20>)
 800435c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000ed00 	.word	0xe000ed00

08004374 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b094      	sub	sp, #80	; 0x50
 8004378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800437a:	f107 0320 	add.w	r3, r7, #32
 800437e:	2230      	movs	r2, #48	; 0x30
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f015 fbbe 	bl	8019b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004388:	f107 030c 	add.w	r3, r7, #12
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	4b28      	ldr	r3, [pc, #160]	; (8004440 <SystemClock_Config+0xcc>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	4a27      	ldr	r2, [pc, #156]	; (8004440 <SystemClock_Config+0xcc>)
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6413      	str	r3, [r2, #64]	; 0x40
 80043a8:	4b25      	ldr	r3, [pc, #148]	; (8004440 <SystemClock_Config+0xcc>)
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b4:	2300      	movs	r3, #0
 80043b6:	607b      	str	r3, [r7, #4]
 80043b8:	4b22      	ldr	r3, [pc, #136]	; (8004444 <SystemClock_Config+0xd0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a21      	ldr	r2, [pc, #132]	; (8004444 <SystemClock_Config+0xd0>)
 80043be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <SystemClock_Config+0xd0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043d0:	2301      	movs	r3, #1
 80043d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80043d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043da:	2302      	movs	r3, #2
 80043dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80043e4:	2308      	movs	r3, #8
 80043e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80043e8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80043ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80043ee:	2306      	movs	r3, #6
 80043f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80043f2:	2304      	movs	r3, #4
 80043f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043f6:	f107 0320 	add.w	r3, r7, #32
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 f87a 	bl	80084f4 <HAL_RCC_OscConfig>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004406:	f7fe ff65 	bl	80032d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800440a:	230f      	movs	r3, #15
 800440c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800440e:	2302      	movs	r3, #2
 8004410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004416:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800441a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800441c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004420:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004422:	f107 030c 	add.w	r3, r7, #12
 8004426:	2102      	movs	r1, #2
 8004428:	4618      	mov	r0, r3
 800442a:	f004 fadb 	bl	80089e4 <HAL_RCC_ClockConfig>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004434:	f7fe ff4e 	bl	80032d4 <Error_Handler>
  }
}
 8004438:	bf00      	nop
 800443a:	3750      	adds	r7, #80	; 0x50
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	40007000 	.word	0x40007000

08004448 <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	fb01 f202 	mul.w	r2, r1, r2
 8004468:	1a9a      	subs	r2, r3, r2
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1c59      	adds	r1, r3, #1
 800446e:	60f9      	str	r1, [r7, #12]
 8004470:	4936      	ldr	r1, [pc, #216]	; (800454c <num2str+0x104>)
 8004472:	5c8a      	ldrb	r2, [r1, r2]
 8004474:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e9      	bne.n	800445a <num2str+0x12>
        *s='\0';
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	e01a      	b.n	80044d0 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	4413      	add	r3, r2
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	441a      	add	r2, r3
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	440b      	add	r3, r1
 80044b6:	7812      	ldrb	r2, [r2, #0]
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4413      	add	r3, r2
 80044c6:	7efa      	ldrb	r2, [r7, #27]
 80044c8:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d3df      	bcc.n	800449a <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d22d      	bcs.n	800453e <num2str+0xf6>
                for (i=cnt;i==0;i--)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	e00e      	b.n	8004506 <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	441a      	add	r2, r3
 80044ee:	69f9      	ldr	r1, [r7, #28]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4419      	add	r1, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1acb      	subs	r3, r1, r3
 80044f8:	6979      	ldr	r1, [r7, #20]
 80044fa:	440b      	add	r3, r1
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	3b01      	subs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0ed      	beq.n	80044e8 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <num2str+0xd0>
 8004512:	2320      	movs	r3, #32
 8004514:	76fb      	strb	r3, [r7, #27]
 8004516:	e001      	b.n	800451c <num2str+0xd4>
 8004518:	2330      	movs	r3, #48	; 0x30
 800451a:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	e007      	b.n	8004532 <num2str+0xea>
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	7efa      	ldrb	r2, [r7, #27]
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	3301      	adds	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	429a      	cmp	r2, r3
 800453c:	d3f1      	bcc.n	8004522 <num2str+0xda>
        }
}
 800453e:	bf00      	nop
 8004540:	3724      	adds	r7, #36	; 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000014 	.word	0x20000014

08004550 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004568:	e02e      	b.n	80045c8 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b2f      	cmp	r3, #47	; 0x2f
 800456e:	d906      	bls.n	800457e <str2num+0x2e>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b39      	cmp	r3, #57	; 0x39
 8004574:	d803      	bhi.n	800457e <str2num+0x2e>
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	3b30      	subs	r3, #48	; 0x30
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	e018      	b.n	80045b0 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b10      	cmp	r3, #16
 8004582:	d109      	bne.n	8004598 <str2num+0x48>
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d906      	bls.n	8004598 <str2num+0x48>
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b46      	cmp	r3, #70	; 0x46
 800458e:	d803      	bhi.n	8004598 <str2num+0x48>
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	3b37      	subs	r3, #55	; 0x37
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	e00b      	b.n	80045b0 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b10      	cmp	r3, #16
 800459c:	d117      	bne.n	80045ce <str2num+0x7e>
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b60      	cmp	r3, #96	; 0x60
 80045a2:	d914      	bls.n	80045ce <str2num+0x7e>
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b66      	cmp	r3, #102	; 0x66
 80045a8:	d811      	bhi.n	80045ce <str2num+0x7e>
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	3b57      	subs	r3, #87	; 0x57
 80045ae:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	fb02 f303 	mul.w	r3, r2, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4413      	add	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
		ch=*s++;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1cd      	bne.n	800456a <str2num+0x1a>
	}
	return u;
 80045ce:	697b      	ldr	r3, [r7, #20]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]
    while (i<j)
 80045f0:	e018      	b.n	8004624 <reverse+0x48>
    {
        temp = str[i];
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	441a      	add	r2, r3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	440b      	add	r3, r1
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	3301      	adds	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3b01      	subs	r3, #1
 8004622:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	429a      	cmp	r2, r3
 800462a:	dbe2      	blt.n	80045f2 <reverse+0x16>
    }
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
    int i = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
    while (x)
 800464c:	e01d      	b.n	800468a <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <intToStr+0x8c>)
 8004652:	fb83 1302 	smull	r1, r3, r3, r2
 8004656:	1099      	asrs	r1, r3, #2
 8004658:	17d3      	asrs	r3, r2, #31
 800465a:	1ac9      	subs	r1, r1, r3
 800465c:	460b      	mov	r3, r1
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	1ad1      	subs	r1, r2, r3
 8004666:	b2ca      	uxtb	r2, r1
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	1c59      	adds	r1, r3, #1
 800466c:	6179      	str	r1, [r7, #20]
 800466e:	4619      	mov	r1, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	440b      	add	r3, r1
 8004674:	3230      	adds	r2, #48	; 0x30
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
        x = x/10;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a12      	ldr	r2, [pc, #72]	; (80046c8 <intToStr+0x8c>)
 800467e:	fb82 1203 	smull	r1, r2, r2, r3
 8004682:	1092      	asrs	r2, r2, #2
 8004684:	17db      	asrs	r3, r3, #31
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	60fb      	str	r3, [r7, #12]
    while (x)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1de      	bne.n	800464e <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8004690:	e007      	b.n	80046a2 <intToStr+0x66>
        str[i++] = '0';
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	617a      	str	r2, [r7, #20]
 8004698:	461a      	mov	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4413      	add	r3, r2
 800469e:	2230      	movs	r2, #48	; 0x30
 80046a0:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	dbf3      	blt.n	8004692 <intToStr+0x56>

    reverse(str, i);
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	68b8      	ldr	r0, [r7, #8]
 80046ae:	f7ff ff95 	bl	80045dc <reverse>
    str[i] = '\0';
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	4413      	add	r3, r2
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
    return i;
 80046bc:	697b      	ldr	r3, [r7, #20]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	66666667 	.word	0x66666667
 80046cc:	00000000 	.word	0x00000000

080046d0 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80046dc:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80046de:	edd7 7a02 	vldr	s15, [r7, #8]
 80046e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e6:	ee17 3a90 	vmov	r3, s15
 80046ea:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80046fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046fe:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8004702:	2200      	movs	r2, #0
 8004704:	68f9      	ldr	r1, [r7, #12]
 8004706:	69f8      	ldr	r0, [r7, #28]
 8004708:	f7ff ff98 	bl	800463c <intToStr>
 800470c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d025      	beq.n	8004760 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	222e      	movs	r2, #46	; 0x2e
 800471c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004768 <float2str+0x98>
 8004724:	f000 f824 	bl	8004770 <myPow>
 8004728:	ec53 2b10 	vmov	r2, r3, d0
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	f7fc fa72 	bl	8000c18 <__aeabi_d2f>
 8004734:	ee07 0a10 	vmov	s14, r0
 8004738:	edd7 7a06 	vldr	s15, [r7, #24]
 800473c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004740:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8004744:	edd7 7a06 	vldr	s15, [r7, #24]
 8004748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3301      	adds	r3, #1
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4619      	mov	r1, r3
 8004758:	ee17 0a90 	vmov	r0, s15
 800475c:	f7ff ff6e 	bl	800463c <intToStr>
    }
}
 8004760:	bf00      	nop
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	00000000 	.word	0x00000000
 800476c:	40240000 	.word	0x40240000

08004770 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	ed87 0b02 	vstr	d0, [r7, #8]
 800477a:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfb8      	it	lt
 8004782:	425b      	neglt	r3, r3
 8004784:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <myPow+0x90>)
 800478c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8004790:	e01b      	b.n	80047ca <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <myPow+0x40>
        {
            result = result * x;
 800479c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047a4:	f7fb ff40 	bl	8000628 <__aeabi_dmul>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	61fb      	str	r3, [r7, #28]
        x = x * x;
 80047b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047be:	f7fb ff33 	bl	8000628 <__aeabi_dmul>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e0      	bne.n	8004792 <myPow+0x22>
    }

    if(n < 0)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da09      	bge.n	80047ea <myPow+0x7a>
    {
        return 1/result;
 80047d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047da:	f04f 0000 	mov.w	r0, #0
 80047de:	4908      	ldr	r1, [pc, #32]	; (8004800 <myPow+0x90>)
 80047e0:	f7fc f84c 	bl	800087c <__aeabi_ddiv>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	e001      	b.n	80047ee <myPow+0x7e>
    }
    return result;
 80047ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80047ee:	ec43 2b17 	vmov	d7, r2, r3
 80047f2:	eeb0 0a47 	vmov.f32	s0, s14
 80047f6:	eef0 0a67 	vmov.f32	s1, s15
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	3ff00000 	.word	0x3ff00000

08004804 <Reset_Handler>:
 8004804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800483c <LoopFillZerobss+0x12>
 8004808:	480d      	ldr	r0, [pc, #52]	; (8004840 <LoopFillZerobss+0x16>)
 800480a:	490e      	ldr	r1, [pc, #56]	; (8004844 <LoopFillZerobss+0x1a>)
 800480c:	4a0e      	ldr	r2, [pc, #56]	; (8004848 <LoopFillZerobss+0x1e>)
 800480e:	2300      	movs	r3, #0
 8004810:	e002      	b.n	8004818 <LoopCopyDataInit>

08004812 <CopyDataInit>:
 8004812:	58d4      	ldr	r4, [r2, r3]
 8004814:	50c4      	str	r4, [r0, r3]
 8004816:	3304      	adds	r3, #4

08004818 <LoopCopyDataInit>:
 8004818:	18c4      	adds	r4, r0, r3
 800481a:	428c      	cmp	r4, r1
 800481c:	d3f9      	bcc.n	8004812 <CopyDataInit>
 800481e:	4a0b      	ldr	r2, [pc, #44]	; (800484c <LoopFillZerobss+0x22>)
 8004820:	4c0b      	ldr	r4, [pc, #44]	; (8004850 <LoopFillZerobss+0x26>)
 8004822:	2300      	movs	r3, #0
 8004824:	e001      	b.n	800482a <LoopFillZerobss>

08004826 <FillZerobss>:
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	3204      	adds	r2, #4

0800482a <LoopFillZerobss>:
 800482a:	42a2      	cmp	r2, r4
 800482c:	d3fb      	bcc.n	8004826 <FillZerobss>
 800482e:	f7ff fd8f 	bl	8004350 <SystemInit>
 8004832:	f015 f907 	bl	8019a44 <__libc_init_array>
 8004836:	f7fe fa89 	bl	8002d4c <main>
 800483a:	4770      	bx	lr
 800483c:	20020000 	.word	0x20020000
 8004840:	20000000 	.word	0x20000000
 8004844:	20000260 	.word	0x20000260
 8004848:	0801f8a0 	.word	0x0801f8a0
 800484c:	20000260 	.word	0x20000260
 8004850:	2000e958 	.word	0x2000e958

08004854 <ADC_IRQHandler>:
 8004854:	e7fe      	b.n	8004854 <ADC_IRQHandler>
	...

08004858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <HAL_Init+0x40>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <HAL_Init+0x40>)
 8004862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_Init+0x40>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <HAL_Init+0x40>)
 800486e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004874:	4b08      	ldr	r3, [pc, #32]	; (8004898 <HAL_Init+0x40>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a07      	ldr	r2, [pc, #28]	; (8004898 <HAL_Init+0x40>)
 800487a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004880:	2003      	movs	r0, #3
 8004882:	f000 fbcc 	bl	800501e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004886:	200f      	movs	r0, #15
 8004888:	f7ff fba8 	bl	8003fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800488c:	f7ff f84a 	bl	8003924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40023c00 	.word	0x40023c00

0800489c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_IncTick+0x20>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_IncTick+0x24>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4413      	add	r3, r2
 80048ac:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <HAL_IncTick+0x24>)
 80048ae:	6013      	str	r3, [r2, #0]
}
 80048b0:	bf00      	nop
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	2000002c 	.word	0x2000002c
 80048c0:	20004f74 	.word	0x20004f74

080048c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return uwTick;
 80048c8:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <HAL_GetTick+0x14>)
 80048ca:	681b      	ldr	r3, [r3, #0]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20004f74 	.word	0x20004f74

080048dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048e4:	f7ff ffee 	bl	80048c4 <HAL_GetTick>
 80048e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f4:	d005      	beq.n	8004902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048f6:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <HAL_Delay+0x44>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004902:	bf00      	nop
 8004904:	f7ff ffde 	bl	80048c4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	429a      	cmp	r2, r3
 8004912:	d8f7      	bhi.n	8004904 <HAL_Delay+0x28>
  {
  }
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	2000002c 	.word	0x2000002c

08004924 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e01b      	b.n	800496e <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f817 	bl	8004976 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f9d7 	bl	8004d04 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_ADC_Start+0x1a>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e053      	b.n	8004a4e <HAL_ADC_Start+0xc2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b22      	cmp	r3, #34	; 0x22
 80049b8:	d104      	bne.n	80049c4 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2232      	movs	r2, #50	; 0x32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049c2:	e003      	b.n	80049cc <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2212      	movs	r2, #18
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d010      	beq.n	80049fc <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 80049ea:	e003      	b.n	80049f4 <HAL_ADC_Start+0x68>
    {
      __NOP();
 80049ec:	bf00      	nop
    for(; i <= 540; i++)
 80049ee:	89fb      	ldrh	r3, [r7, #14]
 80049f0:	3301      	adds	r3, #1
 80049f2:	81fb      	strh	r3, [r7, #14]
 80049f4:	89fb      	ldrh	r3, [r7, #14]
 80049f6:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 80049fa:	d9f7      	bls.n	80049ec <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80049fc:	4b17      	ldr	r3, [pc, #92]	; (8004a5c <HAL_ADC_Start+0xd0>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10c      	bne.n	8004a22 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d119      	bne.n	8004a44 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	e010      	b.n	8004a44 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <HAL_ADC_Start+0xd4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10b      	bne.n	8004a44 <HAL_ADC_Start+0xb8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d107      	bne.n	8004a44 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a42:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40012300 	.word	0x40012300
 8004a60:	40012000 	.word	0x40012000

08004a64 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004a72:	f7ff ff27 	bl	80048c4 <HAL_GetTick>
 8004a76:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a78:	e018      	b.n	8004aac <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a80:	d014      	beq.n	8004aac <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_ADC_PollForConversion+0x34>
 8004a88:	f7ff ff1c 	bl	80048c4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d209      	bcs.n	8004aac <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e016      	b.n	8004ada <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d1df      	bne.n	8004a7a <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b25      	cmp	r3, #37	; 0x25
 8004ac4:	d104      	bne.n	8004ad0 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2235      	movs	r2, #53	; 0x35
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ace:	e003      	b.n	8004ad8 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2215      	movs	r2, #21
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x18>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e0ed      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x1f4>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b09      	cmp	r3, #9
 8004b22:	d925      	bls.n	8004b70 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68d9      	ldr	r1, [r3, #12]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	3b1e      	subs	r3, #30
 8004b3a:	2207      	movs	r2, #7
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43da      	mvns	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	400a      	ands	r2, r1
 8004b48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68d9      	ldr	r1, [r3, #12]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4403      	add	r3, r0
 8004b62:	3b1e      	subs	r3, #30
 8004b64:	409a      	lsls	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	e022      	b.n	8004bb6 <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6919      	ldr	r1, [r3, #16]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4613      	mov	r3, r2
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	4413      	add	r3, r2
 8004b84:	2207      	movs	r2, #7
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43da      	mvns	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	400a      	ands	r2, r1
 8004b92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6919      	ldr	r1, [r3, #16]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	4403      	add	r3, r0
 8004bac:	409a      	lsls	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b06      	cmp	r3, #6
 8004bbc:	d824      	bhi.n	8004c08 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	3b05      	subs	r3, #5
 8004bd0:	221f      	movs	r2, #31
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	400a      	ands	r2, r1
 8004bde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	4618      	mov	r0, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3b05      	subs	r3, #5
 8004bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	635a      	str	r2, [r3, #52]	; 0x34
 8004c06:	e04c      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	d824      	bhi.n	8004c5a <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	3b23      	subs	r3, #35	; 0x23
 8004c22:	221f      	movs	r2, #31
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	400a      	ands	r2, r1
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4618      	mov	r0, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	3b23      	subs	r3, #35	; 0x23
 8004c4c:	fa00 f203 	lsl.w	r2, r0, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
 8004c58:	e023      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	3b41      	subs	r3, #65	; 0x41
 8004c6c:	221f      	movs	r2, #31
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43da      	mvns	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	400a      	ands	r2, r1
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	4618      	mov	r0, r3
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	3b41      	subs	r3, #65	; 0x41
 8004c96:	fa00 f203 	lsl.w	r2, r0, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <HAL_ADC_ConfigChannel+0x200>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d109      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x1c4>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b12      	cmp	r3, #18
 8004cb2:	d105      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <HAL_ADC_ConfigChannel+0x204>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <HAL_ADC_ConfigChannel+0x204>)
 8004cba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cbe:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <HAL_ADC_ConfigChannel+0x200>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d10d      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x1ea>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d003      	beq.n	8004cda <HAL_ADC_ConfigChannel+0x1de>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b11      	cmp	r3, #17
 8004cd8:	d105      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <HAL_ADC_ConfigChannel+0x204>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <HAL_ADC_ConfigChannel+0x204>)
 8004ce0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ce4:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	40012000 	.word	0x40012000
 8004d00:	40012300 	.word	0x40012300

08004d04 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004d0c:	4b6c      	ldr	r3, [pc, #432]	; (8004ec0 <ADC_Init+0x1bc>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a6b      	ldr	r2, [pc, #428]	; (8004ec0 <ADC_Init+0x1bc>)
 8004d12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d16:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004d18:	4b69      	ldr	r3, [pc, #420]	; (8004ec0 <ADC_Init+0x1bc>)
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4967      	ldr	r1, [pc, #412]	; (8004ec0 <ADC_Init+0x1bc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	021a      	lsls	r2, r3, #8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6899      	ldr	r1, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6899      	ldr	r1, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0202 	bic.w	r2, r2, #2
 8004de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6899      	ldr	r1, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	005a      	lsls	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01b      	beq.n	8004e36 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e0c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e1c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	035a      	lsls	r2, r3, #13
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	e007      	b.n	8004e46 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e44:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	051a      	lsls	r2, r3, #20
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6899      	ldr	r1, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	025a      	lsls	r2, r3, #9
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6899      	ldr	r1, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	029a      	lsls	r2, r3, #10
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40012300 	.word	0x40012300

08004ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <__NVIC_SetPriorityGrouping+0x44>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ef6:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <__NVIC_SetPriorityGrouping+0x44>)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	60d3      	str	r3, [r2, #12]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	e000ed00 	.word	0xe000ed00

08004f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <__NVIC_GetPriorityGrouping+0x18>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	f003 0307 	and.w	r3, r3, #7
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	db0b      	blt.n	8004f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	f003 021f 	and.w	r2, r3, #31
 8004f40:	4907      	ldr	r1, [pc, #28]	; (8004f60 <__NVIC_EnableIRQ+0x38>)
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2001      	movs	r0, #1
 8004f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000e100 	.word	0xe000e100

08004f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	db0a      	blt.n	8004f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	490c      	ldr	r1, [pc, #48]	; (8004fb0 <__NVIC_SetPriority+0x4c>)
 8004f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f82:	0112      	lsls	r2, r2, #4
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	440b      	add	r3, r1
 8004f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f8c:	e00a      	b.n	8004fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	4908      	ldr	r1, [pc, #32]	; (8004fb4 <__NVIC_SetPriority+0x50>)
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	3b04      	subs	r3, #4
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	761a      	strb	r2, [r3, #24]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	e000e100 	.word	0xe000e100
 8004fb4:	e000ed00 	.word	0xe000ed00

08004fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b089      	sub	sp, #36	; 0x24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f1c3 0307 	rsb	r3, r3, #7
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf28      	it	cs
 8004fd6:	2304      	movcs	r3, #4
 8004fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d902      	bls.n	8004fe8 <NVIC_EncodePriority+0x30>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3b03      	subs	r3, #3
 8004fe6:	e000      	b.n	8004fea <NVIC_EncodePriority+0x32>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005000:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	43d9      	mvns	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005010:	4313      	orrs	r3, r2
         );
}
 8005012:	4618      	mov	r0, r3
 8005014:	3724      	adds	r7, #36	; 0x24
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff ff4c 	bl	8004ec4 <__NVIC_SetPriorityGrouping>
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005046:	f7ff ff61 	bl	8004f0c <__NVIC_GetPriorityGrouping>
 800504a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	6978      	ldr	r0, [r7, #20]
 8005052:	f7ff ffb1 	bl	8004fb8 <NVIC_EncodePriority>
 8005056:	4602      	mov	r2, r0
 8005058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff ff80 	bl	8004f64 <__NVIC_SetPriority>
}
 8005064:	bf00      	nop
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ff54 	bl	8004f28 <__NVIC_EnableIRQ>
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005094:	f7ff fc16 	bl	80048c4 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e099      	b.n	80051d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050c4:	e00f      	b.n	80050e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050c6:	f7ff fbfd 	bl	80048c4 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d908      	bls.n	80050e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2203      	movs	r2, #3
 80050de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e078      	b.n	80051d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e8      	bne.n	80050c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4b38      	ldr	r3, [pc, #224]	; (80051e0 <HAL_DMA_Init+0x158>)
 8005100:	4013      	ands	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005112:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800511e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800512a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	2b04      	cmp	r3, #4
 800513e:	d107      	bne.n	8005150 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	4313      	orrs	r3, r2
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0307 	bic.w	r3, r3, #7
 8005166:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	2b04      	cmp	r3, #4
 8005178:	d117      	bne.n	80051aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00e      	beq.n	80051aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fb0f 	bl	80057b0 <DMA_CheckFifoParam>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2240      	movs	r2, #64	; 0x40
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051a6:	2301      	movs	r3, #1
 80051a8:	e016      	b.n	80051d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fac6 	bl	8005744 <DMA_CalcBaseAndBitshift>
 80051b8:	4603      	mov	r3, r0
 80051ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	223f      	movs	r2, #63	; 0x3f
 80051c2:	409a      	lsls	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	f010803f 	.word	0xf010803f

080051e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_DMA_Start_IT+0x26>
 8005206:	2302      	movs	r3, #2
 8005208:	e040      	b.n	800528c <HAL_DMA_Start_IT+0xa8>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	d12f      	bne.n	800527e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2202      	movs	r2, #2
 8005222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fa58 	bl	80056e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523c:	223f      	movs	r2, #63	; 0x3f
 800523e:	409a      	lsls	r2, r3
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0216 	orr.w	r2, r2, #22
 8005252:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0208 	orr.w	r2, r2, #8
 800526a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	e005      	b.n	800528a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005286:	2302      	movs	r3, #2
 8005288:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800528a:	7dfb      	ldrb	r3, [r7, #23]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052a2:	f7ff fb0f 	bl	80048c4 <HAL_GetTick>
 80052a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d008      	beq.n	80052c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e052      	b.n	800536c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0216 	bic.w	r2, r2, #22
 80052d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <HAL_DMA_Abort+0x62>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0208 	bic.w	r2, r2, #8
 8005304:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0201 	bic.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005316:	e013      	b.n	8005340 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005318:	f7ff fad4 	bl	80048c4 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b05      	cmp	r3, #5
 8005324:	d90c      	bls.n	8005340 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2203      	movs	r2, #3
 8005330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e015      	b.n	800536c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e4      	bne.n	8005318 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005352:	223f      	movs	r2, #63	; 0x3f
 8005354:	409a      	lsls	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d004      	beq.n	8005392 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2280      	movs	r2, #128	; 0x80
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e00c      	b.n	80053ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2205      	movs	r2, #5
 8005396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053c4:	4b8e      	ldr	r3, [pc, #568]	; (8005600 <HAL_DMA_IRQHandler+0x248>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a8e      	ldr	r2, [pc, #568]	; (8005604 <HAL_DMA_IRQHandler+0x24c>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	0a9b      	lsrs	r3, r3, #10
 80053d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	2208      	movs	r2, #8
 80053e4:	409a      	lsls	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01a      	beq.n	8005424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d013      	beq.n	8005424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0204 	bic.w	r2, r2, #4
 800540a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005410:	2208      	movs	r2, #8
 8005412:	409a      	lsls	r2, r3
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	f043 0201 	orr.w	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005428:	2201      	movs	r2, #1
 800542a:	409a      	lsls	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d012      	beq.n	800545a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005446:	2201      	movs	r2, #1
 8005448:	409a      	lsls	r2, r3
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	f043 0202 	orr.w	r2, r3, #2
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545e:	2204      	movs	r2, #4
 8005460:	409a      	lsls	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d012      	beq.n	8005490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	2204      	movs	r2, #4
 800547e:	409a      	lsls	r2, r3
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f043 0204 	orr.w	r2, r3, #4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005494:	2210      	movs	r2, #16
 8005496:	409a      	lsls	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d043      	beq.n	8005528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d03c      	beq.n	8005528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	2210      	movs	r2, #16
 80054b4:	409a      	lsls	r2, r3
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d018      	beq.n	80054fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d108      	bne.n	80054e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d024      	beq.n	8005528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
 80054e6:	e01f      	b.n	8005528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
 80054f8:	e016      	b.n	8005528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d107      	bne.n	8005518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0208 	bic.w	r2, r2, #8
 8005516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552c:	2220      	movs	r2, #32
 800552e:	409a      	lsls	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 808f 	beq.w	8005658 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8087 	beq.w	8005658 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554e:	2220      	movs	r2, #32
 8005550:	409a      	lsls	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b05      	cmp	r3, #5
 8005560:	d136      	bne.n	80055d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0216 	bic.w	r2, r2, #22
 8005570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <HAL_DMA_IRQHandler+0x1da>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0208 	bic.w	r2, r2, #8
 80055a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	223f      	movs	r2, #63	; 0x3f
 80055a8:	409a      	lsls	r2, r3
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d07e      	beq.n	80056c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	4798      	blx	r3
        }
        return;
 80055ce:	e079      	b.n	80056c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d01d      	beq.n	800561a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10d      	bne.n	8005608 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d031      	beq.n	8005658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4798      	blx	r3
 80055fc:	e02c      	b.n	8005658 <HAL_DMA_IRQHandler+0x2a0>
 80055fe:	bf00      	nop
 8005600:	20000010 	.word	0x20000010
 8005604:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d023      	beq.n	8005658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4798      	blx	r3
 8005618:	e01e      	b.n	8005658 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10f      	bne.n	8005648 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0210 	bic.w	r2, r2, #16
 8005636:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	2b00      	cmp	r3, #0
 800565e:	d032      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d022      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2205      	movs	r2, #5
 8005670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	3301      	adds	r3, #1
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	429a      	cmp	r2, r3
 800568e:	d307      	bcc.n	80056a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f2      	bne.n	8005684 <HAL_DMA_IRQHandler+0x2cc>
 800569e:	e000      	b.n	80056a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
 80056c2:	e000      	b.n	80056c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80056c4:	bf00      	nop
    }
  }
}
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056da:	b2db      	uxtb	r3, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005704:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d108      	bne.n	8005728 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005726:	e007      	b.n	8005738 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	3b10      	subs	r3, #16
 8005754:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <DMA_CalcBaseAndBitshift+0x64>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800575e:	4a13      	ldr	r2, [pc, #76]	; (80057ac <DMA_CalcBaseAndBitshift+0x68>)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d909      	bls.n	8005786 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	1d1a      	adds	r2, r3, #4
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	659a      	str	r2, [r3, #88]	; 0x58
 8005784:	e007      	b.n	8005796 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	aaaaaaab 	.word	0xaaaaaaab
 80057ac:	0801e9e8 	.word	0x0801e9e8

080057b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d11f      	bne.n	800580a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d856      	bhi.n	800587e <DMA_CheckFifoParam+0xce>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <DMA_CheckFifoParam+0x28>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	080057e9 	.word	0x080057e9
 80057dc:	080057fb 	.word	0x080057fb
 80057e0:	080057e9 	.word	0x080057e9
 80057e4:	0800587f 	.word	0x0800587f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d046      	beq.n	8005882 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f8:	e043      	b.n	8005882 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005802:	d140      	bne.n	8005886 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005808:	e03d      	b.n	8005886 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005812:	d121      	bne.n	8005858 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d837      	bhi.n	800588a <DMA_CheckFifoParam+0xda>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <DMA_CheckFifoParam+0x70>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005831 	.word	0x08005831
 8005824:	08005837 	.word	0x08005837
 8005828:	08005831 	.word	0x08005831
 800582c:	08005849 	.word	0x08005849
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e030      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d025      	beq.n	800588e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005846:	e022      	b.n	800588e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005850:	d11f      	bne.n	8005892 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005856:	e01c      	b.n	8005892 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d903      	bls.n	8005866 <DMA_CheckFifoParam+0xb6>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d003      	beq.n	800586c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005864:	e018      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	73fb      	strb	r3, [r7, #15]
      break;
 800586a:	e015      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00e      	beq.n	8005896 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e00b      	b.n	8005896 <DMA_CheckFifoParam+0xe6>
      break;
 800587e:	bf00      	nop
 8005880:	e00a      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 8005882:	bf00      	nop
 8005884:	e008      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 8005886:	bf00      	nop
 8005888:	e006      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 800588a:	bf00      	nop
 800588c:	e004      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 800588e:	bf00      	nop
 8005890:	e002      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;   
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 8005896:	bf00      	nop
    }
  } 
  
  return status; 
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop

080058a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	; 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	e159      	b.n	8005b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058c4:	2201      	movs	r2, #1
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4013      	ands	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	429a      	cmp	r2, r3
 80058de:	f040 8148 	bne.w	8005b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d005      	beq.n	80058fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d130      	bne.n	800595c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	2203      	movs	r2, #3
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	43db      	mvns	r3, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4013      	ands	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4313      	orrs	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005930:	2201      	movs	r2, #1
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f003 0201 	and.w	r2, r3, #1
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b03      	cmp	r3, #3
 8005966:	d017      	beq.n	8005998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	2203      	movs	r2, #3
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d123      	bne.n	80059ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	08da      	lsrs	r2, r3, #3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3208      	adds	r2, #8
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	220f      	movs	r2, #15
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	43db      	mvns	r3, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4013      	ands	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4313      	orrs	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	08da      	lsrs	r2, r3, #3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3208      	adds	r2, #8
 80059e6:	69b9      	ldr	r1, [r7, #24]
 80059e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	2203      	movs	r2, #3
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0203 	and.w	r2, r3, #3
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80a2 	beq.w	8005b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	4b57      	ldr	r3, [pc, #348]	; (8005b90 <HAL_GPIO_Init+0x2e8>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	4a56      	ldr	r2, [pc, #344]	; (8005b90 <HAL_GPIO_Init+0x2e8>)
 8005a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a3e:	4b54      	ldr	r3, [pc, #336]	; (8005b90 <HAL_GPIO_Init+0x2e8>)
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a4a:	4a52      	ldr	r2, [pc, #328]	; (8005b94 <HAL_GPIO_Init+0x2ec>)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	3302      	adds	r3, #2
 8005a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	220f      	movs	r2, #15
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a49      	ldr	r2, [pc, #292]	; (8005b98 <HAL_GPIO_Init+0x2f0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d019      	beq.n	8005aaa <HAL_GPIO_Init+0x202>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a48      	ldr	r2, [pc, #288]	; (8005b9c <HAL_GPIO_Init+0x2f4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_GPIO_Init+0x1fe>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a47      	ldr	r2, [pc, #284]	; (8005ba0 <HAL_GPIO_Init+0x2f8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00d      	beq.n	8005aa2 <HAL_GPIO_Init+0x1fa>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a46      	ldr	r2, [pc, #280]	; (8005ba4 <HAL_GPIO_Init+0x2fc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <HAL_GPIO_Init+0x1f6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a45      	ldr	r2, [pc, #276]	; (8005ba8 <HAL_GPIO_Init+0x300>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <HAL_GPIO_Init+0x1f2>
 8005a96:	2304      	movs	r3, #4
 8005a98:	e008      	b.n	8005aac <HAL_GPIO_Init+0x204>
 8005a9a:	2307      	movs	r3, #7
 8005a9c:	e006      	b.n	8005aac <HAL_GPIO_Init+0x204>
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e004      	b.n	8005aac <HAL_GPIO_Init+0x204>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e002      	b.n	8005aac <HAL_GPIO_Init+0x204>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_GPIO_Init+0x204>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	f002 0203 	and.w	r2, r2, #3
 8005ab2:	0092      	lsls	r2, r2, #2
 8005ab4:	4093      	lsls	r3, r2
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005abc:	4935      	ldr	r1, [pc, #212]	; (8005b94 <HAL_GPIO_Init+0x2ec>)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	3302      	adds	r3, #2
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005aca:	4b38      	ldr	r3, [pc, #224]	; (8005bac <HAL_GPIO_Init+0x304>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aee:	4a2f      	ldr	r2, [pc, #188]	; (8005bac <HAL_GPIO_Init+0x304>)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005af4:	4b2d      	ldr	r3, [pc, #180]	; (8005bac <HAL_GPIO_Init+0x304>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	4013      	ands	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b18:	4a24      	ldr	r2, [pc, #144]	; (8005bac <HAL_GPIO_Init+0x304>)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b1e:	4b23      	ldr	r3, [pc, #140]	; (8005bac <HAL_GPIO_Init+0x304>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	43db      	mvns	r3, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b42:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <HAL_GPIO_Init+0x304>)
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b48:	4b18      	ldr	r3, [pc, #96]	; (8005bac <HAL_GPIO_Init+0x304>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4013      	ands	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b6c:	4a0f      	ldr	r2, [pc, #60]	; (8005bac <HAL_GPIO_Init+0x304>)
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	3301      	adds	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b0f      	cmp	r3, #15
 8005b7c:	f67f aea2 	bls.w	80058c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	3724      	adds	r7, #36	; 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40023800 	.word	0x40023800
 8005b94:	40013800 	.word	0x40013800
 8005b98:	40020000 	.word	0x40020000
 8005b9c:	40020400 	.word	0x40020400
 8005ba0:	40020800 	.word	0x40020800
 8005ba4:	40020c00 	.word	0x40020c00
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40013c00 	.word	0x40013c00

08005bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	807b      	strh	r3, [r7, #2]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bc0:	787b      	ldrb	r3, [r7, #1]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bc6:	887a      	ldrh	r2, [r7, #2]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bcc:	e003      	b.n	8005bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bce:	887b      	ldrh	r3, [r7, #2]
 8005bd0:	041a      	lsls	r2, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	619a      	str	r2, [r3, #24]
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bee:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d006      	beq.n	8005c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bfa:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bfc:	88fb      	ldrh	r3, [r7, #6]
 8005bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fc fa3a 	bl	800207c <HAL_GPIO_EXTI_Callback>
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40013c00 	.word	0x40013c00

08005c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e12b      	b.n	8005e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fe f808 	bl	8003c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2224      	movs	r2, #36	; 0x24
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0201 	bic.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c78:	f003 f8ac 	bl	8008dd4 <HAL_RCC_GetPCLK1Freq>
 8005c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	4a81      	ldr	r2, [pc, #516]	; (8005e88 <HAL_I2C_Init+0x274>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d807      	bhi.n	8005c98 <HAL_I2C_Init+0x84>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4a80      	ldr	r2, [pc, #512]	; (8005e8c <HAL_I2C_Init+0x278>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bf94      	ite	ls
 8005c90:	2301      	movls	r3, #1
 8005c92:	2300      	movhi	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	e006      	b.n	8005ca6 <HAL_I2C_Init+0x92>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4a7d      	ldr	r2, [pc, #500]	; (8005e90 <HAL_I2C_Init+0x27c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	bf94      	ite	ls
 8005ca0:	2301      	movls	r3, #1
 8005ca2:	2300      	movhi	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e0e7      	b.n	8005e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a78      	ldr	r2, [pc, #480]	; (8005e94 <HAL_I2C_Init+0x280>)
 8005cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb6:	0c9b      	lsrs	r3, r3, #18
 8005cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	4a6a      	ldr	r2, [pc, #424]	; (8005e88 <HAL_I2C_Init+0x274>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d802      	bhi.n	8005ce8 <HAL_I2C_Init+0xd4>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	e009      	b.n	8005cfc <HAL_I2C_Init+0xe8>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005cee:	fb02 f303 	mul.w	r3, r2, r3
 8005cf2:	4a69      	ldr	r2, [pc, #420]	; (8005e98 <HAL_I2C_Init+0x284>)
 8005cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf8:	099b      	lsrs	r3, r3, #6
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	495c      	ldr	r1, [pc, #368]	; (8005e88 <HAL_I2C_Init+0x274>)
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	d819      	bhi.n	8005d50 <HAL_I2C_Init+0x13c>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	1e59      	subs	r1, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d2a:	1c59      	adds	r1, r3, #1
 8005d2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d30:	400b      	ands	r3, r1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_I2C_Init+0x138>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1e59      	subs	r1, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d44:	3301      	adds	r3, #1
 8005d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d4a:	e051      	b.n	8005df0 <HAL_I2C_Init+0x1dc>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	e04f      	b.n	8005df0 <HAL_I2C_Init+0x1dc>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d111      	bne.n	8005d7c <HAL_I2C_Init+0x168>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1e58      	subs	r0, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6859      	ldr	r1, [r3, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	440b      	add	r3, r1
 8005d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf0c      	ite	eq
 8005d74:	2301      	moveq	r3, #1
 8005d76:	2300      	movne	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e012      	b.n	8005da2 <HAL_I2C_Init+0x18e>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1e58      	subs	r0, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6859      	ldr	r1, [r3, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	0099      	lsls	r1, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d92:	3301      	adds	r3, #1
 8005d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_I2C_Init+0x196>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e022      	b.n	8005df0 <HAL_I2C_Init+0x1dc>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10e      	bne.n	8005dd0 <HAL_I2C_Init+0x1bc>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1e58      	subs	r0, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6859      	ldr	r1, [r3, #4]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	440b      	add	r3, r1
 8005dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dce:	e00f      	b.n	8005df0 <HAL_I2C_Init+0x1dc>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1e58      	subs	r0, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6859      	ldr	r1, [r3, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	0099      	lsls	r1, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005de6:	3301      	adds	r3, #1
 8005de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	6809      	ldr	r1, [r1, #0]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69da      	ldr	r2, [r3, #28]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6911      	ldr	r1, [r2, #16]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68d2      	ldr	r2, [r2, #12]
 8005e2a:	4311      	orrs	r1, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695a      	ldr	r2, [r3, #20]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	000186a0 	.word	0x000186a0
 8005e8c:	001e847f 	.word	0x001e847f
 8005e90:	003d08ff 	.word	0x003d08ff
 8005e94:	431bde83 	.word	0x431bde83
 8005e98:	10624dd3 	.word	0x10624dd3

08005e9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	817b      	strh	r3, [r7, #10]
 8005eac:	4613      	mov	r3, r2
 8005eae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005eb0:	f7fe fd08 	bl	80048c4 <HAL_GetTick>
 8005eb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	f040 80e0 	bne.w	8006084 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	2319      	movs	r3, #25
 8005eca:	2201      	movs	r2, #1
 8005ecc:	4970      	ldr	r1, [pc, #448]	; (8006090 <HAL_I2C_Master_Transmit+0x1f4>)
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f002 f8e6 	bl	80080a0 <I2C_WaitOnFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005eda:	2302      	movs	r3, #2
 8005edc:	e0d3      	b.n	8006086 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_I2C_Master_Transmit+0x50>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e0cc      	b.n	8006086 <HAL_I2C_Master_Transmit+0x1ea>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d007      	beq.n	8005f12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2221      	movs	r2, #33	; 0x21
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2210      	movs	r2, #16
 8005f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	893a      	ldrh	r2, [r7, #8]
 8005f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4a50      	ldr	r2, [pc, #320]	; (8006094 <HAL_I2C_Master_Transmit+0x1f8>)
 8005f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f54:	8979      	ldrh	r1, [r7, #10]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	6a3a      	ldr	r2, [r7, #32]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f001 fea8 	bl	8007cb0 <I2C_MasterRequestWrite>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e08d      	b.n	8006086 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	613b      	str	r3, [r7, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f80:	e066      	b.n	8006050 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	6a39      	ldr	r1, [r7, #32]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f002 f960 	bl	800824c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00d      	beq.n	8005fae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d107      	bne.n	8005faa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e06b      	b.n	8006086 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	781a      	ldrb	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d11b      	bne.n	8006024 <HAL_I2C_Master_Transmit+0x188>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d017      	beq.n	8006024 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	6a39      	ldr	r1, [r7, #32]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f002 f950 	bl	80082ce <I2C_WaitOnBTFFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	2b04      	cmp	r3, #4
 800603a:	d107      	bne.n	800604c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e01a      	b.n	8006086 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006054:	2b00      	cmp	r3, #0
 8006056:	d194      	bne.n	8005f82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	e000      	b.n	8006086 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006084:	2302      	movs	r3, #2
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	00100002 	.word	0x00100002
 8006094:	ffff0000 	.word	0xffff0000

08006098 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08c      	sub	sp, #48	; 0x30
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	461a      	mov	r2, r3
 80060a4:	460b      	mov	r3, r1
 80060a6:	817b      	strh	r3, [r7, #10]
 80060a8:	4613      	mov	r3, r2
 80060aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060ac:	f7fe fc0a 	bl	80048c4 <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	f040 820b 	bne.w	80064d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	2319      	movs	r3, #25
 80060c6:	2201      	movs	r2, #1
 80060c8:	497c      	ldr	r1, [pc, #496]	; (80062bc <HAL_I2C_Master_Receive+0x224>)
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f001 ffe8 	bl	80080a0 <I2C_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80060d6:	2302      	movs	r3, #2
 80060d8:	e1fe      	b.n	80064d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_I2C_Master_Receive+0x50>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e1f7      	b.n	80064d8 <HAL_I2C_Master_Receive+0x440>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d007      	beq.n	800610e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800611c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2222      	movs	r2, #34	; 0x22
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2210      	movs	r2, #16
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	893a      	ldrh	r2, [r7, #8]
 800613e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4a5c      	ldr	r2, [pc, #368]	; (80062c0 <HAL_I2C_Master_Receive+0x228>)
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006150:	8979      	ldrh	r1, [r7, #10]
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f001 fe2c 	bl	8007db4 <I2C_MasterRequestRead>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e1b8      	b.n	80064d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d113      	bne.n	8006196 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616e:	2300      	movs	r3, #0
 8006170:	623b      	str	r3, [r7, #32]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	623b      	str	r3, [r7, #32]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	623b      	str	r3, [r7, #32]
 8006182:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e18c      	b.n	80064b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	2b01      	cmp	r3, #1
 800619c:	d11b      	bne.n	80061d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e16c      	b.n	80064b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d11b      	bne.n	8006216 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061fe:	2300      	movs	r3, #0
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	e14c      	b.n	80064b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800623c:	e138      	b.n	80064b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006242:	2b03      	cmp	r3, #3
 8006244:	f200 80f1 	bhi.w	800642a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624c:	2b01      	cmp	r3, #1
 800624e:	d123      	bne.n	8006298 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f002 f8ad 	bl	80083b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e139      	b.n	80064d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006296:	e10b      	b.n	80064b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629c:	2b02      	cmp	r3, #2
 800629e:	d14e      	bne.n	800633e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	4906      	ldr	r1, [pc, #24]	; (80062c4 <HAL_I2C_Master_Receive+0x22c>)
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f001 fef8 	bl	80080a0 <I2C_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e10e      	b.n	80064d8 <HAL_I2C_Master_Receive+0x440>
 80062ba:	bf00      	nop
 80062bc:	00100002 	.word	0x00100002
 80062c0:	ffff0000 	.word	0xffff0000
 80062c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800633c:	e0b8      	b.n	80064b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	2200      	movs	r2, #0
 8006346:	4966      	ldr	r1, [pc, #408]	; (80064e0 <HAL_I2C_Master_Receive+0x448>)
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f001 fea9 	bl	80080a0 <I2C_WaitOnFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0bf      	b.n	80064d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	2200      	movs	r2, #0
 80063a2:	494f      	ldr	r1, [pc, #316]	; (80064e0 <HAL_I2C_Master_Receive+0x448>)
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f001 fe7b 	bl	80080a0 <I2C_WaitOnFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e091      	b.n	80064d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691a      	ldr	r2, [r3, #16]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006428:	e042      	b.n	80064b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800642a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f001 ffc0 	bl	80083b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e04c      	b.n	80064d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b04      	cmp	r3, #4
 800647c:	d118      	bne.n	80064b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f47f aec2 	bne.w	800623e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e000      	b.n	80064d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	; 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	00010004 	.word	0x00010004

080064e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006504:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2b10      	cmp	r3, #16
 8006512:	d003      	beq.n	800651c <HAL_I2C_EV_IRQHandler+0x38>
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	f040 80c1 	bne.w	800669e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10d      	bne.n	8006552 <HAL_I2C_EV_IRQHandler+0x6e>
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800653c:	d003      	beq.n	8006546 <HAL_I2C_EV_IRQHandler+0x62>
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006544:	d101      	bne.n	800654a <HAL_I2C_EV_IRQHandler+0x66>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <HAL_I2C_EV_IRQHandler+0x68>
 800654a:	2300      	movs	r3, #0
 800654c:	2b01      	cmp	r3, #1
 800654e:	f000 8132 	beq.w	80067b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00c      	beq.n	8006576 <HAL_I2C_EV_IRQHandler+0x92>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	0a5b      	lsrs	r3, r3, #9
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d006      	beq.n	8006576 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 ffa8 	bl	80084be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fd83 	bl	800707a <I2C_Master_SB>
 8006574:	e092      	b.n	800669c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	08db      	lsrs	r3, r3, #3
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d009      	beq.n	8006596 <HAL_I2C_EV_IRQHandler+0xb2>
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	0a5b      	lsrs	r3, r3, #9
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fdf9 	bl	8007186 <I2C_Master_ADD10>
 8006594:	e082      	b.n	800669c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	085b      	lsrs	r3, r3, #1
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	0a5b      	lsrs	r3, r3, #9
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fe13 	bl	80071da <I2C_Master_ADDR>
 80065b4:	e072      	b.n	800669c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	089b      	lsrs	r3, r3, #2
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d03b      	beq.n	800663a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d0:	f000 80f3 	beq.w	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	09db      	lsrs	r3, r3, #7
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00f      	beq.n	8006600 <HAL_I2C_EV_IRQHandler+0x11c>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	0a9b      	lsrs	r3, r3, #10
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <HAL_I2C_EV_IRQHandler+0x11c>
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	089b      	lsrs	r3, r3, #2
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f9f3 	bl	80069e4 <I2C_MasterTransmit_TXE>
 80065fe:	e04d      	b.n	800669c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80d6 	beq.w	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	0a5b      	lsrs	r3, r3, #9
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 80cf 	beq.w	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	2b21      	cmp	r3, #33	; 0x21
 8006620:	d103      	bne.n	800662a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa7a 	bl	8006b1c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006628:	e0c7      	b.n	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	f040 80c4 	bne.w	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fae8 	bl	8006c08 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006638:	e0bf      	b.n	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006648:	f000 80b7 	beq.w	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	099b      	lsrs	r3, r3, #6
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00f      	beq.n	8006678 <HAL_I2C_EV_IRQHandler+0x194>
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	0a9b      	lsrs	r3, r3, #10
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <HAL_I2C_EV_IRQHandler+0x194>
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	089b      	lsrs	r3, r3, #2
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d103      	bne.n	8006678 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fb5d 	bl	8006d30 <I2C_MasterReceive_RXNE>
 8006676:	e011      	b.n	800669c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	089b      	lsrs	r3, r3, #2
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 809a 	beq.w	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	0a5b      	lsrs	r3, r3, #9
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8093 	beq.w	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fc06 	bl	8006ea6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800669a:	e08e      	b.n	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800669c:	e08d      	b.n	80067ba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d004      	beq.n	80066b0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	e007      	b.n	80066c0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d012      	beq.n	80066f2 <HAL_I2C_EV_IRQHandler+0x20e>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	0a5b      	lsrs	r3, r3, #9
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00c      	beq.n	80066f2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80066e8:	69b9      	ldr	r1, [r7, #24]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 ffc4 	bl	8007678 <I2C_Slave_ADDR>
 80066f0:	e066      	b.n	80067c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	091b      	lsrs	r3, r3, #4
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_I2C_EV_IRQHandler+0x22e>
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	0a5b      	lsrs	r3, r3, #9
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fffe 	bl	800770c <I2C_Slave_STOPF>
 8006710:	e056      	b.n	80067c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b21      	cmp	r3, #33	; 0x21
 8006716:	d002      	beq.n	800671e <HAL_I2C_EV_IRQHandler+0x23a>
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b29      	cmp	r3, #41	; 0x29
 800671c:	d125      	bne.n	800676a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	09db      	lsrs	r3, r3, #7
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00f      	beq.n	800674a <HAL_I2C_EV_IRQHandler+0x266>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	0a9b      	lsrs	r3, r3, #10
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <HAL_I2C_EV_IRQHandler+0x266>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	089b      	lsrs	r3, r3, #2
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d103      	bne.n	800674a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 feda 	bl	80074fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006748:	e039      	b.n	80067be <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	089b      	lsrs	r3, r3, #2
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d033      	beq.n	80067be <HAL_I2C_EV_IRQHandler+0x2da>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	0a5b      	lsrs	r3, r3, #9
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d02d      	beq.n	80067be <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 ff07 	bl	8007576 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006768:	e029      	b.n	80067be <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	099b      	lsrs	r3, r3, #6
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00f      	beq.n	8006796 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	0a9b      	lsrs	r3, r3, #10
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	089b      	lsrs	r3, r3, #2
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 ff12 	bl	80075b8 <I2C_SlaveReceive_RXNE>
 8006794:	e014      	b.n	80067c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	089b      	lsrs	r3, r3, #2
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00e      	beq.n	80067c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	0a5b      	lsrs	r3, r3, #9
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 ff40 	bl	8007634 <I2C_SlaveReceive_BTF>
 80067b4:	e004      	b.n	80067c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80067b6:	bf00      	nop
 80067b8:	e002      	b.n	80067c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80067c0:	3720      	adds	r7, #32
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b08a      	sub	sp, #40	; 0x28
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80067de:	2300      	movs	r3, #0
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067e8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	0a1b      	lsrs	r3, r3, #8
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <HAL_I2C_ER_IRQHandler+0x4e>
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	0a1b      	lsrs	r3, r3, #8
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006812:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	0a5b      	lsrs	r3, r3, #9
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00e      	beq.n	800683e <HAL_I2C_ER_IRQHandler+0x78>
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	f043 0302 	orr.w	r3, r3, #2
 8006832:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800683c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	0a9b      	lsrs	r3, r3, #10
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d03f      	beq.n	80068ca <HAL_I2C_ER_IRQHandler+0x104>
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d039      	beq.n	80068ca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006856:	7efb      	ldrb	r3, [r7, #27]
 8006858:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006868:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006870:	7ebb      	ldrb	r3, [r7, #26]
 8006872:	2b20      	cmp	r3, #32
 8006874:	d112      	bne.n	800689c <HAL_I2C_ER_IRQHandler+0xd6>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10f      	bne.n	800689c <HAL_I2C_ER_IRQHandler+0xd6>
 800687c:	7cfb      	ldrb	r3, [r7, #19]
 800687e:	2b21      	cmp	r3, #33	; 0x21
 8006880:	d008      	beq.n	8006894 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006882:	7cfb      	ldrb	r3, [r7, #19]
 8006884:	2b29      	cmp	r3, #41	; 0x29
 8006886:	d005      	beq.n	8006894 <HAL_I2C_ER_IRQHandler+0xce>
 8006888:	7cfb      	ldrb	r3, [r7, #19]
 800688a:	2b28      	cmp	r3, #40	; 0x28
 800688c:	d106      	bne.n	800689c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b21      	cmp	r3, #33	; 0x21
 8006892:	d103      	bne.n	800689c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 f869 	bl	800796c <I2C_Slave_AF>
 800689a:	e016      	b.n	80068ca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	f043 0304 	orr.w	r3, r3, #4
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80068ae:	7efb      	ldrb	r3, [r7, #27]
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d002      	beq.n	80068ba <HAL_I2C_ER_IRQHandler+0xf4>
 80068b4:	7efb      	ldrb	r3, [r7, #27]
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	d107      	bne.n	80068ca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	0adb      	lsrs	r3, r3, #11
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00e      	beq.n	80068f4 <HAL_I2C_ER_IRQHandler+0x12e>
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	0a1b      	lsrs	r3, r3, #8
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d008      	beq.n	80068f4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	f043 0308 	orr.w	r3, r3, #8
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80068f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 f8a0 	bl	8007a4c <I2C_ITError>
  }
}
 800690c:	bf00      	nop
 800690e:	3728      	adds	r7, #40	; 0x28
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
 8006970:	4613      	mov	r3, r2
 8006972:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d150      	bne.n	8006aac <I2C_MasterTransmit_TXE+0xc8>
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b21      	cmp	r3, #33	; 0x21
 8006a0e:	d14d      	bne.n	8006aac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d01d      	beq.n	8006a52 <I2C_MasterTransmit_TXE+0x6e>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d01a      	beq.n	8006a52 <I2C_MasterTransmit_TXE+0x6e>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a22:	d016      	beq.n	8006a52 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a32:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2211      	movs	r2, #17
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ff62 	bl	8006914 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a50:	e060      	b.n	8006b14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a60:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a70:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b40      	cmp	r3, #64	; 0x40
 8006a8a:	d107      	bne.n	8006a9c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ff7d 	bl	8006994 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a9a:	e03b      	b.n	8006b14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff ff35 	bl	8006914 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006aaa:	e033      	b.n	8006b14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b21      	cmp	r3, #33	; 0x21
 8006ab0:	d005      	beq.n	8006abe <I2C_MasterTransmit_TXE+0xda>
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d12d      	bne.n	8006b14 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b22      	cmp	r3, #34	; 0x22
 8006abc:	d12a      	bne.n	8006b14 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d108      	bne.n	8006ada <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006ad8:	e01c      	b.n	8006b14 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d103      	bne.n	8006aee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f88e 	bl	8006c08 <I2C_MemoryTransmit_TXE_BTF>
}
 8006aec:	e012      	b.n	8006b14 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b12:	e7ff      	b.n	8006b14 <I2C_MasterTransmit_TXE+0x130>
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b21      	cmp	r3, #33	; 0x21
 8006b34:	d164      	bne.n	8006c00 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006b64:	e04c      	b.n	8006c00 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d01d      	beq.n	8006ba8 <I2C_MasterTransmit_BTF+0x8c>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d01a      	beq.n	8006ba8 <I2C_MasterTransmit_BTF+0x8c>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b78:	d016      	beq.n	8006ba8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b88:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2211      	movs	r2, #17
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff feb7 	bl	8006914 <HAL_I2C_MasterTxCpltCallback>
}
 8006ba6:	e02b      	b.n	8006c00 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bb6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d107      	bne.n	8006bf2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff fed2 	bl	8006994 <HAL_I2C_MemTxCpltCallback>
}
 8006bf0:	e006      	b.n	8006c00 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fe8a 	bl	8006914 <HAL_I2C_MasterTxCpltCallback>
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11d      	bne.n	8006c5c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d10b      	bne.n	8006c40 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c38:	1c9a      	adds	r2, r3, #2
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006c3e:	e073      	b.n	8006d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	121b      	asrs	r3, r3, #8
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c5a:	e065      	b.n	8006d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d10b      	bne.n	8006c7c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c7a:	e055      	b.n	8006d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d151      	bne.n	8006d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b22      	cmp	r3, #34	; 0x22
 8006c88:	d10d      	bne.n	8006ca6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c98:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ca4:	e040      	b.n	8006d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d015      	beq.n	8006cdc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b21      	cmp	r3, #33	; 0x21
 8006cb4:	d112      	bne.n	8006cdc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	781a      	ldrb	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006cda:	e025      	b.n	8006d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d120      	bne.n	8006d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2b21      	cmp	r3, #33	; 0x21
 8006cea:	d11d      	bne.n	8006d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cfa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff fe36 	bl	8006994 <HAL_I2C_MemTxCpltCallback>
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b22      	cmp	r3, #34	; 0x22
 8006d42:	f040 80ac 	bne.w	8006e9e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d921      	bls.n	8006d98 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	f040 808c 	bne.w	8006e9e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d94:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006d96:	e082      	b.n	8006e9e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d075      	beq.n	8006e8c <I2C_MasterReceive_RXNE+0x15c>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d002      	beq.n	8006dac <I2C_MasterReceive_RXNE+0x7c>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d16f      	bne.n	8006e8c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 facf 	bl	8008350 <I2C_WaitOnSTOPRequestThroughIT>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d142      	bne.n	8006e3e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dd6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691a      	ldr	r2, [r3, #16]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d10a      	bne.n	8006e28 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff fdc1 	bl	80069a8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e26:	e03a      	b.n	8006e9e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2212      	movs	r2, #18
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fd76 	bl	8006928 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e3c:	e02f      	b.n	8006e9e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691a      	ldr	r2, [r3, #16]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fd99 	bl	80069bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e8a:	e008      	b.n	8006e9e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e9a:	605a      	str	r2, [r3, #4]
}
 8006e9c:	e7ff      	b.n	8006e9e <I2C_MasterReceive_RXNE+0x16e>
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d11b      	bne.n	8006ef6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ecc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ef4:	e0bd      	b.n	8007072 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d129      	bne.n	8006f54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d00a      	beq.n	8006f2c <I2C_MasterReceive_BTF+0x86>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d007      	beq.n	8006f2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691a      	ldr	r2, [r3, #16]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f52:	e08e      	b.n	8007072 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d176      	bne.n	800704c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d002      	beq.n	8006f6a <I2C_MasterReceive_BTF+0xc4>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d108      	bne.n	8006f7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	e019      	b.n	8006fb0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d002      	beq.n	8006f88 <I2C_MasterReceive_BTF+0xe2>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d108      	bne.n	8006f9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e00a      	b.n	8006fb0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d007      	beq.n	8006fb0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800700a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d10a      	bne.n	8007036 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fcba 	bl	80069a8 <HAL_I2C_MemRxCpltCallback>
}
 8007034:	e01d      	b.n	8007072 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2212      	movs	r2, #18
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fc6f 	bl	8006928 <HAL_I2C_MasterRxCpltCallback>
}
 800704a:	e012      	b.n	8007072 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691a      	ldr	r2, [r3, #16]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	d117      	bne.n	80070be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007092:	2b00      	cmp	r3, #0
 8007094:	d109      	bne.n	80070aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709a:	b2db      	uxtb	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80070a8:	e067      	b.n	800717a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	f043 0301 	orr.w	r3, r3, #1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	611a      	str	r2, [r3, #16]
}
 80070bc:	e05d      	b.n	800717a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c6:	d133      	bne.n	8007130 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b21      	cmp	r3, #33	; 0x21
 80070d2:	d109      	bne.n	80070e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070e4:	611a      	str	r2, [r3, #16]
 80070e6:	e008      	b.n	80070fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <I2C_Master_SB+0x92>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d108      	bne.n	800711e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	2b00      	cmp	r3, #0
 8007112:	d032      	beq.n	800717a <I2C_Master_SB+0x100>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d02d      	beq.n	800717a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800712c:	605a      	str	r2, [r3, #4]
}
 800712e:	e024      	b.n	800717a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10e      	bne.n	8007156 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713c:	b29b      	uxth	r3, r3
 800713e:	11db      	asrs	r3, r3, #7
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 0306 	and.w	r3, r3, #6
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f063 030f 	orn	r3, r3, #15
 800714c:	b2da      	uxtb	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	611a      	str	r2, [r3, #16]
}
 8007154:	e011      	b.n	800717a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715a:	2b01      	cmp	r3, #1
 800715c:	d10d      	bne.n	800717a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	b29b      	uxth	r3, r3
 8007164:	11db      	asrs	r3, r3, #7
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 0306 	and.w	r3, r3, #6
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f063 030e 	orn	r3, r3, #14
 8007172:	b2da      	uxtb	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	611a      	str	r2, [r3, #16]
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	b2da      	uxtb	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <I2C_Master_ADD10+0x26>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d108      	bne.n	80071be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00c      	beq.n	80071ce <I2C_Master_ADD10+0x48>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071cc:	605a      	str	r2, [r3, #4]
  }
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80071da:	b480      	push	{r7}
 80071dc:	b091      	sub	sp, #68	; 0x44
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b22      	cmp	r3, #34	; 0x22
 8007202:	f040 8169 	bne.w	80074d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10f      	bne.n	800722e <I2C_Master_ADDR+0x54>
 800720e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007212:	2b40      	cmp	r3, #64	; 0x40
 8007214:	d10b      	bne.n	800722e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007216:	2300      	movs	r3, #0
 8007218:	633b      	str	r3, [r7, #48]	; 0x30
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	633b      	str	r3, [r7, #48]	; 0x30
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	633b      	str	r3, [r7, #48]	; 0x30
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	e160      	b.n	80074f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007232:	2b00      	cmp	r3, #0
 8007234:	d11d      	bne.n	8007272 <I2C_Master_ADDR+0x98>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800723e:	d118      	bne.n	8007272 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007240:	2300      	movs	r3, #0
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007264:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	651a      	str	r2, [r3, #80]	; 0x50
 8007270:	e13e      	b.n	80074f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007276:	b29b      	uxth	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d113      	bne.n	80072a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800727c:	2300      	movs	r3, #0
 800727e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	e115      	b.n	80074d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	f040 808a 	bne.w	80073c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072b6:	d137      	bne.n	8007328 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d6:	d113      	bne.n	8007300 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e8:	2300      	movs	r3, #0
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	e0e7      	b.n	80074d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007300:	2300      	movs	r3, #0
 8007302:	623b      	str	r3, [r7, #32]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	623b      	str	r3, [r7, #32]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	623b      	str	r3, [r7, #32]
 8007314:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e0d3      	b.n	80074d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	2b08      	cmp	r3, #8
 800732c:	d02e      	beq.n	800738c <I2C_Master_ADDR+0x1b2>
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	2b20      	cmp	r3, #32
 8007332:	d02b      	beq.n	800738c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007336:	2b12      	cmp	r3, #18
 8007338:	d102      	bne.n	8007340 <I2C_Master_ADDR+0x166>
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	2b01      	cmp	r3, #1
 800733e:	d125      	bne.n	800738c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	2b04      	cmp	r3, #4
 8007344:	d00e      	beq.n	8007364 <I2C_Master_ADDR+0x18a>
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	2b02      	cmp	r3, #2
 800734a:	d00b      	beq.n	8007364 <I2C_Master_ADDR+0x18a>
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	2b10      	cmp	r3, #16
 8007350:	d008      	beq.n	8007364 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	e007      	b.n	8007374 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007372:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007374:	2300      	movs	r3, #0
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	e0a1      	b.n	80074d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800739c:	2300      	movs	r3, #0
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	61bb      	str	r3, [r7, #24]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	e085      	b.n	80074d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d14d      	bne.n	800746a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d016      	beq.n	8007402 <I2C_Master_ADDR+0x228>
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d013      	beq.n	8007402 <I2C_Master_ADDR+0x228>
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	2b10      	cmp	r3, #16
 80073de:	d010      	beq.n	8007402 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e007      	b.n	8007412 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007410:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800741c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007420:	d117      	bne.n	8007452 <I2C_Master_ADDR+0x278>
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007428:	d00b      	beq.n	8007442 <I2C_Master_ADDR+0x268>
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	2b01      	cmp	r3, #1
 800742e:	d008      	beq.n	8007442 <I2C_Master_ADDR+0x268>
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	2b08      	cmp	r3, #8
 8007434:	d005      	beq.n	8007442 <I2C_Master_ADDR+0x268>
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	2b10      	cmp	r3, #16
 800743a:	d002      	beq.n	8007442 <I2C_Master_ADDR+0x268>
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	2b20      	cmp	r3, #32
 8007440:	d107      	bne.n	8007452 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007450:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	e032      	b.n	80074d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007478:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007488:	d117      	bne.n	80074ba <I2C_Master_ADDR+0x2e0>
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007490:	d00b      	beq.n	80074aa <I2C_Master_ADDR+0x2d0>
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	2b01      	cmp	r3, #1
 8007496:	d008      	beq.n	80074aa <I2C_Master_ADDR+0x2d0>
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	2b08      	cmp	r3, #8
 800749c:	d005      	beq.n	80074aa <I2C_Master_ADDR+0x2d0>
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d002      	beq.n	80074aa <I2C_Master_ADDR+0x2d0>
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d107      	bne.n	80074ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80074d6:	e00b      	b.n	80074f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
}
 80074ee:	e7ff      	b.n	80074f0 <I2C_Master_ADDR+0x316>
 80074f0:	bf00      	nop
 80074f2:	3744      	adds	r7, #68	; 0x44
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d02b      	beq.n	800756e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753e:	b29b      	uxth	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d114      	bne.n	800756e <I2C_SlaveTransmit_TXE+0x72>
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	2b29      	cmp	r3, #41	; 0x29
 8007548:	d111      	bne.n	800756e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007558:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2221      	movs	r2, #33	; 0x21
 800755e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2228      	movs	r2, #40	; 0x28
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff f9e7 	bl	800693c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d011      	beq.n	80075ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	781a      	ldrb	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d02c      	beq.n	800762c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d114      	bne.n	800762c <I2C_SlaveReceive_RXNE+0x74>
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b2a      	cmp	r3, #42	; 0x2a
 8007606:	d111      	bne.n	800762c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007616:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2222      	movs	r2, #34	; 0x22
 800761c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2228      	movs	r2, #40	; 0x28
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff f992 	bl	8006950 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800762c:	bf00      	nop
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d012      	beq.n	800766c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007692:	2b28      	cmp	r3, #40	; 0x28
 8007694:	d127      	bne.n	80076e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	089b      	lsrs	r3, r3, #2
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	09db      	lsrs	r3, r3, #7
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d103      	bne.n	80076ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	81bb      	strh	r3, [r7, #12]
 80076c8:	e002      	b.n	80076d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80076d8:	89ba      	ldrh	r2, [r7, #12]
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff f940 	bl	8006964 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80076e4:	e00e      	b.n	8007704 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800772a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800772c:	2300      	movs	r3, #0
 800772e:	60bb      	str	r3, [r7, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	60bb      	str	r3, [r7, #8]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007758:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007768:	d172      	bne.n	8007850 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	2b22      	cmp	r3, #34	; 0x22
 800776e:	d002      	beq.n	8007776 <I2C_Slave_STOPF+0x6a>
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	2b2a      	cmp	r3, #42	; 0x2a
 8007774:	d135      	bne.n	80077e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	b29a      	uxth	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	f043 0204 	orr.w	r2, r3, #4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fd ff8c 	bl	80056cc <HAL_DMA_GetState>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d049      	beq.n	800784e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	4a69      	ldr	r2, [pc, #420]	; (8007964 <I2C_Slave_STOPF+0x258>)
 80077c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fd fdd4 	bl	8005374 <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d03d      	beq.n	800784e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077e0:	e035      	b.n	800784e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	f043 0204 	orr.w	r2, r3, #4
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007814:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781a:	4618      	mov	r0, r3
 800781c:	f7fd ff56 	bl	80056cc <HAL_DMA_GetState>
 8007820:	4603      	mov	r3, r0
 8007822:	2b01      	cmp	r3, #1
 8007824:	d014      	beq.n	8007850 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782a:	4a4e      	ldr	r2, [pc, #312]	; (8007964 <I2C_Slave_STOPF+0x258>)
 800782c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	4618      	mov	r0, r3
 8007834:	f7fd fd9e 	bl	8005374 <HAL_DMA_Abort_IT>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	e000      	b.n	8007850 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800784e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d03e      	beq.n	80078d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b04      	cmp	r3, #4
 8007866:	d112      	bne.n	800788e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691a      	ldr	r2, [r3, #16]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	d112      	bne.n	80078c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	f043 0204 	orr.w	r2, r3, #4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f8b3 	bl	8007a4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80078e6:	e039      	b.n	800795c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b2a      	cmp	r3, #42	; 0x2a
 80078ec:	d109      	bne.n	8007902 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2228      	movs	r2, #40	; 0x28
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff f827 	bl	8006950 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b28      	cmp	r3, #40	; 0x28
 800790c:	d111      	bne.n	8007932 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a15      	ldr	r2, [pc, #84]	; (8007968 <I2C_Slave_STOPF+0x25c>)
 8007912:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff f828 	bl	8006980 <HAL_I2C_ListenCpltCallback>
}
 8007930:	e014      	b.n	800795c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	2b22      	cmp	r3, #34	; 0x22
 8007938:	d002      	beq.n	8007940 <I2C_Slave_STOPF+0x234>
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b22      	cmp	r3, #34	; 0x22
 800793e:	d10d      	bne.n	800795c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fe fffa 	bl	8006950 <HAL_I2C_SlaveRxCpltCallback>
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	08007f51 	.word	0x08007f51
 8007968:	ffff0000 	.word	0xffff0000

0800796c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2b08      	cmp	r3, #8
 8007986:	d002      	beq.n	800798e <I2C_Slave_AF+0x22>
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b20      	cmp	r3, #32
 800798c:	d129      	bne.n	80079e2 <I2C_Slave_AF+0x76>
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b28      	cmp	r3, #40	; 0x28
 8007992:	d126      	bne.n	80079e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a2c      	ldr	r2, [pc, #176]	; (8007a48 <I2C_Slave_AF+0xdc>)
 8007998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fe ffd0 	bl	8006980 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80079e0:	e02e      	b.n	8007a40 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b21      	cmp	r3, #33	; 0x21
 80079e6:	d126      	bne.n	8007a36 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <I2C_Slave_AF+0xdc>)
 80079ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2221      	movs	r2, #33	; 0x21
 80079f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a12:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a1c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fe ff84 	bl	800693c <HAL_I2C_SlaveTxCpltCallback>
}
 8007a34:	e004      	b.n	8007a40 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a3e:	615a      	str	r2, [r3, #20]
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	ffff0000 	.word	0xffff0000

08007a4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	2b10      	cmp	r3, #16
 8007a68:	d002      	beq.n	8007a70 <I2C_ITError+0x24>
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d10a      	bne.n	8007a86 <I2C_ITError+0x3a>
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
 8007a72:	2b22      	cmp	r3, #34	; 0x22
 8007a74:	d107      	bne.n	8007a86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a8c:	2b28      	cmp	r3, #40	; 0x28
 8007a8e:	d107      	bne.n	8007aa0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2228      	movs	r2, #40	; 0x28
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a9e:	e015      	b.n	8007acc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aae:	d00a      	beq.n	8007ac6 <I2C_ITError+0x7a>
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2b60      	cmp	r3, #96	; 0x60
 8007ab4:	d007      	beq.n	8007ac6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ada:	d162      	bne.n	8007ba2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007aea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d020      	beq.n	8007b3c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	4a6a      	ldr	r2, [pc, #424]	; (8007ca8 <I2C_ITError+0x25c>)
 8007b00:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fd fc34 	bl	8005374 <HAL_DMA_Abort_IT>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8089 	beq.w	8007c26 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b36:	4610      	mov	r0, r2
 8007b38:	4798      	blx	r3
 8007b3a:	e074      	b.n	8007c26 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	4a59      	ldr	r2, [pc, #356]	; (8007ca8 <I2C_ITError+0x25c>)
 8007b42:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd fc13 	bl	8005374 <HAL_DMA_Abort_IT>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d068      	beq.n	8007c26 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5e:	2b40      	cmp	r3, #64	; 0x40
 8007b60:	d10b      	bne.n	8007b7a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0201 	bic.w	r2, r2, #1
 8007b88:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	e041      	b.n	8007c26 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b60      	cmp	r3, #96	; 0x60
 8007bac:	d125      	bne.n	8007bfa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc6:	2b40      	cmp	r3, #64	; 0x40
 8007bc8:	d10b      	bne.n	8007be2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0201 	bic.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fe feec 	bl	80069d0 <HAL_I2C_AbortCpltCallback>
 8007bf8:	e015      	b.n	8007c26 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c04:	2b40      	cmp	r3, #64	; 0x40
 8007c06:	d10b      	bne.n	8007c20 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7fe fecb 	bl	80069bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10e      	bne.n	8007c54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d109      	bne.n	8007c54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d104      	bne.n	8007c54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c62:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c6a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d113      	bne.n	8007ca0 <I2C_ITError+0x254>
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	2b28      	cmp	r3, #40	; 0x28
 8007c7c:	d110      	bne.n	8007ca0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <I2C_ITError+0x260>)
 8007c82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fe fe70 	bl	8006980 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ca0:	bf00      	nop
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	08007f51 	.word	0x08007f51
 8007cac:	ffff0000 	.word	0xffff0000

08007cb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d006      	beq.n	8007cda <I2C_MasterRequestWrite+0x2a>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d003      	beq.n	8007cda <I2C_MasterRequestWrite+0x2a>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cd8:	d108      	bne.n	8007cec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	e00b      	b.n	8007d04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf0:	2b12      	cmp	r3, #18
 8007cf2:	d107      	bne.n	8007d04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f9c5 	bl	80080a0 <I2C_WaitOnFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d2a:	d103      	bne.n	8007d34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e035      	b.n	8007da4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d40:	d108      	bne.n	8007d54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d42:	897b      	ldrh	r3, [r7, #10]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d50:	611a      	str	r2, [r3, #16]
 8007d52:	e01b      	b.n	8007d8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d54:	897b      	ldrh	r3, [r7, #10]
 8007d56:	11db      	asrs	r3, r3, #7
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0306 	and.w	r3, r3, #6
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f063 030f 	orn	r3, r3, #15
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	490e      	ldr	r1, [pc, #56]	; (8007dac <I2C_MasterRequestWrite+0xfc>)
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f9eb 	bl	800814e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e010      	b.n	8007da4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d82:	897b      	ldrh	r3, [r7, #10]
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4907      	ldr	r1, [pc, #28]	; (8007db0 <I2C_MasterRequestWrite+0x100>)
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f9db 	bl	800814e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	00010008 	.word	0x00010008
 8007db0:	00010002 	.word	0x00010002

08007db4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d006      	beq.n	8007dee <I2C_MasterRequestRead+0x3a>
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d003      	beq.n	8007dee <I2C_MasterRequestRead+0x3a>
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007dec:	d108      	bne.n	8007e00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e00b      	b.n	8007e18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	2b11      	cmp	r3, #17
 8007e06:	d107      	bne.n	8007e18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f93b 	bl	80080a0 <I2C_WaitOnFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00d      	beq.n	8007e4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e3e:	d103      	bne.n	8007e48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e079      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e54:	d108      	bne.n	8007e68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e56:	897b      	ldrh	r3, [r7, #10]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	611a      	str	r2, [r3, #16]
 8007e66:	e05f      	b.n	8007f28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007e68:	897b      	ldrh	r3, [r7, #10]
 8007e6a:	11db      	asrs	r3, r3, #7
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0306 	and.w	r3, r3, #6
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f063 030f 	orn	r3, r3, #15
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	4930      	ldr	r1, [pc, #192]	; (8007f48 <I2C_MasterRequestRead+0x194>)
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 f961 	bl	800814e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e054      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007e96:	897b      	ldrh	r3, [r7, #10]
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	4929      	ldr	r1, [pc, #164]	; (8007f4c <I2C_MasterRequestRead+0x198>)
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 f951 	bl	800814e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e044      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	613b      	str	r3, [r7, #16]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	613b      	str	r3, [r7, #16]
 8007eca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f8d9 	bl	80080a0 <I2C_WaitOnFlagUntilTimeout>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00d      	beq.n	8007f10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f02:	d103      	bne.n	8007f0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e017      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007f10:	897b      	ldrh	r3, [r7, #10]
 8007f12:	11db      	asrs	r3, r3, #7
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 0306 	and.w	r3, r3, #6
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f063 030e 	orn	r3, r3, #14
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4907      	ldr	r1, [pc, #28]	; (8007f4c <I2C_MasterRequestRead+0x198>)
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 f90d 	bl	800814e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	00010008 	.word	0x00010008
 8007f4c:	00010002 	.word	0x00010002

08007f50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f6a:	4b4b      	ldr	r3, [pc, #300]	; (8008098 <I2C_DMAAbort+0x148>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	08db      	lsrs	r3, r3, #3
 8007f70:	4a4a      	ldr	r2, [pc, #296]	; (800809c <I2C_DMAAbort+0x14c>)
 8007f72:	fba2 2303 	umull	r2, r3, r2, r3
 8007f76:	0a1a      	lsrs	r2, r3, #8
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	00da      	lsls	r2, r3, #3
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f043 0220 	orr.w	r2, r3, #32
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007f96:	e00a      	b.n	8007fae <I2C_DMAAbort+0x5e>
    }
    count--;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fac:	d0ea      	beq.n	8007f84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fba:	2200      	movs	r2, #0
 8007fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	2200      	movs	r2, #0
 8007fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fdc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	2200      	movs	r2, #0
 8008002:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0201 	bic.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b60      	cmp	r3, #96	; 0x60
 800801e:	d10e      	bne.n	800803e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2200      	movs	r2, #0
 8008034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008036:	6978      	ldr	r0, [r7, #20]
 8008038:	f7fe fcca 	bl	80069d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800803c:	e027      	b.n	800808e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800803e:	7cfb      	ldrb	r3, [r7, #19]
 8008040:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008044:	2b28      	cmp	r3, #40	; 0x28
 8008046:	d117      	bne.n	8008078 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0201 	orr.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008066:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2228      	movs	r2, #40	; 0x28
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008076:	e007      	b.n	8008088 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2220      	movs	r2, #32
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008088:	6978      	ldr	r0, [r7, #20]
 800808a:	f7fe fc97 	bl	80069bc <HAL_I2C_ErrorCallback>
}
 800808e:	bf00      	nop
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000010 	.word	0x20000010
 800809c:	14f8b589 	.word	0x14f8b589

080080a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	4613      	mov	r3, r2
 80080ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080b0:	e025      	b.n	80080fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b8:	d021      	beq.n	80080fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ba:	f7fc fc03 	bl	80048c4 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d302      	bcc.n	80080d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d116      	bne.n	80080fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2220      	movs	r2, #32
 80080da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	f043 0220 	orr.w	r2, r3, #32
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e023      	b.n	8008146 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	0c1b      	lsrs	r3, r3, #16
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	d10d      	bne.n	8008124 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	43da      	mvns	r2, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	4013      	ands	r3, r2
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	bf0c      	ite	eq
 800811a:	2301      	moveq	r3, #1
 800811c:	2300      	movne	r3, #0
 800811e:	b2db      	uxtb	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	e00c      	b.n	800813e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	43da      	mvns	r2, r3
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4013      	ands	r3, r2
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	bf0c      	ite	eq
 8008136:	2301      	moveq	r3, #1
 8008138:	2300      	movne	r3, #0
 800813a:	b2db      	uxtb	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	429a      	cmp	r2, r3
 8008142:	d0b6      	beq.n	80080b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
 800815a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800815c:	e051      	b.n	8008202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816c:	d123      	bne.n	80081b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800817c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008186:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2220      	movs	r2, #32
 8008192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	f043 0204 	orr.w	r2, r3, #4
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e046      	b.n	8008244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081bc:	d021      	beq.n	8008202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081be:	f7fc fb81 	bl	80048c4 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d302      	bcc.n	80081d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d116      	bne.n	8008202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2220      	movs	r2, #32
 80081de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	f043 0220 	orr.w	r2, r3, #32
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e020      	b.n	8008244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b01      	cmp	r3, #1
 800820a:	d10c      	bne.n	8008226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	43da      	mvns	r2, r3
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4013      	ands	r3, r2
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	bf14      	ite	ne
 800821e:	2301      	movne	r3, #1
 8008220:	2300      	moveq	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	e00b      	b.n	800823e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	43da      	mvns	r2, r3
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	4013      	ands	r3, r2
 8008232:	b29b      	uxth	r3, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	bf14      	ite	ne
 8008238:	2301      	movne	r3, #1
 800823a:	2300      	moveq	r3, #0
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d18d      	bne.n	800815e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008258:	e02d      	b.n	80082b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f900 	bl	8008460 <I2C_IsAcknowledgeFailed>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e02d      	b.n	80082c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008270:	d021      	beq.n	80082b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008272:	f7fc fb27 	bl	80048c4 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	429a      	cmp	r2, r3
 8008280:	d302      	bcc.n	8008288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d116      	bne.n	80082b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2220      	movs	r2, #32
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	f043 0220 	orr.w	r2, r3, #32
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e007      	b.n	80082c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c0:	2b80      	cmp	r3, #128	; 0x80
 80082c2:	d1ca      	bne.n	800825a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082da:	e02d      	b.n	8008338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 f8bf 	bl	8008460 <I2C_IsAcknowledgeFailed>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e02d      	b.n	8008348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f2:	d021      	beq.n	8008338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f4:	f7fc fae6 	bl	80048c4 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	429a      	cmp	r2, r3
 8008302:	d302      	bcc.n	800830a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d116      	bne.n	8008338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	f043 0220 	orr.w	r2, r3, #32
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e007      	b.n	8008348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b04      	cmp	r3, #4
 8008344:	d1ca      	bne.n	80082dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800835c:	4b13      	ldr	r3, [pc, #76]	; (80083ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	08db      	lsrs	r3, r3, #3
 8008362:	4a13      	ldr	r2, [pc, #76]	; (80083b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008364:	fba2 2303 	umull	r2, r3, r2, r3
 8008368:	0a1a      	lsrs	r2, r3, #8
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3b01      	subs	r3, #1
 8008376:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d107      	bne.n	800838e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	f043 0220 	orr.w	r2, r3, #32
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e008      	b.n	80083a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800839c:	d0e9      	beq.n	8008372 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	20000010 	.word	0x20000010
 80083b0:	14f8b589 	.word	0x14f8b589

080083b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083c0:	e042      	b.n	8008448 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b10      	cmp	r3, #16
 80083ce:	d119      	bne.n	8008404 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f06f 0210 	mvn.w	r2, #16
 80083d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e029      	b.n	8008458 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008404:	f7fc fa5e 	bl	80048c4 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	429a      	cmp	r2, r3
 8008412:	d302      	bcc.n	800841a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d116      	bne.n	8008448 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2220      	movs	r2, #32
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	f043 0220 	orr.w	r2, r3, #32
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e007      	b.n	8008458 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008452:	2b40      	cmp	r3, #64	; 0x40
 8008454:	d1b5      	bne.n	80083c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008476:	d11b      	bne.n	80084b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	f043 0204 	orr.w	r2, r3, #4
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80084ce:	d103      	bne.n	80084d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80084d6:	e007      	b.n	80084e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80084e0:	d102      	bne.n	80084e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2208      	movs	r2, #8
 80084e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e267      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d075      	beq.n	80085fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008512:	4b88      	ldr	r3, [pc, #544]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 030c 	and.w	r3, r3, #12
 800851a:	2b04      	cmp	r3, #4
 800851c:	d00c      	beq.n	8008538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800851e:	4b85      	ldr	r3, [pc, #532]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008526:	2b08      	cmp	r3, #8
 8008528:	d112      	bne.n	8008550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800852a:	4b82      	ldr	r3, [pc, #520]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008536:	d10b      	bne.n	8008550 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008538:	4b7e      	ldr	r3, [pc, #504]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d05b      	beq.n	80085fc <HAL_RCC_OscConfig+0x108>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d157      	bne.n	80085fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e242      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008558:	d106      	bne.n	8008568 <HAL_RCC_OscConfig+0x74>
 800855a:	4b76      	ldr	r3, [pc, #472]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a75      	ldr	r2, [pc, #468]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	e01d      	b.n	80085a4 <HAL_RCC_OscConfig+0xb0>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008570:	d10c      	bne.n	800858c <HAL_RCC_OscConfig+0x98>
 8008572:	4b70      	ldr	r3, [pc, #448]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a6f      	ldr	r2, [pc, #444]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	4b6d      	ldr	r3, [pc, #436]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a6c      	ldr	r2, [pc, #432]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	e00b      	b.n	80085a4 <HAL_RCC_OscConfig+0xb0>
 800858c:	4b69      	ldr	r3, [pc, #420]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a68      	ldr	r2, [pc, #416]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	4b66      	ldr	r3, [pc, #408]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a65      	ldr	r2, [pc, #404]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 800859e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d013      	beq.n	80085d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ac:	f7fc f98a 	bl	80048c4 <HAL_GetTick>
 80085b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085b2:	e008      	b.n	80085c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085b4:	f7fc f986 	bl	80048c4 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b64      	cmp	r3, #100	; 0x64
 80085c0:	d901      	bls.n	80085c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e207      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085c6:	4b5b      	ldr	r3, [pc, #364]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0f0      	beq.n	80085b4 <HAL_RCC_OscConfig+0xc0>
 80085d2:	e014      	b.n	80085fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d4:	f7fc f976 	bl	80048c4 <HAL_GetTick>
 80085d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085da:	e008      	b.n	80085ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085dc:	f7fc f972 	bl	80048c4 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b64      	cmp	r3, #100	; 0x64
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e1f3      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ee:	4b51      	ldr	r3, [pc, #324]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1f0      	bne.n	80085dc <HAL_RCC_OscConfig+0xe8>
 80085fa:	e000      	b.n	80085fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d063      	beq.n	80086d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800860a:	4b4a      	ldr	r3, [pc, #296]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f003 030c 	and.w	r3, r3, #12
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00b      	beq.n	800862e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008616:	4b47      	ldr	r3, [pc, #284]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800861e:	2b08      	cmp	r3, #8
 8008620:	d11c      	bne.n	800865c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008622:	4b44      	ldr	r3, [pc, #272]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d116      	bne.n	800865c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800862e:	4b41      	ldr	r3, [pc, #260]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <HAL_RCC_OscConfig+0x152>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d001      	beq.n	8008646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e1c7      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008646:	4b3b      	ldr	r3, [pc, #236]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	4937      	ldr	r1, [pc, #220]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008656:	4313      	orrs	r3, r2
 8008658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800865a:	e03a      	b.n	80086d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d020      	beq.n	80086a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008664:	4b34      	ldr	r3, [pc, #208]	; (8008738 <HAL_RCC_OscConfig+0x244>)
 8008666:	2201      	movs	r2, #1
 8008668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866a:	f7fc f92b 	bl	80048c4 <HAL_GetTick>
 800866e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008670:	e008      	b.n	8008684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008672:	f7fc f927 	bl	80048c4 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d901      	bls.n	8008684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e1a8      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008684:	4b2b      	ldr	r3, [pc, #172]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0f0      	beq.n	8008672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008690:	4b28      	ldr	r3, [pc, #160]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	4925      	ldr	r1, [pc, #148]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	600b      	str	r3, [r1, #0]
 80086a4:	e015      	b.n	80086d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086a6:	4b24      	ldr	r3, [pc, #144]	; (8008738 <HAL_RCC_OscConfig+0x244>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ac:	f7fc f90a 	bl	80048c4 <HAL_GetTick>
 80086b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086b4:	f7fc f906 	bl	80048c4 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e187      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086c6:	4b1b      	ldr	r3, [pc, #108]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1f0      	bne.n	80086b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0308 	and.w	r3, r3, #8
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d036      	beq.n	800874c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d016      	beq.n	8008714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086e6:	4b15      	ldr	r3, [pc, #84]	; (800873c <HAL_RCC_OscConfig+0x248>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ec:	f7fc f8ea 	bl	80048c4 <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086f2:	e008      	b.n	8008706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086f4:	f7fc f8e6 	bl	80048c4 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d901      	bls.n	8008706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e167      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008706:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <HAL_RCC_OscConfig+0x240>)
 8008708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0f0      	beq.n	80086f4 <HAL_RCC_OscConfig+0x200>
 8008712:	e01b      	b.n	800874c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008714:	4b09      	ldr	r3, [pc, #36]	; (800873c <HAL_RCC_OscConfig+0x248>)
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800871a:	f7fc f8d3 	bl	80048c4 <HAL_GetTick>
 800871e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008720:	e00e      	b.n	8008740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008722:	f7fc f8cf 	bl	80048c4 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d907      	bls.n	8008740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e150      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
 8008734:	40023800 	.word	0x40023800
 8008738:	42470000 	.word	0x42470000
 800873c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008740:	4b88      	ldr	r3, [pc, #544]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1ea      	bne.n	8008722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 8097 	beq.w	8008888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800875a:	2300      	movs	r3, #0
 800875c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800875e:	4b81      	ldr	r3, [pc, #516]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10f      	bne.n	800878a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800876a:	2300      	movs	r3, #0
 800876c:	60bb      	str	r3, [r7, #8]
 800876e:	4b7d      	ldr	r3, [pc, #500]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008772:	4a7c      	ldr	r2, [pc, #496]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008778:	6413      	str	r3, [r2, #64]	; 0x40
 800877a:	4b7a      	ldr	r3, [pc, #488]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 800877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008782:	60bb      	str	r3, [r7, #8]
 8008784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008786:	2301      	movs	r3, #1
 8008788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800878a:	4b77      	ldr	r3, [pc, #476]	; (8008968 <HAL_RCC_OscConfig+0x474>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008792:	2b00      	cmp	r3, #0
 8008794:	d118      	bne.n	80087c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008796:	4b74      	ldr	r3, [pc, #464]	; (8008968 <HAL_RCC_OscConfig+0x474>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a73      	ldr	r2, [pc, #460]	; (8008968 <HAL_RCC_OscConfig+0x474>)
 800879c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087a2:	f7fc f88f 	bl	80048c4 <HAL_GetTick>
 80087a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087a8:	e008      	b.n	80087bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087aa:	f7fc f88b 	bl	80048c4 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d901      	bls.n	80087bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e10c      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087bc:	4b6a      	ldr	r3, [pc, #424]	; (8008968 <HAL_RCC_OscConfig+0x474>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d0f0      	beq.n	80087aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d106      	bne.n	80087de <HAL_RCC_OscConfig+0x2ea>
 80087d0:	4b64      	ldr	r3, [pc, #400]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 80087d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d4:	4a63      	ldr	r2, [pc, #396]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 80087d6:	f043 0301 	orr.w	r3, r3, #1
 80087da:	6713      	str	r3, [r2, #112]	; 0x70
 80087dc:	e01c      	b.n	8008818 <HAL_RCC_OscConfig+0x324>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	2b05      	cmp	r3, #5
 80087e4:	d10c      	bne.n	8008800 <HAL_RCC_OscConfig+0x30c>
 80087e6:	4b5f      	ldr	r3, [pc, #380]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	4a5e      	ldr	r2, [pc, #376]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 80087ec:	f043 0304 	orr.w	r3, r3, #4
 80087f0:	6713      	str	r3, [r2, #112]	; 0x70
 80087f2:	4b5c      	ldr	r3, [pc, #368]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 80087f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f6:	4a5b      	ldr	r2, [pc, #364]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	6713      	str	r3, [r2, #112]	; 0x70
 80087fe:	e00b      	b.n	8008818 <HAL_RCC_OscConfig+0x324>
 8008800:	4b58      	ldr	r3, [pc, #352]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008804:	4a57      	ldr	r2, [pc, #348]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008806:	f023 0301 	bic.w	r3, r3, #1
 800880a:	6713      	str	r3, [r2, #112]	; 0x70
 800880c:	4b55      	ldr	r3, [pc, #340]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 800880e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008810:	4a54      	ldr	r2, [pc, #336]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008812:	f023 0304 	bic.w	r3, r3, #4
 8008816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d015      	beq.n	800884c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008820:	f7fc f850 	bl	80048c4 <HAL_GetTick>
 8008824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008826:	e00a      	b.n	800883e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008828:	f7fc f84c 	bl	80048c4 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	f241 3288 	movw	r2, #5000	; 0x1388
 8008836:	4293      	cmp	r3, r2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e0cb      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800883e:	4b49      	ldr	r3, [pc, #292]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0ee      	beq.n	8008828 <HAL_RCC_OscConfig+0x334>
 800884a:	e014      	b.n	8008876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800884c:	f7fc f83a 	bl	80048c4 <HAL_GetTick>
 8008850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008852:	e00a      	b.n	800886a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008854:	f7fc f836 	bl	80048c4 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008862:	4293      	cmp	r3, r2
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e0b5      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800886a:	4b3e      	ldr	r3, [pc, #248]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 800886c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1ee      	bne.n	8008854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d105      	bne.n	8008888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800887c:	4b39      	ldr	r3, [pc, #228]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	4a38      	ldr	r2, [pc, #224]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 80a1 	beq.w	80089d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008892:	4b34      	ldr	r3, [pc, #208]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f003 030c 	and.w	r3, r3, #12
 800889a:	2b08      	cmp	r3, #8
 800889c:	d05c      	beq.n	8008958 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d141      	bne.n	800892a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a6:	4b31      	ldr	r3, [pc, #196]	; (800896c <HAL_RCC_OscConfig+0x478>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ac:	f7fc f80a 	bl	80048c4 <HAL_GetTick>
 80088b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088b4:	f7fc f806 	bl	80048c4 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e087      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088c6:	4b27      	ldr	r3, [pc, #156]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f0      	bne.n	80088b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	69da      	ldr	r2, [r3, #28]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	019b      	lsls	r3, r3, #6
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e8:	085b      	lsrs	r3, r3, #1
 80088ea:	3b01      	subs	r3, #1
 80088ec:	041b      	lsls	r3, r3, #16
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	061b      	lsls	r3, r3, #24
 80088f6:	491b      	ldr	r1, [pc, #108]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088fc:	4b1b      	ldr	r3, [pc, #108]	; (800896c <HAL_RCC_OscConfig+0x478>)
 80088fe:	2201      	movs	r2, #1
 8008900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008902:	f7fb ffdf 	bl	80048c4 <HAL_GetTick>
 8008906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008908:	e008      	b.n	800891c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890a:	f7fb ffdb 	bl	80048c4 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d901      	bls.n	800891c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e05c      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800891c:	4b11      	ldr	r3, [pc, #68]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0f0      	beq.n	800890a <HAL_RCC_OscConfig+0x416>
 8008928:	e054      	b.n	80089d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800892a:	4b10      	ldr	r3, [pc, #64]	; (800896c <HAL_RCC_OscConfig+0x478>)
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008930:	f7fb ffc8 	bl	80048c4 <HAL_GetTick>
 8008934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008938:	f7fb ffc4 	bl	80048c4 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e045      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800894a:	4b06      	ldr	r3, [pc, #24]	; (8008964 <HAL_RCC_OscConfig+0x470>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1f0      	bne.n	8008938 <HAL_RCC_OscConfig+0x444>
 8008956:	e03d      	b.n	80089d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d107      	bne.n	8008970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e038      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
 8008964:	40023800 	.word	0x40023800
 8008968:	40007000 	.word	0x40007000
 800896c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008970:	4b1b      	ldr	r3, [pc, #108]	; (80089e0 <HAL_RCC_OscConfig+0x4ec>)
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d028      	beq.n	80089d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008988:	429a      	cmp	r2, r3
 800898a:	d121      	bne.n	80089d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008996:	429a      	cmp	r2, r3
 8008998:	d11a      	bne.n	80089d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089a0:	4013      	ands	r3, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d111      	bne.n	80089d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b6:	085b      	lsrs	r3, r3, #1
 80089b8:	3b01      	subs	r3, #1
 80089ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089bc:	429a      	cmp	r2, r3
 80089be:	d107      	bne.n	80089d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d001      	beq.n	80089d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e000      	b.n	80089d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40023800 	.word	0x40023800

080089e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e0cc      	b.n	8008b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089f8:	4b68      	ldr	r3, [pc, #416]	; (8008b9c <HAL_RCC_ClockConfig+0x1b8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d90c      	bls.n	8008a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a06:	4b65      	ldr	r3, [pc, #404]	; (8008b9c <HAL_RCC_ClockConfig+0x1b8>)
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a0e:	4b63      	ldr	r3, [pc, #396]	; (8008b9c <HAL_RCC_ClockConfig+0x1b8>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d001      	beq.n	8008a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e0b8      	b.n	8008b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d020      	beq.n	8008a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a38:	4b59      	ldr	r3, [pc, #356]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	4a58      	ldr	r2, [pc, #352]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d005      	beq.n	8008a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a50:	4b53      	ldr	r3, [pc, #332]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	4a52      	ldr	r2, [pc, #328]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a5c:	4b50      	ldr	r3, [pc, #320]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	494d      	ldr	r1, [pc, #308]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d044      	beq.n	8008b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d107      	bne.n	8008a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a82:	4b47      	ldr	r3, [pc, #284]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d119      	bne.n	8008ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e07f      	b.n	8008b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d003      	beq.n	8008aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d107      	bne.n	8008ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aa2:	4b3f      	ldr	r3, [pc, #252]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d109      	bne.n	8008ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e06f      	b.n	8008b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ab2:	4b3b      	ldr	r3, [pc, #236]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0302 	and.w	r3, r3, #2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e067      	b.n	8008b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ac2:	4b37      	ldr	r3, [pc, #220]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f023 0203 	bic.w	r2, r3, #3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	4934      	ldr	r1, [pc, #208]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ad4:	f7fb fef6 	bl	80048c4 <HAL_GetTick>
 8008ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ada:	e00a      	b.n	8008af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008adc:	f7fb fef2 	bl	80048c4 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e04f      	b.n	8008b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008af2:	4b2b      	ldr	r3, [pc, #172]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f003 020c 	and.w	r2, r3, #12
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d1eb      	bne.n	8008adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b04:	4b25      	ldr	r3, [pc, #148]	; (8008b9c <HAL_RCC_ClockConfig+0x1b8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d20c      	bcs.n	8008b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b12:	4b22      	ldr	r3, [pc, #136]	; (8008b9c <HAL_RCC_ClockConfig+0x1b8>)
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b1a:	4b20      	ldr	r3, [pc, #128]	; (8008b9c <HAL_RCC_ClockConfig+0x1b8>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0307 	and.w	r3, r3, #7
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d001      	beq.n	8008b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e032      	b.n	8008b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d008      	beq.n	8008b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b38:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	4916      	ldr	r1, [pc, #88]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b56:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	490e      	ldr	r1, [pc, #56]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b6a:	f000 f821 	bl	8008bb0 <HAL_RCC_GetSysClockFreq>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	091b      	lsrs	r3, r3, #4
 8008b76:	f003 030f 	and.w	r3, r3, #15
 8008b7a:	490a      	ldr	r1, [pc, #40]	; (8008ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8008b7c:	5ccb      	ldrb	r3, [r1, r3]
 8008b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b82:	4a09      	ldr	r2, [pc, #36]	; (8008ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8008b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b86:	4b09      	ldr	r3, [pc, #36]	; (8008bac <HAL_RCC_ClockConfig+0x1c8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fb fa26 	bl	8003fdc <HAL_InitTick>

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	40023c00 	.word	0x40023c00
 8008ba0:	40023800 	.word	0x40023800
 8008ba4:	0801e9d0 	.word	0x0801e9d0
 8008ba8:	20000010 	.word	0x20000010
 8008bac:	20000028 	.word	0x20000028

08008bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb4:	b094      	sub	sp, #80	; 0x50
 8008bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	647b      	str	r3, [r7, #68]	; 0x44
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bc8:	4b79      	ldr	r3, [pc, #484]	; (8008db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 030c 	and.w	r3, r3, #12
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d00d      	beq.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	f200 80e1 	bhi.w	8008d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <HAL_RCC_GetSysClockFreq+0x34>
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d003      	beq.n	8008bea <HAL_RCC_GetSysClockFreq+0x3a>
 8008be2:	e0db      	b.n	8008d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008be4:	4b73      	ldr	r3, [pc, #460]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008be6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008be8:	e0db      	b.n	8008da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bea:	4b73      	ldr	r3, [pc, #460]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8008bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bee:	e0d8      	b.n	8008da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bf0:	4b6f      	ldr	r3, [pc, #444]	; (8008db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bfa:	4b6d      	ldr	r3, [pc, #436]	; (8008db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d063      	beq.n	8008cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c06:	4b6a      	ldr	r3, [pc, #424]	; (8008db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	099b      	lsrs	r3, r3, #6
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c18:	633b      	str	r3, [r7, #48]	; 0x30
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c22:	4622      	mov	r2, r4
 8008c24:	462b      	mov	r3, r5
 8008c26:	f04f 0000 	mov.w	r0, #0
 8008c2a:	f04f 0100 	mov.w	r1, #0
 8008c2e:	0159      	lsls	r1, r3, #5
 8008c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c34:	0150      	lsls	r0, r2, #5
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	1a51      	subs	r1, r2, r1
 8008c3e:	6139      	str	r1, [r7, #16]
 8008c40:	4629      	mov	r1, r5
 8008c42:	eb63 0301 	sbc.w	r3, r3, r1
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	f04f 0200 	mov.w	r2, #0
 8008c4c:	f04f 0300 	mov.w	r3, #0
 8008c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c54:	4659      	mov	r1, fp
 8008c56:	018b      	lsls	r3, r1, #6
 8008c58:	4651      	mov	r1, sl
 8008c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c5e:	4651      	mov	r1, sl
 8008c60:	018a      	lsls	r2, r1, #6
 8008c62:	4651      	mov	r1, sl
 8008c64:	ebb2 0801 	subs.w	r8, r2, r1
 8008c68:	4659      	mov	r1, fp
 8008c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8008c6e:	f04f 0200 	mov.w	r2, #0
 8008c72:	f04f 0300 	mov.w	r3, #0
 8008c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c82:	4690      	mov	r8, r2
 8008c84:	4699      	mov	r9, r3
 8008c86:	4623      	mov	r3, r4
 8008c88:	eb18 0303 	adds.w	r3, r8, r3
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	462b      	mov	r3, r5
 8008c90:	eb49 0303 	adc.w	r3, r9, r3
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	f04f 0200 	mov.w	r2, #0
 8008c9a:	f04f 0300 	mov.w	r3, #0
 8008c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	024b      	lsls	r3, r1, #9
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008cac:	4621      	mov	r1, r4
 8008cae:	024a      	lsls	r2, r1, #9
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cc0:	f7f8 f84a 	bl	8000d58 <__aeabi_uldivmod>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4613      	mov	r3, r2
 8008cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ccc:	e058      	b.n	8008d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cce:	4b38      	ldr	r3, [pc, #224]	; (8008db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	099b      	lsrs	r3, r3, #6
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	4611      	mov	r1, r2
 8008cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008cde:	623b      	str	r3, [r7, #32]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008ce8:	4642      	mov	r2, r8
 8008cea:	464b      	mov	r3, r9
 8008cec:	f04f 0000 	mov.w	r0, #0
 8008cf0:	f04f 0100 	mov.w	r1, #0
 8008cf4:	0159      	lsls	r1, r3, #5
 8008cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cfa:	0150      	lsls	r0, r2, #5
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4641      	mov	r1, r8
 8008d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d06:	4649      	mov	r1, r9
 8008d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d20:	ebb2 040a 	subs.w	r4, r2, sl
 8008d24:	eb63 050b 	sbc.w	r5, r3, fp
 8008d28:	f04f 0200 	mov.w	r2, #0
 8008d2c:	f04f 0300 	mov.w	r3, #0
 8008d30:	00eb      	lsls	r3, r5, #3
 8008d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d36:	00e2      	lsls	r2, r4, #3
 8008d38:	4614      	mov	r4, r2
 8008d3a:	461d      	mov	r5, r3
 8008d3c:	4643      	mov	r3, r8
 8008d3e:	18e3      	adds	r3, r4, r3
 8008d40:	603b      	str	r3, [r7, #0]
 8008d42:	464b      	mov	r3, r9
 8008d44:	eb45 0303 	adc.w	r3, r5, r3
 8008d48:	607b      	str	r3, [r7, #4]
 8008d4a:	f04f 0200 	mov.w	r2, #0
 8008d4e:	f04f 0300 	mov.w	r3, #0
 8008d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d56:	4629      	mov	r1, r5
 8008d58:	028b      	lsls	r3, r1, #10
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d60:	4621      	mov	r1, r4
 8008d62:	028a      	lsls	r2, r1, #10
 8008d64:	4610      	mov	r0, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	61bb      	str	r3, [r7, #24]
 8008d6e:	61fa      	str	r2, [r7, #28]
 8008d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d74:	f7f7 fff0 	bl	8000d58 <__aeabi_uldivmod>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d80:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	0c1b      	lsrs	r3, r3, #16
 8008d86:	f003 0303 	and.w	r3, r3, #3
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d9a:	e002      	b.n	8008da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3750      	adds	r7, #80	; 0x50
 8008da8:	46bd      	mov	sp, r7
 8008daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dae:	bf00      	nop
 8008db0:	40023800 	.word	0x40023800
 8008db4:	00f42400 	.word	0x00f42400
 8008db8:	007a1200 	.word	0x007a1200

08008dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dc0:	4b03      	ldr	r3, [pc, #12]	; (8008dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20000010 	.word	0x20000010

08008dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008dd8:	f7ff fff0 	bl	8008dbc <HAL_RCC_GetHCLKFreq>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	0a9b      	lsrs	r3, r3, #10
 8008de4:	f003 0307 	and.w	r3, r3, #7
 8008de8:	4903      	ldr	r1, [pc, #12]	; (8008df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dea:	5ccb      	ldrb	r3, [r1, r3]
 8008dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	40023800 	.word	0x40023800
 8008df8:	0801e9e0 	.word	0x0801e9e0

08008dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e00:	f7ff ffdc 	bl	8008dbc <HAL_RCC_GetHCLKFreq>
 8008e04:	4602      	mov	r2, r0
 8008e06:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	0b5b      	lsrs	r3, r3, #13
 8008e0c:	f003 0307 	and.w	r3, r3, #7
 8008e10:	4903      	ldr	r1, [pc, #12]	; (8008e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e12:	5ccb      	ldrb	r3, [r1, r3]
 8008e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	40023800 	.word	0x40023800
 8008e20:	0801e9e0 	.word	0x0801e9e0

08008e24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	220f      	movs	r2, #15
 8008e32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e34:	4b12      	ldr	r3, [pc, #72]	; (8008e80 <HAL_RCC_GetClockConfig+0x5c>)
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f003 0203 	and.w	r2, r3, #3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008e40:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <HAL_RCC_GetClockConfig+0x5c>)
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e4c:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <HAL_RCC_GetClockConfig+0x5c>)
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008e58:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <HAL_RCC_GetClockConfig+0x5c>)
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	08db      	lsrs	r3, r3, #3
 8008e5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e66:	4b07      	ldr	r3, [pc, #28]	; (8008e84 <HAL_RCC_GetClockConfig+0x60>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0207 	and.w	r2, r3, #7
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	601a      	str	r2, [r3, #0]
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40023800 	.word	0x40023800
 8008e84:	40023c00 	.word	0x40023c00

08008e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e041      	b.n	8008f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f839 	bl	8008f26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	f000 fc7a 	bl	80097c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b083      	sub	sp, #12
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f2e:	bf00      	nop
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
	...

08008f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d001      	beq.n	8008f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e044      	b.n	8008fde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0201 	orr.w	r2, r2, #1
 8008f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1e      	ldr	r2, [pc, #120]	; (8008fec <HAL_TIM_Base_Start_IT+0xb0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d018      	beq.n	8008fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f7e:	d013      	beq.n	8008fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a1a      	ldr	r2, [pc, #104]	; (8008ff0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d00e      	beq.n	8008fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a19      	ldr	r2, [pc, #100]	; (8008ff4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d009      	beq.n	8008fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a17      	ldr	r2, [pc, #92]	; (8008ff8 <HAL_TIM_Base_Start_IT+0xbc>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d004      	beq.n	8008fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a16      	ldr	r2, [pc, #88]	; (8008ffc <HAL_TIM_Base_Start_IT+0xc0>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d111      	bne.n	8008fcc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b06      	cmp	r3, #6
 8008fb8:	d010      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f042 0201 	orr.w	r2, r2, #1
 8008fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fca:	e007      	b.n	8008fdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0201 	orr.w	r2, r2, #1
 8008fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	40010000 	.word	0x40010000
 8008ff0:	40000400 	.word	0x40000400
 8008ff4:	40000800 	.word	0x40000800
 8008ff8:	40000c00 	.word	0x40000c00
 8008ffc:	40014000 	.word	0x40014000

08009000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <HAL_TIM_PWM_Start+0x24>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b01      	cmp	r3, #1
 800901a:	bf14      	ite	ne
 800901c:	2301      	movne	r3, #1
 800901e:	2300      	moveq	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	e022      	b.n	800906a <HAL_TIM_PWM_Start+0x6a>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b04      	cmp	r3, #4
 8009028:	d109      	bne.n	800903e <HAL_TIM_PWM_Start+0x3e>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b01      	cmp	r3, #1
 8009034:	bf14      	ite	ne
 8009036:	2301      	movne	r3, #1
 8009038:	2300      	moveq	r3, #0
 800903a:	b2db      	uxtb	r3, r3
 800903c:	e015      	b.n	800906a <HAL_TIM_PWM_Start+0x6a>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b08      	cmp	r3, #8
 8009042:	d109      	bne.n	8009058 <HAL_TIM_PWM_Start+0x58>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b01      	cmp	r3, #1
 800904e:	bf14      	ite	ne
 8009050:	2301      	movne	r3, #1
 8009052:	2300      	moveq	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	e008      	b.n	800906a <HAL_TIM_PWM_Start+0x6a>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b01      	cmp	r3, #1
 8009062:	bf14      	ite	ne
 8009064:	2301      	movne	r3, #1
 8009066:	2300      	moveq	r3, #0
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e068      	b.n	8009144 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <HAL_TIM_PWM_Start+0x82>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009080:	e013      	b.n	80090aa <HAL_TIM_PWM_Start+0xaa>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b04      	cmp	r3, #4
 8009086:	d104      	bne.n	8009092 <HAL_TIM_PWM_Start+0x92>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009090:	e00b      	b.n	80090aa <HAL_TIM_PWM_Start+0xaa>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d104      	bne.n	80090a2 <HAL_TIM_PWM_Start+0xa2>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090a0:	e003      	b.n	80090aa <HAL_TIM_PWM_Start+0xaa>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2202      	movs	r2, #2
 80090a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2201      	movs	r2, #1
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fd90 	bl	8009bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a23      	ldr	r2, [pc, #140]	; (800914c <HAL_TIM_PWM_Start+0x14c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d107      	bne.n	80090d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a1d      	ldr	r2, [pc, #116]	; (800914c <HAL_TIM_PWM_Start+0x14c>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d018      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e4:	d013      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a19      	ldr	r2, [pc, #100]	; (8009150 <HAL_TIM_PWM_Start+0x150>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00e      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a17      	ldr	r2, [pc, #92]	; (8009154 <HAL_TIM_PWM_Start+0x154>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d009      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a16      	ldr	r2, [pc, #88]	; (8009158 <HAL_TIM_PWM_Start+0x158>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d004      	beq.n	800910e <HAL_TIM_PWM_Start+0x10e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a14      	ldr	r2, [pc, #80]	; (800915c <HAL_TIM_PWM_Start+0x15c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d111      	bne.n	8009132 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b06      	cmp	r3, #6
 800911e:	d010      	beq.n	8009142 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0201 	orr.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009130:	e007      	b.n	8009142 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0201 	orr.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	40010000 	.word	0x40010000
 8009150:	40000400 	.word	0x40000400
 8009154:	40000800 	.word	0x40000800
 8009158:	40000c00 	.word	0x40000c00
 800915c:	40014000 	.word	0x40014000

08009160 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e097      	b.n	80092a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d106      	bne.n	800918e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f88f 	bl	80092ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2202      	movs	r2, #2
 8009192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6812      	ldr	r2, [r2, #0]
 80091a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091a4:	f023 0307 	bic.w	r3, r3, #7
 80091a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f000 fb03 	bl	80097c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091e2:	f023 0303 	bic.w	r3, r3, #3
 80091e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	021b      	lsls	r3, r3, #8
 80091f2:	4313      	orrs	r3, r2
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009200:	f023 030c 	bic.w	r3, r3, #12
 8009204:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800920c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	4313      	orrs	r3, r2
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4313      	orrs	r3, r2
 8009222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	011a      	lsls	r2, r3, #4
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	031b      	lsls	r3, r3, #12
 8009230:	4313      	orrs	r3, r2
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4313      	orrs	r3, r2
 8009236:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800923e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009246:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	695b      	ldr	r3, [r3, #20]
 8009250:	011b      	lsls	r3, r3, #4
 8009252:	4313      	orrs	r3, r2
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d110      	bne.n	8009312 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d102      	bne.n	80092fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80092f6:	7b7b      	ldrb	r3, [r7, #13]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d001      	beq.n	8009300 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e069      	b.n	80093d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2202      	movs	r2, #2
 800930c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009310:	e031      	b.n	8009376 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b04      	cmp	r3, #4
 8009316:	d110      	bne.n	800933a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d102      	bne.n	8009324 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800931e:	7b3b      	ldrb	r3, [r7, #12]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d001      	beq.n	8009328 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e055      	b.n	80093d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009338:	e01d      	b.n	8009376 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d108      	bne.n	8009352 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d105      	bne.n	8009352 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009346:	7b7b      	ldrb	r3, [r7, #13]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d102      	bne.n	8009352 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800934c:	7b3b      	ldrb	r3, [r7, #12]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d001      	beq.n	8009356 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e03e      	b.n	80093d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2202      	movs	r2, #2
 800935a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2202      	movs	r2, #2
 8009362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2202      	movs	r2, #2
 800936a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2202      	movs	r2, #2
 8009372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <HAL_TIM_Encoder_Start+0xc4>
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	2b04      	cmp	r3, #4
 8009380:	d008      	beq.n	8009394 <HAL_TIM_Encoder_Start+0xd4>
 8009382:	e00f      	b.n	80093a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2201      	movs	r2, #1
 800938a:	2100      	movs	r1, #0
 800938c:	4618      	mov	r0, r3
 800938e:	f000 fc23 	bl	8009bd8 <TIM_CCxChannelCmd>
      break;
 8009392:	e016      	b.n	80093c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2201      	movs	r2, #1
 800939a:	2104      	movs	r1, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fc1b 	bl	8009bd8 <TIM_CCxChannelCmd>
      break;
 80093a2:	e00e      	b.n	80093c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2201      	movs	r2, #1
 80093aa:	2100      	movs	r1, #0
 80093ac:	4618      	mov	r0, r3
 80093ae:	f000 fc13 	bl	8009bd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2201      	movs	r2, #1
 80093b8:	2104      	movs	r1, #4
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fc0c 	bl	8009bd8 <TIM_CCxChannelCmd>
      break;
 80093c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f042 0201 	orr.w	r2, r2, #1
 80093d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d122      	bne.n	8009438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f003 0302 	and.w	r3, r3, #2
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d11b      	bne.n	8009438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0202 	mvn.w	r2, #2
 8009408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	f003 0303 	and.w	r3, r3, #3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f9b0 	bl	8009784 <HAL_TIM_IC_CaptureCallback>
 8009424:	e005      	b.n	8009432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f9a2 	bl	8009770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f9b3 	bl	8009798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	2b04      	cmp	r3, #4
 8009444:	d122      	bne.n	800948c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b04      	cmp	r3, #4
 8009452:	d11b      	bne.n	800948c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0204 	mvn.w	r2, #4
 800945c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2202      	movs	r2, #2
 8009462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f986 	bl	8009784 <HAL_TIM_IC_CaptureCallback>
 8009478:	e005      	b.n	8009486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f978 	bl	8009770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f989 	bl	8009798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0308 	and.w	r3, r3, #8
 8009496:	2b08      	cmp	r3, #8
 8009498:	d122      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d11b      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0208 	mvn.w	r2, #8
 80094b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2204      	movs	r2, #4
 80094b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f95c 	bl	8009784 <HAL_TIM_IC_CaptureCallback>
 80094cc:	e005      	b.n	80094da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f94e 	bl	8009770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f95f 	bl	8009798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f003 0310 	and.w	r3, r3, #16
 80094ea:	2b10      	cmp	r3, #16
 80094ec:	d122      	bne.n	8009534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f003 0310 	and.w	r3, r3, #16
 80094f8:	2b10      	cmp	r3, #16
 80094fa:	d11b      	bne.n	8009534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f06f 0210 	mvn.w	r2, #16
 8009504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2208      	movs	r2, #8
 800950a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f932 	bl	8009784 <HAL_TIM_IC_CaptureCallback>
 8009520:	e005      	b.n	800952e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f924 	bl	8009770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f935 	bl	8009798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b01      	cmp	r3, #1
 8009540:	d10e      	bne.n	8009560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b01      	cmp	r3, #1
 800954e:	d107      	bne.n	8009560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f06f 0201 	mvn.w	r2, #1
 8009558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7f9 fea8 	bl	80032b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956a:	2b80      	cmp	r3, #128	; 0x80
 800956c:	d10e      	bne.n	800958c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009578:	2b80      	cmp	r3, #128	; 0x80
 800957a:	d107      	bne.n	800958c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fb55 	bl	8009c36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009596:	2b40      	cmp	r3, #64	; 0x40
 8009598:	d10e      	bne.n	80095b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a4:	2b40      	cmp	r3, #64	; 0x40
 80095a6:	d107      	bne.n	80095b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f8fa 	bl	80097ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	f003 0320 	and.w	r3, r3, #32
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	d10e      	bne.n	80095e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d107      	bne.n	80095e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f06f 0220 	mvn.w	r2, #32
 80095dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fb1f 	bl	8009c22 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009602:	2b01      	cmp	r3, #1
 8009604:	d101      	bne.n	800960a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009606:	2302      	movs	r3, #2
 8009608:	e0ae      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b0c      	cmp	r3, #12
 8009616:	f200 809f 	bhi.w	8009758 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800961a:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	08009655 	.word	0x08009655
 8009624:	08009759 	.word	0x08009759
 8009628:	08009759 	.word	0x08009759
 800962c:	08009759 	.word	0x08009759
 8009630:	08009695 	.word	0x08009695
 8009634:	08009759 	.word	0x08009759
 8009638:	08009759 	.word	0x08009759
 800963c:	08009759 	.word	0x08009759
 8009640:	080096d7 	.word	0x080096d7
 8009644:	08009759 	.word	0x08009759
 8009648:	08009759 	.word	0x08009759
 800964c:	08009759 	.word	0x08009759
 8009650:	08009717 	.word	0x08009717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f930 	bl	80098c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699a      	ldr	r2, [r3, #24]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f042 0208 	orr.w	r2, r2, #8
 800966e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	699a      	ldr	r2, [r3, #24]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0204 	bic.w	r2, r2, #4
 800967e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6999      	ldr	r1, [r3, #24]
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	691a      	ldr	r2, [r3, #16]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	619a      	str	r2, [r3, #24]
      break;
 8009692:	e064      	b.n	800975e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	4618      	mov	r0, r3
 800969c:	f000 f976 	bl	800998c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699a      	ldr	r2, [r3, #24]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	699a      	ldr	r2, [r3, #24]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6999      	ldr	r1, [r3, #24]
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	021a      	lsls	r2, r3, #8
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	619a      	str	r2, [r3, #24]
      break;
 80096d4:	e043      	b.n	800975e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 f9c1 	bl	8009a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	69da      	ldr	r2, [r3, #28]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0208 	orr.w	r2, r2, #8
 80096f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	69da      	ldr	r2, [r3, #28]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0204 	bic.w	r2, r2, #4
 8009700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69d9      	ldr	r1, [r3, #28]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	691a      	ldr	r2, [r3, #16]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	430a      	orrs	r2, r1
 8009712:	61da      	str	r2, [r3, #28]
      break;
 8009714:	e023      	b.n	800975e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68b9      	ldr	r1, [r7, #8]
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fa0b 	bl	8009b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69da      	ldr	r2, [r3, #28]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	69da      	ldr	r2, [r3, #28]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69d9      	ldr	r1, [r3, #28]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	021a      	lsls	r2, r3, #8
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	61da      	str	r2, [r3, #28]
      break;
 8009756:	e002      	b.n	800975e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	75fb      	strb	r3, [r7, #23]
      break;
 800975c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a34      	ldr	r2, [pc, #208]	; (80098a4 <TIM_Base_SetConfig+0xe4>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d00f      	beq.n	80097f8 <TIM_Base_SetConfig+0x38>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097de:	d00b      	beq.n	80097f8 <TIM_Base_SetConfig+0x38>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a31      	ldr	r2, [pc, #196]	; (80098a8 <TIM_Base_SetConfig+0xe8>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d007      	beq.n	80097f8 <TIM_Base_SetConfig+0x38>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a30      	ldr	r2, [pc, #192]	; (80098ac <TIM_Base_SetConfig+0xec>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d003      	beq.n	80097f8 <TIM_Base_SetConfig+0x38>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a2f      	ldr	r2, [pc, #188]	; (80098b0 <TIM_Base_SetConfig+0xf0>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d108      	bne.n	800980a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	4313      	orrs	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a25      	ldr	r2, [pc, #148]	; (80098a4 <TIM_Base_SetConfig+0xe4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d01b      	beq.n	800984a <TIM_Base_SetConfig+0x8a>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009818:	d017      	beq.n	800984a <TIM_Base_SetConfig+0x8a>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a22      	ldr	r2, [pc, #136]	; (80098a8 <TIM_Base_SetConfig+0xe8>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d013      	beq.n	800984a <TIM_Base_SetConfig+0x8a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a21      	ldr	r2, [pc, #132]	; (80098ac <TIM_Base_SetConfig+0xec>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d00f      	beq.n	800984a <TIM_Base_SetConfig+0x8a>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a20      	ldr	r2, [pc, #128]	; (80098b0 <TIM_Base_SetConfig+0xf0>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d00b      	beq.n	800984a <TIM_Base_SetConfig+0x8a>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a1f      	ldr	r2, [pc, #124]	; (80098b4 <TIM_Base_SetConfig+0xf4>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d007      	beq.n	800984a <TIM_Base_SetConfig+0x8a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a1e      	ldr	r2, [pc, #120]	; (80098b8 <TIM_Base_SetConfig+0xf8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d003      	beq.n	800984a <TIM_Base_SetConfig+0x8a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <TIM_Base_SetConfig+0xfc>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d108      	bne.n	800985c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4313      	orrs	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a08      	ldr	r2, [pc, #32]	; (80098a4 <TIM_Base_SetConfig+0xe4>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d103      	bne.n	8009890 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	691a      	ldr	r2, [r3, #16]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	615a      	str	r2, [r3, #20]
}
 8009896:	bf00      	nop
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	40010000 	.word	0x40010000
 80098a8:	40000400 	.word	0x40000400
 80098ac:	40000800 	.word	0x40000800
 80098b0:	40000c00 	.word	0x40000c00
 80098b4:	40014000 	.word	0x40014000
 80098b8:	40014400 	.word	0x40014400
 80098bc:	40014800 	.word	0x40014800

080098c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	f023 0201 	bic.w	r2, r3, #1
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 0303 	bic.w	r3, r3, #3
 80098f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f023 0302 	bic.w	r3, r3, #2
 8009908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	4313      	orrs	r3, r2
 8009912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a1c      	ldr	r2, [pc, #112]	; (8009988 <TIM_OC1_SetConfig+0xc8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d10c      	bne.n	8009936 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	f023 0308 	bic.w	r3, r3, #8
 8009922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	4313      	orrs	r3, r2
 800992c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f023 0304 	bic.w	r3, r3, #4
 8009934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a13      	ldr	r2, [pc, #76]	; (8009988 <TIM_OC1_SetConfig+0xc8>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d111      	bne.n	8009962 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800994c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4313      	orrs	r3, r2
 8009960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	621a      	str	r2, [r3, #32]
}
 800997c:	bf00      	nop
 800997e:	371c      	adds	r7, #28
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	40010000 	.word	0x40010000

0800998c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	f023 0210 	bic.w	r2, r3, #16
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	021b      	lsls	r3, r3, #8
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f023 0320 	bic.w	r3, r3, #32
 80099d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	011b      	lsls	r3, r3, #4
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a1e      	ldr	r2, [pc, #120]	; (8009a60 <TIM_OC2_SetConfig+0xd4>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d10d      	bne.n	8009a08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	011b      	lsls	r3, r3, #4
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a15      	ldr	r2, [pc, #84]	; (8009a60 <TIM_OC2_SetConfig+0xd4>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d113      	bne.n	8009a38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	621a      	str	r2, [r3, #32]
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	40010000 	.word	0x40010000

08009a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f023 0303 	bic.w	r3, r3, #3
 8009a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	021b      	lsls	r3, r3, #8
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <TIM_OC3_SetConfig+0xd0>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d10d      	bne.n	8009ade <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a14      	ldr	r2, [pc, #80]	; (8009b34 <TIM_OC3_SetConfig+0xd0>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d113      	bne.n	8009b0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	011b      	lsls	r3, r3, #4
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	621a      	str	r2, [r3, #32]
}
 8009b28:	bf00      	nop
 8009b2a:	371c      	adds	r7, #28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	40010000 	.word	0x40010000

08009b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	031b      	lsls	r3, r3, #12
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a10      	ldr	r2, [pc, #64]	; (8009bd4 <TIM_OC4_SetConfig+0x9c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d109      	bne.n	8009bac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	019b      	lsls	r3, r3, #6
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	621a      	str	r2, [r3, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40010000 	.word	0x40010000

08009bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f003 031f 	and.w	r3, r3, #31
 8009bea:	2201      	movs	r2, #1
 8009bec:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a1a      	ldr	r2, [r3, #32]
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	43db      	mvns	r3, r3
 8009bfa:	401a      	ands	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6a1a      	ldr	r2, [r3, #32]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f003 031f 	and.w	r3, r3, #31
 8009c0a:	6879      	ldr	r1, [r7, #4]
 8009c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c10:	431a      	orrs	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	621a      	str	r2, [r3, #32]
}
 8009c16:	bf00      	nop
 8009c18:	371c      	adds	r7, #28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b083      	sub	sp, #12
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c3e:	bf00      	nop
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e03f      	b.n	8009cdc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d106      	bne.n	8009c76 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7fa f845 	bl	8003d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2224      	movs	r2, #36	; 0x24
 8009c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f001 f8d6 	bl	800ae40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691a      	ldr	r2, [r3, #16]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ca2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	695a      	ldr	r2, [r3, #20]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cb2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cc2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08a      	sub	sp, #40	; 0x28
 8009ce8:	af02      	add	r7, sp, #8
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b20      	cmp	r3, #32
 8009d02:	d17c      	bne.n	8009dfe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <HAL_UART_Transmit+0x2c>
 8009d0a:	88fb      	ldrh	r3, [r7, #6]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e075      	b.n	8009e00 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <HAL_UART_Transmit+0x3e>
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e06e      	b.n	8009e00 <HAL_UART_Transmit+0x11c>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2221      	movs	r2, #33	; 0x21
 8009d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d38:	f7fa fdc4 	bl	80048c4 <HAL_GetTick>
 8009d3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	88fa      	ldrh	r2, [r7, #6]
 8009d42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	88fa      	ldrh	r2, [r7, #6]
 8009d48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d52:	d108      	bne.n	8009d66 <HAL_UART_Transmit+0x82>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d104      	bne.n	8009d66 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	61bb      	str	r3, [r7, #24]
 8009d64:	e003      	b.n	8009d6e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d76:	e02a      	b.n	8009dce <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	2180      	movs	r1, #128	; 0x80
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 fd8d 	bl	800a8a2 <UART_WaitOnFlagUntilTimeout>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e036      	b.n	8009e00 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10b      	bne.n	8009db0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009da6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	3302      	adds	r3, #2
 8009dac:	61bb      	str	r3, [r7, #24]
 8009dae:	e007      	b.n	8009dc0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	781a      	ldrb	r2, [r3, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1cf      	bne.n	8009d78 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2200      	movs	r2, #0
 8009de0:	2140      	movs	r1, #64	; 0x40
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 fd5d 	bl	800a8a2 <UART_WaitOnFlagUntilTimeout>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e006      	b.n	8009e00 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e000      	b.n	8009e00 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009dfe:	2302      	movs	r3, #2
  }
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3720      	adds	r7, #32
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08c      	sub	sp, #48	; 0x30
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	d165      	bne.n	8009eee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <HAL_UART_Transmit_DMA+0x26>
 8009e28:	88fb      	ldrh	r3, [r7, #6]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e05e      	b.n	8009ef0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d101      	bne.n	8009e40 <HAL_UART_Transmit_DMA+0x38>
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e057      	b.n	8009ef0 <HAL_UART_Transmit_DMA+0xe8>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	88fa      	ldrh	r2, [r7, #6]
 8009e52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	88fa      	ldrh	r2, [r7, #6]
 8009e58:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2221      	movs	r2, #33	; 0x21
 8009e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6c:	4a22      	ldr	r2, [pc, #136]	; (8009ef8 <HAL_UART_Transmit_DMA+0xf0>)
 8009e6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	4a21      	ldr	r2, [pc, #132]	; (8009efc <HAL_UART_Transmit_DMA+0xf4>)
 8009e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7c:	4a20      	ldr	r2, [pc, #128]	; (8009f00 <HAL_UART_Transmit_DMA+0xf8>)
 8009e7e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e84:	2200      	movs	r2, #0
 8009e86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009e88:	f107 0308 	add.w	r3, r7, #8
 8009e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e94:	6819      	ldr	r1, [r3, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	88fb      	ldrh	r3, [r7, #6]
 8009ea0:	f7fb f9a0 	bl	80051e4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009eac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3314      	adds	r3, #20
 8009ebc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	e853 3f00 	ldrex	r3, [r3]
 8009ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3314      	adds	r3, #20
 8009ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ed6:	627a      	str	r2, [r7, #36]	; 0x24
 8009ed8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eda:	6a39      	ldr	r1, [r7, #32]
 8009edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ede:	e841 2300 	strex	r3, r2, [r1]
 8009ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1e5      	bne.n	8009eb6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	e000      	b.n	8009ef0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009eee:	2302      	movs	r3, #2
  }
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3730      	adds	r7, #48	; 0x30
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	0800a5fd 	.word	0x0800a5fd
 8009efc:	0800a697 	.word	0x0800a697
 8009f00:	0800a80f 	.word	0x0800a80f

08009f04 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b20      	cmp	r3, #32
 8009f1c:	d11d      	bne.n	8009f5a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <HAL_UART_Receive_DMA+0x26>
 8009f24:	88fb      	ldrh	r3, [r7, #6]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e016      	b.n	8009f5c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d101      	bne.n	8009f3c <HAL_UART_Receive_DMA+0x38>
 8009f38:	2302      	movs	r3, #2
 8009f3a:	e00f      	b.n	8009f5c <HAL_UART_Receive_DMA+0x58>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f4a:	88fb      	ldrh	r3, [r7, #6]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	68b9      	ldr	r1, [r7, #8]
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 fd15 	bl	800a980 <UART_Start_Receive_DMA>
 8009f56:	4603      	mov	r3, r0
 8009f58:	e000      	b.n	8009f5c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009f5a:	2302      	movs	r3, #2
  }
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b090      	sub	sp, #64	; 0x40
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7a:	2b80      	cmp	r3, #128	; 0x80
 8009f7c:	bf0c      	ite	eq
 8009f7e:	2301      	moveq	r3, #1
 8009f80:	2300      	movne	r3, #0
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b21      	cmp	r3, #33	; 0x21
 8009f90:	d128      	bne.n	8009fe4 <HAL_UART_DMAStop+0x80>
 8009f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d025      	beq.n	8009fe4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3314      	adds	r3, #20
 8009f9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3314      	adds	r3, #20
 8009fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fb8:	633a      	str	r2, [r7, #48]	; 0x30
 8009fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e5      	bne.n	8009f98 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fb f95b 	bl	8005294 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fd6c 	bl	800aabc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fee:	2b40      	cmp	r3, #64	; 0x40
 8009ff0:	bf0c      	ite	eq
 8009ff2:	2301      	moveq	r3, #1
 8009ff4:	2300      	movne	r3, #0
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b22      	cmp	r3, #34	; 0x22
 800a004:	d128      	bne.n	800a058 <HAL_UART_DMAStop+0xf4>
 800a006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d025      	beq.n	800a058 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3314      	adds	r3, #20
 800a012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	e853 3f00 	ldrex	r3, [r3]
 800a01a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a022:	637b      	str	r3, [r7, #52]	; 0x34
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3314      	adds	r3, #20
 800a02a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a02c:	61fa      	str	r2, [r7, #28]
 800a02e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a030:	69b9      	ldr	r1, [r7, #24]
 800a032:	69fa      	ldr	r2, [r7, #28]
 800a034:	e841 2300 	strex	r3, r2, [r1]
 800a038:	617b      	str	r3, [r7, #20]
   return(result);
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1e5      	bne.n	800a00c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a044:	2b00      	cmp	r3, #0
 800a046:	d004      	beq.n	800a052 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fb f921 	bl	8005294 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fd5a 	bl	800ab0c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3740      	adds	r7, #64	; 0x40
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b0ba      	sub	sp, #232	; 0xe8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a08a:	2300      	movs	r3, #0
 800a08c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a090:	2300      	movs	r3, #0
 800a092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a09a:	f003 030f 	and.w	r3, r3, #15
 800a09e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a0a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10f      	bne.n	800a0ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d009      	beq.n	800a0ca <HAL_UART_IRQHandler+0x66>
 800a0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ba:	f003 0320 	and.w	r3, r3, #32
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fe01 	bl	800acca <UART_Receive_IT>
      return;
 800a0c8:	e256      	b.n	800a578 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a0ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 80de 	beq.w	800a290 <HAL_UART_IRQHandler+0x22c>
 800a0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 80d1 	beq.w	800a290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a0ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00b      	beq.n	800a112 <HAL_UART_IRQHandler+0xae>
 800a0fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a102:	2b00      	cmp	r3, #0
 800a104:	d005      	beq.n	800a112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10a:	f043 0201 	orr.w	r2, r3, #1
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <HAL_UART_IRQHandler+0xd2>
 800a11e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	2b00      	cmp	r3, #0
 800a128:	d005      	beq.n	800a136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12e:	f043 0202 	orr.w	r2, r3, #2
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00b      	beq.n	800a15a <HAL_UART_IRQHandler+0xf6>
 800a142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d005      	beq.n	800a15a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	f043 0204 	orr.w	r2, r3, #4
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a15e:	f003 0308 	and.w	r3, r3, #8
 800a162:	2b00      	cmp	r3, #0
 800a164:	d011      	beq.n	800a18a <HAL_UART_IRQHandler+0x126>
 800a166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a16a:	f003 0320 	and.w	r3, r3, #32
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d105      	bne.n	800a17e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d005      	beq.n	800a18a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	f043 0208 	orr.w	r2, r3, #8
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 81ed 	beq.w	800a56e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a198:	f003 0320 	and.w	r3, r3, #32
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d008      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x14e>
 800a1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1a4:	f003 0320 	and.w	r3, r3, #32
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fd8c 	bl	800acca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1bc:	2b40      	cmp	r3, #64	; 0x40
 800a1be:	bf0c      	ite	eq
 800a1c0:	2301      	moveq	r3, #1
 800a1c2:	2300      	movne	r3, #0
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	f003 0308 	and.w	r3, r3, #8
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d103      	bne.n	800a1de <HAL_UART_IRQHandler+0x17a>
 800a1d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d04f      	beq.n	800a27e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fc94 	bl	800ab0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ee:	2b40      	cmp	r3, #64	; 0x40
 800a1f0:	d141      	bne.n	800a276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3314      	adds	r3, #20
 800a1f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a200:	e853 3f00 	ldrex	r3, [r3]
 800a204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a20c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3314      	adds	r3, #20
 800a21a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a21e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a22a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a22e:	e841 2300 	strex	r3, r2, [r1]
 800a232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1d9      	bne.n	800a1f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a242:	2b00      	cmp	r3, #0
 800a244:	d013      	beq.n	800a26e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24a:	4a7d      	ldr	r2, [pc, #500]	; (800a440 <HAL_UART_IRQHandler+0x3dc>)
 800a24c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a252:	4618      	mov	r0, r3
 800a254:	f7fb f88e 	bl	8005374 <HAL_DMA_Abort_IT>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d016      	beq.n	800a28c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a268:	4610      	mov	r0, r2
 800a26a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a26c:	e00e      	b.n	800a28c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f9ae 	bl	800a5d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a274:	e00a      	b.n	800a28c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f9aa 	bl	800a5d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a27c:	e006      	b.n	800a28c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f9a6 	bl	800a5d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a28a:	e170      	b.n	800a56e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28c:	bf00      	nop
    return;
 800a28e:	e16e      	b.n	800a56e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a294:	2b01      	cmp	r3, #1
 800a296:	f040 814a 	bne.w	800a52e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29e:	f003 0310 	and.w	r3, r3, #16
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 8143 	beq.w	800a52e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ac:	f003 0310 	and.w	r3, r3, #16
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 813c 	beq.w	800a52e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60bb      	str	r3, [r7, #8]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60bb      	str	r3, [r7, #8]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	60bb      	str	r3, [r7, #8]
 800a2ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d6:	2b40      	cmp	r3, #64	; 0x40
 800a2d8:	f040 80b4 	bne.w	800a444 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 8140 	beq.w	800a572 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	f080 8139 	bcs.w	800a572 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a306:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a312:	f000 8088 	beq.w	800a426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	330c      	adds	r3, #12
 800a31c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a324:	e853 3f00 	ldrex	r3, [r3]
 800a328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a32c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	330c      	adds	r3, #12
 800a33e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a34e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a35a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1d9      	bne.n	800a316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3314      	adds	r3, #20
 800a368:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a36c:	e853 3f00 	ldrex	r3, [r3]
 800a370:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a374:	f023 0301 	bic.w	r3, r3, #1
 800a378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3314      	adds	r3, #20
 800a382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a386:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a38a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a38e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a392:	e841 2300 	strex	r3, r2, [r1]
 800a396:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1e1      	bne.n	800a362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3314      	adds	r3, #20
 800a3a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3314      	adds	r3, #20
 800a3be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e3      	bne.n	800a39e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	330c      	adds	r3, #12
 800a3ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ee:	e853 3f00 	ldrex	r3, [r3]
 800a3f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3f6:	f023 0310 	bic.w	r3, r3, #16
 800a3fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	330c      	adds	r3, #12
 800a404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a408:	65ba      	str	r2, [r7, #88]	; 0x58
 800a40a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a40e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a410:	e841 2300 	strex	r3, r2, [r1]
 800a414:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1e3      	bne.n	800a3e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a420:	4618      	mov	r0, r3
 800a422:	f7fa ff37 	bl	8005294 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a42e:	b29b      	uxth	r3, r3
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	b29b      	uxth	r3, r3
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f8d4 	bl	800a5e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a43c:	e099      	b.n	800a572 <HAL_UART_IRQHandler+0x50e>
 800a43e:	bf00      	nop
 800a440:	0800abd3 	.word	0x0800abd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a458:	b29b      	uxth	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 808b 	beq.w	800a576 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 8086 	beq.w	800a576 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	330c      	adds	r3, #12
 800a470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	e853 3f00 	ldrex	r3, [r3]
 800a478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	330c      	adds	r3, #12
 800a48a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a48e:	647a      	str	r2, [r7, #68]	; 0x44
 800a490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a496:	e841 2300 	strex	r3, r2, [r1]
 800a49a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1e3      	bne.n	800a46a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3314      	adds	r3, #20
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	f023 0301 	bic.w	r3, r3, #1
 800a4b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3314      	adds	r3, #20
 800a4c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4c6:	633a      	str	r2, [r7, #48]	; 0x30
 800a4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e3      	bne.n	800a4a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2220      	movs	r2, #32
 800a4de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	330c      	adds	r3, #12
 800a4ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	e853 3f00 	ldrex	r3, [r3]
 800a4f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f023 0310 	bic.w	r3, r3, #16
 800a4fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	330c      	adds	r3, #12
 800a508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a50c:	61fa      	str	r2, [r7, #28]
 800a50e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a510:	69b9      	ldr	r1, [r7, #24]
 800a512:	69fa      	ldr	r2, [r7, #28]
 800a514:	e841 2300 	strex	r3, r2, [r1]
 800a518:	617b      	str	r3, [r7, #20]
   return(result);
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1e3      	bne.n	800a4e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f85c 	bl	800a5e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a52c:	e023      	b.n	800a576 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a536:	2b00      	cmp	r3, #0
 800a538:	d009      	beq.n	800a54e <HAL_UART_IRQHandler+0x4ea>
 800a53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a542:	2b00      	cmp	r3, #0
 800a544:	d003      	beq.n	800a54e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fb57 	bl	800abfa <UART_Transmit_IT>
    return;
 800a54c:	e014      	b.n	800a578 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00e      	beq.n	800a578 <HAL_UART_IRQHandler+0x514>
 800a55a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d008      	beq.n	800a578 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fb97 	bl	800ac9a <UART_EndTransmit_IT>
    return;
 800a56c:	e004      	b.n	800a578 <HAL_UART_IRQHandler+0x514>
    return;
 800a56e:	bf00      	nop
 800a570:	e002      	b.n	800a578 <HAL_UART_IRQHandler+0x514>
      return;
 800a572:	bf00      	nop
 800a574:	e000      	b.n	800a578 <HAL_UART_IRQHandler+0x514>
      return;
 800a576:	bf00      	nop
  }
}
 800a578:	37e8      	adds	r7, #232	; 0xe8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop

0800a580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b090      	sub	sp, #64	; 0x40
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a608:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a614:	2b00      	cmp	r3, #0
 800a616:	d137      	bne.n	800a688 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61a:	2200      	movs	r2, #0
 800a61c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3314      	adds	r3, #20
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	623b      	str	r3, [r7, #32]
   return(result);
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a634:	63bb      	str	r3, [r7, #56]	; 0x38
 800a636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3314      	adds	r3, #20
 800a63c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a63e:	633a      	str	r2, [r7, #48]	; 0x30
 800a640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e5      	bne.n	800a61e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	330c      	adds	r3, #12
 800a658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	60fb      	str	r3, [r7, #12]
   return(result);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a668:	637b      	str	r3, [r7, #52]	; 0x34
 800a66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	330c      	adds	r3, #12
 800a670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a672:	61fa      	str	r2, [r7, #28]
 800a674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	69b9      	ldr	r1, [r7, #24]
 800a678:	69fa      	ldr	r2, [r7, #28]
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	617b      	str	r3, [r7, #20]
   return(result);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e5      	bne.n	800a652 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a686:	e002      	b.n	800a68e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a688:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a68a:	f7ff ff79 	bl	800a580 <HAL_UART_TxCpltCallback>
}
 800a68e:	bf00      	nop
 800a690:	3740      	adds	r7, #64	; 0x40
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f7ff ff75 	bl	800a594 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6aa:	bf00      	nop
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b09c      	sub	sp, #112	; 0x70
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6be:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d172      	bne.n	800a7b4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	330c      	adds	r3, #12
 800a6da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6de:	e853 3f00 	ldrex	r3, [r3]
 800a6e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	330c      	adds	r3, #12
 800a6f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6f4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a6f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e5      	bne.n	800a6d4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3314      	adds	r3, #20
 800a70e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	e853 3f00 	ldrex	r3, [r3]
 800a716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71a:	f023 0301 	bic.w	r3, r3, #1
 800a71e:	667b      	str	r3, [r7, #100]	; 0x64
 800a720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3314      	adds	r3, #20
 800a726:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a728:	647a      	str	r2, [r7, #68]	; 0x44
 800a72a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a72e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a730:	e841 2300 	strex	r3, r2, [r1]
 800a734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1e5      	bne.n	800a708 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	3314      	adds	r3, #20
 800a742:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a746:	e853 3f00 	ldrex	r3, [r3]
 800a74a:	623b      	str	r3, [r7, #32]
   return(result);
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a752:	663b      	str	r3, [r7, #96]	; 0x60
 800a754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3314      	adds	r3, #20
 800a75a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a75c:	633a      	str	r2, [r7, #48]	; 0x30
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a764:	e841 2300 	strex	r3, r2, [r1]
 800a768:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e5      	bne.n	800a73c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a772:	2220      	movs	r2, #32
 800a774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d119      	bne.n	800a7b4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	330c      	adds	r3, #12
 800a786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	e853 3f00 	ldrex	r3, [r3]
 800a78e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f023 0310 	bic.w	r3, r3, #16
 800a796:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	330c      	adds	r3, #12
 800a79e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7a0:	61fa      	str	r2, [r7, #28]
 800a7a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	69b9      	ldr	r1, [r7, #24]
 800a7a6:	69fa      	ldr	r2, [r7, #28]
 800a7a8:	e841 2300 	strex	r3, r2, [r1]
 800a7ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e5      	bne.n	800a780 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d106      	bne.n	800a7ca <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7c4:	f7ff ff0e 	bl	800a5e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7c8:	e002      	b.n	800a7d0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a7ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7cc:	f7ff feec 	bl	800a5a8 <HAL_UART_RxCpltCallback>
}
 800a7d0:	bf00      	nop
 800a7d2:	3770      	adds	r7, #112	; 0x70
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d108      	bne.n	800a800 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7f2:	085b      	lsrs	r3, r3, #1
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f7ff fef3 	bl	800a5e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7fe:	e002      	b.n	800a806 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f7ff fedb 	bl	800a5bc <HAL_UART_RxHalfCpltCallback>
}
 800a806:	bf00      	nop
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b084      	sub	sp, #16
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a816:	2300      	movs	r3, #0
 800a818:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a82a:	2b80      	cmp	r3, #128	; 0x80
 800a82c:	bf0c      	ite	eq
 800a82e:	2301      	moveq	r3, #1
 800a830:	2300      	movne	r3, #0
 800a832:	b2db      	uxtb	r3, r3
 800a834:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b21      	cmp	r3, #33	; 0x21
 800a840:	d108      	bne.n	800a854 <UART_DMAError+0x46>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2200      	movs	r2, #0
 800a84c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a84e:	68b8      	ldr	r0, [r7, #8]
 800a850:	f000 f934 	bl	800aabc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a85e:	2b40      	cmp	r3, #64	; 0x40
 800a860:	bf0c      	ite	eq
 800a862:	2301      	moveq	r3, #1
 800a864:	2300      	movne	r3, #0
 800a866:	b2db      	uxtb	r3, r3
 800a868:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b22      	cmp	r3, #34	; 0x22
 800a874:	d108      	bne.n	800a888 <UART_DMAError+0x7a>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d005      	beq.n	800a888 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2200      	movs	r2, #0
 800a880:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a882:	68b8      	ldr	r0, [r7, #8]
 800a884:	f000 f942 	bl	800ab0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88c:	f043 0210 	orr.w	r2, r3, #16
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a894:	68b8      	ldr	r0, [r7, #8]
 800a896:	f7ff fe9b 	bl	800a5d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b090      	sub	sp, #64	; 0x40
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	603b      	str	r3, [r7, #0]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8b2:	e050      	b.n	800a956 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8ba:	d04c      	beq.n	800a956 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a8bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d007      	beq.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8c2:	f7f9 ffff 	bl	80048c4 <HAL_GetTick>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d241      	bcs.n	800a956 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	330c      	adds	r3, #12
 800a8d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	330c      	adds	r3, #12
 800a8f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8f2:	637a      	str	r2, [r7, #52]	; 0x34
 800a8f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e5      	bne.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3314      	adds	r3, #20
 800a90c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	613b      	str	r3, [r7, #16]
   return(result);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f023 0301 	bic.w	r3, r3, #1
 800a91c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3314      	adds	r3, #20
 800a924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a926:	623a      	str	r2, [r7, #32]
 800a928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92a:	69f9      	ldr	r1, [r7, #28]
 800a92c:	6a3a      	ldr	r2, [r7, #32]
 800a92e:	e841 2300 	strex	r3, r2, [r1]
 800a932:	61bb      	str	r3, [r7, #24]
   return(result);
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1e5      	bne.n	800a906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2220      	movs	r2, #32
 800a93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2220      	movs	r2, #32
 800a946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e00f      	b.n	800a976 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	4013      	ands	r3, r2
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	429a      	cmp	r2, r3
 800a964:	bf0c      	ite	eq
 800a966:	2301      	moveq	r3, #1
 800a968:	2300      	movne	r3, #0
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	461a      	mov	r2, r3
 800a96e:	79fb      	ldrb	r3, [r7, #7]
 800a970:	429a      	cmp	r2, r3
 800a972:	d09f      	beq.n	800a8b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3740      	adds	r7, #64	; 0x40
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b098      	sub	sp, #96	; 0x60
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4613      	mov	r3, r2
 800a98c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	88fa      	ldrh	r2, [r7, #6]
 800a998:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2222      	movs	r2, #34	; 0x22
 800a9a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ac:	4a40      	ldr	r2, [pc, #256]	; (800aab0 <UART_Start_Receive_DMA+0x130>)
 800a9ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b4:	4a3f      	ldr	r2, [pc, #252]	; (800aab4 <UART_Start_Receive_DMA+0x134>)
 800a9b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9bc:	4a3e      	ldr	r2, [pc, #248]	; (800aab8 <UART_Start_Receive_DMA+0x138>)
 800a9be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a9c8:	f107 0308 	add.w	r3, r7, #8
 800a9cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	f7fa fc00 	bl	80051e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	613b      	str	r3, [r7, #16]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	613b      	str	r3, [r7, #16]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d019      	beq.n	800aa3e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	330c      	adds	r3, #12
 800aa10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa20:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	330c      	adds	r3, #12
 800aa28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa2a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aa2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa32:	e841 2300 	strex	r3, r2, [r1]
 800aa36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aa38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1e5      	bne.n	800aa0a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3314      	adds	r3, #20
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	f043 0301 	orr.w	r3, r3, #1
 800aa54:	657b      	str	r3, [r7, #84]	; 0x54
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3314      	adds	r3, #20
 800aa5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa5e:	63ba      	str	r2, [r7, #56]	; 0x38
 800aa60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e5      	bne.n	800aa3e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3314      	adds	r3, #20
 800aa78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	e853 3f00 	ldrex	r3, [r3]
 800aa80:	617b      	str	r3, [r7, #20]
   return(result);
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa88:	653b      	str	r3, [r7, #80]	; 0x50
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3314      	adds	r3, #20
 800aa90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa92:	627a      	str	r2, [r7, #36]	; 0x24
 800aa94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	6a39      	ldr	r1, [r7, #32]
 800aa98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e5      	bne.n	800aa72 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3760      	adds	r7, #96	; 0x60
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	0800a6b3 	.word	0x0800a6b3
 800aab4:	0800a7d9 	.word	0x0800a7d9
 800aab8:	0800a80f 	.word	0x0800a80f

0800aabc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b089      	sub	sp, #36	; 0x24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	330c      	adds	r3, #12
 800aaca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	e853 3f00 	ldrex	r3, [r3]
 800aad2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aada:	61fb      	str	r3, [r7, #28]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	330c      	adds	r3, #12
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	61ba      	str	r2, [r7, #24]
 800aae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae8:	6979      	ldr	r1, [r7, #20]
 800aaea:	69ba      	ldr	r2, [r7, #24]
 800aaec:	e841 2300 	strex	r3, r2, [r1]
 800aaf0:	613b      	str	r3, [r7, #16]
   return(result);
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e5      	bne.n	800aac4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ab00:	bf00      	nop
 800ab02:	3724      	adds	r7, #36	; 0x24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b095      	sub	sp, #84	; 0x54
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	330c      	adds	r3, #12
 800ab1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	330c      	adds	r3, #12
 800ab32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab34:	643a      	str	r2, [r7, #64]	; 0x40
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e5      	bne.n	800ab14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3314      	adds	r3, #20
 800ab4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab50:	6a3b      	ldr	r3, [r7, #32]
 800ab52:	e853 3f00 	ldrex	r3, [r3]
 800ab56:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	f023 0301 	bic.w	r3, r3, #1
 800ab5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3314      	adds	r3, #20
 800ab66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab68:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab70:	e841 2300 	strex	r3, r2, [r1]
 800ab74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1e5      	bne.n	800ab48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d119      	bne.n	800abb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	330c      	adds	r3, #12
 800ab8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	e853 3f00 	ldrex	r3, [r3]
 800ab92:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	f023 0310 	bic.w	r3, r3, #16
 800ab9a:	647b      	str	r3, [r7, #68]	; 0x44
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	330c      	adds	r3, #12
 800aba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aba4:	61ba      	str	r2, [r7, #24]
 800aba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba8:	6979      	ldr	r1, [r7, #20]
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	e841 2300 	strex	r3, r2, [r1]
 800abb0:	613b      	str	r3, [r7, #16]
   return(result);
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1e5      	bne.n	800ab84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2220      	movs	r2, #32
 800abbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800abc6:	bf00      	nop
 800abc8:	3754      	adds	r7, #84	; 0x54
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7ff fcef 	bl	800a5d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf2:	bf00      	nop
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b085      	sub	sp, #20
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b21      	cmp	r3, #33	; 0x21
 800ac0c:	d13e      	bne.n	800ac8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac16:	d114      	bne.n	800ac42 <UART_Transmit_IT+0x48>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d110      	bne.n	800ac42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	1c9a      	adds	r2, r3, #2
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	621a      	str	r2, [r3, #32]
 800ac40:	e008      	b.n	800ac54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	1c59      	adds	r1, r3, #1
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	6211      	str	r1, [r2, #32]
 800ac4c:	781a      	ldrb	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	4619      	mov	r1, r3
 800ac62:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10f      	bne.n	800ac88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68da      	ldr	r2, [r3, #12]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68da      	ldr	r2, [r3, #12]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	e000      	b.n	800ac8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac8c:	2302      	movs	r3, #2
  }
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2220      	movs	r2, #32
 800acb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff fc60 	bl	800a580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b08c      	sub	sp, #48	; 0x30
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b22      	cmp	r3, #34	; 0x22
 800acdc:	f040 80ab 	bne.w	800ae36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace8:	d117      	bne.n	800ad1a <UART_Receive_IT+0x50>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d113      	bne.n	800ad1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800acf2:	2300      	movs	r3, #0
 800acf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad12:	1c9a      	adds	r2, r3, #2
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	629a      	str	r2, [r3, #40]	; 0x28
 800ad18:	e026      	b.n	800ad68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad2c:	d007      	beq.n	800ad3e <UART_Receive_IT+0x74>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10a      	bne.n	800ad4c <UART_Receive_IT+0x82>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d106      	bne.n	800ad4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	e008      	b.n	800ad5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	4619      	mov	r1, r3
 800ad76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d15a      	bne.n	800ae32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68da      	ldr	r2, [r3, #12]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0220 	bic.w	r2, r2, #32
 800ad8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68da      	ldr	r2, [r3, #12]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	695a      	ldr	r2, [r3, #20]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f022 0201 	bic.w	r2, r2, #1
 800adaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2220      	movs	r2, #32
 800adb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d135      	bne.n	800ae28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	330c      	adds	r3, #12
 800adc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	e853 3f00 	ldrex	r3, [r3]
 800add0:	613b      	str	r3, [r7, #16]
   return(result);
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f023 0310 	bic.w	r3, r3, #16
 800add8:	627b      	str	r3, [r7, #36]	; 0x24
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	330c      	adds	r3, #12
 800ade0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ade2:	623a      	str	r2, [r7, #32]
 800ade4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade6:	69f9      	ldr	r1, [r7, #28]
 800ade8:	6a3a      	ldr	r2, [r7, #32]
 800adea:	e841 2300 	strex	r3, r2, [r1]
 800adee:	61bb      	str	r3, [r7, #24]
   return(result);
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1e5      	bne.n	800adc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f003 0310 	and.w	r3, r3, #16
 800ae00:	2b10      	cmp	r3, #16
 800ae02:	d10a      	bne.n	800ae1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae04:	2300      	movs	r3, #0
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7ff fbdf 	bl	800a5e4 <HAL_UARTEx_RxEventCallback>
 800ae26:	e002      	b.n	800ae2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff fbbd 	bl	800a5a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e002      	b.n	800ae38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	e000      	b.n	800ae38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ae36:	2302      	movs	r3, #2
  }
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3730      	adds	r7, #48	; 0x30
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae44:	b0c0      	sub	sp, #256	; 0x100
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae5c:	68d9      	ldr	r1, [r3, #12]
 800ae5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	ea40 0301 	orr.w	r3, r0, r1
 800ae68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae6e:	689a      	ldr	r2, [r3, #8]
 800ae70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	431a      	orrs	r2, r3
 800ae78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ae8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ae98:	f021 010c 	bic.w	r1, r1, #12
 800ae9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aea6:	430b      	orrs	r3, r1
 800aea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aeaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aeb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeba:	6999      	ldr	r1, [r3, #24]
 800aebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	ea40 0301 	orr.w	r3, r0, r1
 800aec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	4b8f      	ldr	r3, [pc, #572]	; (800b10c <UART_SetConfig+0x2cc>)
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d005      	beq.n	800aee0 <UART_SetConfig+0xa0>
 800aed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	4b8d      	ldr	r3, [pc, #564]	; (800b110 <UART_SetConfig+0x2d0>)
 800aedc:	429a      	cmp	r2, r3
 800aede:	d104      	bne.n	800aeea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aee0:	f7fd ff8c 	bl	8008dfc <HAL_RCC_GetPCLK2Freq>
 800aee4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aee8:	e003      	b.n	800aef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aeea:	f7fd ff73 	bl	8008dd4 <HAL_RCC_GetPCLK1Freq>
 800aeee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aefc:	f040 810c 	bne.w	800b118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af04:	2200      	movs	r2, #0
 800af06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800af12:	4622      	mov	r2, r4
 800af14:	462b      	mov	r3, r5
 800af16:	1891      	adds	r1, r2, r2
 800af18:	65b9      	str	r1, [r7, #88]	; 0x58
 800af1a:	415b      	adcs	r3, r3
 800af1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af22:	4621      	mov	r1, r4
 800af24:	eb12 0801 	adds.w	r8, r2, r1
 800af28:	4629      	mov	r1, r5
 800af2a:	eb43 0901 	adc.w	r9, r3, r1
 800af2e:	f04f 0200 	mov.w	r2, #0
 800af32:	f04f 0300 	mov.w	r3, #0
 800af36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af42:	4690      	mov	r8, r2
 800af44:	4699      	mov	r9, r3
 800af46:	4623      	mov	r3, r4
 800af48:	eb18 0303 	adds.w	r3, r8, r3
 800af4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af50:	462b      	mov	r3, r5
 800af52:	eb49 0303 	adc.w	r3, r9, r3
 800af56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800af6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af6e:	460b      	mov	r3, r1
 800af70:	18db      	adds	r3, r3, r3
 800af72:	653b      	str	r3, [r7, #80]	; 0x50
 800af74:	4613      	mov	r3, r2
 800af76:	eb42 0303 	adc.w	r3, r2, r3
 800af7a:	657b      	str	r3, [r7, #84]	; 0x54
 800af7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800af84:	f7f5 fee8 	bl	8000d58 <__aeabi_uldivmod>
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4b61      	ldr	r3, [pc, #388]	; (800b114 <UART_SetConfig+0x2d4>)
 800af8e:	fba3 2302 	umull	r2, r3, r3, r2
 800af92:	095b      	lsrs	r3, r3, #5
 800af94:	011c      	lsls	r4, r3, #4
 800af96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800afa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800afa8:	4642      	mov	r2, r8
 800afaa:	464b      	mov	r3, r9
 800afac:	1891      	adds	r1, r2, r2
 800afae:	64b9      	str	r1, [r7, #72]	; 0x48
 800afb0:	415b      	adcs	r3, r3
 800afb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800afb8:	4641      	mov	r1, r8
 800afba:	eb12 0a01 	adds.w	sl, r2, r1
 800afbe:	4649      	mov	r1, r9
 800afc0:	eb43 0b01 	adc.w	fp, r3, r1
 800afc4:	f04f 0200 	mov.w	r2, #0
 800afc8:	f04f 0300 	mov.w	r3, #0
 800afcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800afd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afd8:	4692      	mov	sl, r2
 800afda:	469b      	mov	fp, r3
 800afdc:	4643      	mov	r3, r8
 800afde:	eb1a 0303 	adds.w	r3, sl, r3
 800afe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afe6:	464b      	mov	r3, r9
 800afe8:	eb4b 0303 	adc.w	r3, fp, r3
 800afec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800affc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b004:	460b      	mov	r3, r1
 800b006:	18db      	adds	r3, r3, r3
 800b008:	643b      	str	r3, [r7, #64]	; 0x40
 800b00a:	4613      	mov	r3, r2
 800b00c:	eb42 0303 	adc.w	r3, r2, r3
 800b010:	647b      	str	r3, [r7, #68]	; 0x44
 800b012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b01a:	f7f5 fe9d 	bl	8000d58 <__aeabi_uldivmod>
 800b01e:	4602      	mov	r2, r0
 800b020:	460b      	mov	r3, r1
 800b022:	4611      	mov	r1, r2
 800b024:	4b3b      	ldr	r3, [pc, #236]	; (800b114 <UART_SetConfig+0x2d4>)
 800b026:	fba3 2301 	umull	r2, r3, r3, r1
 800b02a:	095b      	lsrs	r3, r3, #5
 800b02c:	2264      	movs	r2, #100	; 0x64
 800b02e:	fb02 f303 	mul.w	r3, r2, r3
 800b032:	1acb      	subs	r3, r1, r3
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b03a:	4b36      	ldr	r3, [pc, #216]	; (800b114 <UART_SetConfig+0x2d4>)
 800b03c:	fba3 2302 	umull	r2, r3, r3, r2
 800b040:	095b      	lsrs	r3, r3, #5
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b048:	441c      	add	r4, r3
 800b04a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b054:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b05c:	4642      	mov	r2, r8
 800b05e:	464b      	mov	r3, r9
 800b060:	1891      	adds	r1, r2, r2
 800b062:	63b9      	str	r1, [r7, #56]	; 0x38
 800b064:	415b      	adcs	r3, r3
 800b066:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b06c:	4641      	mov	r1, r8
 800b06e:	1851      	adds	r1, r2, r1
 800b070:	6339      	str	r1, [r7, #48]	; 0x30
 800b072:	4649      	mov	r1, r9
 800b074:	414b      	adcs	r3, r1
 800b076:	637b      	str	r3, [r7, #52]	; 0x34
 800b078:	f04f 0200 	mov.w	r2, #0
 800b07c:	f04f 0300 	mov.w	r3, #0
 800b080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b084:	4659      	mov	r1, fp
 800b086:	00cb      	lsls	r3, r1, #3
 800b088:	4651      	mov	r1, sl
 800b08a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b08e:	4651      	mov	r1, sl
 800b090:	00ca      	lsls	r2, r1, #3
 800b092:	4610      	mov	r0, r2
 800b094:	4619      	mov	r1, r3
 800b096:	4603      	mov	r3, r0
 800b098:	4642      	mov	r2, r8
 800b09a:	189b      	adds	r3, r3, r2
 800b09c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0a0:	464b      	mov	r3, r9
 800b0a2:	460a      	mov	r2, r1
 800b0a4:	eb42 0303 	adc.w	r3, r2, r3
 800b0a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b0b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b0bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	18db      	adds	r3, r3, r3
 800b0c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	eb42 0303 	adc.w	r3, r2, r3
 800b0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b0d6:	f7f5 fe3f 	bl	8000d58 <__aeabi_uldivmod>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4b0d      	ldr	r3, [pc, #52]	; (800b114 <UART_SetConfig+0x2d4>)
 800b0e0:	fba3 1302 	umull	r1, r3, r3, r2
 800b0e4:	095b      	lsrs	r3, r3, #5
 800b0e6:	2164      	movs	r1, #100	; 0x64
 800b0e8:	fb01 f303 	mul.w	r3, r1, r3
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	3332      	adds	r3, #50	; 0x32
 800b0f2:	4a08      	ldr	r2, [pc, #32]	; (800b114 <UART_SetConfig+0x2d4>)
 800b0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f8:	095b      	lsrs	r3, r3, #5
 800b0fa:	f003 0207 	and.w	r2, r3, #7
 800b0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4422      	add	r2, r4
 800b106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b108:	e105      	b.n	800b316 <UART_SetConfig+0x4d6>
 800b10a:	bf00      	nop
 800b10c:	40011000 	.word	0x40011000
 800b110:	40011400 	.word	0x40011400
 800b114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b122:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b12a:	4642      	mov	r2, r8
 800b12c:	464b      	mov	r3, r9
 800b12e:	1891      	adds	r1, r2, r2
 800b130:	6239      	str	r1, [r7, #32]
 800b132:	415b      	adcs	r3, r3
 800b134:	627b      	str	r3, [r7, #36]	; 0x24
 800b136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b13a:	4641      	mov	r1, r8
 800b13c:	1854      	adds	r4, r2, r1
 800b13e:	4649      	mov	r1, r9
 800b140:	eb43 0501 	adc.w	r5, r3, r1
 800b144:	f04f 0200 	mov.w	r2, #0
 800b148:	f04f 0300 	mov.w	r3, #0
 800b14c:	00eb      	lsls	r3, r5, #3
 800b14e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b152:	00e2      	lsls	r2, r4, #3
 800b154:	4614      	mov	r4, r2
 800b156:	461d      	mov	r5, r3
 800b158:	4643      	mov	r3, r8
 800b15a:	18e3      	adds	r3, r4, r3
 800b15c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b160:	464b      	mov	r3, r9
 800b162:	eb45 0303 	adc.w	r3, r5, r3
 800b166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b16a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b17a:	f04f 0200 	mov.w	r2, #0
 800b17e:	f04f 0300 	mov.w	r3, #0
 800b182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b186:	4629      	mov	r1, r5
 800b188:	008b      	lsls	r3, r1, #2
 800b18a:	4621      	mov	r1, r4
 800b18c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b190:	4621      	mov	r1, r4
 800b192:	008a      	lsls	r2, r1, #2
 800b194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b198:	f7f5 fdde 	bl	8000d58 <__aeabi_uldivmod>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4b60      	ldr	r3, [pc, #384]	; (800b324 <UART_SetConfig+0x4e4>)
 800b1a2:	fba3 2302 	umull	r2, r3, r3, r2
 800b1a6:	095b      	lsrs	r3, r3, #5
 800b1a8:	011c      	lsls	r4, r3, #4
 800b1aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b1bc:	4642      	mov	r2, r8
 800b1be:	464b      	mov	r3, r9
 800b1c0:	1891      	adds	r1, r2, r2
 800b1c2:	61b9      	str	r1, [r7, #24]
 800b1c4:	415b      	adcs	r3, r3
 800b1c6:	61fb      	str	r3, [r7, #28]
 800b1c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1cc:	4641      	mov	r1, r8
 800b1ce:	1851      	adds	r1, r2, r1
 800b1d0:	6139      	str	r1, [r7, #16]
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	414b      	adcs	r3, r1
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	f04f 0200 	mov.w	r2, #0
 800b1dc:	f04f 0300 	mov.w	r3, #0
 800b1e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1e4:	4659      	mov	r1, fp
 800b1e6:	00cb      	lsls	r3, r1, #3
 800b1e8:	4651      	mov	r1, sl
 800b1ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1ee:	4651      	mov	r1, sl
 800b1f0:	00ca      	lsls	r2, r1, #3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	189b      	adds	r3, r3, r2
 800b1fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b200:	464b      	mov	r3, r9
 800b202:	460a      	mov	r2, r1
 800b204:	eb42 0303 	adc.w	r3, r2, r3
 800b208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	67bb      	str	r3, [r7, #120]	; 0x78
 800b216:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b218:	f04f 0200 	mov.w	r2, #0
 800b21c:	f04f 0300 	mov.w	r3, #0
 800b220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b224:	4649      	mov	r1, r9
 800b226:	008b      	lsls	r3, r1, #2
 800b228:	4641      	mov	r1, r8
 800b22a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b22e:	4641      	mov	r1, r8
 800b230:	008a      	lsls	r2, r1, #2
 800b232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b236:	f7f5 fd8f 	bl	8000d58 <__aeabi_uldivmod>
 800b23a:	4602      	mov	r2, r0
 800b23c:	460b      	mov	r3, r1
 800b23e:	4b39      	ldr	r3, [pc, #228]	; (800b324 <UART_SetConfig+0x4e4>)
 800b240:	fba3 1302 	umull	r1, r3, r3, r2
 800b244:	095b      	lsrs	r3, r3, #5
 800b246:	2164      	movs	r1, #100	; 0x64
 800b248:	fb01 f303 	mul.w	r3, r1, r3
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	011b      	lsls	r3, r3, #4
 800b250:	3332      	adds	r3, #50	; 0x32
 800b252:	4a34      	ldr	r2, [pc, #208]	; (800b324 <UART_SetConfig+0x4e4>)
 800b254:	fba2 2303 	umull	r2, r3, r2, r3
 800b258:	095b      	lsrs	r3, r3, #5
 800b25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b25e:	441c      	add	r4, r3
 800b260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b264:	2200      	movs	r2, #0
 800b266:	673b      	str	r3, [r7, #112]	; 0x70
 800b268:	677a      	str	r2, [r7, #116]	; 0x74
 800b26a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b26e:	4642      	mov	r2, r8
 800b270:	464b      	mov	r3, r9
 800b272:	1891      	adds	r1, r2, r2
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	415b      	adcs	r3, r3
 800b278:	60fb      	str	r3, [r7, #12]
 800b27a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b27e:	4641      	mov	r1, r8
 800b280:	1851      	adds	r1, r2, r1
 800b282:	6039      	str	r1, [r7, #0]
 800b284:	4649      	mov	r1, r9
 800b286:	414b      	adcs	r3, r1
 800b288:	607b      	str	r3, [r7, #4]
 800b28a:	f04f 0200 	mov.w	r2, #0
 800b28e:	f04f 0300 	mov.w	r3, #0
 800b292:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b296:	4659      	mov	r1, fp
 800b298:	00cb      	lsls	r3, r1, #3
 800b29a:	4651      	mov	r1, sl
 800b29c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2a0:	4651      	mov	r1, sl
 800b2a2:	00ca      	lsls	r2, r1, #3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	4642      	mov	r2, r8
 800b2ac:	189b      	adds	r3, r3, r2
 800b2ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2b0:	464b      	mov	r3, r9
 800b2b2:	460a      	mov	r2, r1
 800b2b4:	eb42 0303 	adc.w	r3, r2, r3
 800b2b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	663b      	str	r3, [r7, #96]	; 0x60
 800b2c4:	667a      	str	r2, [r7, #100]	; 0x64
 800b2c6:	f04f 0200 	mov.w	r2, #0
 800b2ca:	f04f 0300 	mov.w	r3, #0
 800b2ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	008b      	lsls	r3, r1, #2
 800b2d6:	4641      	mov	r1, r8
 800b2d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2dc:	4641      	mov	r1, r8
 800b2de:	008a      	lsls	r2, r1, #2
 800b2e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b2e4:	f7f5 fd38 	bl	8000d58 <__aeabi_uldivmod>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <UART_SetConfig+0x4e4>)
 800b2ee:	fba3 1302 	umull	r1, r3, r3, r2
 800b2f2:	095b      	lsrs	r3, r3, #5
 800b2f4:	2164      	movs	r1, #100	; 0x64
 800b2f6:	fb01 f303 	mul.w	r3, r1, r3
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	011b      	lsls	r3, r3, #4
 800b2fe:	3332      	adds	r3, #50	; 0x32
 800b300:	4a08      	ldr	r2, [pc, #32]	; (800b324 <UART_SetConfig+0x4e4>)
 800b302:	fba2 2303 	umull	r2, r3, r2, r3
 800b306:	095b      	lsrs	r3, r3, #5
 800b308:	f003 020f 	and.w	r2, r3, #15
 800b30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4422      	add	r2, r4
 800b314:	609a      	str	r2, [r3, #8]
}
 800b316:	bf00      	nop
 800b318:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b31c:	46bd      	mov	sp, r7
 800b31e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b322:	bf00      	nop
 800b324:	51eb851f 	.word	0x51eb851f

0800b328 <__NVIC_SetPriority>:
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	6039      	str	r1, [r7, #0]
 800b332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	db0a      	blt.n	800b352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	490c      	ldr	r1, [pc, #48]	; (800b374 <__NVIC_SetPriority+0x4c>)
 800b342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b346:	0112      	lsls	r2, r2, #4
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	440b      	add	r3, r1
 800b34c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b350:	e00a      	b.n	800b368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	b2da      	uxtb	r2, r3
 800b356:	4908      	ldr	r1, [pc, #32]	; (800b378 <__NVIC_SetPriority+0x50>)
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	f003 030f 	and.w	r3, r3, #15
 800b35e:	3b04      	subs	r3, #4
 800b360:	0112      	lsls	r2, r2, #4
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	440b      	add	r3, r1
 800b366:	761a      	strb	r2, [r3, #24]
}
 800b368:	bf00      	nop
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr
 800b374:	e000e100 	.word	0xe000e100
 800b378:	e000ed00 	.word	0xe000ed00

0800b37c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b380:	4b05      	ldr	r3, [pc, #20]	; (800b398 <SysTick_Handler+0x1c>)
 800b382:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b384:	f001 ff52 	bl	800d22c <xTaskGetSchedulerState>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d001      	beq.n	800b392 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b38e:	f002 fe3b 	bl	800e008 <xPortSysTickHandler>
  }
}
 800b392:	bf00      	nop
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	e000e010 	.word	0xe000e010

0800b39c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b39c:	b580      	push	{r7, lr}
 800b39e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	f06f 0004 	mvn.w	r0, #4
 800b3a6:	f7ff ffbf 	bl	800b328 <__NVIC_SetPriority>
#endif
}
 800b3aa:	bf00      	nop
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b6:	f3ef 8305 	mrs	r3, IPSR
 800b3ba:	603b      	str	r3, [r7, #0]
  return(result);
 800b3bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b3c2:	f06f 0305 	mvn.w	r3, #5
 800b3c6:	607b      	str	r3, [r7, #4]
 800b3c8:	e00c      	b.n	800b3e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <osKernelInitialize+0x44>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d105      	bne.n	800b3de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3d2:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <osKernelInitialize+0x44>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	607b      	str	r3, [r7, #4]
 800b3dc:	e002      	b.n	800b3e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b3de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b3e4:	687b      	ldr	r3, [r7, #4]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	20004f78 	.word	0x20004f78

0800b3f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3fe:	f3ef 8305 	mrs	r3, IPSR
 800b402:	603b      	str	r3, [r7, #0]
  return(result);
 800b404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b40a:	f06f 0305 	mvn.w	r3, #5
 800b40e:	607b      	str	r3, [r7, #4]
 800b410:	e010      	b.n	800b434 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b412:	4b0b      	ldr	r3, [pc, #44]	; (800b440 <osKernelStart+0x48>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d109      	bne.n	800b42e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b41a:	f7ff ffbf 	bl	800b39c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b41e:	4b08      	ldr	r3, [pc, #32]	; (800b440 <osKernelStart+0x48>)
 800b420:	2202      	movs	r2, #2
 800b422:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b424:	f001 fa80 	bl	800c928 <vTaskStartScheduler>
      stat = osOK;
 800b428:	2300      	movs	r3, #0
 800b42a:	607b      	str	r3, [r7, #4]
 800b42c:	e002      	b.n	800b434 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b42e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b434:	687b      	ldr	r3, [r7, #4]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20004f78 	.word	0x20004f78

0800b444 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b44c:	f3ef 8305 	mrs	r3, IPSR
 800b450:	60bb      	str	r3, [r7, #8]
  return(result);
 800b452:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b454:	2b00      	cmp	r3, #0
 800b456:	d003      	beq.n	800b460 <osDelay+0x1c>
    stat = osErrorISR;
 800b458:	f06f 0305 	mvn.w	r3, #5
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	e007      	b.n	800b470 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b460:	2300      	movs	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d002      	beq.n	800b470 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 f922 	bl	800c6b4 <vTaskDelay>
    }
  }

  return (stat);
 800b470:	68fb      	ldr	r3, [r7, #12]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4a07      	ldr	r2, [pc, #28]	; (800b4a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b48c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	4a06      	ldr	r2, [pc, #24]	; (800b4ac <vApplicationGetIdleTaskMemory+0x30>)
 800b492:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2280      	movs	r2, #128	; 0x80
 800b498:	601a      	str	r2, [r3, #0]
}
 800b49a:	bf00      	nop
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	20004f7c 	.word	0x20004f7c
 800b4ac:	20005038 	.word	0x20005038

0800b4b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	4a07      	ldr	r2, [pc, #28]	; (800b4dc <vApplicationGetTimerTaskMemory+0x2c>)
 800b4c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	4a06      	ldr	r2, [pc, #24]	; (800b4e0 <vApplicationGetTimerTaskMemory+0x30>)
 800b4c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4ce:	601a      	str	r2, [r3, #0]
}
 800b4d0:	bf00      	nop
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	20005238 	.word	0x20005238
 800b4e0:	200052f4 	.word	0x200052f4

0800b4e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f103 0208 	add.w	r2, r3, #8
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f103 0208 	add.w	r2, r3, #8
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f103 0208 	add.w	r2, r3, #8
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b532:	bf00      	nop
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b53e:	b480      	push	{r7}
 800b540:	b085      	sub	sp, #20
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	689a      	ldr	r2, [r3, #8]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	1c5a      	adds	r2, r3, #1
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	601a      	str	r2, [r3, #0]
}
 800b57a:	bf00      	nop
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b586:	b480      	push	{r7}
 800b588:	b085      	sub	sp, #20
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b59c:	d103      	bne.n	800b5a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	e00c      	b.n	800b5c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	e002      	b.n	800b5b4 <vListInsert+0x2e>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	60fb      	str	r3, [r7, #12]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d2f6      	bcs.n	800b5ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	601a      	str	r2, [r3, #0]
}
 800b5ec:	bf00      	nop
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6892      	ldr	r2, [r2, #8]
 800b60e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	6852      	ldr	r2, [r2, #4]
 800b618:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	429a      	cmp	r2, r3
 800b622:	d103      	bne.n	800b62c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	689a      	ldr	r2, [r3, #8]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	1e5a      	subs	r2, r3, #1
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10a      	bne.n	800b676 <xQueueGenericReset+0x2a>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	60bb      	str	r3, [r7, #8]
}
 800b672:	bf00      	nop
 800b674:	e7fe      	b.n	800b674 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b676:	f002 fc35 	bl	800dee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b682:	68f9      	ldr	r1, [r7, #12]
 800b684:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b686:	fb01 f303 	mul.w	r3, r1, r3
 800b68a:	441a      	add	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	68f9      	ldr	r1, [r7, #12]
 800b6aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6ac:	fb01 f303 	mul.w	r3, r1, r3
 800b6b0:	441a      	add	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	22ff      	movs	r2, #255	; 0xff
 800b6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	22ff      	movs	r2, #255	; 0xff
 800b6c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d114      	bne.n	800b6f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d01a      	beq.n	800b70a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3310      	adds	r3, #16
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f001 fbbf 	bl	800ce5c <xTaskRemoveFromEventList>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d012      	beq.n	800b70a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b6e4:	4b0c      	ldr	r3, [pc, #48]	; (800b718 <xQueueGenericReset+0xcc>)
 800b6e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	e009      	b.n	800b70a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	3310      	adds	r3, #16
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff fef2 	bl	800b4e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	3324      	adds	r3, #36	; 0x24
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff feed 	bl	800b4e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b70a:	f002 fc1b 	bl	800df44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b70e:	2301      	movs	r3, #1
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	e000ed04 	.word	0xe000ed04

0800b71c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08e      	sub	sp, #56	; 0x38
 800b720:	af02      	add	r7, sp, #8
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10a      	bne.n	800b746 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b742:	bf00      	nop
 800b744:	e7fe      	b.n	800b744 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10a      	bne.n	800b762 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b75e:	bf00      	nop
 800b760:	e7fe      	b.n	800b760 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <xQueueGenericCreateStatic+0x52>
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <xQueueGenericCreateStatic+0x56>
 800b76e:	2301      	movs	r3, #1
 800b770:	e000      	b.n	800b774 <xQueueGenericCreateStatic+0x58>
 800b772:	2300      	movs	r3, #0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10a      	bne.n	800b78e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	623b      	str	r3, [r7, #32]
}
 800b78a:	bf00      	nop
 800b78c:	e7fe      	b.n	800b78c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <xQueueGenericCreateStatic+0x7e>
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d101      	bne.n	800b79e <xQueueGenericCreateStatic+0x82>
 800b79a:	2301      	movs	r3, #1
 800b79c:	e000      	b.n	800b7a0 <xQueueGenericCreateStatic+0x84>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10a      	bne.n	800b7ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	61fb      	str	r3, [r7, #28]
}
 800b7b6:	bf00      	nop
 800b7b8:	e7fe      	b.n	800b7b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b7ba:	2350      	movs	r3, #80	; 0x50
 800b7bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b50      	cmp	r3, #80	; 0x50
 800b7c2:	d00a      	beq.n	800b7da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	61bb      	str	r3, [r7, #24]
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b7da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00d      	beq.n	800b802 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	68b9      	ldr	r1, [r7, #8]
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 f83f 	bl	800b880 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b804:	4618      	mov	r0, r3
 800b806:	3730      	adds	r7, #48	; 0x30
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08a      	sub	sp, #40	; 0x28
 800b810:	af02      	add	r7, sp, #8
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	613b      	str	r3, [r7, #16]
}
 800b832:	bf00      	nop
 800b834:	e7fe      	b.n	800b834 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	fb02 f303 	mul.w	r3, r2, r3
 800b83e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	3350      	adds	r3, #80	; 0x50
 800b844:	4618      	mov	r0, r3
 800b846:	f002 fc6f 	bl	800e128 <pvPortMalloc>
 800b84a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d011      	beq.n	800b876 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	3350      	adds	r3, #80	; 0x50
 800b85a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b864:	79fa      	ldrb	r2, [r7, #7]
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	4613      	mov	r3, r2
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	68b9      	ldr	r1, [r7, #8]
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 f805 	bl	800b880 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b876:	69bb      	ldr	r3, [r7, #24]
	}
 800b878:	4618      	mov	r0, r3
 800b87a:	3720      	adds	r7, #32
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d103      	bne.n	800b89c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	69ba      	ldr	r2, [r7, #24]
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	e002      	b.n	800b8a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	69b8      	ldr	r0, [r7, #24]
 800b8b2:	f7ff fecb 	bl	800b64c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	78fa      	ldrb	r2, [r7, #3]
 800b8ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b8be:	bf00      	nop
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b082      	sub	sp, #8
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00e      	beq.n	800b8f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 f81d 	bl	800b92c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b086      	sub	sp, #24
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	4603      	mov	r3, r0
 800b902:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b904:	2301      	movs	r3, #1
 800b906:	617b      	str	r3, [r7, #20]
 800b908:	2300      	movs	r3, #0
 800b90a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b90c:	79fb      	ldrb	r3, [r7, #7]
 800b90e:	461a      	mov	r2, r3
 800b910:	6939      	ldr	r1, [r7, #16]
 800b912:	6978      	ldr	r0, [r7, #20]
 800b914:	f7ff ff7a 	bl	800b80c <xQueueGenericCreate>
 800b918:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f7ff ffd3 	bl	800b8c6 <prvInitialiseMutex>

		return xNewQueue;
 800b920:	68fb      	ldr	r3, [r7, #12]
	}
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08e      	sub	sp, #56	; 0x38
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b93a:	2300      	movs	r3, #0
 800b93c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xQueueGenericSend+0x32>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d103      	bne.n	800b96c <xQueueGenericSend+0x40>
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d101      	bne.n	800b970 <xQueueGenericSend+0x44>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e000      	b.n	800b972 <xQueueGenericSend+0x46>
 800b970:	2300      	movs	r3, #0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <xQueueGenericSend+0x60>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b988:	bf00      	nop
 800b98a:	e7fe      	b.n	800b98a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d103      	bne.n	800b99a <xQueueGenericSend+0x6e>
 800b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b996:	2b01      	cmp	r3, #1
 800b998:	d101      	bne.n	800b99e <xQueueGenericSend+0x72>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e000      	b.n	800b9a0 <xQueueGenericSend+0x74>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10a      	bne.n	800b9ba <xQueueGenericSend+0x8e>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	623b      	str	r3, [r7, #32]
}
 800b9b6:	bf00      	nop
 800b9b8:	e7fe      	b.n	800b9b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9ba:	f001 fc37 	bl	800d22c <xTaskGetSchedulerState>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <xQueueGenericSend+0x9e>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <xQueueGenericSend+0xa2>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <xQueueGenericSend+0xa4>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10a      	bne.n	800b9ea <xQueueGenericSend+0xbe>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	61fb      	str	r3, [r7, #28]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ea:	f002 fa7b 	bl	800dee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d302      	bcc.n	800ba00 <xQueueGenericSend+0xd4>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d129      	bne.n	800ba54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba06:	f000 fb2f 	bl	800c068 <prvCopyDataToQueue>
 800ba0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d010      	beq.n	800ba36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	3324      	adds	r3, #36	; 0x24
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f001 fa1f 	bl	800ce5c <xTaskRemoveFromEventList>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d013      	beq.n	800ba4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba24:	4b3f      	ldr	r3, [pc, #252]	; (800bb24 <xQueueGenericSend+0x1f8>)
 800ba26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	e00a      	b.n	800ba4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d007      	beq.n	800ba4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba3c:	4b39      	ldr	r3, [pc, #228]	; (800bb24 <xQueueGenericSend+0x1f8>)
 800ba3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba4c:	f002 fa7a 	bl	800df44 <vPortExitCritical>
				return pdPASS;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e063      	b.n	800bb1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d103      	bne.n	800ba62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba5a:	f002 fa73 	bl	800df44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e05c      	b.n	800bb1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d106      	bne.n	800ba76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba68:	f107 0314 	add.w	r3, r7, #20
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f001 fa7f 	bl	800cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba72:	2301      	movs	r3, #1
 800ba74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba76:	f002 fa65 	bl	800df44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba7a:	f000 ffc5 	bl	800ca08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba7e:	f002 fa31 	bl	800dee4 <vPortEnterCritical>
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba88:	b25b      	sxtb	r3, r3
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba8e:	d103      	bne.n	800ba98 <xQueueGenericSend+0x16c>
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba9e:	b25b      	sxtb	r3, r3
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baa4:	d103      	bne.n	800baae <xQueueGenericSend+0x182>
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baae:	f002 fa49 	bl	800df44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bab2:	1d3a      	adds	r2, r7, #4
 800bab4:	f107 0314 	add.w	r3, r7, #20
 800bab8:	4611      	mov	r1, r2
 800baba:	4618      	mov	r0, r3
 800babc:	f001 fa6e 	bl	800cf9c <xTaskCheckForTimeOut>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d124      	bne.n	800bb10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bac8:	f000 fbc6 	bl	800c258 <prvIsQueueFull>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d018      	beq.n	800bb04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	3310      	adds	r3, #16
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	4611      	mov	r1, r2
 800bada:	4618      	mov	r0, r3
 800badc:	f001 f96e 	bl	800cdbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae2:	f000 fb51 	bl	800c188 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bae6:	f000 ff9d 	bl	800ca24 <xTaskResumeAll>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	f47f af7c 	bne.w	800b9ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800baf2:	4b0c      	ldr	r3, [pc, #48]	; (800bb24 <xQueueGenericSend+0x1f8>)
 800baf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	e772      	b.n	800b9ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb06:	f000 fb3f 	bl	800c188 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb0a:	f000 ff8b 	bl	800ca24 <xTaskResumeAll>
 800bb0e:	e76c      	b.n	800b9ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb12:	f000 fb39 	bl	800c188 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb16:	f000 ff85 	bl	800ca24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3738      	adds	r7, #56	; 0x38
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	e000ed04 	.word	0xe000ed04

0800bb28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b090      	sub	sp, #64	; 0x40
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
 800bb34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d103      	bne.n	800bb64 <xQueueGenericSendFromISR+0x3c>
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d101      	bne.n	800bb68 <xQueueGenericSendFromISR+0x40>
 800bb64:	2301      	movs	r3, #1
 800bb66:	e000      	b.n	800bb6a <xQueueGenericSendFromISR+0x42>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d103      	bne.n	800bb92 <xQueueGenericSendFromISR+0x6a>
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d101      	bne.n	800bb96 <xQueueGenericSendFromISR+0x6e>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e000      	b.n	800bb98 <xQueueGenericSendFromISR+0x70>
 800bb96:	2300      	movs	r3, #0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	623b      	str	r3, [r7, #32]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbb2:	f002 fa79 	bl	800e0a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bbb6:	f3ef 8211 	mrs	r2, BASEPRI
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	61fa      	str	r2, [r7, #28]
 800bbcc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbd0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d302      	bcc.n	800bbe4 <xQueueGenericSendFromISR+0xbc>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d12f      	bne.n	800bc44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	68b9      	ldr	r1, [r7, #8]
 800bbf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbfa:	f000 fa35 	bl	800c068 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbfe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bc02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc06:	d112      	bne.n	800bc2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d016      	beq.n	800bc3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	3324      	adds	r3, #36	; 0x24
 800bc14:	4618      	mov	r0, r3
 800bc16:	f001 f921 	bl	800ce5c <xTaskRemoveFromEventList>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00e      	beq.n	800bc3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00b      	beq.n	800bc3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	e007      	b.n	800bc3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc32:	3301      	adds	r3, #1
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	b25a      	sxtb	r2, r3
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bc42:	e001      	b.n	800bc48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3740      	adds	r7, #64	; 0x40
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
	...

0800bc60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08c      	sub	sp, #48	; 0x30
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10a      	bne.n	800bc90 <xQueueReceive+0x30>
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	623b      	str	r3, [r7, #32]
}
 800bc8c:	bf00      	nop
 800bc8e:	e7fe      	b.n	800bc8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d103      	bne.n	800bc9e <xQueueReceive+0x3e>
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <xQueueReceive+0x42>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e000      	b.n	800bca4 <xQueueReceive+0x44>
 800bca2:	2300      	movs	r3, #0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10a      	bne.n	800bcbe <xQueueReceive+0x5e>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	61fb      	str	r3, [r7, #28]
}
 800bcba:	bf00      	nop
 800bcbc:	e7fe      	b.n	800bcbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcbe:	f001 fab5 	bl	800d22c <xTaskGetSchedulerState>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d102      	bne.n	800bcce <xQueueReceive+0x6e>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d101      	bne.n	800bcd2 <xQueueReceive+0x72>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e000      	b.n	800bcd4 <xQueueReceive+0x74>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10a      	bne.n	800bcee <xQueueReceive+0x8e>
	__asm volatile
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	61bb      	str	r3, [r7, #24]
}
 800bcea:	bf00      	nop
 800bcec:	e7fe      	b.n	800bcec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcee:	f002 f8f9 	bl	800dee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d01f      	beq.n	800bd3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcfe:	68b9      	ldr	r1, [r7, #8]
 800bd00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd02:	f000 fa1b 	bl	800c13c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	1e5a      	subs	r2, r3, #1
 800bd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00f      	beq.n	800bd36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	3310      	adds	r3, #16
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f001 f89e 	bl	800ce5c <xTaskRemoveFromEventList>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d007      	beq.n	800bd36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd26:	4b3d      	ldr	r3, [pc, #244]	; (800be1c <xQueueReceive+0x1bc>)
 800bd28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd36:	f002 f905 	bl	800df44 <vPortExitCritical>
				return pdPASS;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e069      	b.n	800be12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d103      	bne.n	800bd4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd44:	f002 f8fe 	bl	800df44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	e062      	b.n	800be12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d106      	bne.n	800bd60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd52:	f107 0310 	add.w	r3, r7, #16
 800bd56:	4618      	mov	r0, r3
 800bd58:	f001 f90a 	bl	800cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd60:	f002 f8f0 	bl	800df44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd64:	f000 fe50 	bl	800ca08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd68:	f002 f8bc 	bl	800dee4 <vPortEnterCritical>
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd72:	b25b      	sxtb	r3, r3
 800bd74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd78:	d103      	bne.n	800bd82 <xQueueReceive+0x122>
 800bd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd88:	b25b      	sxtb	r3, r3
 800bd8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd8e:	d103      	bne.n	800bd98 <xQueueReceive+0x138>
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd98:	f002 f8d4 	bl	800df44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd9c:	1d3a      	adds	r2, r7, #4
 800bd9e:	f107 0310 	add.w	r3, r7, #16
 800bda2:	4611      	mov	r1, r2
 800bda4:	4618      	mov	r0, r3
 800bda6:	f001 f8f9 	bl	800cf9c <xTaskCheckForTimeOut>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d123      	bne.n	800bdf8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb2:	f000 fa3b 	bl	800c22c <prvIsQueueEmpty>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d017      	beq.n	800bdec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	3324      	adds	r3, #36	; 0x24
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 fff9 	bl	800cdbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdcc:	f000 f9dc 	bl	800c188 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdd0:	f000 fe28 	bl	800ca24 <xTaskResumeAll>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d189      	bne.n	800bcee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bdda:	4b10      	ldr	r3, [pc, #64]	; (800be1c <xQueueReceive+0x1bc>)
 800bddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	e780      	b.n	800bcee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bdec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdee:	f000 f9cb 	bl	800c188 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdf2:	f000 fe17 	bl	800ca24 <xTaskResumeAll>
 800bdf6:	e77a      	b.n	800bcee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bdf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdfa:	f000 f9c5 	bl	800c188 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdfe:	f000 fe11 	bl	800ca24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be04:	f000 fa12 	bl	800c22c <prvIsQueueEmpty>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f43f af6f 	beq.w	800bcee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be12:	4618      	mov	r0, r3
 800be14:	3730      	adds	r7, #48	; 0x30
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	e000ed04 	.word	0xe000ed04

0800be20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	; 0x38
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be2a:	2300      	movs	r3, #0
 800be2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be32:	2300      	movs	r3, #0
 800be34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10a      	bne.n	800be52 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	623b      	str	r3, [r7, #32]
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00a      	beq.n	800be70 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	61fb      	str	r3, [r7, #28]
}
 800be6c:	bf00      	nop
 800be6e:	e7fe      	b.n	800be6e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be70:	f001 f9dc 	bl	800d22c <xTaskGetSchedulerState>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d102      	bne.n	800be80 <xQueueSemaphoreTake+0x60>
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <xQueueSemaphoreTake+0x64>
 800be80:	2301      	movs	r3, #1
 800be82:	e000      	b.n	800be86 <xQueueSemaphoreTake+0x66>
 800be84:	2300      	movs	r3, #0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10a      	bne.n	800bea0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	61bb      	str	r3, [r7, #24]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bea0:	f002 f820 	bl	800dee4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beac:	2b00      	cmp	r3, #0
 800beae:	d024      	beq.n	800befa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	1e5a      	subs	r2, r3, #1
 800beb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d104      	bne.n	800beca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bec0:	f001 fb2a 	bl	800d518 <pvTaskIncrementMutexHeldCount>
 800bec4:	4602      	mov	r2, r0
 800bec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00f      	beq.n	800bef2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed4:	3310      	adds	r3, #16
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 ffc0 	bl	800ce5c <xTaskRemoveFromEventList>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d007      	beq.n	800bef2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bee2:	4b54      	ldr	r3, [pc, #336]	; (800c034 <xQueueSemaphoreTake+0x214>)
 800bee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bef2:	f002 f827 	bl	800df44 <vPortExitCritical>
				return pdPASS;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e097      	b.n	800c02a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d111      	bne.n	800bf24 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	617b      	str	r3, [r7, #20]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf1c:	f002 f812 	bl	800df44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf20:	2300      	movs	r3, #0
 800bf22:	e082      	b.n	800c02a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d106      	bne.n	800bf38 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf2a:	f107 030c 	add.w	r3, r7, #12
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f001 f81e 	bl	800cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf34:	2301      	movs	r3, #1
 800bf36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf38:	f002 f804 	bl	800df44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf3c:	f000 fd64 	bl	800ca08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf40:	f001 ffd0 	bl	800dee4 <vPortEnterCritical>
 800bf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf4a:	b25b      	sxtb	r3, r3
 800bf4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf50:	d103      	bne.n	800bf5a <xQueueSemaphoreTake+0x13a>
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf60:	b25b      	sxtb	r3, r3
 800bf62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf66:	d103      	bne.n	800bf70 <xQueueSemaphoreTake+0x150>
 800bf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf70:	f001 ffe8 	bl	800df44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf74:	463a      	mov	r2, r7
 800bf76:	f107 030c 	add.w	r3, r7, #12
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 f80d 	bl	800cf9c <xTaskCheckForTimeOut>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d132      	bne.n	800bfee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf8a:	f000 f94f 	bl	800c22c <prvIsQueueEmpty>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d026      	beq.n	800bfe2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d109      	bne.n	800bfb0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bf9c:	f001 ffa2 	bl	800dee4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f001 f95f 	bl	800d268 <xTaskPriorityInherit>
 800bfaa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bfac:	f001 ffca 	bl	800df44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	3324      	adds	r3, #36	; 0x24
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 feff 	bl	800cdbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfc0:	f000 f8e2 	bl	800c188 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfc4:	f000 fd2e 	bl	800ca24 <xTaskResumeAll>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f47f af68 	bne.w	800bea0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bfd0:	4b18      	ldr	r3, [pc, #96]	; (800c034 <xQueueSemaphoreTake+0x214>)
 800bfd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	e75e      	b.n	800bea0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfe4:	f000 f8d0 	bl	800c188 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfe8:	f000 fd1c 	bl	800ca24 <xTaskResumeAll>
 800bfec:	e758      	b.n	800bea0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bff0:	f000 f8ca 	bl	800c188 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bff4:	f000 fd16 	bl	800ca24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bffa:	f000 f917 	bl	800c22c <prvIsQueueEmpty>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	f43f af4d 	beq.w	800bea0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00d      	beq.n	800c028 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c00c:	f001 ff6a 	bl	800dee4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c012:	f000 f811 	bl	800c038 <prvGetDisinheritPriorityAfterTimeout>
 800c016:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c01e:	4618      	mov	r0, r3
 800c020:	f001 f9f8 	bl	800d414 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c024:	f001 ff8e 	bl	800df44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3738      	adds	r7, #56	; 0x38
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	e000ed04 	.word	0xe000ed04

0800c038 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b00      	cmp	r3, #0
 800c046:	d006      	beq.n	800c056 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	e001      	b.n	800c05a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c05a:	68fb      	ldr	r3, [r7, #12]
	}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c074:	2300      	movs	r3, #0
 800c076:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10d      	bne.n	800c0a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d14d      	bne.n	800c12a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	4618      	mov	r0, r3
 800c094:	f001 f950 	bl	800d338 <xTaskPriorityDisinherit>
 800c098:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	609a      	str	r2, [r3, #8]
 800c0a0:	e043      	b.n	800c12a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d119      	bne.n	800c0dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6858      	ldr	r0, [r3, #4]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	68b9      	ldr	r1, [r7, #8]
 800c0b4:	f00d fcfe 	bl	8019ab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c0:	441a      	add	r2, r3
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d32b      	bcc.n	800c12a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	605a      	str	r2, [r3, #4]
 800c0da:	e026      	b.n	800c12a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	68d8      	ldr	r0, [r3, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	f00d fce4 	bl	8019ab4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	68da      	ldr	r2, [r3, #12]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f4:	425b      	negs	r3, r3
 800c0f6:	441a      	add	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	68da      	ldr	r2, [r3, #12]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	429a      	cmp	r2, r3
 800c106:	d207      	bcs.n	800c118 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	689a      	ldr	r2, [r3, #8]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c110:	425b      	negs	r3, r3
 800c112:	441a      	add	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d105      	bne.n	800c12a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	3b01      	subs	r3, #1
 800c128:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	1c5a      	adds	r2, r3, #1
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c132:	697b      	ldr	r3, [r7, #20]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3718      	adds	r7, #24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d018      	beq.n	800c180 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68da      	ldr	r2, [r3, #12]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c156:	441a      	add	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	68da      	ldr	r2, [r3, #12]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	429a      	cmp	r2, r3
 800c166:	d303      	bcc.n	800c170 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	68d9      	ldr	r1, [r3, #12]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c178:	461a      	mov	r2, r3
 800c17a:	6838      	ldr	r0, [r7, #0]
 800c17c:	f00d fc9a 	bl	8019ab4 <memcpy>
	}
}
 800c180:	bf00      	nop
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c190:	f001 fea8 	bl	800dee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c19a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c19c:	e011      	b.n	800c1c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d012      	beq.n	800c1cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	3324      	adds	r3, #36	; 0x24
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 fe56 	bl	800ce5c <xTaskRemoveFromEventList>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c1b6:	f000 ff53 	bl	800d060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c1c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	dce9      	bgt.n	800c19e <prvUnlockQueue+0x16>
 800c1ca:	e000      	b.n	800c1ce <prvUnlockQueue+0x46>
					break;
 800c1cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	22ff      	movs	r2, #255	; 0xff
 800c1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c1d6:	f001 feb5 	bl	800df44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c1da:	f001 fe83 	bl	800dee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1e6:	e011      	b.n	800c20c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d012      	beq.n	800c216 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3310      	adds	r3, #16
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 fe31 	bl	800ce5c <xTaskRemoveFromEventList>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c200:	f000 ff2e 	bl	800d060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c204:	7bbb      	ldrb	r3, [r7, #14]
 800c206:	3b01      	subs	r3, #1
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c20c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c210:	2b00      	cmp	r3, #0
 800c212:	dce9      	bgt.n	800c1e8 <prvUnlockQueue+0x60>
 800c214:	e000      	b.n	800c218 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c216:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	22ff      	movs	r2, #255	; 0xff
 800c21c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c220:	f001 fe90 	bl	800df44 <vPortExitCritical>
}
 800c224:	bf00      	nop
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c234:	f001 fe56 	bl	800dee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d102      	bne.n	800c246 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c240:	2301      	movs	r3, #1
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	e001      	b.n	800c24a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c246:	2300      	movs	r3, #0
 800c248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c24a:	f001 fe7b 	bl	800df44 <vPortExitCritical>

	return xReturn;
 800c24e:	68fb      	ldr	r3, [r7, #12]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c260:	f001 fe40 	bl	800dee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d102      	bne.n	800c276 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c270:	2301      	movs	r3, #1
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e001      	b.n	800c27a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c276:	2300      	movs	r3, #0
 800c278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c27a:	f001 fe63 	bl	800df44 <vPortExitCritical>

	return xReturn;
 800c27e:	68fb      	ldr	r3, [r7, #12]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c292:	2300      	movs	r3, #0
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	e014      	b.n	800c2c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c298:	4a0f      	ldr	r2, [pc, #60]	; (800c2d8 <vQueueAddToRegistry+0x50>)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d10b      	bne.n	800c2bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c2a4:	490c      	ldr	r1, [pc, #48]	; (800c2d8 <vQueueAddToRegistry+0x50>)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c2ae:	4a0a      	ldr	r2, [pc, #40]	; (800c2d8 <vQueueAddToRegistry+0x50>)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	4413      	add	r3, r2
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c2ba:	e006      	b.n	800c2ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	60fb      	str	r3, [r7, #12]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b07      	cmp	r3, #7
 800c2c6:	d9e7      	bls.n	800c298 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c2c8:	bf00      	nop
 800c2ca:	bf00      	nop
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	200056f4 	.word	0x200056f4

0800c2dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c2ec:	f001 fdfa 	bl	800dee4 <vPortEnterCritical>
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2f6:	b25b      	sxtb	r3, r3
 800c2f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2fc:	d103      	bne.n	800c306 <vQueueWaitForMessageRestricted+0x2a>
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c30c:	b25b      	sxtb	r3, r3
 800c30e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c312:	d103      	bne.n	800c31c <vQueueWaitForMessageRestricted+0x40>
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	2200      	movs	r2, #0
 800c318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c31c:	f001 fe12 	bl	800df44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c324:	2b00      	cmp	r3, #0
 800c326:	d106      	bne.n	800c336 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	3324      	adds	r3, #36	; 0x24
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	4618      	mov	r0, r3
 800c332:	f000 fd67 	bl	800ce04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c336:	6978      	ldr	r0, [r7, #20]
 800c338:	f7ff ff26 	bl	800c188 <prvUnlockQueue>
	}
 800c33c:	bf00      	nop
 800c33e:	3718      	adds	r7, #24
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c344:	b580      	push	{r7, lr}
 800c346:	b08e      	sub	sp, #56	; 0x38
 800c348:	af04      	add	r7, sp, #16
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	623b      	str	r3, [r7, #32]
}
 800c36a:	bf00      	nop
 800c36c:	e7fe      	b.n	800c36c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10a      	bne.n	800c38a <xTaskCreateStatic+0x46>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	61fb      	str	r3, [r7, #28]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c38a:	23bc      	movs	r3, #188	; 0xbc
 800c38c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	2bbc      	cmp	r3, #188	; 0xbc
 800c392:	d00a      	beq.n	800c3aa <xTaskCreateStatic+0x66>
	__asm volatile
 800c394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	61bb      	str	r3, [r7, #24]
}
 800c3a6:	bf00      	nop
 800c3a8:	e7fe      	b.n	800c3a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c3aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d01e      	beq.n	800c3f0 <xTaskCreateStatic+0xac>
 800c3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01b      	beq.n	800c3f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c4:	2202      	movs	r2, #2
 800c3c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	9303      	str	r3, [sp, #12]
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	9302      	str	r3, [sp, #8]
 800c3d2:	f107 0314 	add.w	r3, r7, #20
 800c3d6:	9301      	str	r3, [sp, #4]
 800c3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 f850 	bl	800c488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3ea:	f000 f8f3 	bl	800c5d4 <prvAddNewTaskToReadyList>
 800c3ee:	e001      	b.n	800c3f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c3f4:	697b      	ldr	r3, [r7, #20]
	}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3728      	adds	r7, #40	; 0x28
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b08c      	sub	sp, #48	; 0x30
 800c402:	af04      	add	r7, sp, #16
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	603b      	str	r3, [r7, #0]
 800c40a:	4613      	mov	r3, r2
 800c40c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c40e:	88fb      	ldrh	r3, [r7, #6]
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4618      	mov	r0, r3
 800c414:	f001 fe88 	bl	800e128 <pvPortMalloc>
 800c418:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00e      	beq.n	800c43e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c420:	20bc      	movs	r0, #188	; 0xbc
 800c422:	f001 fe81 	bl	800e128 <pvPortMalloc>
 800c426:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	697a      	ldr	r2, [r7, #20]
 800c432:	631a      	str	r2, [r3, #48]	; 0x30
 800c434:	e005      	b.n	800c442 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c436:	6978      	ldr	r0, [r7, #20]
 800c438:	f001 ff42 	bl	800e2c0 <vPortFree>
 800c43c:	e001      	b.n	800c442 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d017      	beq.n	800c478 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c450:	88fa      	ldrh	r2, [r7, #6]
 800c452:	2300      	movs	r3, #0
 800c454:	9303      	str	r3, [sp, #12]
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	9302      	str	r3, [sp, #8]
 800c45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45c:	9301      	str	r3, [sp, #4]
 800c45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	68b9      	ldr	r1, [r7, #8]
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f000 f80e 	bl	800c488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c46c:	69f8      	ldr	r0, [r7, #28]
 800c46e:	f000 f8b1 	bl	800c5d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c472:	2301      	movs	r3, #1
 800c474:	61bb      	str	r3, [r7, #24]
 800c476:	e002      	b.n	800c47e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c47c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c47e:	69bb      	ldr	r3, [r7, #24]
	}
 800c480:	4618      	mov	r0, r3
 800c482:	3720      	adds	r7, #32
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
 800c494:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	461a      	mov	r2, r3
 800c4a0:	21a5      	movs	r1, #165	; 0xa5
 800c4a2:	f00d fb2f 	bl	8019b04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4413      	add	r3, r2
 800c4b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	f023 0307 	bic.w	r3, r3, #7
 800c4be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	f003 0307 	and.w	r3, r3, #7
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00a      	beq.n	800c4e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ce:	f383 8811 	msr	BASEPRI, r3
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	617b      	str	r3, [r7, #20]
}
 800c4dc:	bf00      	nop
 800c4de:	e7fe      	b.n	800c4de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d01f      	beq.n	800c526 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	61fb      	str	r3, [r7, #28]
 800c4ea:	e012      	b.n	800c512 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	7819      	ldrb	r1, [r3, #0]
 800c4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	3334      	adds	r3, #52	; 0x34
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	4413      	add	r3, r2
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d006      	beq.n	800c51a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	3301      	adds	r3, #1
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	2b0f      	cmp	r3, #15
 800c516:	d9e9      	bls.n	800c4ec <prvInitialiseNewTask+0x64>
 800c518:	e000      	b.n	800c51c <prvInitialiseNewTask+0x94>
			{
				break;
 800c51a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c524:	e003      	b.n	800c52e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	2200      	movs	r2, #0
 800c52a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c530:	2b37      	cmp	r3, #55	; 0x37
 800c532:	d901      	bls.n	800c538 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c534:	2337      	movs	r3, #55	; 0x37
 800c536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c53c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c542:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c546:	2200      	movs	r2, #0
 800c548:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	3304      	adds	r3, #4
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe ffe8 	bl	800b524 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	3318      	adds	r3, #24
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fe ffe3 	bl	800b524 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c566:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c576:	2200      	movs	r2, #0
 800c578:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	3354      	adds	r3, #84	; 0x54
 800c588:	2260      	movs	r2, #96	; 0x60
 800c58a:	2100      	movs	r1, #0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f00d fab9 	bl	8019b04 <memset>
 800c592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c594:	4a0c      	ldr	r2, [pc, #48]	; (800c5c8 <prvInitialiseNewTask+0x140>)
 800c596:	659a      	str	r2, [r3, #88]	; 0x58
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	4a0c      	ldr	r2, [pc, #48]	; (800c5cc <prvInitialiseNewTask+0x144>)
 800c59c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a0:	4a0b      	ldr	r2, [pc, #44]	; (800c5d0 <prvInitialiseNewTask+0x148>)
 800c5a2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	68f9      	ldr	r1, [r7, #12]
 800c5a8:	69b8      	ldr	r0, [r7, #24]
 800c5aa:	f001 fb6b 	bl	800dc84 <pxPortInitialiseStack>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d002      	beq.n	800c5c0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5c0:	bf00      	nop
 800c5c2:	3720      	adds	r7, #32
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	0801f454 	.word	0x0801f454
 800c5cc:	0801f474 	.word	0x0801f474
 800c5d0:	0801f434 	.word	0x0801f434

0800c5d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5dc:	f001 fc82 	bl	800dee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5e0:	4b2d      	ldr	r3, [pc, #180]	; (800c698 <prvAddNewTaskToReadyList+0xc4>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	4a2c      	ldr	r2, [pc, #176]	; (800c698 <prvAddNewTaskToReadyList+0xc4>)
 800c5e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c5ea:	4b2c      	ldr	r3, [pc, #176]	; (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d109      	bne.n	800c606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5f2:	4a2a      	ldr	r2, [pc, #168]	; (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5f8:	4b27      	ldr	r3, [pc, #156]	; (800c698 <prvAddNewTaskToReadyList+0xc4>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d110      	bne.n	800c622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c600:	f000 fd52 	bl	800d0a8 <prvInitialiseTaskLists>
 800c604:	e00d      	b.n	800c622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c606:	4b26      	ldr	r3, [pc, #152]	; (800c6a0 <prvAddNewTaskToReadyList+0xcc>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c60e:	4b23      	ldr	r3, [pc, #140]	; (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c618:	429a      	cmp	r2, r3
 800c61a:	d802      	bhi.n	800c622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c61c:	4a1f      	ldr	r2, [pc, #124]	; (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c622:	4b20      	ldr	r3, [pc, #128]	; (800c6a4 <prvAddNewTaskToReadyList+0xd0>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3301      	adds	r3, #1
 800c628:	4a1e      	ldr	r2, [pc, #120]	; (800c6a4 <prvAddNewTaskToReadyList+0xd0>)
 800c62a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c62c:	4b1d      	ldr	r3, [pc, #116]	; (800c6a4 <prvAddNewTaskToReadyList+0xd0>)
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c638:	4b1b      	ldr	r3, [pc, #108]	; (800c6a8 <prvAddNewTaskToReadyList+0xd4>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d903      	bls.n	800c648 <prvAddNewTaskToReadyList+0x74>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c644:	4a18      	ldr	r2, [pc, #96]	; (800c6a8 <prvAddNewTaskToReadyList+0xd4>)
 800c646:	6013      	str	r3, [r2, #0]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4a15      	ldr	r2, [pc, #84]	; (800c6ac <prvAddNewTaskToReadyList+0xd8>)
 800c656:	441a      	add	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3304      	adds	r3, #4
 800c65c:	4619      	mov	r1, r3
 800c65e:	4610      	mov	r0, r2
 800c660:	f7fe ff6d 	bl	800b53e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c664:	f001 fc6e 	bl	800df44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c668:	4b0d      	ldr	r3, [pc, #52]	; (800c6a0 <prvAddNewTaskToReadyList+0xcc>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00e      	beq.n	800c68e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c670:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d207      	bcs.n	800c68e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c67e:	4b0c      	ldr	r3, [pc, #48]	; (800c6b0 <prvAddNewTaskToReadyList+0xdc>)
 800c680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c68e:	bf00      	nop
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	20005c08 	.word	0x20005c08
 800c69c:	20005734 	.word	0x20005734
 800c6a0:	20005c14 	.word	0x20005c14
 800c6a4:	20005c24 	.word	0x20005c24
 800c6a8:	20005c10 	.word	0x20005c10
 800c6ac:	20005738 	.word	0x20005738
 800c6b0:	e000ed04 	.word	0xe000ed04

0800c6b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d017      	beq.n	800c6f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c6c6:	4b13      	ldr	r3, [pc, #76]	; (800c714 <vTaskDelay+0x60>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00a      	beq.n	800c6e4 <vTaskDelay+0x30>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	60bb      	str	r3, [r7, #8]
}
 800c6e0:	bf00      	nop
 800c6e2:	e7fe      	b.n	800c6e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c6e4:	f000 f990 	bl	800ca08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 ff28 	bl	800d540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6f0:	f000 f998 	bl	800ca24 <xTaskResumeAll>
 800c6f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d107      	bne.n	800c70c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c6fc:	4b06      	ldr	r3, [pc, #24]	; (800c718 <vTaskDelay+0x64>)
 800c6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c70c:	bf00      	nop
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	20005c30 	.word	0x20005c30
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c724:	f001 fbde 	bl	800dee4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d102      	bne.n	800c734 <vTaskSuspend+0x18>
 800c72e:	4b30      	ldr	r3, [pc, #192]	; (800c7f0 <vTaskSuspend+0xd4>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	e000      	b.n	800c736 <vTaskSuspend+0x1a>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	3304      	adds	r3, #4
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe ff5b 	bl	800b5f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c746:	2b00      	cmp	r3, #0
 800c748:	d004      	beq.n	800c754 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3318      	adds	r3, #24
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fe ff52 	bl	800b5f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3304      	adds	r3, #4
 800c758:	4619      	mov	r1, r3
 800c75a:	4826      	ldr	r0, [pc, #152]	; (800c7f4 <vTaskSuspend+0xd8>)
 800c75c:	f7fe feef 	bl	800b53e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d103      	bne.n	800c774 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c774:	f001 fbe6 	bl	800df44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c778:	4b1f      	ldr	r3, [pc, #124]	; (800c7f8 <vTaskSuspend+0xdc>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c780:	f001 fbb0 	bl	800dee4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c784:	f000 fd32 	bl	800d1ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c788:	f001 fbdc 	bl	800df44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c78c:	4b18      	ldr	r3, [pc, #96]	; (800c7f0 <vTaskSuspend+0xd4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	429a      	cmp	r2, r3
 800c794:	d127      	bne.n	800c7e6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c796:	4b18      	ldr	r3, [pc, #96]	; (800c7f8 <vTaskSuspend+0xdc>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d017      	beq.n	800c7ce <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c79e:	4b17      	ldr	r3, [pc, #92]	; (800c7fc <vTaskSuspend+0xe0>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00a      	beq.n	800c7bc <vTaskSuspend+0xa0>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	60bb      	str	r3, [r7, #8]
}
 800c7b8:	bf00      	nop
 800c7ba:	e7fe      	b.n	800c7ba <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c7bc:	4b10      	ldr	r3, [pc, #64]	; (800c800 <vTaskSuspend+0xe4>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7cc:	e00b      	b.n	800c7e6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c7ce:	4b09      	ldr	r3, [pc, #36]	; (800c7f4 <vTaskSuspend+0xd8>)
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	4b0c      	ldr	r3, [pc, #48]	; (800c804 <vTaskSuspend+0xe8>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d103      	bne.n	800c7e2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c7da:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <vTaskSuspend+0xd4>)
 800c7dc:	2200      	movs	r2, #0
 800c7de:	601a      	str	r2, [r3, #0]
	}
 800c7e0:	e001      	b.n	800c7e6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c7e2:	f000 fa87 	bl	800ccf4 <vTaskSwitchContext>
	}
 800c7e6:	bf00      	nop
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20005734 	.word	0x20005734
 800c7f4:	20005bf4 	.word	0x20005bf4
 800c7f8:	20005c14 	.word	0x20005c14
 800c7fc:	20005c30 	.word	0x20005c30
 800c800:	e000ed04 	.word	0xe000ed04
 800c804:	20005c08 	.word	0x20005c08

0800c808 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c808:	b480      	push	{r7}
 800c80a:	b087      	sub	sp, #28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c810:	2300      	movs	r3, #0
 800c812:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10a      	bne.n	800c834 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	60fb      	str	r3, [r7, #12]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	4a0a      	ldr	r2, [pc, #40]	; (800c864 <prvTaskIsTaskSuspended+0x5c>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d10a      	bne.n	800c854 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c842:	4a09      	ldr	r2, [pc, #36]	; (800c868 <prvTaskIsTaskSuspended+0x60>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d005      	beq.n	800c854 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d101      	bne.n	800c854 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c850:	2301      	movs	r3, #1
 800c852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c854:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c856:	4618      	mov	r0, r3
 800c858:	371c      	adds	r7, #28
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	20005bf4 	.word	0x20005bf4
 800c868:	20005bc8 	.word	0x20005bc8

0800c86c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10a      	bne.n	800c894 <vTaskResume+0x28>
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	60bb      	str	r3, [r7, #8]
}
 800c890:	bf00      	nop
 800c892:	e7fe      	b.n	800c892 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c894:	4b20      	ldr	r3, [pc, #128]	; (800c918 <vTaskResume+0xac>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d038      	beq.n	800c910 <vTaskResume+0xa4>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d035      	beq.n	800c910 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c8a4:	f001 fb1e 	bl	800dee4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f7ff ffad 	bl	800c808 <prvTaskIsTaskSuspended>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d02b      	beq.n	800c90c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	3304      	adds	r3, #4
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7fe fe9d 	bl	800b5f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c2:	4b16      	ldr	r3, [pc, #88]	; (800c91c <vTaskResume+0xb0>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d903      	bls.n	800c8d2 <vTaskResume+0x66>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ce:	4a13      	ldr	r2, [pc, #76]	; (800c91c <vTaskResume+0xb0>)
 800c8d0:	6013      	str	r3, [r2, #0]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4a10      	ldr	r2, [pc, #64]	; (800c920 <vTaskResume+0xb4>)
 800c8e0:	441a      	add	r2, r3
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	f7fe fe28 	bl	800b53e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f2:	4b09      	ldr	r3, [pc, #36]	; (800c918 <vTaskResume+0xac>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d307      	bcc.n	800c90c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c8fc:	4b09      	ldr	r3, [pc, #36]	; (800c924 <vTaskResume+0xb8>)
 800c8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c90c:	f001 fb1a 	bl	800df44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c910:	bf00      	nop
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	20005734 	.word	0x20005734
 800c91c:	20005c10 	.word	0x20005c10
 800c920:	20005738 	.word	0x20005738
 800c924:	e000ed04 	.word	0xe000ed04

0800c928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08a      	sub	sp, #40	; 0x28
 800c92c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c92e:	2300      	movs	r3, #0
 800c930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c932:	2300      	movs	r3, #0
 800c934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c936:	463a      	mov	r2, r7
 800c938:	1d39      	adds	r1, r7, #4
 800c93a:	f107 0308 	add.w	r3, r7, #8
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fe fd9c 	bl	800b47c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c944:	6839      	ldr	r1, [r7, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	9202      	str	r2, [sp, #8]
 800c94c:	9301      	str	r3, [sp, #4]
 800c94e:	2300      	movs	r3, #0
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	2300      	movs	r3, #0
 800c954:	460a      	mov	r2, r1
 800c956:	4924      	ldr	r1, [pc, #144]	; (800c9e8 <vTaskStartScheduler+0xc0>)
 800c958:	4824      	ldr	r0, [pc, #144]	; (800c9ec <vTaskStartScheduler+0xc4>)
 800c95a:	f7ff fcf3 	bl	800c344 <xTaskCreateStatic>
 800c95e:	4603      	mov	r3, r0
 800c960:	4a23      	ldr	r2, [pc, #140]	; (800c9f0 <vTaskStartScheduler+0xc8>)
 800c962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c964:	4b22      	ldr	r3, [pc, #136]	; (800c9f0 <vTaskStartScheduler+0xc8>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c96c:	2301      	movs	r3, #1
 800c96e:	617b      	str	r3, [r7, #20]
 800c970:	e001      	b.n	800c976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c972:	2300      	movs	r3, #0
 800c974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d102      	bne.n	800c982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c97c:	f000 fe34 	bl	800d5e8 <xTimerCreateTimerTask>
 800c980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d11b      	bne.n	800c9c0 <vTaskStartScheduler+0x98>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	613b      	str	r3, [r7, #16]
}
 800c99a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c99c:	4b15      	ldr	r3, [pc, #84]	; (800c9f4 <vTaskStartScheduler+0xcc>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	3354      	adds	r3, #84	; 0x54
 800c9a2:	4a15      	ldr	r2, [pc, #84]	; (800c9f8 <vTaskStartScheduler+0xd0>)
 800c9a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9a6:	4b15      	ldr	r3, [pc, #84]	; (800c9fc <vTaskStartScheduler+0xd4>)
 800c9a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9ae:	4b14      	ldr	r3, [pc, #80]	; (800ca00 <vTaskStartScheduler+0xd8>)
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9b4:	4b13      	ldr	r3, [pc, #76]	; (800ca04 <vTaskStartScheduler+0xdc>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9ba:	f001 f9f1 	bl	800dda0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9be:	e00e      	b.n	800c9de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9c6:	d10a      	bne.n	800c9de <vTaskStartScheduler+0xb6>
	__asm volatile
 800c9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	60fb      	str	r3, [r7, #12]
}
 800c9da:	bf00      	nop
 800c9dc:	e7fe      	b.n	800c9dc <vTaskStartScheduler+0xb4>
}
 800c9de:	bf00      	nop
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	0801e97c 	.word	0x0801e97c
 800c9ec:	0800d079 	.word	0x0800d079
 800c9f0:	20005c2c 	.word	0x20005c2c
 800c9f4:	20005734 	.word	0x20005734
 800c9f8:	2000008c 	.word	0x2000008c
 800c9fc:	20005c28 	.word	0x20005c28
 800ca00:	20005c14 	.word	0x20005c14
 800ca04:	20005c0c 	.word	0x20005c0c

0800ca08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca08:	b480      	push	{r7}
 800ca0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca0c:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <vTaskSuspendAll+0x18>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3301      	adds	r3, #1
 800ca12:	4a03      	ldr	r2, [pc, #12]	; (800ca20 <vTaskSuspendAll+0x18>)
 800ca14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca16:	bf00      	nop
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr
 800ca20:	20005c30 	.word	0x20005c30

0800ca24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca32:	4b42      	ldr	r3, [pc, #264]	; (800cb3c <xTaskResumeAll+0x118>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10a      	bne.n	800ca50 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	603b      	str	r3, [r7, #0]
}
 800ca4c:	bf00      	nop
 800ca4e:	e7fe      	b.n	800ca4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca50:	f001 fa48 	bl	800dee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca54:	4b39      	ldr	r3, [pc, #228]	; (800cb3c <xTaskResumeAll+0x118>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	4a38      	ldr	r2, [pc, #224]	; (800cb3c <xTaskResumeAll+0x118>)
 800ca5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca5e:	4b37      	ldr	r3, [pc, #220]	; (800cb3c <xTaskResumeAll+0x118>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d162      	bne.n	800cb2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca66:	4b36      	ldr	r3, [pc, #216]	; (800cb40 <xTaskResumeAll+0x11c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d05e      	beq.n	800cb2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca6e:	e02f      	b.n	800cad0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca70:	4b34      	ldr	r3, [pc, #208]	; (800cb44 <xTaskResumeAll+0x120>)
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3318      	adds	r3, #24
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7fe fdbb 	bl	800b5f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3304      	adds	r3, #4
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fe fdb6 	bl	800b5f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca90:	4b2d      	ldr	r3, [pc, #180]	; (800cb48 <xTaskResumeAll+0x124>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d903      	bls.n	800caa0 <xTaskResumeAll+0x7c>
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9c:	4a2a      	ldr	r2, [pc, #168]	; (800cb48 <xTaskResumeAll+0x124>)
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa4:	4613      	mov	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4a27      	ldr	r2, [pc, #156]	; (800cb4c <xTaskResumeAll+0x128>)
 800caae:	441a      	add	r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	3304      	adds	r3, #4
 800cab4:	4619      	mov	r1, r3
 800cab6:	4610      	mov	r0, r2
 800cab8:	f7fe fd41 	bl	800b53e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac0:	4b23      	ldr	r3, [pc, #140]	; (800cb50 <xTaskResumeAll+0x12c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d302      	bcc.n	800cad0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800caca:	4b22      	ldr	r3, [pc, #136]	; (800cb54 <xTaskResumeAll+0x130>)
 800cacc:	2201      	movs	r2, #1
 800cace:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cad0:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <xTaskResumeAll+0x120>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1cb      	bne.n	800ca70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d001      	beq.n	800cae2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cade:	f000 fb85 	bl	800d1ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cae2:	4b1d      	ldr	r3, [pc, #116]	; (800cb58 <xTaskResumeAll+0x134>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d010      	beq.n	800cb10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800caee:	f000 f847 	bl	800cb80 <xTaskIncrementTick>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800caf8:	4b16      	ldr	r3, [pc, #88]	; (800cb54 <xTaskResumeAll+0x130>)
 800cafa:	2201      	movs	r2, #1
 800cafc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	3b01      	subs	r3, #1
 800cb02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f1      	bne.n	800caee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb0a:	4b13      	ldr	r3, [pc, #76]	; (800cb58 <xTaskResumeAll+0x134>)
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb10:	4b10      	ldr	r3, [pc, #64]	; (800cb54 <xTaskResumeAll+0x130>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d009      	beq.n	800cb2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb1c:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <xTaskResumeAll+0x138>)
 800cb1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb22:	601a      	str	r2, [r3, #0]
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb2c:	f001 fa0a 	bl	800df44 <vPortExitCritical>

	return xAlreadyYielded;
 800cb30:	68bb      	ldr	r3, [r7, #8]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	20005c30 	.word	0x20005c30
 800cb40:	20005c08 	.word	0x20005c08
 800cb44:	20005bc8 	.word	0x20005bc8
 800cb48:	20005c10 	.word	0x20005c10
 800cb4c:	20005738 	.word	0x20005738
 800cb50:	20005734 	.word	0x20005734
 800cb54:	20005c1c 	.word	0x20005c1c
 800cb58:	20005c18 	.word	0x20005c18
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb66:	4b05      	ldr	r3, [pc, #20]	; (800cb7c <xTaskGetTickCount+0x1c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb6c:	687b      	ldr	r3, [r7, #4]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	370c      	adds	r7, #12
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	20005c0c 	.word	0x20005c0c

0800cb80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb86:	2300      	movs	r3, #0
 800cb88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb8a:	4b4f      	ldr	r3, [pc, #316]	; (800ccc8 <xTaskIncrementTick+0x148>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f040 808f 	bne.w	800ccb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb94:	4b4d      	ldr	r3, [pc, #308]	; (800cccc <xTaskIncrementTick+0x14c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb9c:	4a4b      	ldr	r2, [pc, #300]	; (800cccc <xTaskIncrementTick+0x14c>)
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d120      	bne.n	800cbea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cba8:	4b49      	ldr	r3, [pc, #292]	; (800ccd0 <xTaskIncrementTick+0x150>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <xTaskIncrementTick+0x48>
	__asm volatile
 800cbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	603b      	str	r3, [r7, #0]
}
 800cbc4:	bf00      	nop
 800cbc6:	e7fe      	b.n	800cbc6 <xTaskIncrementTick+0x46>
 800cbc8:	4b41      	ldr	r3, [pc, #260]	; (800ccd0 <xTaskIncrementTick+0x150>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	60fb      	str	r3, [r7, #12]
 800cbce:	4b41      	ldr	r3, [pc, #260]	; (800ccd4 <xTaskIncrementTick+0x154>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a3f      	ldr	r2, [pc, #252]	; (800ccd0 <xTaskIncrementTick+0x150>)
 800cbd4:	6013      	str	r3, [r2, #0]
 800cbd6:	4a3f      	ldr	r2, [pc, #252]	; (800ccd4 <xTaskIncrementTick+0x154>)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	4b3e      	ldr	r3, [pc, #248]	; (800ccd8 <xTaskIncrementTick+0x158>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	4a3d      	ldr	r2, [pc, #244]	; (800ccd8 <xTaskIncrementTick+0x158>)
 800cbe4:	6013      	str	r3, [r2, #0]
 800cbe6:	f000 fb01 	bl	800d1ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbea:	4b3c      	ldr	r3, [pc, #240]	; (800ccdc <xTaskIncrementTick+0x15c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d349      	bcc.n	800cc88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbf4:	4b36      	ldr	r3, [pc, #216]	; (800ccd0 <xTaskIncrementTick+0x150>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d104      	bne.n	800cc08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbfe:	4b37      	ldr	r3, [pc, #220]	; (800ccdc <xTaskIncrementTick+0x15c>)
 800cc00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc04:	601a      	str	r2, [r3, #0]
					break;
 800cc06:	e03f      	b.n	800cc88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc08:	4b31      	ldr	r3, [pc, #196]	; (800ccd0 <xTaskIncrementTick+0x150>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d203      	bcs.n	800cc28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc20:	4a2e      	ldr	r2, [pc, #184]	; (800ccdc <xTaskIncrementTick+0x15c>)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc26:	e02f      	b.n	800cc88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fe fce3 	bl	800b5f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d004      	beq.n	800cc44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	3318      	adds	r3, #24
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe fcda 	bl	800b5f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc48:	4b25      	ldr	r3, [pc, #148]	; (800cce0 <xTaskIncrementTick+0x160>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d903      	bls.n	800cc58 <xTaskIncrementTick+0xd8>
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc54:	4a22      	ldr	r2, [pc, #136]	; (800cce0 <xTaskIncrementTick+0x160>)
 800cc56:	6013      	str	r3, [r2, #0]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4413      	add	r3, r2
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4a1f      	ldr	r2, [pc, #124]	; (800cce4 <xTaskIncrementTick+0x164>)
 800cc66:	441a      	add	r2, r3
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	4610      	mov	r0, r2
 800cc70:	f7fe fc65 	bl	800b53e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc78:	4b1b      	ldr	r3, [pc, #108]	; (800cce8 <xTaskIncrementTick+0x168>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d3b8      	bcc.n	800cbf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc82:	2301      	movs	r3, #1
 800cc84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc86:	e7b5      	b.n	800cbf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc88:	4b17      	ldr	r3, [pc, #92]	; (800cce8 <xTaskIncrementTick+0x168>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8e:	4915      	ldr	r1, [pc, #84]	; (800cce4 <xTaskIncrementTick+0x164>)
 800cc90:	4613      	mov	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	440b      	add	r3, r1
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d901      	bls.n	800cca4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cca0:	2301      	movs	r3, #1
 800cca2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cca4:	4b11      	ldr	r3, [pc, #68]	; (800ccec <xTaskIncrementTick+0x16c>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d007      	beq.n	800ccbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ccac:	2301      	movs	r3, #1
 800ccae:	617b      	str	r3, [r7, #20]
 800ccb0:	e004      	b.n	800ccbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ccb2:	4b0f      	ldr	r3, [pc, #60]	; (800ccf0 <xTaskIncrementTick+0x170>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	4a0d      	ldr	r2, [pc, #52]	; (800ccf0 <xTaskIncrementTick+0x170>)
 800ccba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ccbc:	697b      	ldr	r3, [r7, #20]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20005c30 	.word	0x20005c30
 800cccc:	20005c0c 	.word	0x20005c0c
 800ccd0:	20005bc0 	.word	0x20005bc0
 800ccd4:	20005bc4 	.word	0x20005bc4
 800ccd8:	20005c20 	.word	0x20005c20
 800ccdc:	20005c28 	.word	0x20005c28
 800cce0:	20005c10 	.word	0x20005c10
 800cce4:	20005738 	.word	0x20005738
 800cce8:	20005734 	.word	0x20005734
 800ccec:	20005c1c 	.word	0x20005c1c
 800ccf0:	20005c18 	.word	0x20005c18

0800ccf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccfa:	4b2a      	ldr	r3, [pc, #168]	; (800cda4 <vTaskSwitchContext+0xb0>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d003      	beq.n	800cd0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd02:	4b29      	ldr	r3, [pc, #164]	; (800cda8 <vTaskSwitchContext+0xb4>)
 800cd04:	2201      	movs	r2, #1
 800cd06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd08:	e046      	b.n	800cd98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cd0a:	4b27      	ldr	r3, [pc, #156]	; (800cda8 <vTaskSwitchContext+0xb4>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd10:	4b26      	ldr	r3, [pc, #152]	; (800cdac <vTaskSwitchContext+0xb8>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	e010      	b.n	800cd3a <vTaskSwitchContext+0x46>
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10a      	bne.n	800cd34 <vTaskSwitchContext+0x40>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	607b      	str	r3, [r7, #4]
}
 800cd30:	bf00      	nop
 800cd32:	e7fe      	b.n	800cd32 <vTaskSwitchContext+0x3e>
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	3b01      	subs	r3, #1
 800cd38:	60fb      	str	r3, [r7, #12]
 800cd3a:	491d      	ldr	r1, [pc, #116]	; (800cdb0 <vTaskSwitchContext+0xbc>)
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	440b      	add	r3, r1
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0e4      	beq.n	800cd18 <vTaskSwitchContext+0x24>
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	4613      	mov	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4a15      	ldr	r2, [pc, #84]	; (800cdb0 <vTaskSwitchContext+0xbc>)
 800cd5a:	4413      	add	r3, r2
 800cd5c:	60bb      	str	r3, [r7, #8]
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	605a      	str	r2, [r3, #4]
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	3308      	adds	r3, #8
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d104      	bne.n	800cd7e <vTaskSwitchContext+0x8a>
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	685a      	ldr	r2, [r3, #4]
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	605a      	str	r2, [r3, #4]
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	4a0b      	ldr	r2, [pc, #44]	; (800cdb4 <vTaskSwitchContext+0xc0>)
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	4a08      	ldr	r2, [pc, #32]	; (800cdac <vTaskSwitchContext+0xb8>)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd8e:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <vTaskSwitchContext+0xc0>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3354      	adds	r3, #84	; 0x54
 800cd94:	4a08      	ldr	r2, [pc, #32]	; (800cdb8 <vTaskSwitchContext+0xc4>)
 800cd96:	6013      	str	r3, [r2, #0]
}
 800cd98:	bf00      	nop
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	20005c30 	.word	0x20005c30
 800cda8:	20005c1c 	.word	0x20005c1c
 800cdac:	20005c10 	.word	0x20005c10
 800cdb0:	20005738 	.word	0x20005738
 800cdb4:	20005734 	.word	0x20005734
 800cdb8:	2000008c 	.word	0x2000008c

0800cdbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10a      	bne.n	800cde2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	60fb      	str	r3, [r7, #12]
}
 800cdde:	bf00      	nop
 800cde0:	e7fe      	b.n	800cde0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cde2:	4b07      	ldr	r3, [pc, #28]	; (800ce00 <vTaskPlaceOnEventList+0x44>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	3318      	adds	r3, #24
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7fe fbcb 	bl	800b586 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	6838      	ldr	r0, [r7, #0]
 800cdf4:	f000 fba4 	bl	800d540 <prvAddCurrentTaskToDelayedList>
}
 800cdf8:	bf00      	nop
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20005734 	.word	0x20005734

0800ce04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10a      	bne.n	800ce2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1a:	f383 8811 	msr	BASEPRI, r3
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f3bf 8f4f 	dsb	sy
 800ce26:	617b      	str	r3, [r7, #20]
}
 800ce28:	bf00      	nop
 800ce2a:	e7fe      	b.n	800ce2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce2c:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <vTaskPlaceOnEventListRestricted+0x54>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	3318      	adds	r3, #24
 800ce32:	4619      	mov	r1, r3
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f7fe fb82 	bl	800b53e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d002      	beq.n	800ce46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce46:	6879      	ldr	r1, [r7, #4]
 800ce48:	68b8      	ldr	r0, [r7, #8]
 800ce4a:	f000 fb79 	bl	800d540 <prvAddCurrentTaskToDelayedList>
	}
 800ce4e:	bf00      	nop
 800ce50:	3718      	adds	r7, #24
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	20005734 	.word	0x20005734

0800ce5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b086      	sub	sp, #24
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10a      	bne.n	800ce88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	60fb      	str	r3, [r7, #12]
}
 800ce84:	bf00      	nop
 800ce86:	e7fe      	b.n	800ce86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	3318      	adds	r3, #24
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe fbb3 	bl	800b5f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce92:	4b1e      	ldr	r3, [pc, #120]	; (800cf0c <xTaskRemoveFromEventList+0xb0>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d11d      	bne.n	800ced6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fe fbaa 	bl	800b5f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea8:	4b19      	ldr	r3, [pc, #100]	; (800cf10 <xTaskRemoveFromEventList+0xb4>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d903      	bls.n	800ceb8 <xTaskRemoveFromEventList+0x5c>
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	4a16      	ldr	r2, [pc, #88]	; (800cf10 <xTaskRemoveFromEventList+0xb4>)
 800ceb6:	6013      	str	r3, [r2, #0]
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebc:	4613      	mov	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4a13      	ldr	r2, [pc, #76]	; (800cf14 <xTaskRemoveFromEventList+0xb8>)
 800cec6:	441a      	add	r2, r3
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	3304      	adds	r3, #4
 800cecc:	4619      	mov	r1, r3
 800cece:	4610      	mov	r0, r2
 800ced0:	f7fe fb35 	bl	800b53e <vListInsertEnd>
 800ced4:	e005      	b.n	800cee2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	3318      	adds	r3, #24
 800ceda:	4619      	mov	r1, r3
 800cedc:	480e      	ldr	r0, [pc, #56]	; (800cf18 <xTaskRemoveFromEventList+0xbc>)
 800cede:	f7fe fb2e 	bl	800b53e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee6:	4b0d      	ldr	r3, [pc, #52]	; (800cf1c <xTaskRemoveFromEventList+0xc0>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d905      	bls.n	800cefc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cef0:	2301      	movs	r3, #1
 800cef2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cef4:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <xTaskRemoveFromEventList+0xc4>)
 800cef6:	2201      	movs	r2, #1
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	e001      	b.n	800cf00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cefc:	2300      	movs	r3, #0
 800cefe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf00:	697b      	ldr	r3, [r7, #20]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3718      	adds	r7, #24
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	20005c30 	.word	0x20005c30
 800cf10:	20005c10 	.word	0x20005c10
 800cf14:	20005738 	.word	0x20005738
 800cf18:	20005bc8 	.word	0x20005bc8
 800cf1c:	20005734 	.word	0x20005734
 800cf20:	20005c1c 	.word	0x20005c1c

0800cf24 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10a      	bne.n	800cf48 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800cf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf36:	f383 8811 	msr	BASEPRI, r3
 800cf3a:	f3bf 8f6f 	isb	sy
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	60fb      	str	r3, [r7, #12]
}
 800cf44:	bf00      	nop
 800cf46:	e7fe      	b.n	800cf46 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800cf48:	f000 ffcc 	bl	800dee4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf4c:	4b06      	ldr	r3, [pc, #24]	; (800cf68 <vTaskSetTimeOutState+0x44>)
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800cf54:	4b05      	ldr	r3, [pc, #20]	; (800cf6c <vTaskSetTimeOutState+0x48>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800cf5c:	f000 fff2 	bl	800df44 <vPortExitCritical>
}
 800cf60:	bf00      	nop
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20005c20 	.word	0x20005c20
 800cf6c:	20005c0c 	.word	0x20005c0c

0800cf70 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf78:	4b06      	ldr	r3, [pc, #24]	; (800cf94 <vTaskInternalSetTimeOutState+0x24>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf80:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <vTaskInternalSetTimeOutState+0x28>)
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	605a      	str	r2, [r3, #4]
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	20005c20 	.word	0x20005c20
 800cf98:	20005c0c 	.word	0x20005c0c

0800cf9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b088      	sub	sp, #32
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10a      	bne.n	800cfc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	613b      	str	r3, [r7, #16]
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10a      	bne.n	800cfde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfcc:	f383 8811 	msr	BASEPRI, r3
 800cfd0:	f3bf 8f6f 	isb	sy
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	60fb      	str	r3, [r7, #12]
}
 800cfda:	bf00      	nop
 800cfdc:	e7fe      	b.n	800cfdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cfde:	f000 ff81 	bl	800dee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfe2:	4b1d      	ldr	r3, [pc, #116]	; (800d058 <xTaskCheckForTimeOut+0xbc>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	69ba      	ldr	r2, [r7, #24]
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cffa:	d102      	bne.n	800d002 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cffc:	2300      	movs	r3, #0
 800cffe:	61fb      	str	r3, [r7, #28]
 800d000:	e023      	b.n	800d04a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	4b15      	ldr	r3, [pc, #84]	; (800d05c <xTaskCheckForTimeOut+0xc0>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d007      	beq.n	800d01e <xTaskCheckForTimeOut+0x82>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	69ba      	ldr	r2, [r7, #24]
 800d014:	429a      	cmp	r2, r3
 800d016:	d302      	bcc.n	800d01e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d018:	2301      	movs	r3, #1
 800d01a:	61fb      	str	r3, [r7, #28]
 800d01c:	e015      	b.n	800d04a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	429a      	cmp	r2, r3
 800d026:	d20b      	bcs.n	800d040 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	1ad2      	subs	r2, r2, r3
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7ff ff9b 	bl	800cf70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d03a:	2300      	movs	r3, #0
 800d03c:	61fb      	str	r3, [r7, #28]
 800d03e:	e004      	b.n	800d04a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2200      	movs	r2, #0
 800d044:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d046:	2301      	movs	r3, #1
 800d048:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d04a:	f000 ff7b 	bl	800df44 <vPortExitCritical>

	return xReturn;
 800d04e:	69fb      	ldr	r3, [r7, #28]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3720      	adds	r7, #32
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	20005c0c 	.word	0x20005c0c
 800d05c:	20005c20 	.word	0x20005c20

0800d060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d060:	b480      	push	{r7}
 800d062:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d064:	4b03      	ldr	r3, [pc, #12]	; (800d074 <vTaskMissedYield+0x14>)
 800d066:	2201      	movs	r2, #1
 800d068:	601a      	str	r2, [r3, #0]
}
 800d06a:	bf00      	nop
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr
 800d074:	20005c1c 	.word	0x20005c1c

0800d078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d080:	f000 f852 	bl	800d128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d084:	4b06      	ldr	r3, [pc, #24]	; (800d0a0 <prvIdleTask+0x28>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d9f9      	bls.n	800d080 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d08c:	4b05      	ldr	r3, [pc, #20]	; (800d0a4 <prvIdleTask+0x2c>)
 800d08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d09c:	e7f0      	b.n	800d080 <prvIdleTask+0x8>
 800d09e:	bf00      	nop
 800d0a0:	20005738 	.word	0x20005738
 800d0a4:	e000ed04 	.word	0xe000ed04

0800d0a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	607b      	str	r3, [r7, #4]
 800d0b2:	e00c      	b.n	800d0ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4a12      	ldr	r2, [pc, #72]	; (800d108 <prvInitialiseTaskLists+0x60>)
 800d0c0:	4413      	add	r3, r2
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe fa0e 	bl	800b4e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	607b      	str	r3, [r7, #4]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b37      	cmp	r3, #55	; 0x37
 800d0d2:	d9ef      	bls.n	800d0b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0d4:	480d      	ldr	r0, [pc, #52]	; (800d10c <prvInitialiseTaskLists+0x64>)
 800d0d6:	f7fe fa05 	bl	800b4e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0da:	480d      	ldr	r0, [pc, #52]	; (800d110 <prvInitialiseTaskLists+0x68>)
 800d0dc:	f7fe fa02 	bl	800b4e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0e0:	480c      	ldr	r0, [pc, #48]	; (800d114 <prvInitialiseTaskLists+0x6c>)
 800d0e2:	f7fe f9ff 	bl	800b4e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0e6:	480c      	ldr	r0, [pc, #48]	; (800d118 <prvInitialiseTaskLists+0x70>)
 800d0e8:	f7fe f9fc 	bl	800b4e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0ec:	480b      	ldr	r0, [pc, #44]	; (800d11c <prvInitialiseTaskLists+0x74>)
 800d0ee:	f7fe f9f9 	bl	800b4e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0f2:	4b0b      	ldr	r3, [pc, #44]	; (800d120 <prvInitialiseTaskLists+0x78>)
 800d0f4:	4a05      	ldr	r2, [pc, #20]	; (800d10c <prvInitialiseTaskLists+0x64>)
 800d0f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0f8:	4b0a      	ldr	r3, [pc, #40]	; (800d124 <prvInitialiseTaskLists+0x7c>)
 800d0fa:	4a05      	ldr	r2, [pc, #20]	; (800d110 <prvInitialiseTaskLists+0x68>)
 800d0fc:	601a      	str	r2, [r3, #0]
}
 800d0fe:	bf00      	nop
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20005738 	.word	0x20005738
 800d10c:	20005b98 	.word	0x20005b98
 800d110:	20005bac 	.word	0x20005bac
 800d114:	20005bc8 	.word	0x20005bc8
 800d118:	20005bdc 	.word	0x20005bdc
 800d11c:	20005bf4 	.word	0x20005bf4
 800d120:	20005bc0 	.word	0x20005bc0
 800d124:	20005bc4 	.word	0x20005bc4

0800d128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d12e:	e019      	b.n	800d164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d130:	f000 fed8 	bl	800dee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d134:	4b10      	ldr	r3, [pc, #64]	; (800d178 <prvCheckTasksWaitingTermination+0x50>)
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	3304      	adds	r3, #4
 800d140:	4618      	mov	r0, r3
 800d142:	f7fe fa59 	bl	800b5f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d146:	4b0d      	ldr	r3, [pc, #52]	; (800d17c <prvCheckTasksWaitingTermination+0x54>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	3b01      	subs	r3, #1
 800d14c:	4a0b      	ldr	r2, [pc, #44]	; (800d17c <prvCheckTasksWaitingTermination+0x54>)
 800d14e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d150:	4b0b      	ldr	r3, [pc, #44]	; (800d180 <prvCheckTasksWaitingTermination+0x58>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	3b01      	subs	r3, #1
 800d156:	4a0a      	ldr	r2, [pc, #40]	; (800d180 <prvCheckTasksWaitingTermination+0x58>)
 800d158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d15a:	f000 fef3 	bl	800df44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 f810 	bl	800d184 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d164:	4b06      	ldr	r3, [pc, #24]	; (800d180 <prvCheckTasksWaitingTermination+0x58>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1e1      	bne.n	800d130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d16c:	bf00      	nop
 800d16e:	bf00      	nop
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20005bdc 	.word	0x20005bdc
 800d17c:	20005c08 	.word	0x20005c08
 800d180:	20005bf0 	.word	0x20005bf0

0800d184 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3354      	adds	r3, #84	; 0x54
 800d190:	4618      	mov	r0, r3
 800d192:	f00d fd3f 	bl	801ac14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d108      	bne.n	800d1b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f001 f88b 	bl	800e2c0 <vPortFree>
				vPortFree( pxTCB );
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f001 f888 	bl	800e2c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d1b0:	e018      	b.n	800d1e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d103      	bne.n	800d1c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f001 f87f 	bl	800e2c0 <vPortFree>
	}
 800d1c2:	e00f      	b.n	800d1e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d00a      	beq.n	800d1e4 <prvDeleteTCB+0x60>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	60fb      	str	r3, [r7, #12]
}
 800d1e0:	bf00      	nop
 800d1e2:	e7fe      	b.n	800d1e2 <prvDeleteTCB+0x5e>
	}
 800d1e4:	bf00      	nop
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1f2:	4b0c      	ldr	r3, [pc, #48]	; (800d224 <prvResetNextTaskUnblockTime+0x38>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d104      	bne.n	800d206 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1fc:	4b0a      	ldr	r3, [pc, #40]	; (800d228 <prvResetNextTaskUnblockTime+0x3c>)
 800d1fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d202:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d204:	e008      	b.n	800d218 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d206:	4b07      	ldr	r3, [pc, #28]	; (800d224 <prvResetNextTaskUnblockTime+0x38>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	4a04      	ldr	r2, [pc, #16]	; (800d228 <prvResetNextTaskUnblockTime+0x3c>)
 800d216:	6013      	str	r3, [r2, #0]
}
 800d218:	bf00      	nop
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	20005bc0 	.word	0x20005bc0
 800d228:	20005c28 	.word	0x20005c28

0800d22c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d232:	4b0b      	ldr	r3, [pc, #44]	; (800d260 <xTaskGetSchedulerState+0x34>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d102      	bne.n	800d240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d23a:	2301      	movs	r3, #1
 800d23c:	607b      	str	r3, [r7, #4]
 800d23e:	e008      	b.n	800d252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d240:	4b08      	ldr	r3, [pc, #32]	; (800d264 <xTaskGetSchedulerState+0x38>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d102      	bne.n	800d24e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d248:	2302      	movs	r3, #2
 800d24a:	607b      	str	r3, [r7, #4]
 800d24c:	e001      	b.n	800d252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d24e:	2300      	movs	r3, #0
 800d250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d252:	687b      	ldr	r3, [r7, #4]
	}
 800d254:	4618      	mov	r0, r3
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr
 800d260:	20005c14 	.word	0x20005c14
 800d264:	20005c30 	.word	0x20005c30

0800d268 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d274:	2300      	movs	r3, #0
 800d276:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d051      	beq.n	800d322 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d282:	4b2a      	ldr	r3, [pc, #168]	; (800d32c <xTaskPriorityInherit+0xc4>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	429a      	cmp	r2, r3
 800d28a:	d241      	bcs.n	800d310 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	699b      	ldr	r3, [r3, #24]
 800d290:	2b00      	cmp	r3, #0
 800d292:	db06      	blt.n	800d2a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d294:	4b25      	ldr	r3, [pc, #148]	; (800d32c <xTaskPriorityInherit+0xc4>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	6959      	ldr	r1, [r3, #20]
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4a1f      	ldr	r2, [pc, #124]	; (800d330 <xTaskPriorityInherit+0xc8>)
 800d2b4:	4413      	add	r3, r2
 800d2b6:	4299      	cmp	r1, r3
 800d2b8:	d122      	bne.n	800d300 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe f99a 	bl	800b5f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2c4:	4b19      	ldr	r3, [pc, #100]	; (800d32c <xTaskPriorityInherit+0xc4>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d2:	4b18      	ldr	r3, [pc, #96]	; (800d334 <xTaskPriorityInherit+0xcc>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d903      	bls.n	800d2e2 <xTaskPriorityInherit+0x7a>
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	4a15      	ldr	r2, [pc, #84]	; (800d334 <xTaskPriorityInherit+0xcc>)
 800d2e0:	6013      	str	r3, [r2, #0]
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4413      	add	r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	4a10      	ldr	r2, [pc, #64]	; (800d330 <xTaskPriorityInherit+0xc8>)
 800d2f0:	441a      	add	r2, r3
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	f7fe f920 	bl	800b53e <vListInsertEnd>
 800d2fe:	e004      	b.n	800d30a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d300:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <xTaskPriorityInherit+0xc4>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d30a:	2301      	movs	r3, #1
 800d30c:	60fb      	str	r3, [r7, #12]
 800d30e:	e008      	b.n	800d322 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d314:	4b05      	ldr	r3, [pc, #20]	; (800d32c <xTaskPriorityInherit+0xc4>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d201      	bcs.n	800d322 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d31e:	2301      	movs	r3, #1
 800d320:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d322:	68fb      	ldr	r3, [r7, #12]
	}
 800d324:	4618      	mov	r0, r3
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	20005734 	.word	0x20005734
 800d330:	20005738 	.word	0x20005738
 800d334:	20005c10 	.word	0x20005c10

0800d338 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d344:	2300      	movs	r3, #0
 800d346:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d056      	beq.n	800d3fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d34e:	4b2e      	ldr	r3, [pc, #184]	; (800d408 <xTaskPriorityDisinherit+0xd0>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	693a      	ldr	r2, [r7, #16]
 800d354:	429a      	cmp	r2, r3
 800d356:	d00a      	beq.n	800d36e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	60fb      	str	r3, [r7, #12]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10a      	bne.n	800d38c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37a:	f383 8811 	msr	BASEPRI, r3
 800d37e:	f3bf 8f6f 	isb	sy
 800d382:	f3bf 8f4f 	dsb	sy
 800d386:	60bb      	str	r3, [r7, #8]
}
 800d388:	bf00      	nop
 800d38a:	e7fe      	b.n	800d38a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d390:	1e5a      	subs	r2, r3, #1
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d02c      	beq.n	800d3fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d128      	bne.n	800d3fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fe f922 	bl	800b5f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3cc:	4b0f      	ldr	r3, [pc, #60]	; (800d40c <xTaskPriorityDisinherit+0xd4>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d903      	bls.n	800d3dc <xTaskPriorityDisinherit+0xa4>
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d8:	4a0c      	ldr	r2, [pc, #48]	; (800d40c <xTaskPriorityDisinherit+0xd4>)
 800d3da:	6013      	str	r3, [r2, #0]
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4a09      	ldr	r2, [pc, #36]	; (800d410 <xTaskPriorityDisinherit+0xd8>)
 800d3ea:	441a      	add	r2, r3
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f7fe f8a3 	bl	800b53e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3fc:	697b      	ldr	r3, [r7, #20]
	}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	20005734 	.word	0x20005734
 800d40c:	20005c10 	.word	0x20005c10
 800d410:	20005738 	.word	0x20005738

0800d414 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d414:	b580      	push	{r7, lr}
 800d416:	b088      	sub	sp, #32
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d422:	2301      	movs	r3, #1
 800d424:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d06a      	beq.n	800d502 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10a      	bne.n	800d44a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	60fb      	str	r3, [r7, #12]
}
 800d446:	bf00      	nop
 800d448:	e7fe      	b.n	800d448 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d44e:	683a      	ldr	r2, [r7, #0]
 800d450:	429a      	cmp	r2, r3
 800d452:	d902      	bls.n	800d45a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	61fb      	str	r3, [r7, #28]
 800d458:	e002      	b.n	800d460 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d45e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	69fa      	ldr	r2, [r7, #28]
 800d466:	429a      	cmp	r2, r3
 800d468:	d04b      	beq.n	800d502 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	429a      	cmp	r2, r3
 800d472:	d146      	bne.n	800d502 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d474:	4b25      	ldr	r3, [pc, #148]	; (800d50c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	69ba      	ldr	r2, [r7, #24]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d10a      	bne.n	800d494 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	60bb      	str	r3, [r7, #8]
}
 800d490:	bf00      	nop
 800d492:	e7fe      	b.n	800d492 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d498:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	69fa      	ldr	r2, [r7, #28]
 800d49e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	db04      	blt.n	800d4b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	6959      	ldr	r1, [r3, #20]
 800d4b6:	693a      	ldr	r2, [r7, #16]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	4413      	add	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	4a13      	ldr	r2, [pc, #76]	; (800d510 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d4c2:	4413      	add	r3, r2
 800d4c4:	4299      	cmp	r1, r3
 800d4c6:	d11c      	bne.n	800d502 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	3304      	adds	r3, #4
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7fe f893 	bl	800b5f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d6:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d903      	bls.n	800d4e6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e2:	4a0c      	ldr	r2, [pc, #48]	; (800d514 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4e4:	6013      	str	r3, [r2, #0]
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4413      	add	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4a07      	ldr	r2, [pc, #28]	; (800d510 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d4f4:	441a      	add	r2, r3
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	f7fe f81e 	bl	800b53e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d502:	bf00      	nop
 800d504:	3720      	adds	r7, #32
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	20005734 	.word	0x20005734
 800d510:	20005738 	.word	0x20005738
 800d514:	20005c10 	.word	0x20005c10

0800d518 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d518:	b480      	push	{r7}
 800d51a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d51c:	4b07      	ldr	r3, [pc, #28]	; (800d53c <pvTaskIncrementMutexHeldCount+0x24>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d004      	beq.n	800d52e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d524:	4b05      	ldr	r3, [pc, #20]	; (800d53c <pvTaskIncrementMutexHeldCount+0x24>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d52a:	3201      	adds	r2, #1
 800d52c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d52e:	4b03      	ldr	r3, [pc, #12]	; (800d53c <pvTaskIncrementMutexHeldCount+0x24>)
 800d530:	681b      	ldr	r3, [r3, #0]
	}
 800d532:	4618      	mov	r0, r3
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	20005734 	.word	0x20005734

0800d540 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d54a:	4b21      	ldr	r3, [pc, #132]	; (800d5d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d550:	4b20      	ldr	r3, [pc, #128]	; (800d5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	3304      	adds	r3, #4
 800d556:	4618      	mov	r0, r3
 800d558:	f7fe f84e 	bl	800b5f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d562:	d10a      	bne.n	800d57a <prvAddCurrentTaskToDelayedList+0x3a>
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d007      	beq.n	800d57a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d56a:	4b1a      	ldr	r3, [pc, #104]	; (800d5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	3304      	adds	r3, #4
 800d570:	4619      	mov	r1, r3
 800d572:	4819      	ldr	r0, [pc, #100]	; (800d5d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d574:	f7fd ffe3 	bl	800b53e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d578:	e026      	b.n	800d5c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d57a:	68fa      	ldr	r2, [r7, #12]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4413      	add	r3, r2
 800d580:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d582:	4b14      	ldr	r3, [pc, #80]	; (800d5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68ba      	ldr	r2, [r7, #8]
 800d588:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d209      	bcs.n	800d5a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d592:	4b12      	ldr	r3, [pc, #72]	; (800d5dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	4b0f      	ldr	r3, [pc, #60]	; (800d5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4619      	mov	r1, r3
 800d59e:	4610      	mov	r0, r2
 800d5a0:	f7fd fff1 	bl	800b586 <vListInsert>
}
 800d5a4:	e010      	b.n	800d5c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5a6:	4b0e      	ldr	r3, [pc, #56]	; (800d5e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	f7fd ffe7 	bl	800b586 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5b8:	4b0a      	ldr	r3, [pc, #40]	; (800d5e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d202      	bcs.n	800d5c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d5c2:	4a08      	ldr	r2, [pc, #32]	; (800d5e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	6013      	str	r3, [r2, #0]
}
 800d5c8:	bf00      	nop
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	20005c0c 	.word	0x20005c0c
 800d5d4:	20005734 	.word	0x20005734
 800d5d8:	20005bf4 	.word	0x20005bf4
 800d5dc:	20005bc4 	.word	0x20005bc4
 800d5e0:	20005bc0 	.word	0x20005bc0
 800d5e4:	20005c28 	.word	0x20005c28

0800d5e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08a      	sub	sp, #40	; 0x28
 800d5ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d5f2:	f000 fb07 	bl	800dc04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d5f6:	4b1c      	ldr	r3, [pc, #112]	; (800d668 <xTimerCreateTimerTask+0x80>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d021      	beq.n	800d642 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d5fe:	2300      	movs	r3, #0
 800d600:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d602:	2300      	movs	r3, #0
 800d604:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d606:	1d3a      	adds	r2, r7, #4
 800d608:	f107 0108 	add.w	r1, r7, #8
 800d60c:	f107 030c 	add.w	r3, r7, #12
 800d610:	4618      	mov	r0, r3
 800d612:	f7fd ff4d 	bl	800b4b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	9202      	str	r2, [sp, #8]
 800d61e:	9301      	str	r3, [sp, #4]
 800d620:	2302      	movs	r3, #2
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	2300      	movs	r3, #0
 800d626:	460a      	mov	r2, r1
 800d628:	4910      	ldr	r1, [pc, #64]	; (800d66c <xTimerCreateTimerTask+0x84>)
 800d62a:	4811      	ldr	r0, [pc, #68]	; (800d670 <xTimerCreateTimerTask+0x88>)
 800d62c:	f7fe fe8a 	bl	800c344 <xTaskCreateStatic>
 800d630:	4603      	mov	r3, r0
 800d632:	4a10      	ldr	r2, [pc, #64]	; (800d674 <xTimerCreateTimerTask+0x8c>)
 800d634:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d636:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <xTimerCreateTimerTask+0x8c>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d63e:	2301      	movs	r3, #1
 800d640:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10a      	bne.n	800d65e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	613b      	str	r3, [r7, #16]
}
 800d65a:	bf00      	nop
 800d65c:	e7fe      	b.n	800d65c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d65e:	697b      	ldr	r3, [r7, #20]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	20005c64 	.word	0x20005c64
 800d66c:	0801e984 	.word	0x0801e984
 800d670:	0800d7ad 	.word	0x0800d7ad
 800d674:	20005c68 	.word	0x20005c68

0800d678 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b08a      	sub	sp, #40	; 0x28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d686:	2300      	movs	r3, #0
 800d688:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d10a      	bne.n	800d6a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	623b      	str	r3, [r7, #32]
}
 800d6a2:	bf00      	nop
 800d6a4:	e7fe      	b.n	800d6a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6a6:	4b1a      	ldr	r3, [pc, #104]	; (800d710 <xTimerGenericCommand+0x98>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d02a      	beq.n	800d704 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	2b05      	cmp	r3, #5
 800d6be:	dc18      	bgt.n	800d6f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d6c0:	f7ff fdb4 	bl	800d22c <xTaskGetSchedulerState>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	d109      	bne.n	800d6de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d6ca:	4b11      	ldr	r3, [pc, #68]	; (800d710 <xTimerGenericCommand+0x98>)
 800d6cc:	6818      	ldr	r0, [r3, #0]
 800d6ce:	f107 0110 	add.w	r1, r7, #16
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6d6:	f7fe f929 	bl	800b92c <xQueueGenericSend>
 800d6da:	6278      	str	r0, [r7, #36]	; 0x24
 800d6dc:	e012      	b.n	800d704 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d6de:	4b0c      	ldr	r3, [pc, #48]	; (800d710 <xTimerGenericCommand+0x98>)
 800d6e0:	6818      	ldr	r0, [r3, #0]
 800d6e2:	f107 0110 	add.w	r1, r7, #16
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f7fe f91f 	bl	800b92c <xQueueGenericSend>
 800d6ee:	6278      	str	r0, [r7, #36]	; 0x24
 800d6f0:	e008      	b.n	800d704 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d6f2:	4b07      	ldr	r3, [pc, #28]	; (800d710 <xTimerGenericCommand+0x98>)
 800d6f4:	6818      	ldr	r0, [r3, #0]
 800d6f6:	f107 0110 	add.w	r1, r7, #16
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	f7fe fa13 	bl	800bb28 <xQueueGenericSendFromISR>
 800d702:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d706:	4618      	mov	r0, r3
 800d708:	3728      	adds	r7, #40	; 0x28
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	20005c64 	.word	0x20005c64

0800d714 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b088      	sub	sp, #32
 800d718:	af02      	add	r7, sp, #8
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d71e:	4b22      	ldr	r3, [pc, #136]	; (800d7a8 <prvProcessExpiredTimer+0x94>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	3304      	adds	r3, #4
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7fd ff63 	bl	800b5f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d738:	f003 0304 	and.w	r3, r3, #4
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d022      	beq.n	800d786 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	699a      	ldr	r2, [r3, #24]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	18d1      	adds	r1, r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	683a      	ldr	r2, [r7, #0]
 800d74c:	6978      	ldr	r0, [r7, #20]
 800d74e:	f000 f8d1 	bl	800d8f4 <prvInsertTimerInActiveList>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01f      	beq.n	800d798 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d758:	2300      	movs	r3, #0
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	2300      	movs	r3, #0
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	2100      	movs	r1, #0
 800d762:	6978      	ldr	r0, [r7, #20]
 800d764:	f7ff ff88 	bl	800d678 <xTimerGenericCommand>
 800d768:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d113      	bne.n	800d798 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	60fb      	str	r3, [r7, #12]
}
 800d782:	bf00      	nop
 800d784:	e7fe      	b.n	800d784 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d78c:	f023 0301 	bic.w	r3, r3, #1
 800d790:	b2da      	uxtb	r2, r3
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	6a1b      	ldr	r3, [r3, #32]
 800d79c:	6978      	ldr	r0, [r7, #20]
 800d79e:	4798      	blx	r3
}
 800d7a0:	bf00      	nop
 800d7a2:	3718      	adds	r7, #24
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	20005c5c 	.word	0x20005c5c

0800d7ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7b4:	f107 0308 	add.w	r3, r7, #8
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 f857 	bl	800d86c <prvGetNextExpireTime>
 800d7be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f000 f803 	bl	800d7d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d7ca:	f000 f8d5 	bl	800d978 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7ce:	e7f1      	b.n	800d7b4 <prvTimerTask+0x8>

0800d7d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d7da:	f7ff f915 	bl	800ca08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7de:	f107 0308 	add.w	r3, r7, #8
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f000 f866 	bl	800d8b4 <prvSampleTimeNow>
 800d7e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d130      	bne.n	800d852 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10a      	bne.n	800d80c <prvProcessTimerOrBlockTask+0x3c>
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d806      	bhi.n	800d80c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d7fe:	f7ff f911 	bl	800ca24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d802:	68f9      	ldr	r1, [r7, #12]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff ff85 	bl	800d714 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d80a:	e024      	b.n	800d856 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d008      	beq.n	800d824 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d812:	4b13      	ldr	r3, [pc, #76]	; (800d860 <prvProcessTimerOrBlockTask+0x90>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d101      	bne.n	800d820 <prvProcessTimerOrBlockTask+0x50>
 800d81c:	2301      	movs	r3, #1
 800d81e:	e000      	b.n	800d822 <prvProcessTimerOrBlockTask+0x52>
 800d820:	2300      	movs	r3, #0
 800d822:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d824:	4b0f      	ldr	r3, [pc, #60]	; (800d864 <prvProcessTimerOrBlockTask+0x94>)
 800d826:	6818      	ldr	r0, [r3, #0]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	1ad3      	subs	r3, r2, r3
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	4619      	mov	r1, r3
 800d832:	f7fe fd53 	bl	800c2dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d836:	f7ff f8f5 	bl	800ca24 <xTaskResumeAll>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d10a      	bne.n	800d856 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d840:	4b09      	ldr	r3, [pc, #36]	; (800d868 <prvProcessTimerOrBlockTask+0x98>)
 800d842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d846:	601a      	str	r2, [r3, #0]
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	f3bf 8f6f 	isb	sy
}
 800d850:	e001      	b.n	800d856 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d852:	f7ff f8e7 	bl	800ca24 <xTaskResumeAll>
}
 800d856:	bf00      	nop
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	20005c60 	.word	0x20005c60
 800d864:	20005c64 	.word	0x20005c64
 800d868:	e000ed04 	.word	0xe000ed04

0800d86c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d86c:	b480      	push	{r7}
 800d86e:	b085      	sub	sp, #20
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d874:	4b0e      	ldr	r3, [pc, #56]	; (800d8b0 <prvGetNextExpireTime+0x44>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <prvGetNextExpireTime+0x16>
 800d87e:	2201      	movs	r2, #1
 800d880:	e000      	b.n	800d884 <prvGetNextExpireTime+0x18>
 800d882:	2200      	movs	r2, #0
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d105      	bne.n	800d89c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d890:	4b07      	ldr	r3, [pc, #28]	; (800d8b0 <prvGetNextExpireTime+0x44>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	60fb      	str	r3, [r7, #12]
 800d89a:	e001      	b.n	800d8a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3714      	adds	r7, #20
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	20005c5c 	.word	0x20005c5c

0800d8b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d8bc:	f7ff f950 	bl	800cb60 <xTaskGetTickCount>
 800d8c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d8c2:	4b0b      	ldr	r3, [pc, #44]	; (800d8f0 <prvSampleTimeNow+0x3c>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d205      	bcs.n	800d8d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d8cc:	f000 f936 	bl	800db3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	e002      	b.n	800d8de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d8de:	4a04      	ldr	r2, [pc, #16]	; (800d8f0 <prvSampleTimeNow+0x3c>)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20005c6c 	.word	0x20005c6c

0800d8f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b086      	sub	sp, #24
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d902:	2300      	movs	r3, #0
 800d904:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	429a      	cmp	r2, r3
 800d918:	d812      	bhi.n	800d940 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	1ad2      	subs	r2, r2, r3
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	699b      	ldr	r3, [r3, #24]
 800d924:	429a      	cmp	r2, r3
 800d926:	d302      	bcc.n	800d92e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d928:	2301      	movs	r3, #1
 800d92a:	617b      	str	r3, [r7, #20]
 800d92c:	e01b      	b.n	800d966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d92e:	4b10      	ldr	r3, [pc, #64]	; (800d970 <prvInsertTimerInActiveList+0x7c>)
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	3304      	adds	r3, #4
 800d936:	4619      	mov	r1, r3
 800d938:	4610      	mov	r0, r2
 800d93a:	f7fd fe24 	bl	800b586 <vListInsert>
 800d93e:	e012      	b.n	800d966 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	429a      	cmp	r2, r3
 800d946:	d206      	bcs.n	800d956 <prvInsertTimerInActiveList+0x62>
 800d948:	68ba      	ldr	r2, [r7, #8]
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d302      	bcc.n	800d956 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d950:	2301      	movs	r3, #1
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	e007      	b.n	800d966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d956:	4b07      	ldr	r3, [pc, #28]	; (800d974 <prvInsertTimerInActiveList+0x80>)
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3304      	adds	r3, #4
 800d95e:	4619      	mov	r1, r3
 800d960:	4610      	mov	r0, r2
 800d962:	f7fd fe10 	bl	800b586 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d966:	697b      	ldr	r3, [r7, #20]
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3718      	adds	r7, #24
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	20005c60 	.word	0x20005c60
 800d974:	20005c5c 	.word	0x20005c5c

0800d978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b08e      	sub	sp, #56	; 0x38
 800d97c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d97e:	e0ca      	b.n	800db16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	da18      	bge.n	800d9b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d986:	1d3b      	adds	r3, r7, #4
 800d988:	3304      	adds	r3, #4
 800d98a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d10a      	bne.n	800d9a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	61fb      	str	r3, [r7, #28]
}
 800d9a4:	bf00      	nop
 800d9a6:	e7fe      	b.n	800d9a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9ae:	6850      	ldr	r0, [r2, #4]
 800d9b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9b2:	6892      	ldr	r2, [r2, #8]
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f2c0 80aa 	blt.w	800db14 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c6:	695b      	ldr	r3, [r3, #20]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d004      	beq.n	800d9d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ce:	3304      	adds	r3, #4
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fd fe11 	bl	800b5f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9d6:	463b      	mov	r3, r7
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7ff ff6b 	bl	800d8b4 <prvSampleTimeNow>
 800d9de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b09      	cmp	r3, #9
 800d9e4:	f200 8097 	bhi.w	800db16 <prvProcessReceivedCommands+0x19e>
 800d9e8:	a201      	add	r2, pc, #4	; (adr r2, 800d9f0 <prvProcessReceivedCommands+0x78>)
 800d9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ee:	bf00      	nop
 800d9f0:	0800da19 	.word	0x0800da19
 800d9f4:	0800da19 	.word	0x0800da19
 800d9f8:	0800da19 	.word	0x0800da19
 800d9fc:	0800da8d 	.word	0x0800da8d
 800da00:	0800daa1 	.word	0x0800daa1
 800da04:	0800daeb 	.word	0x0800daeb
 800da08:	0800da19 	.word	0x0800da19
 800da0c:	0800da19 	.word	0x0800da19
 800da10:	0800da8d 	.word	0x0800da8d
 800da14:	0800daa1 	.word	0x0800daa1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da1e:	f043 0301 	orr.w	r3, r3, #1
 800da22:	b2da      	uxtb	r2, r3
 800da24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	699b      	ldr	r3, [r3, #24]
 800da30:	18d1      	adds	r1, r2, r3
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da38:	f7ff ff5c 	bl	800d8f4 <prvInsertTimerInActiveList>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d069      	beq.n	800db16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da50:	f003 0304 	and.w	r3, r3, #4
 800da54:	2b00      	cmp	r3, #0
 800da56:	d05e      	beq.n	800db16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5c:	699b      	ldr	r3, [r3, #24]
 800da5e:	441a      	add	r2, r3
 800da60:	2300      	movs	r3, #0
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	2300      	movs	r3, #0
 800da66:	2100      	movs	r1, #0
 800da68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da6a:	f7ff fe05 	bl	800d678 <xTimerGenericCommand>
 800da6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da70:	6a3b      	ldr	r3, [r7, #32]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d14f      	bne.n	800db16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800da76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	61bb      	str	r3, [r7, #24]
}
 800da88:	bf00      	nop
 800da8a:	e7fe      	b.n	800da8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da92:	f023 0301 	bic.w	r3, r3, #1
 800da96:	b2da      	uxtb	r2, r3
 800da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800da9e:	e03a      	b.n	800db16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800daa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daa6:	f043 0301 	orr.w	r3, r3, #1
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dab2:	68ba      	ldr	r2, [r7, #8]
 800dab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daba:	699b      	ldr	r3, [r3, #24]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d10a      	bne.n	800dad6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	617b      	str	r3, [r7, #20]
}
 800dad2:	bf00      	nop
 800dad4:	e7fe      	b.n	800dad4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad8:	699a      	ldr	r2, [r3, #24]
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dadc:	18d1      	adds	r1, r2, r3
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dae4:	f7ff ff06 	bl	800d8f4 <prvInsertTimerInActiveList>
					break;
 800dae8:	e015      	b.n	800db16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800daea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daf0:	f003 0302 	and.w	r3, r3, #2
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d103      	bne.n	800db00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800daf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dafa:	f000 fbe1 	bl	800e2c0 <vPortFree>
 800dafe:	e00a      	b.n	800db16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db06:	f023 0301 	bic.w	r3, r3, #1
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db12:	e000      	b.n	800db16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800db14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db16:	4b08      	ldr	r3, [pc, #32]	; (800db38 <prvProcessReceivedCommands+0x1c0>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	1d39      	adds	r1, r7, #4
 800db1c:	2200      	movs	r2, #0
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe f89e 	bl	800bc60 <xQueueReceive>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	f47f af2a 	bne.w	800d980 <prvProcessReceivedCommands+0x8>
	}
}
 800db2c:	bf00      	nop
 800db2e:	bf00      	nop
 800db30:	3730      	adds	r7, #48	; 0x30
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	20005c64 	.word	0x20005c64

0800db3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db42:	e048      	b.n	800dbd6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db44:	4b2d      	ldr	r3, [pc, #180]	; (800dbfc <prvSwitchTimerLists+0xc0>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db4e:	4b2b      	ldr	r3, [pc, #172]	; (800dbfc <prvSwitchTimerLists+0xc0>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	3304      	adds	r3, #4
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fd fd4b 	bl	800b5f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db70:	f003 0304 	and.w	r3, r3, #4
 800db74:	2b00      	cmp	r3, #0
 800db76:	d02e      	beq.n	800dbd6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	699b      	ldr	r3, [r3, #24]
 800db7c:	693a      	ldr	r2, [r7, #16]
 800db7e:	4413      	add	r3, r2
 800db80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db82:	68ba      	ldr	r2, [r7, #8]
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	429a      	cmp	r2, r3
 800db88:	d90e      	bls.n	800dba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db96:	4b19      	ldr	r3, [pc, #100]	; (800dbfc <prvSwitchTimerLists+0xc0>)
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	3304      	adds	r3, #4
 800db9e:	4619      	mov	r1, r3
 800dba0:	4610      	mov	r0, r2
 800dba2:	f7fd fcf0 	bl	800b586 <vListInsert>
 800dba6:	e016      	b.n	800dbd6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dba8:	2300      	movs	r3, #0
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	2300      	movs	r3, #0
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f7ff fd60 	bl	800d678 <xTimerGenericCommand>
 800dbb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10a      	bne.n	800dbd6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	603b      	str	r3, [r7, #0]
}
 800dbd2:	bf00      	nop
 800dbd4:	e7fe      	b.n	800dbd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dbd6:	4b09      	ldr	r3, [pc, #36]	; (800dbfc <prvSwitchTimerLists+0xc0>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d1b1      	bne.n	800db44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dbe0:	4b06      	ldr	r3, [pc, #24]	; (800dbfc <prvSwitchTimerLists+0xc0>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dbe6:	4b06      	ldr	r3, [pc, #24]	; (800dc00 <prvSwitchTimerLists+0xc4>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a04      	ldr	r2, [pc, #16]	; (800dbfc <prvSwitchTimerLists+0xc0>)
 800dbec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dbee:	4a04      	ldr	r2, [pc, #16]	; (800dc00 <prvSwitchTimerLists+0xc4>)
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	6013      	str	r3, [r2, #0]
}
 800dbf4:	bf00      	nop
 800dbf6:	3718      	adds	r7, #24
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	20005c5c 	.word	0x20005c5c
 800dc00:	20005c60 	.word	0x20005c60

0800dc04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc0a:	f000 f96b 	bl	800dee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc0e:	4b15      	ldr	r3, [pc, #84]	; (800dc64 <prvCheckForValidListAndQueue+0x60>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d120      	bne.n	800dc58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc16:	4814      	ldr	r0, [pc, #80]	; (800dc68 <prvCheckForValidListAndQueue+0x64>)
 800dc18:	f7fd fc64 	bl	800b4e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc1c:	4813      	ldr	r0, [pc, #76]	; (800dc6c <prvCheckForValidListAndQueue+0x68>)
 800dc1e:	f7fd fc61 	bl	800b4e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc22:	4b13      	ldr	r3, [pc, #76]	; (800dc70 <prvCheckForValidListAndQueue+0x6c>)
 800dc24:	4a10      	ldr	r2, [pc, #64]	; (800dc68 <prvCheckForValidListAndQueue+0x64>)
 800dc26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc28:	4b12      	ldr	r3, [pc, #72]	; (800dc74 <prvCheckForValidListAndQueue+0x70>)
 800dc2a:	4a10      	ldr	r2, [pc, #64]	; (800dc6c <prvCheckForValidListAndQueue+0x68>)
 800dc2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc2e:	2300      	movs	r3, #0
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	4b11      	ldr	r3, [pc, #68]	; (800dc78 <prvCheckForValidListAndQueue+0x74>)
 800dc34:	4a11      	ldr	r2, [pc, #68]	; (800dc7c <prvCheckForValidListAndQueue+0x78>)
 800dc36:	2110      	movs	r1, #16
 800dc38:	200a      	movs	r0, #10
 800dc3a:	f7fd fd6f 	bl	800b71c <xQueueGenericCreateStatic>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	4a08      	ldr	r2, [pc, #32]	; (800dc64 <prvCheckForValidListAndQueue+0x60>)
 800dc42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc44:	4b07      	ldr	r3, [pc, #28]	; (800dc64 <prvCheckForValidListAndQueue+0x60>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d005      	beq.n	800dc58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc4c:	4b05      	ldr	r3, [pc, #20]	; (800dc64 <prvCheckForValidListAndQueue+0x60>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	490b      	ldr	r1, [pc, #44]	; (800dc80 <prvCheckForValidListAndQueue+0x7c>)
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe fb18 	bl	800c288 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc58:	f000 f974 	bl	800df44 <vPortExitCritical>
}
 800dc5c:	bf00      	nop
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20005c64 	.word	0x20005c64
 800dc68:	20005c34 	.word	0x20005c34
 800dc6c:	20005c48 	.word	0x20005c48
 800dc70:	20005c5c 	.word	0x20005c5c
 800dc74:	20005c60 	.word	0x20005c60
 800dc78:	20005d10 	.word	0x20005d10
 800dc7c:	20005c70 	.word	0x20005c70
 800dc80:	0801e98c 	.word	0x0801e98c

0800dc84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	3b04      	subs	r3, #4
 800dc94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	3b04      	subs	r3, #4
 800dca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	f023 0201 	bic.w	r2, r3, #1
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3b04      	subs	r3, #4
 800dcb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dcb4:	4a0c      	ldr	r2, [pc, #48]	; (800dce8 <pxPortInitialiseStack+0x64>)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	3b14      	subs	r3, #20
 800dcbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3b04      	subs	r3, #4
 800dcca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f06f 0202 	mvn.w	r2, #2
 800dcd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	3b20      	subs	r3, #32
 800dcd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dcda:	68fb      	ldr	r3, [r7, #12]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3714      	adds	r7, #20
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr
 800dce8:	0800dced 	.word	0x0800dced

0800dcec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcf6:	4b12      	ldr	r3, [pc, #72]	; (800dd40 <prvTaskExitError+0x54>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcfe:	d00a      	beq.n	800dd16 <prvTaskExitError+0x2a>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	60fb      	str	r3, [r7, #12]
}
 800dd12:	bf00      	nop
 800dd14:	e7fe      	b.n	800dd14 <prvTaskExitError+0x28>
	__asm volatile
 800dd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1a:	f383 8811 	msr	BASEPRI, r3
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f3bf 8f4f 	dsb	sy
 800dd26:	60bb      	str	r3, [r7, #8]
}
 800dd28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd2a:	bf00      	nop
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0fc      	beq.n	800dd2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd32:	bf00      	nop
 800dd34:	bf00      	nop
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	20000030 	.word	0x20000030
	...

0800dd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd50:	4b07      	ldr	r3, [pc, #28]	; (800dd70 <pxCurrentTCBConst2>)
 800dd52:	6819      	ldr	r1, [r3, #0]
 800dd54:	6808      	ldr	r0, [r1, #0]
 800dd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5a:	f380 8809 	msr	PSP, r0
 800dd5e:	f3bf 8f6f 	isb	sy
 800dd62:	f04f 0000 	mov.w	r0, #0
 800dd66:	f380 8811 	msr	BASEPRI, r0
 800dd6a:	4770      	bx	lr
 800dd6c:	f3af 8000 	nop.w

0800dd70 <pxCurrentTCBConst2>:
 800dd70:	20005734 	.word	0x20005734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd74:	bf00      	nop
 800dd76:	bf00      	nop

0800dd78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd78:	4808      	ldr	r0, [pc, #32]	; (800dd9c <prvPortStartFirstTask+0x24>)
 800dd7a:	6800      	ldr	r0, [r0, #0]
 800dd7c:	6800      	ldr	r0, [r0, #0]
 800dd7e:	f380 8808 	msr	MSP, r0
 800dd82:	f04f 0000 	mov.w	r0, #0
 800dd86:	f380 8814 	msr	CONTROL, r0
 800dd8a:	b662      	cpsie	i
 800dd8c:	b661      	cpsie	f
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	df00      	svc	0
 800dd98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd9a:	bf00      	nop
 800dd9c:	e000ed08 	.word	0xe000ed08

0800dda0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dda6:	4b46      	ldr	r3, [pc, #280]	; (800dec0 <xPortStartScheduler+0x120>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a46      	ldr	r2, [pc, #280]	; (800dec4 <xPortStartScheduler+0x124>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d10a      	bne.n	800ddc6 <xPortStartScheduler+0x26>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	613b      	str	r3, [r7, #16]
}
 800ddc2:	bf00      	nop
 800ddc4:	e7fe      	b.n	800ddc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ddc6:	4b3e      	ldr	r3, [pc, #248]	; (800dec0 <xPortStartScheduler+0x120>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a3f      	ldr	r2, [pc, #252]	; (800dec8 <xPortStartScheduler+0x128>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d10a      	bne.n	800dde6 <xPortStartScheduler+0x46>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	60fb      	str	r3, [r7, #12]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dde6:	4b39      	ldr	r3, [pc, #228]	; (800decc <xPortStartScheduler+0x12c>)
 800dde8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	22ff      	movs	r2, #255	; 0xff
 800ddf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	b2db      	uxtb	r3, r3
 800de04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	4b31      	ldr	r3, [pc, #196]	; (800ded0 <xPortStartScheduler+0x130>)
 800de0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de0e:	4b31      	ldr	r3, [pc, #196]	; (800ded4 <xPortStartScheduler+0x134>)
 800de10:	2207      	movs	r2, #7
 800de12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de14:	e009      	b.n	800de2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de16:	4b2f      	ldr	r3, [pc, #188]	; (800ded4 <xPortStartScheduler+0x134>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3b01      	subs	r3, #1
 800de1c:	4a2d      	ldr	r2, [pc, #180]	; (800ded4 <xPortStartScheduler+0x134>)
 800de1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de20:	78fb      	ldrb	r3, [r7, #3]
 800de22:	b2db      	uxtb	r3, r3
 800de24:	005b      	lsls	r3, r3, #1
 800de26:	b2db      	uxtb	r3, r3
 800de28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de2a:	78fb      	ldrb	r3, [r7, #3]
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de32:	2b80      	cmp	r3, #128	; 0x80
 800de34:	d0ef      	beq.n	800de16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de36:	4b27      	ldr	r3, [pc, #156]	; (800ded4 <xPortStartScheduler+0x134>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f1c3 0307 	rsb	r3, r3, #7
 800de3e:	2b04      	cmp	r3, #4
 800de40:	d00a      	beq.n	800de58 <xPortStartScheduler+0xb8>
	__asm volatile
 800de42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de46:	f383 8811 	msr	BASEPRI, r3
 800de4a:	f3bf 8f6f 	isb	sy
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	60bb      	str	r3, [r7, #8]
}
 800de54:	bf00      	nop
 800de56:	e7fe      	b.n	800de56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de58:	4b1e      	ldr	r3, [pc, #120]	; (800ded4 <xPortStartScheduler+0x134>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	021b      	lsls	r3, r3, #8
 800de5e:	4a1d      	ldr	r2, [pc, #116]	; (800ded4 <xPortStartScheduler+0x134>)
 800de60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de62:	4b1c      	ldr	r3, [pc, #112]	; (800ded4 <xPortStartScheduler+0x134>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de6a:	4a1a      	ldr	r2, [pc, #104]	; (800ded4 <xPortStartScheduler+0x134>)
 800de6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	b2da      	uxtb	r2, r3
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de76:	4b18      	ldr	r3, [pc, #96]	; (800ded8 <xPortStartScheduler+0x138>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a17      	ldr	r2, [pc, #92]	; (800ded8 <xPortStartScheduler+0x138>)
 800de7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de82:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <xPortStartScheduler+0x138>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4a14      	ldr	r2, [pc, #80]	; (800ded8 <xPortStartScheduler+0x138>)
 800de88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de8e:	f000 f8dd 	bl	800e04c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de92:	4b12      	ldr	r3, [pc, #72]	; (800dedc <xPortStartScheduler+0x13c>)
 800de94:	2200      	movs	r2, #0
 800de96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de98:	f000 f8fc 	bl	800e094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de9c:	4b10      	ldr	r3, [pc, #64]	; (800dee0 <xPortStartScheduler+0x140>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a0f      	ldr	r2, [pc, #60]	; (800dee0 <xPortStartScheduler+0x140>)
 800dea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dea8:	f7ff ff66 	bl	800dd78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800deac:	f7fe ff22 	bl	800ccf4 <vTaskSwitchContext>
	prvTaskExitError();
 800deb0:	f7ff ff1c 	bl	800dcec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	e000ed00 	.word	0xe000ed00
 800dec4:	410fc271 	.word	0x410fc271
 800dec8:	410fc270 	.word	0x410fc270
 800decc:	e000e400 	.word	0xe000e400
 800ded0:	20005d60 	.word	0x20005d60
 800ded4:	20005d64 	.word	0x20005d64
 800ded8:	e000ed20 	.word	0xe000ed20
 800dedc:	20000030 	.word	0x20000030
 800dee0:	e000ef34 	.word	0xe000ef34

0800dee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	607b      	str	r3, [r7, #4]
}
 800defc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800defe:	4b0f      	ldr	r3, [pc, #60]	; (800df3c <vPortEnterCritical+0x58>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	3301      	adds	r3, #1
 800df04:	4a0d      	ldr	r2, [pc, #52]	; (800df3c <vPortEnterCritical+0x58>)
 800df06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df08:	4b0c      	ldr	r3, [pc, #48]	; (800df3c <vPortEnterCritical+0x58>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d10f      	bne.n	800df30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df10:	4b0b      	ldr	r3, [pc, #44]	; (800df40 <vPortEnterCritical+0x5c>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00a      	beq.n	800df30 <vPortEnterCritical+0x4c>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	603b      	str	r3, [r7, #0]
}
 800df2c:	bf00      	nop
 800df2e:	e7fe      	b.n	800df2e <vPortEnterCritical+0x4a>
	}
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	20000030 	.word	0x20000030
 800df40:	e000ed04 	.word	0xe000ed04

0800df44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df4a:	4b12      	ldr	r3, [pc, #72]	; (800df94 <vPortExitCritical+0x50>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10a      	bne.n	800df68 <vPortExitCritical+0x24>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	607b      	str	r3, [r7, #4]
}
 800df64:	bf00      	nop
 800df66:	e7fe      	b.n	800df66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df68:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <vPortExitCritical+0x50>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	4a09      	ldr	r2, [pc, #36]	; (800df94 <vPortExitCritical+0x50>)
 800df70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df72:	4b08      	ldr	r3, [pc, #32]	; (800df94 <vPortExitCritical+0x50>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d105      	bne.n	800df86 <vPortExitCritical+0x42>
 800df7a:	2300      	movs	r3, #0
 800df7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	f383 8811 	msr	BASEPRI, r3
}
 800df84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df86:	bf00      	nop
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	20000030 	.word	0x20000030
	...

0800dfa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfa0:	f3ef 8009 	mrs	r0, PSP
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	4b15      	ldr	r3, [pc, #84]	; (800e000 <pxCurrentTCBConst>)
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	f01e 0f10 	tst.w	lr, #16
 800dfb0:	bf08      	it	eq
 800dfb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dfb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfba:	6010      	str	r0, [r2, #0]
 800dfbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dfc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dfc4:	f380 8811 	msr	BASEPRI, r0
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	f3bf 8f6f 	isb	sy
 800dfd0:	f7fe fe90 	bl	800ccf4 <vTaskSwitchContext>
 800dfd4:	f04f 0000 	mov.w	r0, #0
 800dfd8:	f380 8811 	msr	BASEPRI, r0
 800dfdc:	bc09      	pop	{r0, r3}
 800dfde:	6819      	ldr	r1, [r3, #0]
 800dfe0:	6808      	ldr	r0, [r1, #0]
 800dfe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe6:	f01e 0f10 	tst.w	lr, #16
 800dfea:	bf08      	it	eq
 800dfec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dff0:	f380 8809 	msr	PSP, r0
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	4770      	bx	lr
 800dffa:	bf00      	nop
 800dffc:	f3af 8000 	nop.w

0800e000 <pxCurrentTCBConst>:
 800e000:	20005734 	.word	0x20005734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e004:	bf00      	nop
 800e006:	bf00      	nop

0800e008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	607b      	str	r3, [r7, #4]
}
 800e020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e022:	f7fe fdad 	bl	800cb80 <xTaskIncrementTick>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d003      	beq.n	800e034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e02c:	4b06      	ldr	r3, [pc, #24]	; (800e048 <xPortSysTickHandler+0x40>)
 800e02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e032:	601a      	str	r2, [r3, #0]
 800e034:	2300      	movs	r3, #0
 800e036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	f383 8811 	msr	BASEPRI, r3
}
 800e03e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	e000ed04 	.word	0xe000ed04

0800e04c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e050:	4b0b      	ldr	r3, [pc, #44]	; (800e080 <vPortSetupTimerInterrupt+0x34>)
 800e052:	2200      	movs	r2, #0
 800e054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e056:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <vPortSetupTimerInterrupt+0x38>)
 800e058:	2200      	movs	r2, #0
 800e05a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e05c:	4b0a      	ldr	r3, [pc, #40]	; (800e088 <vPortSetupTimerInterrupt+0x3c>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a0a      	ldr	r2, [pc, #40]	; (800e08c <vPortSetupTimerInterrupt+0x40>)
 800e062:	fba2 2303 	umull	r2, r3, r2, r3
 800e066:	099b      	lsrs	r3, r3, #6
 800e068:	4a09      	ldr	r2, [pc, #36]	; (800e090 <vPortSetupTimerInterrupt+0x44>)
 800e06a:	3b01      	subs	r3, #1
 800e06c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e06e:	4b04      	ldr	r3, [pc, #16]	; (800e080 <vPortSetupTimerInterrupt+0x34>)
 800e070:	2207      	movs	r2, #7
 800e072:	601a      	str	r2, [r3, #0]
}
 800e074:	bf00      	nop
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	e000e010 	.word	0xe000e010
 800e084:	e000e018 	.word	0xe000e018
 800e088:	20000010 	.word	0x20000010
 800e08c:	10624dd3 	.word	0x10624dd3
 800e090:	e000e014 	.word	0xe000e014

0800e094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e0a4 <vPortEnableVFP+0x10>
 800e098:	6801      	ldr	r1, [r0, #0]
 800e09a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e09e:	6001      	str	r1, [r0, #0]
 800e0a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0a2:	bf00      	nop
 800e0a4:	e000ed88 	.word	0xe000ed88

0800e0a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0ae:	f3ef 8305 	mrs	r3, IPSR
 800e0b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2b0f      	cmp	r3, #15
 800e0b8:	d914      	bls.n	800e0e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0ba:	4a17      	ldr	r2, [pc, #92]	; (800e118 <vPortValidateInterruptPriority+0x70>)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	4413      	add	r3, r2
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0c4:	4b15      	ldr	r3, [pc, #84]	; (800e11c <vPortValidateInterruptPriority+0x74>)
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	7afa      	ldrb	r2, [r7, #11]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d20a      	bcs.n	800e0e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d2:	f383 8811 	msr	BASEPRI, r3
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	607b      	str	r3, [r7, #4]
}
 800e0e0:	bf00      	nop
 800e0e2:	e7fe      	b.n	800e0e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0e4:	4b0e      	ldr	r3, [pc, #56]	; (800e120 <vPortValidateInterruptPriority+0x78>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0ec:	4b0d      	ldr	r3, [pc, #52]	; (800e124 <vPortValidateInterruptPriority+0x7c>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d90a      	bls.n	800e10a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f8:	f383 8811 	msr	BASEPRI, r3
 800e0fc:	f3bf 8f6f 	isb	sy
 800e100:	f3bf 8f4f 	dsb	sy
 800e104:	603b      	str	r3, [r7, #0]
}
 800e106:	bf00      	nop
 800e108:	e7fe      	b.n	800e108 <vPortValidateInterruptPriority+0x60>
	}
 800e10a:	bf00      	nop
 800e10c:	3714      	adds	r7, #20
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	e000e3f0 	.word	0xe000e3f0
 800e11c:	20005d60 	.word	0x20005d60
 800e120:	e000ed0c 	.word	0xe000ed0c
 800e124:	20005d64 	.word	0x20005d64

0800e128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	; 0x28
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e130:	2300      	movs	r3, #0
 800e132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e134:	f7fe fc68 	bl	800ca08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e138:	4b5b      	ldr	r3, [pc, #364]	; (800e2a8 <pvPortMalloc+0x180>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e140:	f000 f920 	bl	800e384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e144:	4b59      	ldr	r3, [pc, #356]	; (800e2ac <pvPortMalloc+0x184>)
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4013      	ands	r3, r2
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f040 8093 	bne.w	800e278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d01d      	beq.n	800e194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e158:	2208      	movs	r2, #8
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4413      	add	r3, r2
 800e15e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f003 0307 	and.w	r3, r3, #7
 800e166:	2b00      	cmp	r3, #0
 800e168:	d014      	beq.n	800e194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f023 0307 	bic.w	r3, r3, #7
 800e170:	3308      	adds	r3, #8
 800e172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f003 0307 	and.w	r3, r3, #7
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00a      	beq.n	800e194 <pvPortMalloc+0x6c>
	__asm volatile
 800e17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	617b      	str	r3, [r7, #20]
}
 800e190:	bf00      	nop
 800e192:	e7fe      	b.n	800e192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d06e      	beq.n	800e278 <pvPortMalloc+0x150>
 800e19a:	4b45      	ldr	r3, [pc, #276]	; (800e2b0 <pvPortMalloc+0x188>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d869      	bhi.n	800e278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1a4:	4b43      	ldr	r3, [pc, #268]	; (800e2b4 <pvPortMalloc+0x18c>)
 800e1a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1a8:	4b42      	ldr	r3, [pc, #264]	; (800e2b4 <pvPortMalloc+0x18c>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1ae:	e004      	b.n	800e1ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d903      	bls.n	800e1cc <pvPortMalloc+0xa4>
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1f1      	bne.n	800e1b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e1cc:	4b36      	ldr	r3, [pc, #216]	; (800e2a8 <pvPortMalloc+0x180>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d050      	beq.n	800e278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e1d6:	6a3b      	ldr	r3, [r7, #32]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2208      	movs	r2, #8
 800e1dc:	4413      	add	r3, r2
 800e1de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	6a3b      	ldr	r3, [r7, #32]
 800e1e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ea:	685a      	ldr	r2, [r3, #4]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	1ad2      	subs	r2, r2, r3
 800e1f0:	2308      	movs	r3, #8
 800e1f2:	005b      	lsls	r3, r3, #1
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d91f      	bls.n	800e238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	f003 0307 	and.w	r3, r3, #7
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00a      	beq.n	800e220 <pvPortMalloc+0xf8>
	__asm volatile
 800e20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	613b      	str	r3, [r7, #16]
}
 800e21c:	bf00      	nop
 800e21e:	e7fe      	b.n	800e21e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e222:	685a      	ldr	r2, [r3, #4]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	1ad2      	subs	r2, r2, r3
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e232:	69b8      	ldr	r0, [r7, #24]
 800e234:	f000 f908 	bl	800e448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e238:	4b1d      	ldr	r3, [pc, #116]	; (800e2b0 <pvPortMalloc+0x188>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	4a1b      	ldr	r2, [pc, #108]	; (800e2b0 <pvPortMalloc+0x188>)
 800e244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e246:	4b1a      	ldr	r3, [pc, #104]	; (800e2b0 <pvPortMalloc+0x188>)
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	4b1b      	ldr	r3, [pc, #108]	; (800e2b8 <pvPortMalloc+0x190>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d203      	bcs.n	800e25a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e252:	4b17      	ldr	r3, [pc, #92]	; (800e2b0 <pvPortMalloc+0x188>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a18      	ldr	r2, [pc, #96]	; (800e2b8 <pvPortMalloc+0x190>)
 800e258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	685a      	ldr	r2, [r3, #4]
 800e25e:	4b13      	ldr	r3, [pc, #76]	; (800e2ac <pvPortMalloc+0x184>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	431a      	orrs	r2, r3
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26a:	2200      	movs	r2, #0
 800e26c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e26e:	4b13      	ldr	r3, [pc, #76]	; (800e2bc <pvPortMalloc+0x194>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	3301      	adds	r3, #1
 800e274:	4a11      	ldr	r2, [pc, #68]	; (800e2bc <pvPortMalloc+0x194>)
 800e276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e278:	f7fe fbd4 	bl	800ca24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	f003 0307 	and.w	r3, r3, #7
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00a      	beq.n	800e29c <pvPortMalloc+0x174>
	__asm volatile
 800e286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28a:	f383 8811 	msr	BASEPRI, r3
 800e28e:	f3bf 8f6f 	isb	sy
 800e292:	f3bf 8f4f 	dsb	sy
 800e296:	60fb      	str	r3, [r7, #12]
}
 800e298:	bf00      	nop
 800e29a:	e7fe      	b.n	800e29a <pvPortMalloc+0x172>
	return pvReturn;
 800e29c:	69fb      	ldr	r3, [r7, #28]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3728      	adds	r7, #40	; 0x28
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	20009d70 	.word	0x20009d70
 800e2ac:	20009d84 	.word	0x20009d84
 800e2b0:	20009d74 	.word	0x20009d74
 800e2b4:	20009d68 	.word	0x20009d68
 800e2b8:	20009d78 	.word	0x20009d78
 800e2bc:	20009d7c 	.word	0x20009d7c

0800e2c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d04d      	beq.n	800e36e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e2d2:	2308      	movs	r3, #8
 800e2d4:	425b      	negs	r3, r3
 800e2d6:	697a      	ldr	r2, [r7, #20]
 800e2d8:	4413      	add	r3, r2
 800e2da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	685a      	ldr	r2, [r3, #4]
 800e2e4:	4b24      	ldr	r3, [pc, #144]	; (800e378 <vPortFree+0xb8>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4013      	ands	r3, r2
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10a      	bne.n	800e304 <vPortFree+0x44>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	60fb      	str	r3, [r7, #12]
}
 800e300:	bf00      	nop
 800e302:	e7fe      	b.n	800e302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00a      	beq.n	800e322 <vPortFree+0x62>
	__asm volatile
 800e30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e310:	f383 8811 	msr	BASEPRI, r3
 800e314:	f3bf 8f6f 	isb	sy
 800e318:	f3bf 8f4f 	dsb	sy
 800e31c:	60bb      	str	r3, [r7, #8]
}
 800e31e:	bf00      	nop
 800e320:	e7fe      	b.n	800e320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	685a      	ldr	r2, [r3, #4]
 800e326:	4b14      	ldr	r3, [pc, #80]	; (800e378 <vPortFree+0xb8>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4013      	ands	r3, r2
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d01e      	beq.n	800e36e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d11a      	bne.n	800e36e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	685a      	ldr	r2, [r3, #4]
 800e33c:	4b0e      	ldr	r3, [pc, #56]	; (800e378 <vPortFree+0xb8>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	43db      	mvns	r3, r3
 800e342:	401a      	ands	r2, r3
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e348:	f7fe fb5e 	bl	800ca08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	685a      	ldr	r2, [r3, #4]
 800e350:	4b0a      	ldr	r3, [pc, #40]	; (800e37c <vPortFree+0xbc>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4413      	add	r3, r2
 800e356:	4a09      	ldr	r2, [pc, #36]	; (800e37c <vPortFree+0xbc>)
 800e358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e35a:	6938      	ldr	r0, [r7, #16]
 800e35c:	f000 f874 	bl	800e448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e360:	4b07      	ldr	r3, [pc, #28]	; (800e380 <vPortFree+0xc0>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	3301      	adds	r3, #1
 800e366:	4a06      	ldr	r2, [pc, #24]	; (800e380 <vPortFree+0xc0>)
 800e368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e36a:	f7fe fb5b 	bl	800ca24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e36e:	bf00      	nop
 800e370:	3718      	adds	r7, #24
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	20009d84 	.word	0x20009d84
 800e37c:	20009d74 	.word	0x20009d74
 800e380:	20009d80 	.word	0x20009d80

0800e384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e38a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e38e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e390:	4b27      	ldr	r3, [pc, #156]	; (800e430 <prvHeapInit+0xac>)
 800e392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f003 0307 	and.w	r3, r3, #7
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00c      	beq.n	800e3b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	3307      	adds	r3, #7
 800e3a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f023 0307 	bic.w	r3, r3, #7
 800e3aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	4a1f      	ldr	r2, [pc, #124]	; (800e430 <prvHeapInit+0xac>)
 800e3b4:	4413      	add	r3, r2
 800e3b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3bc:	4a1d      	ldr	r2, [pc, #116]	; (800e434 <prvHeapInit+0xb0>)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3c2:	4b1c      	ldr	r3, [pc, #112]	; (800e434 <prvHeapInit+0xb0>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e3d0:	2208      	movs	r2, #8
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	1a9b      	subs	r3, r3, r2
 800e3d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f023 0307 	bic.w	r3, r3, #7
 800e3de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	4a15      	ldr	r2, [pc, #84]	; (800e438 <prvHeapInit+0xb4>)
 800e3e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3e6:	4b14      	ldr	r3, [pc, #80]	; (800e438 <prvHeapInit+0xb4>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3ee:	4b12      	ldr	r3, [pc, #72]	; (800e438 <prvHeapInit+0xb4>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	1ad2      	subs	r2, r2, r3
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e404:	4b0c      	ldr	r3, [pc, #48]	; (800e438 <prvHeapInit+0xb4>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	4a0a      	ldr	r2, [pc, #40]	; (800e43c <prvHeapInit+0xb8>)
 800e412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	4a09      	ldr	r2, [pc, #36]	; (800e440 <prvHeapInit+0xbc>)
 800e41a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e41c:	4b09      	ldr	r3, [pc, #36]	; (800e444 <prvHeapInit+0xc0>)
 800e41e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e422:	601a      	str	r2, [r3, #0]
}
 800e424:	bf00      	nop
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr
 800e430:	20005d68 	.word	0x20005d68
 800e434:	20009d68 	.word	0x20009d68
 800e438:	20009d70 	.word	0x20009d70
 800e43c:	20009d78 	.word	0x20009d78
 800e440:	20009d74 	.word	0x20009d74
 800e444:	20009d84 	.word	0x20009d84

0800e448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e450:	4b28      	ldr	r3, [pc, #160]	; (800e4f4 <prvInsertBlockIntoFreeList+0xac>)
 800e452:	60fb      	str	r3, [r7, #12]
 800e454:	e002      	b.n	800e45c <prvInsertBlockIntoFreeList+0x14>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	60fb      	str	r3, [r7, #12]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	429a      	cmp	r2, r3
 800e464:	d8f7      	bhi.n	800e456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	4413      	add	r3, r2
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	429a      	cmp	r2, r3
 800e476:	d108      	bne.n	800e48a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	685a      	ldr	r2, [r3, #4]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	441a      	add	r2, r3
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	441a      	add	r2, r3
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d118      	bne.n	800e4d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	4b15      	ldr	r3, [pc, #84]	; (800e4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d00d      	beq.n	800e4c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	441a      	add	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	601a      	str	r2, [r3, #0]
 800e4c4:	e008      	b.n	800e4d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e4c6:	4b0c      	ldr	r3, [pc, #48]	; (800e4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	601a      	str	r2, [r3, #0]
 800e4ce:	e003      	b.n	800e4d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d002      	beq.n	800e4e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4e6:	bf00      	nop
 800e4e8:	3714      	adds	r7, #20
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	20009d68 	.word	0x20009d68
 800e4f8:	20009d70 	.word	0x20009d70

0800e4fc <rcl_get_zero_initialized_init_options>:
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	4770      	bx	lr

0800e500 <rcl_init_options_init>:
 800e500:	b084      	sub	sp, #16
 800e502:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e504:	b091      	sub	sp, #68	; 0x44
 800e506:	af17      	add	r7, sp, #92	; 0x5c
 800e508:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d044      	beq.n	800e59a <rcl_init_options_init+0x9a>
 800e510:	6803      	ldr	r3, [r0, #0]
 800e512:	4606      	mov	r6, r0
 800e514:	b133      	cbz	r3, 800e524 <rcl_init_options_init+0x24>
 800e516:	2464      	movs	r4, #100	; 0x64
 800e518:	4620      	mov	r0, r4
 800e51a:	b011      	add	sp, #68	; 0x44
 800e51c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e520:	b004      	add	sp, #16
 800e522:	4770      	bx	lr
 800e524:	4638      	mov	r0, r7
 800e526:	f000 ff01 	bl	800f32c <rcutils_allocator_is_valid>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d035      	beq.n	800e59a <rcl_init_options_init+0x9a>
 800e52e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e530:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e532:	2050      	movs	r0, #80	; 0x50
 800e534:	4798      	blx	r3
 800e536:	4604      	mov	r4, r0
 800e538:	6030      	str	r0, [r6, #0]
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d02f      	beq.n	800e59e <rcl_init_options_init+0x9e>
 800e53e:	46bc      	mov	ip, r7
 800e540:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e544:	4625      	mov	r5, r4
 800e546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e548:	f8dc 3000 	ldr.w	r3, [ip]
 800e54c:	602b      	str	r3, [r5, #0]
 800e54e:	a802      	add	r0, sp, #8
 800e550:	ad02      	add	r5, sp, #8
 800e552:	f001 f8a7 	bl	800f6a4 <rmw_get_zero_initialized_init_options>
 800e556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e558:	3418      	adds	r4, #24
 800e55a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e55c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e55e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e564:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e568:	6833      	ldr	r3, [r6, #0]
 800e56a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e56e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800e572:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e576:	f103 0018 	add.w	r0, r3, #24
 800e57a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800e57e:	f001 f943 	bl	800f808 <rmw_init_options_init>
 800e582:	4604      	mov	r4, r0
 800e584:	2800      	cmp	r0, #0
 800e586:	d0c7      	beq.n	800e518 <rcl_init_options_init+0x18>
 800e588:	6830      	ldr	r0, [r6, #0]
 800e58a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e58c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e58e:	4798      	blx	r3
 800e590:	4620      	mov	r0, r4
 800e592:	f006 f99b 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 800e596:	4604      	mov	r4, r0
 800e598:	e7be      	b.n	800e518 <rcl_init_options_init+0x18>
 800e59a:	240b      	movs	r4, #11
 800e59c:	e7bc      	b.n	800e518 <rcl_init_options_init+0x18>
 800e59e:	240a      	movs	r4, #10
 800e5a0:	e7ba      	b.n	800e518 <rcl_init_options_init+0x18>
 800e5a2:	bf00      	nop

0800e5a4 <rcl_init_options_fini>:
 800e5a4:	b570      	push	{r4, r5, r6, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	b1c0      	cbz	r0, 800e5dc <rcl_init_options_fini+0x38>
 800e5aa:	6804      	ldr	r4, [r0, #0]
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	b1ac      	cbz	r4, 800e5dc <rcl_init_options_fini+0x38>
 800e5b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5b2:	ad01      	add	r5, sp, #4
 800e5b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5b6:	6823      	ldr	r3, [r4, #0]
 800e5b8:	602b      	str	r3, [r5, #0]
 800e5ba:	a801      	add	r0, sp, #4
 800e5bc:	f000 feb6 	bl	800f32c <rcutils_allocator_is_valid>
 800e5c0:	b160      	cbz	r0, 800e5dc <rcl_init_options_fini+0x38>
 800e5c2:	6830      	ldr	r0, [r6, #0]
 800e5c4:	3018      	adds	r0, #24
 800e5c6:	f001 f9b9 	bl	800f93c <rmw_init_options_fini>
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	b950      	cbnz	r0, 800e5e4 <rcl_init_options_fini+0x40>
 800e5ce:	6830      	ldr	r0, [r6, #0]
 800e5d0:	9b02      	ldr	r3, [sp, #8]
 800e5d2:	9905      	ldr	r1, [sp, #20]
 800e5d4:	4798      	blx	r3
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	b006      	add	sp, #24
 800e5da:	bd70      	pop	{r4, r5, r6, pc}
 800e5dc:	240b      	movs	r4, #11
 800e5de:	4620      	mov	r0, r4
 800e5e0:	b006      	add	sp, #24
 800e5e2:	bd70      	pop	{r4, r5, r6, pc}
 800e5e4:	f006 f972 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	e7f8      	b.n	800e5de <rcl_init_options_fini+0x3a>

0800e5ec <rcl_init_options_copy>:
 800e5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f0:	b096      	sub	sp, #88	; 0x58
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	d063      	beq.n	800e6be <rcl_init_options_copy+0xd2>
 800e5f6:	6806      	ldr	r6, [r0, #0]
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	2e00      	cmp	r6, #0
 800e5fc:	d05f      	beq.n	800e6be <rcl_init_options_copy+0xd2>
 800e5fe:	460c      	mov	r4, r1
 800e600:	2900      	cmp	r1, #0
 800e602:	d05c      	beq.n	800e6be <rcl_init_options_copy+0xd2>
 800e604:	680b      	ldr	r3, [r1, #0]
 800e606:	b123      	cbz	r3, 800e612 <rcl_init_options_copy+0x26>
 800e608:	2664      	movs	r6, #100	; 0x64
 800e60a:	4630      	mov	r0, r6
 800e60c:	b016      	add	sp, #88	; 0x58
 800e60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e612:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e614:	af11      	add	r7, sp, #68	; 0x44
 800e616:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e618:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 800e61c:	6833      	ldr	r3, [r6, #0]
 800e61e:	603b      	str	r3, [r7, #0]
 800e620:	4640      	mov	r0, r8
 800e622:	f000 fe83 	bl	800f32c <rcutils_allocator_is_valid>
 800e626:	2800      	cmp	r0, #0
 800e628:	d049      	beq.n	800e6be <rcl_init_options_copy+0xd2>
 800e62a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e62c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e62e:	2050      	movs	r0, #80	; 0x50
 800e630:	4798      	blx	r3
 800e632:	4606      	mov	r6, r0
 800e634:	6020      	str	r0, [r4, #0]
 800e636:	2800      	cmp	r0, #0
 800e638:	d077      	beq.n	800e72a <rcl_init_options_copy+0x13e>
 800e63a:	46c4      	mov	ip, r8
 800e63c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e640:	4637      	mov	r7, r6
 800e642:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e644:	f8dc 3000 	ldr.w	r3, [ip]
 800e648:	603b      	str	r3, [r7, #0]
 800e64a:	a802      	add	r0, sp, #8
 800e64c:	af02      	add	r7, sp, #8
 800e64e:	f001 f829 	bl	800f6a4 <rmw_get_zero_initialized_init_options>
 800e652:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e654:	3618      	adds	r6, #24
 800e656:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e658:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e65a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e65c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e65e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e660:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e664:	ab16      	add	r3, sp, #88	; 0x58
 800e666:	e886 0003 	stmia.w	r6, {r0, r1}
 800e66a:	e913 0003 	ldmdb	r3, {r0, r1}
 800e66e:	6823      	ldr	r3, [r4, #0]
 800e670:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e674:	f103 0018 	add.w	r0, r3, #24
 800e678:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800e67c:	f001 f8c4 	bl	800f808 <rmw_init_options_init>
 800e680:	4606      	mov	r6, r0
 800e682:	bb08      	cbnz	r0, 800e6c8 <rcl_init_options_copy+0xdc>
 800e684:	682f      	ldr	r7, [r5, #0]
 800e686:	f8d4 c000 	ldr.w	ip, [r4]
 800e68a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e68c:	4666      	mov	r6, ip
 800e68e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	6033      	str	r3, [r6, #0]
 800e694:	f10c 0018 	add.w	r0, ip, #24
 800e698:	f001 f950 	bl	800f93c <rmw_init_options_fini>
 800e69c:	4607      	mov	r7, r0
 800e69e:	b1f0      	cbz	r0, 800e6de <rcl_init_options_copy+0xf2>
 800e6a0:	f000 fe52 	bl	800f348 <rcutils_get_error_string>
 800e6a4:	f000 fe66 	bl	800f374 <rcutils_reset_error>
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f7ff ff7b 	bl	800e5a4 <rcl_init_options_fini>
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d1aa      	bne.n	800e60a <rcl_init_options_copy+0x1e>
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	f006 f909 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 800e6ba:	4606      	mov	r6, r0
 800e6bc:	e7a5      	b.n	800e60a <rcl_init_options_copy+0x1e>
 800e6be:	260b      	movs	r6, #11
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	b016      	add	sp, #88	; 0x58
 800e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e6ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e6cc:	6820      	ldr	r0, [r4, #0]
 800e6ce:	4798      	blx	r3
 800e6d0:	4630      	mov	r0, r6
 800e6d2:	f006 f8fb 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d0d3      	beq.n	800e684 <rcl_init_options_copy+0x98>
 800e6dc:	e795      	b.n	800e60a <rcl_init_options_copy+0x1e>
 800e6de:	a802      	add	r0, sp, #8
 800e6e0:	ae02      	add	r6, sp, #8
 800e6e2:	6827      	ldr	r7, [r4, #0]
 800e6e4:	f000 ffde 	bl	800f6a4 <rmw_get_zero_initialized_init_options>
 800e6e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e6ea:	3718      	adds	r7, #24
 800e6ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e6ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e6f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e6f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e6f4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e6f6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e6fa:	682a      	ldr	r2, [r5, #0]
 800e6fc:	6823      	ldr	r3, [r4, #0]
 800e6fe:	e887 0003 	stmia.w	r7, {r0, r1}
 800e702:	f102 0018 	add.w	r0, r2, #24
 800e706:	f103 0118 	add.w	r1, r3, #24
 800e70a:	f001 f8d5 	bl	800f8b8 <rmw_init_options_copy>
 800e70e:	4606      	mov	r6, r0
 800e710:	2800      	cmp	r0, #0
 800e712:	f43f af7a 	beq.w	800e60a <rcl_init_options_copy+0x1e>
 800e716:	f000 fe17 	bl	800f348 <rcutils_get_error_string>
 800e71a:	f000 fe2b 	bl	800f374 <rcutils_reset_error>
 800e71e:	4620      	mov	r0, r4
 800e720:	f7ff ff40 	bl	800e5a4 <rcl_init_options_fini>
 800e724:	b118      	cbz	r0, 800e72e <rcl_init_options_copy+0x142>
 800e726:	4606      	mov	r6, r0
 800e728:	e76f      	b.n	800e60a <rcl_init_options_copy+0x1e>
 800e72a:	260a      	movs	r6, #10
 800e72c:	e76d      	b.n	800e60a <rcl_init_options_copy+0x1e>
 800e72e:	4630      	mov	r0, r6
 800e730:	f006 f8cc 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 800e734:	4606      	mov	r6, r0
 800e736:	e768      	b.n	800e60a <rcl_init_options_copy+0x1e>

0800e738 <rcl_init_options_set_domain_id>:
 800e738:	b120      	cbz	r0, 800e744 <rcl_init_options_set_domain_id+0xc>
 800e73a:	6803      	ldr	r3, [r0, #0]
 800e73c:	b113      	cbz	r3, 800e744 <rcl_init_options_set_domain_id+0xc>
 800e73e:	6259      	str	r1, [r3, #36]	; 0x24
 800e740:	2000      	movs	r0, #0
 800e742:	4770      	bx	lr
 800e744:	200b      	movs	r0, #11
 800e746:	4770      	bx	lr

0800e748 <rcl_node_get_default_options>:
 800e748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74a:	b087      	sub	sp, #28
 800e74c:	4607      	mov	r7, r0
 800e74e:	466d      	mov	r5, sp
 800e750:	4668      	mov	r0, sp
 800e752:	f000 fddd 	bl	800f310 <rcutils_get_default_allocator>
 800e756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e758:	4c08      	ldr	r4, [pc, #32]	; (800e77c <rcl_node_get_default_options+0x34>)
 800e75a:	f8d5 c000 	ldr.w	ip, [r5]
 800e75e:	1d26      	adds	r6, r4, #4
 800e760:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e764:	463d      	mov	r5, r7
 800e766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e768:	f8c6 c000 	str.w	ip, [r6]
 800e76c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e770:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e774:	4638      	mov	r0, r7
 800e776:	b007      	add	sp, #28
 800e778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e77a:	bf00      	nop
 800e77c:	20000034 	.word	0x20000034

0800e780 <rcl_node_options_copy>:
 800e780:	b1c8      	cbz	r0, 800e7b6 <rcl_node_options_copy+0x36>
 800e782:	b4f0      	push	{r4, r5, r6, r7}
 800e784:	460f      	mov	r7, r1
 800e786:	b199      	cbz	r1, 800e7b0 <rcl_node_options_copy+0x30>
 800e788:	4288      	cmp	r0, r1
 800e78a:	4606      	mov	r6, r0
 800e78c:	d010      	beq.n	800e7b0 <rcl_node_options_copy+0x30>
 800e78e:	4605      	mov	r5, r0
 800e790:	460c      	mov	r4, r1
 800e792:	f855 3b04 	ldr.w	r3, [r5], #4
 800e796:	f844 3b04 	str.w	r3, [r4], #4
 800e79a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e79c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e79e:	7e32      	ldrb	r2, [r6, #24]
 800e7a0:	6829      	ldr	r1, [r5, #0]
 800e7a2:	7e73      	ldrb	r3, [r6, #25]
 800e7a4:	6021      	str	r1, [r4, #0]
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	763a      	strb	r2, [r7, #24]
 800e7aa:	767b      	strb	r3, [r7, #25]
 800e7ac:	bcf0      	pop	{r4, r5, r6, r7}
 800e7ae:	4770      	bx	lr
 800e7b0:	200b      	movs	r0, #11
 800e7b2:	bcf0      	pop	{r4, r5, r6, r7}
 800e7b4:	4770      	bx	lr
 800e7b6:	200b      	movs	r0, #11
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop

0800e7bc <rcl_get_zero_initialized_publisher>:
 800e7bc:	4b01      	ldr	r3, [pc, #4]	; (800e7c4 <rcl_get_zero_initialized_publisher+0x8>)
 800e7be:	6818      	ldr	r0, [r3, #0]
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	0801e9f0 	.word	0x0801e9f0

0800e7c8 <rcl_publisher_init>:
 800e7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7cc:	b091      	sub	sp, #68	; 0x44
 800e7ce:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e7d0:	b3d7      	cbz	r7, 800e848 <rcl_publisher_init+0x80>
 800e7d2:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	4648      	mov	r0, r9
 800e7da:	4688      	mov	r8, r1
 800e7dc:	4616      	mov	r6, r2
 800e7de:	461d      	mov	r5, r3
 800e7e0:	f000 fda4 	bl	800f32c <rcutils_allocator_is_valid>
 800e7e4:	b380      	cbz	r0, 800e848 <rcl_publisher_init+0x80>
 800e7e6:	b37c      	cbz	r4, 800e848 <rcl_publisher_init+0x80>
 800e7e8:	f8d4 a000 	ldr.w	sl, [r4]
 800e7ec:	f1ba 0f00 	cmp.w	sl, #0
 800e7f0:	d004      	beq.n	800e7fc <rcl_publisher_init+0x34>
 800e7f2:	2564      	movs	r5, #100	; 0x64
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	b011      	add	sp, #68	; 0x44
 800e7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fc:	4640      	mov	r0, r8
 800e7fe:	f006 fcff 	bl	8015200 <rcl_node_is_valid>
 800e802:	b330      	cbz	r0, 800e852 <rcl_publisher_init+0x8a>
 800e804:	b306      	cbz	r6, 800e848 <rcl_publisher_init+0x80>
 800e806:	b1fd      	cbz	r5, 800e848 <rcl_publisher_init+0x80>
 800e808:	46ce      	mov	lr, r9
 800e80a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e80e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800e812:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e816:	f8de 3000 	ldr.w	r3, [lr]
 800e81a:	f8cc 3000 	str.w	r3, [ip]
 800e81e:	f000 fdc1 	bl	800f3a4 <rcutils_get_zero_initialized_string_map>
 800e822:	ab10      	add	r3, sp, #64	; 0x40
 800e824:	4684      	mov	ip, r0
 800e826:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e82a:	f8cd c020 	str.w	ip, [sp, #32]
 800e82e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e832:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800e836:	4651      	mov	r1, sl
 800e838:	a808      	add	r0, sp, #32
 800e83a:	f000 fe2d 	bl	800f498 <rcutils_string_map_init>
 800e83e:	b150      	cbz	r0, 800e856 <rcl_publisher_init+0x8e>
 800e840:	280a      	cmp	r0, #10
 800e842:	d013      	beq.n	800e86c <rcl_publisher_init+0xa4>
 800e844:	2501      	movs	r5, #1
 800e846:	e7d5      	b.n	800e7f4 <rcl_publisher_init+0x2c>
 800e848:	250b      	movs	r5, #11
 800e84a:	4628      	mov	r0, r5
 800e84c:	b011      	add	sp, #68	; 0x44
 800e84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e852:	25c8      	movs	r5, #200	; 0xc8
 800e854:	e7ce      	b.n	800e7f4 <rcl_publisher_init+0x2c>
 800e856:	a808      	add	r0, sp, #32
 800e858:	f006 fa26 	bl	8014ca8 <rcl_get_default_topic_name_substitutions>
 800e85c:	4682      	mov	sl, r0
 800e85e:	b138      	cbz	r0, 800e870 <rcl_publisher_init+0xa8>
 800e860:	a808      	add	r0, sp, #32
 800e862:	f000 fe59 	bl	800f518 <rcutils_string_map_fini>
 800e866:	f1ba 0f0a 	cmp.w	sl, #10
 800e86a:	d1eb      	bne.n	800e844 <rcl_publisher_init+0x7c>
 800e86c:	250a      	movs	r5, #10
 800e86e:	e7c1      	b.n	800e7f4 <rcl_publisher_init+0x2c>
 800e870:	4640      	mov	r0, r8
 800e872:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e876:	f006 fccd 	bl	8015214 <rcl_node_get_name>
 800e87a:	4682      	mov	sl, r0
 800e87c:	4640      	mov	r0, r8
 800e87e:	f006 fcd1 	bl	8015224 <rcl_node_get_namespace>
 800e882:	4686      	mov	lr, r0
 800e884:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e888:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800e88c:	46ec      	mov	ip, sp
 800e88e:	f8cd b014 	str.w	fp, [sp, #20]
 800e892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e896:	f8d9 3000 	ldr.w	r3, [r9]
 800e89a:	f8cc 3000 	str.w	r3, [ip]
 800e89e:	4628      	mov	r0, r5
 800e8a0:	4651      	mov	r1, sl
 800e8a2:	4672      	mov	r2, lr
 800e8a4:	ab08      	add	r3, sp, #32
 800e8a6:	f006 f899 	bl	80149dc <rcl_expand_topic_name>
 800e8aa:	4605      	mov	r5, r0
 800e8ac:	a808      	add	r0, sp, #32
 800e8ae:	f000 fe33 	bl	800f518 <rcutils_string_map_fini>
 800e8b2:	b920      	cbnz	r0, 800e8be <rcl_publisher_init+0xf6>
 800e8b4:	b15d      	cbz	r5, 800e8ce <rcl_publisher_init+0x106>
 800e8b6:	2d67      	cmp	r5, #103	; 0x67
 800e8b8:	d002      	beq.n	800e8c0 <rcl_publisher_init+0xf8>
 800e8ba:	2d69      	cmp	r5, #105	; 0x69
 800e8bc:	d05f      	beq.n	800e97e <rcl_publisher_init+0x1b6>
 800e8be:	2501      	movs	r5, #1
 800e8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d096      	beq.n	800e7f4 <rcl_publisher_init+0x2c>
 800e8c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e8ca:	4798      	blx	r3
 800e8cc:	e792      	b.n	800e7f4 <rcl_publisher_init+0x2c>
 800e8ce:	4640      	mov	r0, r8
 800e8d0:	f006 fcb0 	bl	8015234 <rcl_node_get_options>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d0f2      	beq.n	800e8be <rcl_publisher_init+0xf6>
 800e8d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8da:	f7f1 fc8b 	bl	80001f4 <strlen>
 800e8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	4798      	blx	r3
 800e8e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8e8:	9107      	str	r1, [sp, #28]
 800e8ea:	4681      	mov	r9, r0
 800e8ec:	4608      	mov	r0, r1
 800e8ee:	f7f1 fc81 	bl	80001f4 <strlen>
 800e8f2:	9907      	ldr	r1, [sp, #28]
 800e8f4:	1c42      	adds	r2, r0, #1
 800e8f6:	4648      	mov	r0, r9
 800e8f8:	f00b f8dc 	bl	8019ab4 <memcpy>
 800e8fc:	462a      	mov	r2, r5
 800e8fe:	4648      	mov	r0, r9
 800e900:	a90a      	add	r1, sp, #40	; 0x28
 800e902:	f000 fee5 	bl	800f6d0 <rmw_validate_full_topic_name>
 800e906:	2800      	cmp	r0, #0
 800e908:	d137      	bne.n	800e97a <rcl_publisher_init+0x1b2>
 800e90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d138      	bne.n	800e982 <rcl_publisher_init+0x1ba>
 800e910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e912:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e914:	20c0      	movs	r0, #192	; 0xc0
 800e916:	4798      	blx	r3
 800e918:	6020      	str	r0, [r4, #0]
 800e91a:	b3a0      	cbz	r0, 800e986 <rcl_publisher_init+0x1be>
 800e91c:	4640      	mov	r0, r8
 800e91e:	f006 fc91 	bl	8015244 <rcl_node_get_rmw_handle>
 800e922:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	4631      	mov	r1, r6
 800e92a:	463b      	mov	r3, r7
 800e92c:	464a      	mov	r2, r9
 800e92e:	6825      	ldr	r5, [r4, #0]
 800e930:	f001 fb24 	bl	800ff7c <rmw_create_publisher>
 800e934:	6821      	ldr	r1, [r4, #0]
 800e936:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800e93a:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800e93e:	b388      	cbz	r0, 800e9a4 <rcl_publisher_init+0x1dc>
 800e940:	3168      	adds	r1, #104	; 0x68
 800e942:	f001 fbf9 	bl	8010138 <rmw_publisher_get_actual_qos>
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	4605      	mov	r5, r0
 800e94a:	b9f0      	cbnz	r0, 800e98a <rcl_publisher_init+0x1c2>
 800e94c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800e950:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800e954:	4618      	mov	r0, r3
 800e956:	2268      	movs	r2, #104	; 0x68
 800e958:	4639      	mov	r1, r7
 800e95a:	f00b f8ab 	bl	8019ab4 <memcpy>
 800e95e:	f8d8 2000 	ldr.w	r2, [r8]
 800e962:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800e966:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e968:	b110      	cbz	r0, 800e970 <rcl_publisher_init+0x1a8>
 800e96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e96c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e96e:	4798      	blx	r3
 800e970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e972:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e974:	4648      	mov	r0, r9
 800e976:	4798      	blx	r3
 800e978:	e73c      	b.n	800e7f4 <rcl_publisher_init+0x2c>
 800e97a:	2501      	movs	r5, #1
 800e97c:	e7f3      	b.n	800e966 <rcl_publisher_init+0x19e>
 800e97e:	2567      	movs	r5, #103	; 0x67
 800e980:	e79e      	b.n	800e8c0 <rcl_publisher_init+0xf8>
 800e982:	2567      	movs	r5, #103	; 0x67
 800e984:	e7ef      	b.n	800e966 <rcl_publisher_init+0x19e>
 800e986:	250a      	movs	r5, #10
 800e988:	e7ed      	b.n	800e966 <rcl_publisher_init+0x19e>
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d0f5      	beq.n	800e97a <rcl_publisher_init+0x1b2>
 800e98e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e992:	b13b      	cbz	r3, 800e9a4 <rcl_publisher_init+0x1dc>
 800e994:	4640      	mov	r0, r8
 800e996:	f006 fc55 	bl	8015244 <rcl_node_get_rmw_handle>
 800e99a:	6823      	ldr	r3, [r4, #0]
 800e99c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800e9a0:	f001 fbcc 	bl	801013c <rmw_destroy_publisher>
 800e9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9a8:	6820      	ldr	r0, [r4, #0]
 800e9aa:	4798      	blx	r3
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	6023      	str	r3, [r4, #0]
 800e9b0:	2501      	movs	r5, #1
 800e9b2:	e7d8      	b.n	800e966 <rcl_publisher_init+0x19e>

0800e9b4 <rcl_publisher_get_default_options>:
 800e9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9b6:	4f0e      	ldr	r7, [pc, #56]	; (800e9f0 <rcl_publisher_get_default_options+0x3c>)
 800e9b8:	490e      	ldr	r1, [pc, #56]	; (800e9f4 <rcl_publisher_get_default_options+0x40>)
 800e9ba:	b087      	sub	sp, #28
 800e9bc:	4606      	mov	r6, r0
 800e9be:	2250      	movs	r2, #80	; 0x50
 800e9c0:	4638      	mov	r0, r7
 800e9c2:	f00b f877 	bl	8019ab4 <memcpy>
 800e9c6:	466c      	mov	r4, sp
 800e9c8:	4668      	mov	r0, sp
 800e9ca:	f000 fca1 	bl	800f310 <rcutils_get_default_allocator>
 800e9ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9d0:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800e9d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	602b      	str	r3, [r5, #0]
 800e9da:	f000 fe73 	bl	800f6c4 <rmw_get_default_publisher_options>
 800e9de:	4639      	mov	r1, r7
 800e9e0:	6678      	str	r0, [r7, #100]	; 0x64
 800e9e2:	2268      	movs	r2, #104	; 0x68
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	f00b f865 	bl	8019ab4 <memcpy>
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	b007      	add	sp, #28
 800e9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9f0:	20009d88 	.word	0x20009d88
 800e9f4:	0801e9f8 	.word	0x0801e9f8

0800e9f8 <rcl_publish>:
 800e9f8:	b1f8      	cbz	r0, 800ea3a <rcl_publish+0x42>
 800e9fa:	6803      	ldr	r3, [r0, #0]
 800e9fc:	b570      	push	{r4, r5, r6, lr}
 800e9fe:	4604      	mov	r4, r0
 800ea00:	b1b3      	cbz	r3, 800ea30 <rcl_publish+0x38>
 800ea02:	4616      	mov	r6, r2
 800ea04:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800ea08:	b192      	cbz	r2, 800ea30 <rcl_publish+0x38>
 800ea0a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800ea0e:	460d      	mov	r5, r1
 800ea10:	f005 ff7a 	bl	8014908 <rcl_context_is_valid>
 800ea14:	b160      	cbz	r0, 800ea30 <rcl_publish+0x38>
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800ea1c:	b140      	cbz	r0, 800ea30 <rcl_publish+0x38>
 800ea1e:	b155      	cbz	r5, 800ea36 <rcl_publish+0x3e>
 800ea20:	4632      	mov	r2, r6
 800ea22:	4629      	mov	r1, r5
 800ea24:	f001 fa4a 	bl	800febc <rmw_publish>
 800ea28:	3800      	subs	r0, #0
 800ea2a:	bf18      	it	ne
 800ea2c:	2001      	movne	r0, #1
 800ea2e:	bd70      	pop	{r4, r5, r6, pc}
 800ea30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ea34:	bd70      	pop	{r4, r5, r6, pc}
 800ea36:	200b      	movs	r0, #11
 800ea38:	bd70      	pop	{r4, r5, r6, pc}
 800ea3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ea3e:	4770      	bx	lr

0800ea40 <_rclc_check_for_new_data>:
 800ea40:	b1e0      	cbz	r0, 800ea7c <_rclc_check_for_new_data+0x3c>
 800ea42:	7803      	ldrb	r3, [r0, #0]
 800ea44:	2b08      	cmp	r3, #8
 800ea46:	d81b      	bhi.n	800ea80 <_rclc_check_for_new_data+0x40>
 800ea48:	e8df f003 	tbb	[pc, r3]
 800ea4c:	12161010 	.word	0x12161010
 800ea50:	05050512 	.word	0x05050512
 800ea54:	14          	.byte	0x14
 800ea55:	00          	.byte	0x00
 800ea56:	6a0b      	ldr	r3, [r1, #32]
 800ea58:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ea5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea5e:	3b00      	subs	r3, #0
 800ea60:	bf18      	it	ne
 800ea62:	2301      	movne	r3, #1
 800ea64:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ea68:	2000      	movs	r0, #0
 800ea6a:	4770      	bx	lr
 800ea6c:	680b      	ldr	r3, [r1, #0]
 800ea6e:	e7f3      	b.n	800ea58 <_rclc_check_for_new_data+0x18>
 800ea70:	698b      	ldr	r3, [r1, #24]
 800ea72:	e7f1      	b.n	800ea58 <_rclc_check_for_new_data+0x18>
 800ea74:	688b      	ldr	r3, [r1, #8]
 800ea76:	e7ef      	b.n	800ea58 <_rclc_check_for_new_data+0x18>
 800ea78:	690b      	ldr	r3, [r1, #16]
 800ea7a:	e7ed      	b.n	800ea58 <_rclc_check_for_new_data+0x18>
 800ea7c:	200b      	movs	r0, #11
 800ea7e:	4770      	bx	lr
 800ea80:	2300      	movs	r3, #0
 800ea82:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ea86:	2001      	movs	r0, #1
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop

0800ea8c <_rclc_take_new_data>:
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d049      	beq.n	800eb24 <_rclc_take_new_data+0x98>
 800ea90:	b510      	push	{r4, lr}
 800ea92:	7803      	ldrb	r3, [r0, #0]
 800ea94:	b08e      	sub	sp, #56	; 0x38
 800ea96:	4604      	mov	r4, r0
 800ea98:	2b08      	cmp	r3, #8
 800ea9a:	d84a      	bhi.n	800eb32 <_rclc_take_new_data+0xa6>
 800ea9c:	e8df f003 	tbb	[pc, r3]
 800eaa0:	2b121515 	.word	0x2b121515
 800eaa4:	0505052b 	.word	0x0505052b
 800eaa8:	12          	.byte	0x12
 800eaa9:	00          	.byte	0x00
 800eaaa:	6a0b      	ldr	r3, [r1, #32]
 800eaac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eaae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eab2:	b13b      	cbz	r3, 800eac4 <_rclc_take_new_data+0x38>
 800eab4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800eab8:	f104 0110 	add.w	r1, r4, #16
 800eabc:	f006 fcc2 	bl	8015444 <rcl_take_request>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d131      	bne.n	800eb28 <_rclc_take_new_data+0x9c>
 800eac4:	2000      	movs	r0, #0
 800eac6:	b00e      	add	sp, #56	; 0x38
 800eac8:	bd10      	pop	{r4, pc}
 800eaca:	680b      	ldr	r3, [r1, #0]
 800eacc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d0f6      	beq.n	800eac4 <_rclc_take_new_data+0x38>
 800ead6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800eada:	2300      	movs	r3, #0
 800eadc:	aa02      	add	r2, sp, #8
 800eade:	f006 fe27 	bl	8015730 <rcl_take>
 800eae2:	2800      	cmp	r0, #0
 800eae4:	d0ef      	beq.n	800eac6 <_rclc_take_new_data+0x3a>
 800eae6:	f240 1391 	movw	r3, #401	; 0x191
 800eaea:	4298      	cmp	r0, r3
 800eaec:	d115      	bne.n	800eb1a <_rclc_take_new_data+0x8e>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800eaf4:	e7e7      	b.n	800eac6 <_rclc_take_new_data+0x3a>
 800eaf6:	698b      	ldr	r3, [r1, #24]
 800eaf8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d0e0      	beq.n	800eac4 <_rclc_take_new_data+0x38>
 800eb02:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800eb06:	f104 0110 	add.w	r1, r4, #16
 800eb0a:	f005 fea3 	bl	8014854 <rcl_take_response>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d0d8      	beq.n	800eac4 <_rclc_take_new_data+0x38>
 800eb12:	f240 13f5 	movw	r3, #501	; 0x1f5
 800eb16:	4298      	cmp	r0, r3
 800eb18:	d0d5      	beq.n	800eac6 <_rclc_take_new_data+0x3a>
 800eb1a:	9001      	str	r0, [sp, #4]
 800eb1c:	f000 fc2a 	bl	800f374 <rcutils_reset_error>
 800eb20:	9801      	ldr	r0, [sp, #4]
 800eb22:	e7d0      	b.n	800eac6 <_rclc_take_new_data+0x3a>
 800eb24:	200b      	movs	r0, #11
 800eb26:	4770      	bx	lr
 800eb28:	f240 2359 	movw	r3, #601	; 0x259
 800eb2c:	4298      	cmp	r0, r3
 800eb2e:	d0de      	beq.n	800eaee <_rclc_take_new_data+0x62>
 800eb30:	e7f3      	b.n	800eb1a <_rclc_take_new_data+0x8e>
 800eb32:	2001      	movs	r0, #1
 800eb34:	e7c7      	b.n	800eac6 <_rclc_take_new_data+0x3a>
 800eb36:	bf00      	nop

0800eb38 <rclc_executor_trigger_any>:
 800eb38:	b170      	cbz	r0, 800eb58 <rclc_executor_trigger_any+0x20>
 800eb3a:	b179      	cbz	r1, 800eb5c <rclc_executor_trigger_any+0x24>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2200      	movs	r2, #0
 800eb40:	e005      	b.n	800eb4e <rclc_executor_trigger_any+0x16>
 800eb42:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800eb46:	3340      	adds	r3, #64	; 0x40
 800eb48:	b930      	cbnz	r0, 800eb58 <rclc_executor_trigger_any+0x20>
 800eb4a:	4291      	cmp	r1, r2
 800eb4c:	d005      	beq.n	800eb5a <rclc_executor_trigger_any+0x22>
 800eb4e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800eb52:	3201      	adds	r2, #1
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d1f4      	bne.n	800eb42 <rclc_executor_trigger_any+0xa>
 800eb58:	4770      	bx	lr
 800eb5a:	4770      	bx	lr
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	e7fb      	b.n	800eb58 <rclc_executor_trigger_any+0x20>

0800eb60 <_rclc_execute.part.0>:
 800eb60:	b530      	push	{r4, r5, lr}
 800eb62:	7803      	ldrb	r3, [r0, #0]
 800eb64:	b083      	sub	sp, #12
 800eb66:	4604      	mov	r4, r0
 800eb68:	2b08      	cmp	r3, #8
 800eb6a:	d85b      	bhi.n	800ec24 <_rclc_execute.part.0+0xc4>
 800eb6c:	e8df f003 	tbb	[pc, r3]
 800eb70:	3036271f 	.word	0x3036271f
 800eb74:	0505053f 	.word	0x0505053f
 800eb78:	1a          	.byte	0x1a
 800eb79:	00          	.byte	0x00
 800eb7a:	2b06      	cmp	r3, #6
 800eb7c:	d049      	beq.n	800ec12 <_rclc_execute.part.0+0xb2>
 800eb7e:	2b07      	cmp	r3, #7
 800eb80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800eb82:	d140      	bne.n	800ec06 <_rclc_execute.part.0+0xa6>
 800eb84:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800eb88:	6880      	ldr	r0, [r0, #8]
 800eb8a:	4798      	blx	r3
 800eb8c:	f104 0110 	add.w	r1, r4, #16
 800eb90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800eb92:	6860      	ldr	r0, [r4, #4]
 800eb94:	f006 fc8e 	bl	80154b4 <rcl_send_response>
 800eb98:	b138      	cbz	r0, 800ebaa <_rclc_execute.part.0+0x4a>
 800eb9a:	9001      	str	r0, [sp, #4]
 800eb9c:	f000 fbea 	bl	800f374 <rcutils_reset_error>
 800eba0:	9801      	ldr	r0, [sp, #4]
 800eba2:	e002      	b.n	800ebaa <_rclc_execute.part.0+0x4a>
 800eba4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800eba6:	4798      	blx	r3
 800eba8:	2000      	movs	r0, #0
 800ebaa:	b003      	add	sp, #12
 800ebac:	bd30      	pop	{r4, r5, pc}
 800ebae:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ebb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ebb4:	b96d      	cbnz	r5, 800ebd2 <_rclc_execute.part.0+0x72>
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	4798      	blx	r3
 800ebba:	4628      	mov	r0, r5
 800ebbc:	e7f5      	b.n	800ebaa <_rclc_execute.part.0+0x4a>
 800ebbe:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ebc2:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800ebc6:	b1d5      	cbz	r5, 800ebfe <_rclc_execute.part.0+0x9e>
 800ebc8:	6880      	ldr	r0, [r0, #8]
 800ebca:	4798      	blx	r3
 800ebcc:	2000      	movs	r0, #0
 800ebce:	e7ec      	b.n	800ebaa <_rclc_execute.part.0+0x4a>
 800ebd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ebd2:	68a0      	ldr	r0, [r4, #8]
 800ebd4:	4798      	blx	r3
 800ebd6:	2000      	movs	r0, #0
 800ebd8:	b003      	add	sp, #12
 800ebda:	bd30      	pop	{r4, r5, pc}
 800ebdc:	6840      	ldr	r0, [r0, #4]
 800ebde:	f006 fe9d 	bl	801591c <rcl_timer_call>
 800ebe2:	f240 3321 	movw	r3, #801	; 0x321
 800ebe6:	4298      	cmp	r0, r3
 800ebe8:	d1d6      	bne.n	800eb98 <_rclc_execute.part.0+0x38>
 800ebea:	2000      	movs	r0, #0
 800ebec:	e7dd      	b.n	800ebaa <_rclc_execute.part.0+0x4a>
 800ebee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ebf0:	6880      	ldr	r0, [r0, #8]
 800ebf2:	f104 0110 	add.w	r1, r4, #16
 800ebf6:	4798      	blx	r3
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	b003      	add	sp, #12
 800ebfc:	bd30      	pop	{r4, r5, pc}
 800ebfe:	4628      	mov	r0, r5
 800ec00:	4798      	blx	r3
 800ec02:	4628      	mov	r0, r5
 800ec04:	e7d1      	b.n	800ebaa <_rclc_execute.part.0+0x4a>
 800ec06:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ec08:	6880      	ldr	r0, [r0, #8]
 800ec0a:	4798      	blx	r3
 800ec0c:	f104 0110 	add.w	r1, r4, #16
 800ec10:	e7be      	b.n	800eb90 <_rclc_execute.part.0+0x30>
 800ec12:	f100 0110 	add.w	r1, r0, #16
 800ec16:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ec18:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ec1a:	6880      	ldr	r0, [r0, #8]
 800ec1c:	9101      	str	r1, [sp, #4]
 800ec1e:	4798      	blx	r3
 800ec20:	9901      	ldr	r1, [sp, #4]
 800ec22:	e7b5      	b.n	800eb90 <_rclc_execute.part.0+0x30>
 800ec24:	2001      	movs	r0, #1
 800ec26:	e7c0      	b.n	800ebaa <_rclc_execute.part.0+0x4a>

0800ec28 <rclc_executor_init>:
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d063      	beq.n	800ecf4 <rclc_executor_init+0xcc>
 800ec2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec30:	460f      	mov	r7, r1
 800ec32:	b0ae      	sub	sp, #184	; 0xb8
 800ec34:	2900      	cmp	r1, #0
 800ec36:	d055      	beq.n	800ece4 <rclc_executor_init+0xbc>
 800ec38:	4605      	mov	r5, r0
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	4616      	mov	r6, r2
 800ec3e:	4698      	mov	r8, r3
 800ec40:	f000 fb74 	bl	800f32c <rcutils_allocator_is_valid>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d04d      	beq.n	800ece4 <rclc_executor_init+0xbc>
 800ec48:	2e00      	cmp	r6, #0
 800ec4a:	d04b      	beq.n	800ece4 <rclc_executor_init+0xbc>
 800ec4c:	492e      	ldr	r1, [pc, #184]	; (800ed08 <rclc_executor_init+0xe0>)
 800ec4e:	2280      	movs	r2, #128	; 0x80
 800ec50:	a80e      	add	r0, sp, #56	; 0x38
 800ec52:	f00a ff2f 	bl	8019ab4 <memcpy>
 800ec56:	2400      	movs	r4, #0
 800ec58:	a90e      	add	r1, sp, #56	; 0x38
 800ec5a:	2280      	movs	r2, #128	; 0x80
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	f00a ff29 	bl	8019ab4 <memcpy>
 800ec62:	602f      	str	r7, [r5, #0]
 800ec64:	4668      	mov	r0, sp
 800ec66:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800ec6a:	466f      	mov	r7, sp
 800ec6c:	f007 f8b0 	bl	8015dd0 <rcl_get_zero_initialized_wait_set>
 800ec70:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec72:	f105 0c14 	add.w	ip, r5, #20
 800ec76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec7a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec86:	a31e      	add	r3, pc, #120	; (adr r3, 800ed00 <rclc_executor_init+0xd8>)
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	6839      	ldr	r1, [r7, #0]
 800ec8e:	f8cc 1000 	str.w	r1, [ip]
 800ec92:	f8d8 7000 	ldr.w	r7, [r8]
 800ec96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ec9a:	f8c5 8010 	str.w	r8, [r5, #16]
 800ec9e:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800eca2:	01b0      	lsls	r0, r6, #6
 800eca4:	47b8      	blx	r7
 800eca6:	6068      	str	r0, [r5, #4]
 800eca8:	b908      	cbnz	r0, 800ecae <rclc_executor_init+0x86>
 800ecaa:	e025      	b.n	800ecf8 <rclc_executor_init+0xd0>
 800ecac:	6868      	ldr	r0, [r5, #4]
 800ecae:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	3401      	adds	r4, #1
 800ecb6:	f000 fa01 	bl	800f0bc <rclc_executor_handle_init>
 800ecba:	42a6      	cmp	r6, r4
 800ecbc:	d1f6      	bne.n	800ecac <rclc_executor_init+0x84>
 800ecbe:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800ecc2:	f000 f9ef 	bl	800f0a4 <rclc_executor_handle_counters_zero_init>
 800ecc6:	686b      	ldr	r3, [r5, #4]
 800ecc8:	4a10      	ldr	r2, [pc, #64]	; (800ed0c <rclc_executor_init+0xe4>)
 800ecca:	672a      	str	r2, [r5, #112]	; 0x70
 800eccc:	2000      	movs	r0, #0
 800ecce:	6768      	str	r0, [r5, #116]	; 0x74
 800ecd0:	b163      	cbz	r3, 800ecec <rclc_executor_init+0xc4>
 800ecd2:	692b      	ldr	r3, [r5, #16]
 800ecd4:	b153      	cbz	r3, 800ecec <rclc_executor_init+0xc4>
 800ecd6:	68ab      	ldr	r3, [r5, #8]
 800ecd8:	b143      	cbz	r3, 800ecec <rclc_executor_init+0xc4>
 800ecda:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800ecde:	b02e      	add	sp, #184	; 0xb8
 800ece0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece4:	200b      	movs	r0, #11
 800ece6:	b02e      	add	sp, #184	; 0xb8
 800ece8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecec:	4618      	mov	r0, r3
 800ecee:	b02e      	add	sp, #184	; 0xb8
 800ecf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf4:	200b      	movs	r0, #11
 800ecf6:	4770      	bx	lr
 800ecf8:	200a      	movs	r0, #10
 800ecfa:	e7f4      	b.n	800ece6 <rclc_executor_init+0xbe>
 800ecfc:	f3af 8000 	nop.w
 800ed00:	3b9aca00 	.word	0x3b9aca00
 800ed04:	00000000 	.word	0x00000000
 800ed08:	0801ea48 	.word	0x0801ea48
 800ed0c:	0800eb39 	.word	0x0800eb39

0800ed10 <rclc_executor_add_subscription>:
 800ed10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed14:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800ed18:	b358      	cbz	r0, 800ed72 <rclc_executor_add_subscription+0x62>
 800ed1a:	b351      	cbz	r1, 800ed72 <rclc_executor_add_subscription+0x62>
 800ed1c:	b34a      	cbz	r2, 800ed72 <rclc_executor_add_subscription+0x62>
 800ed1e:	b343      	cbz	r3, 800ed72 <rclc_executor_add_subscription+0x62>
 800ed20:	4604      	mov	r4, r0
 800ed22:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800ed26:	4285      	cmp	r5, r0
 800ed28:	d302      	bcc.n	800ed30 <rclc_executor_add_subscription+0x20>
 800ed2a:	2001      	movs	r0, #1
 800ed2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed30:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800ed34:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800ed38:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800ed3c:	f04f 0c00 	mov.w	ip, #0
 800ed40:	f80e c008 	strb.w	ip, [lr, r8]
 800ed44:	2001      	movs	r0, #1
 800ed46:	3501      	adds	r5, #1
 800ed48:	f104 0814 	add.w	r8, r4, #20
 800ed4c:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800ed50:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800ed54:	6333      	str	r3, [r6, #48]	; 0x30
 800ed56:	7077      	strb	r7, [r6, #1]
 800ed58:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800ed5c:	4640      	mov	r0, r8
 800ed5e:	60e5      	str	r5, [r4, #12]
 800ed60:	f007 f848 	bl	8015df4 <rcl_wait_set_is_valid>
 800ed64:	b940      	cbnz	r0, 800ed78 <rclc_executor_add_subscription+0x68>
 800ed66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed68:	3301      	adds	r3, #1
 800ed6a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed72:	200b      	movs	r0, #11
 800ed74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed78:	4640      	mov	r0, r8
 800ed7a:	f007 f841 	bl	8015e00 <rcl_wait_set_fini>
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d0f1      	beq.n	800ed66 <rclc_executor_add_subscription+0x56>
 800ed82:	e7d3      	b.n	800ed2c <rclc_executor_add_subscription+0x1c>

0800ed84 <rclc_executor_prepare>:
 800ed84:	2800      	cmp	r0, #0
 800ed86:	d03d      	beq.n	800ee04 <rclc_executor_prepare+0x80>
 800ed88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed8c:	f100 0814 	add.w	r8, r0, #20
 800ed90:	b09a      	sub	sp, #104	; 0x68
 800ed92:	4604      	mov	r4, r0
 800ed94:	4640      	mov	r0, r8
 800ed96:	f007 f82d 	bl	8015df4 <rcl_wait_set_is_valid>
 800ed9a:	b118      	cbz	r0, 800eda4 <rclc_executor_prepare+0x20>
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	b01a      	add	sp, #104	; 0x68
 800eda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda4:	4640      	mov	r0, r8
 800eda6:	f007 f82b 	bl	8015e00 <rcl_wait_set_fini>
 800edaa:	2800      	cmp	r0, #0
 800edac:	d127      	bne.n	800edfe <rclc_executor_prepare+0x7a>
 800edae:	a80c      	add	r0, sp, #48	; 0x30
 800edb0:	ad0c      	add	r5, sp, #48	; 0x30
 800edb2:	f007 f80d 	bl	8015dd0 <rcl_get_zero_initialized_wait_set>
 800edb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edb8:	4646      	mov	r6, r8
 800edba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800edbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800edc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edc2:	6927      	ldr	r7, [r4, #16]
 800edc4:	682d      	ldr	r5, [r5, #0]
 800edc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800edc8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800edca:	6035      	str	r5, [r6, #0]
 800edcc:	ad04      	add	r5, sp, #16
 800edce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edd0:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800edd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800edd6:	6826      	ldr	r6, [r4, #0]
 800edd8:	6838      	ldr	r0, [r7, #0]
 800edda:	6028      	str	r0, [r5, #0]
 800eddc:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800ede0:	e9cd 3200 	strd	r3, r2, [sp]
 800ede4:	4640      	mov	r0, r8
 800ede6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ede8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800edea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800edec:	f007 fb26 	bl	801643c <rcl_wait_set_init>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	d0d4      	beq.n	800ed9e <rclc_executor_prepare+0x1a>
 800edf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800edf6:	f000 fabd 	bl	800f374 <rcutils_reset_error>
 800edfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800edfc:	e7cf      	b.n	800ed9e <rclc_executor_prepare+0x1a>
 800edfe:	f000 fab9 	bl	800f374 <rcutils_reset_error>
 800ee02:	e7d4      	b.n	800edae <rclc_executor_prepare+0x2a>
 800ee04:	200b      	movs	r0, #11
 800ee06:	4770      	bx	lr

0800ee08 <rclc_executor_spin_some.part.0>:
 800ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	f100 0814 	add.w	r8, r0, #20
 800ee10:	b083      	sub	sp, #12
 800ee12:	4692      	mov	sl, r2
 800ee14:	4699      	mov	r9, r3
 800ee16:	4605      	mov	r5, r0
 800ee18:	f7ff ffb4 	bl	800ed84 <rclc_executor_prepare>
 800ee1c:	4640      	mov	r0, r8
 800ee1e:	f007 f8bb 	bl	8015f98 <rcl_wait_set_clear>
 800ee22:	4607      	mov	r7, r0
 800ee24:	2800      	cmp	r0, #0
 800ee26:	f040 80be 	bne.w	800efa6 <rclc_executor_spin_some.part.0+0x19e>
 800ee2a:	68ab      	ldr	r3, [r5, #8]
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	b1eb      	cbz	r3, 800ee6c <rclc_executor_spin_some.part.0+0x64>
 800ee30:	686e      	ldr	r6, [r5, #4]
 800ee32:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800ee36:	01a2      	lsls	r2, r4, #6
 800ee38:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800ee3c:	b1b3      	cbz	r3, 800ee6c <rclc_executor_spin_some.part.0+0x64>
 800ee3e:	5cb3      	ldrb	r3, [r6, r2]
 800ee40:	2b08      	cmp	r3, #8
 800ee42:	f200 80a9 	bhi.w	800ef98 <rclc_executor_spin_some.part.0+0x190>
 800ee46:	e8df f003 	tbb	[pc, r3]
 800ee4a:	8989      	.short	0x8989
 800ee4c:	057b7b93 	.word	0x057b7b93
 800ee50:	0505      	.short	0x0505
 800ee52:	9d          	.byte	0x9d
 800ee53:	00          	.byte	0x00
 800ee54:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ee58:	4640      	mov	r0, r8
 800ee5a:	6849      	ldr	r1, [r1, #4]
 800ee5c:	f007 fc04 	bl	8016668 <rcl_wait_set_add_service>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	d175      	bne.n	800ef50 <rclc_executor_spin_some.part.0+0x148>
 800ee64:	68ab      	ldr	r3, [r5, #8]
 800ee66:	3401      	adds	r4, #1
 800ee68:	429c      	cmp	r4, r3
 800ee6a:	d3e1      	bcc.n	800ee30 <rclc_executor_spin_some.part.0+0x28>
 800ee6c:	464b      	mov	r3, r9
 800ee6e:	4652      	mov	r2, sl
 800ee70:	4640      	mov	r0, r8
 800ee72:	f007 fc25 	bl	80166c0 <rcl_wait>
 800ee76:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f000 809b 	beq.w	800efb6 <rclc_executor_spin_some.part.0+0x1ae>
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	f040 8089 	bne.w	800ef98 <rclc_executor_spin_some.part.0+0x190>
 800ee86:	68ab      	ldr	r3, [r5, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f000 80ef 	beq.w	800f06c <rclc_executor_spin_some.part.0+0x264>
 800ee8e:	2400      	movs	r4, #0
 800ee90:	4626      	mov	r6, r4
 800ee92:	f240 1991 	movw	r9, #401	; 0x191
 800ee96:	e00a      	b.n	800eeae <rclc_executor_spin_some.part.0+0xa6>
 800ee98:	f7ff fdd2 	bl	800ea40 <_rclc_check_for_new_data>
 800ee9c:	4604      	mov	r4, r0
 800ee9e:	b110      	cbz	r0, 800eea6 <rclc_executor_spin_some.part.0+0x9e>
 800eea0:	4548      	cmp	r0, r9
 800eea2:	f040 8086 	bne.w	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800eea6:	68ab      	ldr	r3, [r5, #8]
 800eea8:	429e      	cmp	r6, r3
 800eeaa:	f080 80db 	bcs.w	800f064 <rclc_executor_spin_some.part.0+0x25c>
 800eeae:	686a      	ldr	r2, [r5, #4]
 800eeb0:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800eeb4:	4641      	mov	r1, r8
 800eeb6:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800eeba:	3601      	adds	r6, #1
 800eebc:	f1bc 0f00 	cmp.w	ip, #0
 800eec0:	d1ea      	bne.n	800ee98 <rclc_executor_spin_some.part.0+0x90>
 800eec2:	4619      	mov	r1, r3
 800eec4:	4610      	mov	r0, r2
 800eec6:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800eeca:	4798      	blx	r3
 800eecc:	2800      	cmp	r0, #0
 800eece:	d070      	beq.n	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800eed0:	68aa      	ldr	r2, [r5, #8]
 800eed2:	2a00      	cmp	r2, #0
 800eed4:	d06d      	beq.n	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800eed6:	2600      	movs	r6, #0
 800eed8:	f240 1991 	movw	r9, #401	; 0x191
 800eedc:	e008      	b.n	800eef0 <rclc_executor_spin_some.part.0+0xe8>
 800eede:	f7ff fdd5 	bl	800ea8c <_rclc_take_new_data>
 800eee2:	4604      	mov	r4, r0
 800eee4:	b108      	cbz	r0, 800eeea <rclc_executor_spin_some.part.0+0xe2>
 800eee6:	4548      	cmp	r0, r9
 800eee8:	d163      	bne.n	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800eeea:	68aa      	ldr	r2, [r5, #8]
 800eeec:	4296      	cmp	r6, r2
 800eeee:	d208      	bcs.n	800ef02 <rclc_executor_spin_some.part.0+0xfa>
 800eef0:	6868      	ldr	r0, [r5, #4]
 800eef2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800eef6:	4641      	mov	r1, r8
 800eef8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800eefc:	3601      	adds	r6, #1
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1ed      	bne.n	800eede <rclc_executor_spin_some.part.0+0xd6>
 800ef02:	2600      	movs	r6, #0
 800ef04:	b932      	cbnz	r2, 800ef14 <rclc_executor_spin_some.part.0+0x10c>
 800ef06:	e054      	b.n	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800ef08:	2901      	cmp	r1, #1
 800ef0a:	d012      	beq.n	800ef32 <rclc_executor_spin_some.part.0+0x12a>
 800ef0c:	3601      	adds	r6, #1
 800ef0e:	4296      	cmp	r6, r2
 800ef10:	d245      	bcs.n	800ef9e <rclc_executor_spin_some.part.0+0x196>
 800ef12:	2400      	movs	r4, #0
 800ef14:	686b      	ldr	r3, [r5, #4]
 800ef16:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800ef20:	2900      	cmp	r1, #0
 800ef22:	d046      	beq.n	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800ef24:	7859      	ldrb	r1, [r3, #1]
 800ef26:	2900      	cmp	r1, #0
 800ef28:	d1ee      	bne.n	800ef08 <rclc_executor_spin_some.part.0+0x100>
 800ef2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d0ec      	beq.n	800ef0c <rclc_executor_spin_some.part.0+0x104>
 800ef32:	f7ff fe15 	bl	800eb60 <_rclc_execute.part.0>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	f040 8096 	bne.w	800f068 <rclc_executor_spin_some.part.0+0x260>
 800ef3c:	68aa      	ldr	r2, [r5, #8]
 800ef3e:	e7e5      	b.n	800ef0c <rclc_executor_spin_some.part.0+0x104>
 800ef40:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ef44:	4640      	mov	r0, r8
 800ef46:	6849      	ldr	r1, [r1, #4]
 800ef48:	f007 fb62 	bl	8016610 <rcl_wait_set_add_client>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d089      	beq.n	800ee64 <rclc_executor_spin_some.part.0+0x5c>
 800ef50:	9001      	str	r0, [sp, #4]
 800ef52:	f000 fa0f 	bl	800f374 <rcutils_reset_error>
 800ef56:	9801      	ldr	r0, [sp, #4]
 800ef58:	4607      	mov	r7, r0
 800ef5a:	e020      	b.n	800ef9e <rclc_executor_spin_some.part.0+0x196>
 800ef5c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ef60:	4640      	mov	r0, r8
 800ef62:	6849      	ldr	r1, [r1, #4]
 800ef64:	f006 ffec 	bl	8015f40 <rcl_wait_set_add_subscription>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	f43f af7b 	beq.w	800ee64 <rclc_executor_spin_some.part.0+0x5c>
 800ef6e:	e7ef      	b.n	800ef50 <rclc_executor_spin_some.part.0+0x148>
 800ef70:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ef74:	4640      	mov	r0, r8
 800ef76:	6849      	ldr	r1, [r1, #4]
 800ef78:	f007 fb1a 	bl	80165b0 <rcl_wait_set_add_timer>
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	f43f af71 	beq.w	800ee64 <rclc_executor_spin_some.part.0+0x5c>
 800ef82:	e7e5      	b.n	800ef50 <rclc_executor_spin_some.part.0+0x148>
 800ef84:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ef88:	4640      	mov	r0, r8
 800ef8a:	6849      	ldr	r1, [r1, #4]
 800ef8c:	f007 fae4 	bl	8016558 <rcl_wait_set_add_guard_condition>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	f43f af67 	beq.w	800ee64 <rclc_executor_spin_some.part.0+0x5c>
 800ef96:	e7db      	b.n	800ef50 <rclc_executor_spin_some.part.0+0x148>
 800ef98:	f000 f9ec 	bl	800f374 <rcutils_reset_error>
 800ef9c:	2701      	movs	r7, #1
 800ef9e:	4638      	mov	r0, r7
 800efa0:	b003      	add	sp, #12
 800efa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa6:	f000 f9e5 	bl	800f374 <rcutils_reset_error>
 800efaa:	4638      	mov	r0, r7
 800efac:	b003      	add	sp, #12
 800efae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb2:	4627      	mov	r7, r4
 800efb4:	e7f3      	b.n	800ef9e <rclc_executor_spin_some.part.0+0x196>
 800efb6:	68ab      	ldr	r3, [r5, #8]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d05a      	beq.n	800f072 <rclc_executor_spin_some.part.0+0x26a>
 800efbc:	2400      	movs	r4, #0
 800efbe:	4626      	mov	r6, r4
 800efc0:	f240 1991 	movw	r9, #401	; 0x191
 800efc4:	e008      	b.n	800efd8 <rclc_executor_spin_some.part.0+0x1d0>
 800efc6:	f7ff fd3b 	bl	800ea40 <_rclc_check_for_new_data>
 800efca:	4604      	mov	r4, r0
 800efcc:	b108      	cbz	r0, 800efd2 <rclc_executor_spin_some.part.0+0x1ca>
 800efce:	4548      	cmp	r0, r9
 800efd0:	d1ef      	bne.n	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800efd2:	68ab      	ldr	r3, [r5, #8]
 800efd4:	429e      	cmp	r6, r3
 800efd6:	d243      	bcs.n	800f060 <rclc_executor_spin_some.part.0+0x258>
 800efd8:	686a      	ldr	r2, [r5, #4]
 800efda:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800efde:	4641      	mov	r1, r8
 800efe0:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800efe4:	3601      	adds	r6, #1
 800efe6:	f1bc 0f00 	cmp.w	ip, #0
 800efea:	d1ec      	bne.n	800efc6 <rclc_executor_spin_some.part.0+0x1be>
 800efec:	4619      	mov	r1, r3
 800efee:	4610      	mov	r0, r2
 800eff0:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800eff4:	4798      	blx	r3
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d0db      	beq.n	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800effa:	68ab      	ldr	r3, [r5, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d0d8      	beq.n	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800f000:	f04f 0a00 	mov.w	sl, #0
 800f004:	f240 1691 	movw	r6, #401	; 0x191
 800f008:	f240 2959 	movw	r9, #601	; 0x259
 800f00c:	e00b      	b.n	800f026 <rclc_executor_spin_some.part.0+0x21e>
 800f00e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800f012:	b113      	cbz	r3, 800f01a <rclc_executor_spin_some.part.0+0x212>
 800f014:	f7ff fda4 	bl	800eb60 <_rclc_execute.part.0>
 800f018:	bb30      	cbnz	r0, 800f068 <rclc_executor_spin_some.part.0+0x260>
 800f01a:	68ab      	ldr	r3, [r5, #8]
 800f01c:	f10a 0a01 	add.w	sl, sl, #1
 800f020:	459a      	cmp	sl, r3
 800f022:	d2bc      	bcs.n	800ef9e <rclc_executor_spin_some.part.0+0x196>
 800f024:	2400      	movs	r4, #0
 800f026:	6868      	ldr	r0, [r5, #4]
 800f028:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f02c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f030:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f034:	2b00      	cmp	r3, #0
 800f036:	d0bc      	beq.n	800efb2 <rclc_executor_spin_some.part.0+0x1aa>
 800f038:	4641      	mov	r1, r8
 800f03a:	f7ff fd27 	bl	800ea8c <_rclc_take_new_data>
 800f03e:	b118      	cbz	r0, 800f048 <rclc_executor_spin_some.part.0+0x240>
 800f040:	42b0      	cmp	r0, r6
 800f042:	d001      	beq.n	800f048 <rclc_executor_spin_some.part.0+0x240>
 800f044:	4548      	cmp	r0, r9
 800f046:	d10f      	bne.n	800f068 <rclc_executor_spin_some.part.0+0x260>
 800f048:	6868      	ldr	r0, [r5, #4]
 800f04a:	eb10 000b 	adds.w	r0, r0, fp
 800f04e:	d005      	beq.n	800f05c <rclc_executor_spin_some.part.0+0x254>
 800f050:	7843      	ldrb	r3, [r0, #1]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d0db      	beq.n	800f00e <rclc_executor_spin_some.part.0+0x206>
 800f056:	2b01      	cmp	r3, #1
 800f058:	d1df      	bne.n	800f01a <rclc_executor_spin_some.part.0+0x212>
 800f05a:	e7db      	b.n	800f014 <rclc_executor_spin_some.part.0+0x20c>
 800f05c:	270b      	movs	r7, #11
 800f05e:	e79e      	b.n	800ef9e <rclc_executor_spin_some.part.0+0x196>
 800f060:	686a      	ldr	r2, [r5, #4]
 800f062:	e7c3      	b.n	800efec <rclc_executor_spin_some.part.0+0x1e4>
 800f064:	686a      	ldr	r2, [r5, #4]
 800f066:	e72c      	b.n	800eec2 <rclc_executor_spin_some.part.0+0xba>
 800f068:	4607      	mov	r7, r0
 800f06a:	e798      	b.n	800ef9e <rclc_executor_spin_some.part.0+0x196>
 800f06c:	686a      	ldr	r2, [r5, #4]
 800f06e:	461c      	mov	r4, r3
 800f070:	e727      	b.n	800eec2 <rclc_executor_spin_some.part.0+0xba>
 800f072:	686a      	ldr	r2, [r5, #4]
 800f074:	461c      	mov	r4, r3
 800f076:	e7b9      	b.n	800efec <rclc_executor_spin_some.part.0+0x1e4>

0800f078 <rclc_executor_spin_some>:
 800f078:	b190      	cbz	r0, 800f0a0 <rclc_executor_spin_some+0x28>
 800f07a:	b570      	push	{r4, r5, r6, lr}
 800f07c:	4604      	mov	r4, r0
 800f07e:	6800      	ldr	r0, [r0, #0]
 800f080:	4616      	mov	r6, r2
 800f082:	461d      	mov	r5, r3
 800f084:	f005 fc40 	bl	8014908 <rcl_context_is_valid>
 800f088:	b130      	cbz	r0, 800f098 <rclc_executor_spin_some+0x20>
 800f08a:	4632      	mov	r2, r6
 800f08c:	462b      	mov	r3, r5
 800f08e:	4620      	mov	r0, r4
 800f090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f094:	f7ff beb8 	b.w	800ee08 <rclc_executor_spin_some.part.0>
 800f098:	f000 f96c 	bl	800f374 <rcutils_reset_error>
 800f09c:	2001      	movs	r0, #1
 800f09e:	bd70      	pop	{r4, r5, r6, pc}
 800f0a0:	200b      	movs	r0, #11
 800f0a2:	4770      	bx	lr

0800f0a4 <rclc_executor_handle_counters_zero_init>:
 800f0a4:	b140      	cbz	r0, 800f0b8 <rclc_executor_handle_counters_zero_init+0x14>
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	6003      	str	r3, [r0, #0]
 800f0aa:	6043      	str	r3, [r0, #4]
 800f0ac:	6083      	str	r3, [r0, #8]
 800f0ae:	60c3      	str	r3, [r0, #12]
 800f0b0:	6103      	str	r3, [r0, #16]
 800f0b2:	6143      	str	r3, [r0, #20]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	4770      	bx	lr
 800f0b8:	200b      	movs	r0, #11
 800f0ba:	4770      	bx	lr

0800f0bc <rclc_executor_handle_init>:
 800f0bc:	b178      	cbz	r0, 800f0de <rclc_executor_handle_init+0x22>
 800f0be:	b430      	push	{r4, r5}
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2209      	movs	r2, #9
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	2400      	movs	r4, #0
 800f0c8:	2500      	movs	r5, #0
 800f0ca:	801a      	strh	r2, [r3, #0]
 800f0cc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800f0d0:	bc30      	pop	{r4, r5}
 800f0d2:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800f0d6:	6359      	str	r1, [r3, #52]	; 0x34
 800f0d8:	6318      	str	r0, [r3, #48]	; 0x30
 800f0da:	8718      	strh	r0, [r3, #56]	; 0x38
 800f0dc:	4770      	bx	lr
 800f0de:	200b      	movs	r0, #11
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop

0800f0e4 <rclc_support_init_with_options>:
 800f0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e8:	b082      	sub	sp, #8
 800f0ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0ee:	b380      	cbz	r0, 800f152 <rclc_support_init_with_options+0x6e>
 800f0f0:	461c      	mov	r4, r3
 800f0f2:	b373      	cbz	r3, 800f152 <rclc_support_init_with_options+0x6e>
 800f0f4:	f1b8 0f00 	cmp.w	r8, #0
 800f0f8:	d02b      	beq.n	800f152 <rclc_support_init_with_options+0x6e>
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	460e      	mov	r6, r1
 800f0fe:	4617      	mov	r7, r2
 800f100:	f7ff f9fc 	bl	800e4fc <rcl_get_zero_initialized_init_options>
 800f104:	4629      	mov	r1, r5
 800f106:	6028      	str	r0, [r5, #0]
 800f108:	4620      	mov	r0, r4
 800f10a:	f7ff fa6f 	bl	800e5ec <rcl_init_options_copy>
 800f10e:	4604      	mov	r4, r0
 800f110:	b9c8      	cbnz	r0, 800f146 <rclc_support_init_with_options+0x62>
 800f112:	466c      	mov	r4, sp
 800f114:	4620      	mov	r0, r4
 800f116:	f005 fbed 	bl	80148f4 <rcl_get_zero_initialized_context>
 800f11a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f11e:	1d2b      	adds	r3, r5, #4
 800f120:	e883 0003 	stmia.w	r3, {r0, r1}
 800f124:	462a      	mov	r2, r5
 800f126:	4639      	mov	r1, r7
 800f128:	4630      	mov	r0, r6
 800f12a:	f005 fdc3 	bl	8014cb4 <rcl_init>
 800f12e:	4604      	mov	r4, r0
 800f130:	b948      	cbnz	r0, 800f146 <rclc_support_init_with_options+0x62>
 800f132:	f8c5 800c 	str.w	r8, [r5, #12]
 800f136:	4642      	mov	r2, r8
 800f138:	f105 0110 	add.w	r1, r5, #16
 800f13c:	2003      	movs	r0, #3
 800f13e:	f006 fb61 	bl	8015804 <rcl_clock_init>
 800f142:	4604      	mov	r4, r0
 800f144:	b108      	cbz	r0, 800f14a <rclc_support_init_with_options+0x66>
 800f146:	f000 f915 	bl	800f374 <rcutils_reset_error>
 800f14a:	4620      	mov	r0, r4
 800f14c:	b002      	add	sp, #8
 800f14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f152:	240b      	movs	r4, #11
 800f154:	4620      	mov	r0, r4
 800f156:	b002      	add	sp, #8
 800f158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f15c <rclc_node_init_default>:
 800f15c:	b3b8      	cbz	r0, 800f1ce <rclc_node_init_default+0x72>
 800f15e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f162:	460d      	mov	r5, r1
 800f164:	b08f      	sub	sp, #60	; 0x3c
 800f166:	b329      	cbz	r1, 800f1b4 <rclc_node_init_default+0x58>
 800f168:	4616      	mov	r6, r2
 800f16a:	b31a      	cbz	r2, 800f1b4 <rclc_node_init_default+0x58>
 800f16c:	461f      	mov	r7, r3
 800f16e:	b30b      	cbz	r3, 800f1b4 <rclc_node_init_default+0x58>
 800f170:	f10d 0810 	add.w	r8, sp, #16
 800f174:	4604      	mov	r4, r0
 800f176:	4640      	mov	r0, r8
 800f178:	f005 fec8 	bl	8014f0c <rcl_get_zero_initialized_node>
 800f17c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f180:	f10d 091c 	add.w	r9, sp, #28
 800f184:	e884 0003 	stmia.w	r4, {r0, r1}
 800f188:	4648      	mov	r0, r9
 800f18a:	f7ff fadd 	bl	800e748 <rcl_node_get_default_options>
 800f18e:	4640      	mov	r0, r8
 800f190:	f005 febc 	bl	8014f0c <rcl_get_zero_initialized_node>
 800f194:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f198:	1d3b      	adds	r3, r7, #4
 800f19a:	f8cd 9000 	str.w	r9, [sp]
 800f19e:	4632      	mov	r2, r6
 800f1a0:	e884 0003 	stmia.w	r4, {r0, r1}
 800f1a4:	4629      	mov	r1, r5
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	f005 feba 	bl	8014f20 <rcl_node_init>
 800f1ac:	b930      	cbnz	r0, 800f1bc <rclc_node_init_default+0x60>
 800f1ae:	b00f      	add	sp, #60	; 0x3c
 800f1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1b4:	200b      	movs	r0, #11
 800f1b6:	b00f      	add	sp, #60	; 0x3c
 800f1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1bc:	9003      	str	r0, [sp, #12]
 800f1be:	f000 f8d9 	bl	800f374 <rcutils_reset_error>
 800f1c2:	f000 f8d7 	bl	800f374 <rcutils_reset_error>
 800f1c6:	9803      	ldr	r0, [sp, #12]
 800f1c8:	b00f      	add	sp, #60	; 0x3c
 800f1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1ce:	200b      	movs	r0, #11
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop

0800f1d4 <rclc_publisher_init_default>:
 800f1d4:	b368      	cbz	r0, 800f232 <rclc_publisher_init_default+0x5e>
 800f1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1da:	460d      	mov	r5, r1
 800f1dc:	b09e      	sub	sp, #120	; 0x78
 800f1de:	b321      	cbz	r1, 800f22a <rclc_publisher_init_default+0x56>
 800f1e0:	4616      	mov	r6, r2
 800f1e2:	b312      	cbz	r2, 800f22a <rclc_publisher_init_default+0x56>
 800f1e4:	461f      	mov	r7, r3
 800f1e6:	b303      	cbz	r3, 800f22a <rclc_publisher_init_default+0x56>
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	f7ff fae7 	bl	800e7bc <rcl_get_zero_initialized_publisher>
 800f1ee:	f10d 0810 	add.w	r8, sp, #16
 800f1f2:	6020      	str	r0, [r4, #0]
 800f1f4:	4640      	mov	r0, r8
 800f1f6:	f7ff fbdd 	bl	800e9b4 <rcl_publisher_get_default_options>
 800f1fa:	490f      	ldr	r1, [pc, #60]	; (800f238 <rclc_publisher_init_default+0x64>)
 800f1fc:	2250      	movs	r2, #80	; 0x50
 800f1fe:	4640      	mov	r0, r8
 800f200:	f00a fc58 	bl	8019ab4 <memcpy>
 800f204:	f8cd 8000 	str.w	r8, [sp]
 800f208:	463b      	mov	r3, r7
 800f20a:	4632      	mov	r2, r6
 800f20c:	4629      	mov	r1, r5
 800f20e:	4620      	mov	r0, r4
 800f210:	f7ff fada 	bl	800e7c8 <rcl_publisher_init>
 800f214:	b910      	cbnz	r0, 800f21c <rclc_publisher_init_default+0x48>
 800f216:	b01e      	add	sp, #120	; 0x78
 800f218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f21c:	9003      	str	r0, [sp, #12]
 800f21e:	f000 f8a9 	bl	800f374 <rcutils_reset_error>
 800f222:	9803      	ldr	r0, [sp, #12]
 800f224:	b01e      	add	sp, #120	; 0x78
 800f226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f22a:	200b      	movs	r0, #11
 800f22c:	b01e      	add	sp, #120	; 0x78
 800f22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f232:	200b      	movs	r0, #11
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop
 800f238:	0801eac8 	.word	0x0801eac8

0800f23c <rclc_subscription_init_default>:
 800f23c:	b368      	cbz	r0, 800f29a <rclc_subscription_init_default+0x5e>
 800f23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f242:	460d      	mov	r5, r1
 800f244:	b0a0      	sub	sp, #128	; 0x80
 800f246:	b321      	cbz	r1, 800f292 <rclc_subscription_init_default+0x56>
 800f248:	4616      	mov	r6, r2
 800f24a:	b312      	cbz	r2, 800f292 <rclc_subscription_init_default+0x56>
 800f24c:	461f      	mov	r7, r3
 800f24e:	b303      	cbz	r3, 800f292 <rclc_subscription_init_default+0x56>
 800f250:	4604      	mov	r4, r0
 800f252:	f006 f945 	bl	80154e0 <rcl_get_zero_initialized_subscription>
 800f256:	f10d 0810 	add.w	r8, sp, #16
 800f25a:	6020      	str	r0, [r4, #0]
 800f25c:	4640      	mov	r0, r8
 800f25e:	f006 fa3b 	bl	80156d8 <rcl_subscription_get_default_options>
 800f262:	490f      	ldr	r1, [pc, #60]	; (800f2a0 <rclc_subscription_init_default+0x64>)
 800f264:	2250      	movs	r2, #80	; 0x50
 800f266:	4640      	mov	r0, r8
 800f268:	f00a fc24 	bl	8019ab4 <memcpy>
 800f26c:	f8cd 8000 	str.w	r8, [sp]
 800f270:	463b      	mov	r3, r7
 800f272:	4632      	mov	r2, r6
 800f274:	4629      	mov	r1, r5
 800f276:	4620      	mov	r0, r4
 800f278:	f006 f938 	bl	80154ec <rcl_subscription_init>
 800f27c:	b910      	cbnz	r0, 800f284 <rclc_subscription_init_default+0x48>
 800f27e:	b020      	add	sp, #128	; 0x80
 800f280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f284:	9003      	str	r0, [sp, #12]
 800f286:	f000 f875 	bl	800f374 <rcutils_reset_error>
 800f28a:	9803      	ldr	r0, [sp, #12]
 800f28c:	b020      	add	sp, #128	; 0x80
 800f28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f292:	200b      	movs	r0, #11
 800f294:	b020      	add	sp, #128	; 0x80
 800f296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f29a:	200b      	movs	r0, #11
 800f29c:	4770      	bx	lr
 800f29e:	bf00      	nop
 800f2a0:	0801eb18 	.word	0x0801eb18

0800f2a4 <__default_zero_allocate>:
 800f2a4:	f00a ba82 	b.w	80197ac <calloc>

0800f2a8 <__default_reallocate>:
 800f2a8:	f00b bc9e 	b.w	801abe8 <realloc>

0800f2ac <__default_deallocate>:
 800f2ac:	f00a bbfa 	b.w	8019aa4 <free>

0800f2b0 <__default_allocate>:
 800f2b0:	f00a bbf0 	b.w	8019a94 <malloc>

0800f2b4 <rcutils_get_zero_initialized_allocator>:
 800f2b4:	b470      	push	{r4, r5, r6}
 800f2b6:	4d05      	ldr	r5, [pc, #20]	; (800f2cc <rcutils_get_zero_initialized_allocator+0x18>)
 800f2b8:	4606      	mov	r6, r0
 800f2ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2bc:	4634      	mov	r4, r6
 800f2be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	6023      	str	r3, [r4, #0]
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	bc70      	pop	{r4, r5, r6}
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	0801eb68 	.word	0x0801eb68

0800f2d0 <rcutils_set_default_allocator>:
 800f2d0:	b1a0      	cbz	r0, 800f2fc <rcutils_set_default_allocator+0x2c>
 800f2d2:	6801      	ldr	r1, [r0, #0]
 800f2d4:	b199      	cbz	r1, 800f2fe <rcutils_set_default_allocator+0x2e>
 800f2d6:	b430      	push	{r4, r5}
 800f2d8:	6844      	ldr	r4, [r0, #4]
 800f2da:	b194      	cbz	r4, 800f302 <rcutils_set_default_allocator+0x32>
 800f2dc:	68c5      	ldr	r5, [r0, #12]
 800f2de:	b15d      	cbz	r5, 800f2f8 <rcutils_set_default_allocator+0x28>
 800f2e0:	6883      	ldr	r3, [r0, #8]
 800f2e2:	b18b      	cbz	r3, 800f308 <rcutils_set_default_allocator+0x38>
 800f2e4:	4a09      	ldr	r2, [pc, #36]	; (800f30c <rcutils_set_default_allocator+0x3c>)
 800f2e6:	e9c2 1400 	strd	r1, r4, [r2]
 800f2ea:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	6110      	str	r0, [r2, #16]
 800f2f2:	2001      	movs	r0, #1
 800f2f4:	bc30      	pop	{r4, r5}
 800f2f6:	4770      	bx	lr
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	e7fb      	b.n	800f2f4 <rcutils_set_default_allocator+0x24>
 800f2fc:	4770      	bx	lr
 800f2fe:	4608      	mov	r0, r1
 800f300:	4770      	bx	lr
 800f302:	4620      	mov	r0, r4
 800f304:	bc30      	pop	{r4, r5}
 800f306:	4770      	bx	lr
 800f308:	4618      	mov	r0, r3
 800f30a:	e7f3      	b.n	800f2f4 <rcutils_set_default_allocator+0x24>
 800f30c:	20000050 	.word	0x20000050

0800f310 <rcutils_get_default_allocator>:
 800f310:	b470      	push	{r4, r5, r6}
 800f312:	4d05      	ldr	r5, [pc, #20]	; (800f328 <rcutils_get_default_allocator+0x18>)
 800f314:	4606      	mov	r6, r0
 800f316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f318:	4634      	mov	r4, r6
 800f31a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f31c:	682b      	ldr	r3, [r5, #0]
 800f31e:	6023      	str	r3, [r4, #0]
 800f320:	4630      	mov	r0, r6
 800f322:	bc70      	pop	{r4, r5, r6}
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	20000050 	.word	0x20000050

0800f32c <rcutils_allocator_is_valid>:
 800f32c:	b158      	cbz	r0, 800f346 <rcutils_allocator_is_valid+0x1a>
 800f32e:	6803      	ldr	r3, [r0, #0]
 800f330:	b143      	cbz	r3, 800f344 <rcutils_allocator_is_valid+0x18>
 800f332:	6843      	ldr	r3, [r0, #4]
 800f334:	b133      	cbz	r3, 800f344 <rcutils_allocator_is_valid+0x18>
 800f336:	68c3      	ldr	r3, [r0, #12]
 800f338:	b123      	cbz	r3, 800f344 <rcutils_allocator_is_valid+0x18>
 800f33a:	6880      	ldr	r0, [r0, #8]
 800f33c:	3800      	subs	r0, #0
 800f33e:	bf18      	it	ne
 800f340:	2001      	movne	r0, #1
 800f342:	4770      	bx	lr
 800f344:	4618      	mov	r0, r3
 800f346:	4770      	bx	lr

0800f348 <rcutils_get_error_string>:
 800f348:	4b06      	ldr	r3, [pc, #24]	; (800f364 <rcutils_get_error_string+0x1c>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	b13b      	cbz	r3, 800f35e <rcutils_get_error_string+0x16>
 800f34e:	4b06      	ldr	r3, [pc, #24]	; (800f368 <rcutils_get_error_string+0x20>)
 800f350:	781a      	ldrb	r2, [r3, #0]
 800f352:	b90a      	cbnz	r2, 800f358 <rcutils_get_error_string+0x10>
 800f354:	2201      	movs	r2, #1
 800f356:	701a      	strb	r2, [r3, #0]
 800f358:	4b04      	ldr	r3, [pc, #16]	; (800f36c <rcutils_get_error_string+0x24>)
 800f35a:	7818      	ldrb	r0, [r3, #0]
 800f35c:	4770      	bx	lr
 800f35e:	4b04      	ldr	r3, [pc, #16]	; (800f370 <rcutils_get_error_string+0x28>)
 800f360:	7818      	ldrb	r0, [r3, #0]
 800f362:	4770      	bx	lr
 800f364:	20009df0 	.word	0x20009df0
 800f368:	20009df1 	.word	0x20009df1
 800f36c:	20009f90 	.word	0x20009f90
 800f370:	0801eb7c 	.word	0x0801eb7c

0800f374 <rcutils_reset_error>:
 800f374:	b4d0      	push	{r4, r6, r7}
 800f376:	4a07      	ldr	r2, [pc, #28]	; (800f394 <rcutils_reset_error+0x20>)
 800f378:	4807      	ldr	r0, [pc, #28]	; (800f398 <rcutils_reset_error+0x24>)
 800f37a:	4c08      	ldr	r4, [pc, #32]	; (800f39c <rcutils_reset_error+0x28>)
 800f37c:	4908      	ldr	r1, [pc, #32]	; (800f3a0 <rcutils_reset_error+0x2c>)
 800f37e:	2300      	movs	r3, #0
 800f380:	2600      	movs	r6, #0
 800f382:	2700      	movs	r7, #0
 800f384:	8013      	strh	r3, [r2, #0]
 800f386:	7003      	strb	r3, [r0, #0]
 800f388:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800f38c:	7023      	strb	r3, [r4, #0]
 800f38e:	700b      	strb	r3, [r1, #0]
 800f390:	bcd0      	pop	{r4, r6, r7}
 800f392:	4770      	bx	lr
 800f394:	20009f98 	.word	0x20009f98
 800f398:	20009f90 	.word	0x20009f90
 800f39c:	20009df1 	.word	0x20009df1
 800f3a0:	20009df0 	.word	0x20009df0

0800f3a4 <rcutils_get_zero_initialized_string_map>:
 800f3a4:	4b01      	ldr	r3, [pc, #4]	; (800f3ac <rcutils_get_zero_initialized_string_map+0x8>)
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	6018      	str	r0, [r3, #0]
 800f3aa:	4770      	bx	lr
 800f3ac:	20009df4 	.word	0x20009df4

0800f3b0 <rcutils_string_map_reserve>:
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d061      	beq.n	800f478 <rcutils_string_map_reserve+0xc8>
 800f3b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	6805      	ldr	r5, [r0, #0]
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	460c      	mov	r4, r1
 800f3be:	4606      	mov	r6, r0
 800f3c0:	b12d      	cbz	r5, 800f3ce <rcutils_string_map_reserve+0x1e>
 800f3c2:	68eb      	ldr	r3, [r5, #12]
 800f3c4:	42a3      	cmp	r3, r4
 800f3c6:	d906      	bls.n	800f3d6 <rcutils_string_map_reserve+0x26>
 800f3c8:	461c      	mov	r4, r3
 800f3ca:	2d00      	cmp	r5, #0
 800f3cc:	d1f9      	bne.n	800f3c2 <rcutils_string_map_reserve+0x12>
 800f3ce:	201f      	movs	r0, #31
 800f3d0:	b003      	add	sp, #12
 800f3d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3d6:	68ab      	ldr	r3, [r5, #8]
 800f3d8:	42a3      	cmp	r3, r4
 800f3da:	d049      	beq.n	800f470 <rcutils_string_map_reserve+0xc0>
 800f3dc:	6a2f      	ldr	r7, [r5, #32]
 800f3de:	2c00      	cmp	r4, #0
 800f3e0:	d035      	beq.n	800f44e <rcutils_string_map_reserve+0x9e>
 800f3e2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f3e6:	d245      	bcs.n	800f474 <rcutils_string_map_reserve+0xc4>
 800f3e8:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800f3ec:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800f3f0:	6828      	ldr	r0, [r5, #0]
 800f3f2:	4641      	mov	r1, r8
 800f3f4:	463a      	mov	r2, r7
 800f3f6:	47c8      	blx	r9
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	d03b      	beq.n	800f474 <rcutils_string_map_reserve+0xc4>
 800f3fc:	6833      	ldr	r3, [r6, #0]
 800f3fe:	463a      	mov	r2, r7
 800f400:	6018      	str	r0, [r3, #0]
 800f402:	4641      	mov	r1, r8
 800f404:	6858      	ldr	r0, [r3, #4]
 800f406:	47c8      	blx	r9
 800f408:	2800      	cmp	r0, #0
 800f40a:	d033      	beq.n	800f474 <rcutils_string_map_reserve+0xc4>
 800f40c:	6835      	ldr	r5, [r6, #0]
 800f40e:	68ab      	ldr	r3, [r5, #8]
 800f410:	6068      	str	r0, [r5, #4]
 800f412:	42a3      	cmp	r3, r4
 800f414:	d227      	bcs.n	800f466 <rcutils_string_map_reserve+0xb6>
 800f416:	682a      	ldr	r2, [r5, #0]
 800f418:	eb00 0108 	add.w	r1, r0, r8
 800f41c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800f420:	428f      	cmp	r7, r1
 800f422:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f426:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f42a:	d203      	bcs.n	800f434 <rcutils_string_map_reserve+0x84>
 800f42c:	eb02 0108 	add.w	r1, r2, r8
 800f430:	428e      	cmp	r6, r1
 800f432:	d323      	bcc.n	800f47c <rcutils_string_map_reserve+0xcc>
 800f434:	1ae3      	subs	r3, r4, r3
 800f436:	009a      	lsls	r2, r3, #2
 800f438:	4638      	mov	r0, r7
 800f43a:	2100      	movs	r1, #0
 800f43c:	9201      	str	r2, [sp, #4]
 800f43e:	f00a fb61 	bl	8019b04 <memset>
 800f442:	9a01      	ldr	r2, [sp, #4]
 800f444:	4630      	mov	r0, r6
 800f446:	2100      	movs	r1, #0
 800f448:	f00a fb5c 	bl	8019b04 <memset>
 800f44c:	e00b      	b.n	800f466 <rcutils_string_map_reserve+0xb6>
 800f44e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800f452:	6828      	ldr	r0, [r5, #0]
 800f454:	4639      	mov	r1, r7
 800f456:	47c0      	blx	r8
 800f458:	6833      	ldr	r3, [r6, #0]
 800f45a:	4639      	mov	r1, r7
 800f45c:	6858      	ldr	r0, [r3, #4]
 800f45e:	601c      	str	r4, [r3, #0]
 800f460:	47c0      	blx	r8
 800f462:	6835      	ldr	r5, [r6, #0]
 800f464:	606c      	str	r4, [r5, #4]
 800f466:	2000      	movs	r0, #0
 800f468:	60ac      	str	r4, [r5, #8]
 800f46a:	b003      	add	sp, #12
 800f46c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f470:	2000      	movs	r0, #0
 800f472:	e7ad      	b.n	800f3d0 <rcutils_string_map_reserve+0x20>
 800f474:	200a      	movs	r0, #10
 800f476:	e7ab      	b.n	800f3d0 <rcutils_string_map_reserve+0x20>
 800f478:	200b      	movs	r0, #11
 800f47a:	4770      	bx	lr
 800f47c:	1f13      	subs	r3, r2, #4
 800f47e:	f1ac 0c04 	sub.w	ip, ip, #4
 800f482:	4498      	add	r8, r3
 800f484:	4460      	add	r0, ip
 800f486:	4462      	add	r2, ip
 800f488:	2300      	movs	r3, #0
 800f48a:	f842 3f04 	str.w	r3, [r2, #4]!
 800f48e:	4542      	cmp	r2, r8
 800f490:	f840 3f04 	str.w	r3, [r0, #4]!
 800f494:	d1f9      	bne.n	800f48a <rcutils_string_map_reserve+0xda>
 800f496:	e7e6      	b.n	800f466 <rcutils_string_map_reserve+0xb6>

0800f498 <rcutils_string_map_init>:
 800f498:	b082      	sub	sp, #8
 800f49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49c:	460e      	mov	r6, r1
 800f49e:	a906      	add	r1, sp, #24
 800f4a0:	e881 000c 	stmia.w	r1, {r2, r3}
 800f4a4:	b380      	cbz	r0, 800f508 <rcutils_string_map_init+0x70>
 800f4a6:	6807      	ldr	r7, [r0, #0]
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	b12f      	cbz	r7, 800f4b8 <rcutils_string_map_init+0x20>
 800f4ac:	251e      	movs	r5, #30
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f4b4:	b002      	add	sp, #8
 800f4b6:	4770      	bx	lr
 800f4b8:	a806      	add	r0, sp, #24
 800f4ba:	f7ff ff37 	bl	800f32c <rcutils_allocator_is_valid>
 800f4be:	b318      	cbz	r0, 800f508 <rcutils_string_map_init+0x70>
 800f4c0:	9b06      	ldr	r3, [sp, #24]
 800f4c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f4c4:	2024      	movs	r0, #36	; 0x24
 800f4c6:	4798      	blx	r3
 800f4c8:	4605      	mov	r5, r0
 800f4ca:	6020      	str	r0, [r4, #0]
 800f4cc:	b310      	cbz	r0, 800f514 <rcutils_string_map_init+0x7c>
 800f4ce:	f10d 0e18 	add.w	lr, sp, #24
 800f4d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4d6:	f105 0c10 	add.w	ip, r5, #16
 800f4da:	e9c5 7700 	strd	r7, r7, [r5]
 800f4de:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800f4e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4e6:	f8de 3000 	ldr.w	r3, [lr]
 800f4ea:	f8cc 3000 	str.w	r3, [ip]
 800f4ee:	4631      	mov	r1, r6
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f7ff ff5d 	bl	800f3b0 <rcutils_string_map_reserve>
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d0d8      	beq.n	800f4ae <rcutils_string_map_init+0x16>
 800f4fc:	9b07      	ldr	r3, [sp, #28]
 800f4fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f500:	6820      	ldr	r0, [r4, #0]
 800f502:	4798      	blx	r3
 800f504:	6027      	str	r7, [r4, #0]
 800f506:	e7d2      	b.n	800f4ae <rcutils_string_map_init+0x16>
 800f508:	250b      	movs	r5, #11
 800f50a:	4628      	mov	r0, r5
 800f50c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f510:	b002      	add	sp, #8
 800f512:	4770      	bx	lr
 800f514:	250a      	movs	r5, #10
 800f516:	e7ca      	b.n	800f4ae <rcutils_string_map_init+0x16>

0800f518 <rcutils_string_map_fini>:
 800f518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f51c:	b082      	sub	sp, #8
 800f51e:	2800      	cmp	r0, #0
 800f520:	d039      	beq.n	800f596 <rcutils_string_map_fini+0x7e>
 800f522:	6804      	ldr	r4, [r0, #0]
 800f524:	4606      	mov	r6, r0
 800f526:	2c00      	cmp	r4, #0
 800f528:	d031      	beq.n	800f58e <rcutils_string_map_fini+0x76>
 800f52a:	68a3      	ldr	r3, [r4, #8]
 800f52c:	b323      	cbz	r3, 800f578 <rcutils_string_map_fini+0x60>
 800f52e:	2500      	movs	r5, #0
 800f530:	6822      	ldr	r2, [r4, #0]
 800f532:	46a8      	mov	r8, r5
 800f534:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f538:	b1d8      	cbz	r0, 800f572 <rcutils_string_map_fini+0x5a>
 800f53a:	6a21      	ldr	r1, [r4, #32]
 800f53c:	6967      	ldr	r7, [r4, #20]
 800f53e:	9101      	str	r1, [sp, #4]
 800f540:	47b8      	blx	r7
 800f542:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f546:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f54a:	9901      	ldr	r1, [sp, #4]
 800f54c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f550:	47b8      	blx	r7
 800f552:	68e3      	ldr	r3, [r4, #12]
 800f554:	6862      	ldr	r2, [r4, #4]
 800f556:	3b01      	subs	r3, #1
 800f558:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f55c:	60e3      	str	r3, [r4, #12]
 800f55e:	6834      	ldr	r4, [r6, #0]
 800f560:	68a3      	ldr	r3, [r4, #8]
 800f562:	3501      	adds	r5, #1
 800f564:	429d      	cmp	r5, r3
 800f566:	d207      	bcs.n	800f578 <rcutils_string_map_fini+0x60>
 800f568:	6822      	ldr	r2, [r4, #0]
 800f56a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f56e:	2800      	cmp	r0, #0
 800f570:	d1e3      	bne.n	800f53a <rcutils_string_map_fini+0x22>
 800f572:	3501      	adds	r5, #1
 800f574:	429d      	cmp	r5, r3
 800f576:	d3dd      	bcc.n	800f534 <rcutils_string_map_fini+0x1c>
 800f578:	2100      	movs	r1, #0
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7ff ff18 	bl	800f3b0 <rcutils_string_map_reserve>
 800f580:	4604      	mov	r4, r0
 800f582:	b920      	cbnz	r0, 800f58e <rcutils_string_map_fini+0x76>
 800f584:	6830      	ldr	r0, [r6, #0]
 800f586:	6943      	ldr	r3, [r0, #20]
 800f588:	6a01      	ldr	r1, [r0, #32]
 800f58a:	4798      	blx	r3
 800f58c:	6034      	str	r4, [r6, #0]
 800f58e:	4620      	mov	r0, r4
 800f590:	b002      	add	sp, #8
 800f592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f596:	240b      	movs	r4, #11
 800f598:	4620      	mov	r0, r4
 800f59a:	b002      	add	sp, #8
 800f59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f5a0 <rcutils_string_map_getn>:
 800f5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a4:	b082      	sub	sp, #8
 800f5a6:	b308      	cbz	r0, 800f5ec <rcutils_string_map_getn+0x4c>
 800f5a8:	6804      	ldr	r4, [r0, #0]
 800f5aa:	b304      	cbz	r4, 800f5ee <rcutils_string_map_getn+0x4e>
 800f5ac:	460d      	mov	r5, r1
 800f5ae:	b1e9      	cbz	r1, 800f5ec <rcutils_string_map_getn+0x4c>
 800f5b0:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800f5b4:	6827      	ldr	r7, [r4, #0]
 800f5b6:	f1b9 0f00 	cmp.w	r9, #0
 800f5ba:	d017      	beq.n	800f5ec <rcutils_string_map_getn+0x4c>
 800f5bc:	4690      	mov	r8, r2
 800f5be:	3f04      	subs	r7, #4
 800f5c0:	2600      	movs	r6, #0
 800f5c2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800f5c6:	9101      	str	r1, [sp, #4]
 800f5c8:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800f5cc:	4608      	mov	r0, r1
 800f5ce:	3601      	adds	r6, #1
 800f5d0:	b151      	cbz	r1, 800f5e8 <rcutils_string_map_getn+0x48>
 800f5d2:	f7f0 fe0f 	bl	80001f4 <strlen>
 800f5d6:	4540      	cmp	r0, r8
 800f5d8:	4602      	mov	r2, r0
 800f5da:	9901      	ldr	r1, [sp, #4]
 800f5dc:	bf38      	it	cc
 800f5de:	4642      	movcc	r2, r8
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	f00b fc35 	bl	801ae50 <strncmp>
 800f5e6:	b130      	cbz	r0, 800f5f6 <rcutils_string_map_getn+0x56>
 800f5e8:	45b1      	cmp	r9, r6
 800f5ea:	d1ea      	bne.n	800f5c2 <rcutils_string_map_getn+0x22>
 800f5ec:	2400      	movs	r4, #0
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	b002      	add	sp, #8
 800f5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f6:	6863      	ldr	r3, [r4, #4]
 800f5f8:	f853 400a 	ldr.w	r4, [r3, sl]
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	b002      	add	sp, #8
 800f600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f604 <rcutils_system_time_now>:
 800f604:	b310      	cbz	r0, 800f64c <rcutils_system_time_now+0x48>
 800f606:	b570      	push	{r4, r5, r6, lr}
 800f608:	b084      	sub	sp, #16
 800f60a:	4669      	mov	r1, sp
 800f60c:	4604      	mov	r4, r0
 800f60e:	2001      	movs	r0, #1
 800f610:	f7f3 ff52 	bl	80034b8 <clock_gettime>
 800f614:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f618:	2800      	cmp	r0, #0
 800f61a:	f171 0300 	sbcs.w	r3, r1, #0
 800f61e:	db12      	blt.n	800f646 <rcutils_system_time_now+0x42>
 800f620:	9d02      	ldr	r5, [sp, #8]
 800f622:	2d00      	cmp	r5, #0
 800f624:	db0c      	blt.n	800f640 <rcutils_system_time_now+0x3c>
 800f626:	4e0a      	ldr	r6, [pc, #40]	; (800f650 <rcutils_system_time_now+0x4c>)
 800f628:	fba0 2306 	umull	r2, r3, r0, r6
 800f62c:	1952      	adds	r2, r2, r5
 800f62e:	fb06 3301 	mla	r3, r6, r1, r3
 800f632:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800f636:	2000      	movs	r0, #0
 800f638:	e9c4 2300 	strd	r2, r3, [r4]
 800f63c:	b004      	add	sp, #16
 800f63e:	bd70      	pop	{r4, r5, r6, pc}
 800f640:	ea50 0301 	orrs.w	r3, r0, r1
 800f644:	d1ef      	bne.n	800f626 <rcutils_system_time_now+0x22>
 800f646:	2002      	movs	r0, #2
 800f648:	b004      	add	sp, #16
 800f64a:	bd70      	pop	{r4, r5, r6, pc}
 800f64c:	200b      	movs	r0, #11
 800f64e:	4770      	bx	lr
 800f650:	3b9aca00 	.word	0x3b9aca00

0800f654 <rcutils_steady_time_now>:
 800f654:	b310      	cbz	r0, 800f69c <rcutils_steady_time_now+0x48>
 800f656:	b570      	push	{r4, r5, r6, lr}
 800f658:	b084      	sub	sp, #16
 800f65a:	4669      	mov	r1, sp
 800f65c:	4604      	mov	r4, r0
 800f65e:	2000      	movs	r0, #0
 800f660:	f7f3 ff2a 	bl	80034b8 <clock_gettime>
 800f664:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f668:	2800      	cmp	r0, #0
 800f66a:	f171 0300 	sbcs.w	r3, r1, #0
 800f66e:	db12      	blt.n	800f696 <rcutils_steady_time_now+0x42>
 800f670:	9d02      	ldr	r5, [sp, #8]
 800f672:	2d00      	cmp	r5, #0
 800f674:	db0c      	blt.n	800f690 <rcutils_steady_time_now+0x3c>
 800f676:	4e0a      	ldr	r6, [pc, #40]	; (800f6a0 <rcutils_steady_time_now+0x4c>)
 800f678:	fba0 2306 	umull	r2, r3, r0, r6
 800f67c:	1952      	adds	r2, r2, r5
 800f67e:	fb06 3301 	mla	r3, r6, r1, r3
 800f682:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800f686:	2000      	movs	r0, #0
 800f688:	e9c4 2300 	strd	r2, r3, [r4]
 800f68c:	b004      	add	sp, #16
 800f68e:	bd70      	pop	{r4, r5, r6, pc}
 800f690:	ea50 0301 	orrs.w	r3, r0, r1
 800f694:	d1ef      	bne.n	800f676 <rcutils_steady_time_now+0x22>
 800f696:	2002      	movs	r0, #2
 800f698:	b004      	add	sp, #16
 800f69a:	bd70      	pop	{r4, r5, r6, pc}
 800f69c:	200b      	movs	r0, #11
 800f69e:	4770      	bx	lr
 800f6a0:	3b9aca00 	.word	0x3b9aca00

0800f6a4 <rmw_get_zero_initialized_init_options>:
 800f6a4:	b510      	push	{r4, lr}
 800f6a6:	2238      	movs	r2, #56	; 0x38
 800f6a8:	4604      	mov	r4, r0
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	f00a fa2a 	bl	8019b04 <memset>
 800f6b0:	f104 0010 	add.w	r0, r4, #16
 800f6b4:	f000 f808 	bl	800f6c8 <rmw_get_default_security_options>
 800f6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6bc:	60e3      	str	r3, [r4, #12]
 800f6be:	4620      	mov	r0, r4
 800f6c0:	bd10      	pop	{r4, pc}
 800f6c2:	bf00      	nop

0800f6c4 <rmw_get_default_publisher_options>:
 800f6c4:	2000      	movs	r0, #0
 800f6c6:	4770      	bx	lr

0800f6c8 <rmw_get_default_security_options>:
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	7002      	strb	r2, [r0, #0]
 800f6cc:	6042      	str	r2, [r0, #4]
 800f6ce:	4770      	bx	lr

0800f6d0 <rmw_validate_full_topic_name>:
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	d062      	beq.n	800f79a <rmw_validate_full_topic_name+0xca>
 800f6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d8:	460d      	mov	r5, r1
 800f6da:	2900      	cmp	r1, #0
 800f6dc:	d05f      	beq.n	800f79e <rmw_validate_full_topic_name+0xce>
 800f6de:	4616      	mov	r6, r2
 800f6e0:	4604      	mov	r4, r0
 800f6e2:	f7f0 fd87 	bl	80001f4 <strlen>
 800f6e6:	b148      	cbz	r0, 800f6fc <rmw_validate_full_topic_name+0x2c>
 800f6e8:	7823      	ldrb	r3, [r4, #0]
 800f6ea:	2b2f      	cmp	r3, #47	; 0x2f
 800f6ec:	d00d      	beq.n	800f70a <rmw_validate_full_topic_name+0x3a>
 800f6ee:	2302      	movs	r3, #2
 800f6f0:	602b      	str	r3, [r5, #0]
 800f6f2:	b13e      	cbz	r6, 800f704 <rmw_validate_full_topic_name+0x34>
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	6030      	str	r0, [r6, #0]
 800f6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	602b      	str	r3, [r5, #0]
 800f700:	2e00      	cmp	r6, #0
 800f702:	d1f7      	bne.n	800f6f4 <rmw_validate_full_topic_name+0x24>
 800f704:	2000      	movs	r0, #0
 800f706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f70a:	1e47      	subs	r7, r0, #1
 800f70c:	5de3      	ldrb	r3, [r4, r7]
 800f70e:	2b2f      	cmp	r3, #47	; 0x2f
 800f710:	d047      	beq.n	800f7a2 <rmw_validate_full_topic_name+0xd2>
 800f712:	1e63      	subs	r3, r4, #1
 800f714:	eb03 0900 	add.w	r9, r3, r0
 800f718:	f1c4 0e01 	rsb	lr, r4, #1
 800f71c:	eb0e 0803 	add.w	r8, lr, r3
 800f720:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f724:	f021 0220 	bic.w	r2, r1, #32
 800f728:	3a41      	subs	r2, #65	; 0x41
 800f72a:	2a19      	cmp	r2, #25
 800f72c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800f730:	d90c      	bls.n	800f74c <rmw_validate_full_topic_name+0x7c>
 800f732:	295f      	cmp	r1, #95	; 0x5f
 800f734:	d00a      	beq.n	800f74c <rmw_validate_full_topic_name+0x7c>
 800f736:	f1bc 0f0a 	cmp.w	ip, #10
 800f73a:	d907      	bls.n	800f74c <rmw_validate_full_topic_name+0x7c>
 800f73c:	2304      	movs	r3, #4
 800f73e:	602b      	str	r3, [r5, #0]
 800f740:	2e00      	cmp	r6, #0
 800f742:	d0df      	beq.n	800f704 <rmw_validate_full_topic_name+0x34>
 800f744:	f8c6 8000 	str.w	r8, [r6]
 800f748:	2000      	movs	r0, #0
 800f74a:	e7d5      	b.n	800f6f8 <rmw_validate_full_topic_name+0x28>
 800f74c:	454b      	cmp	r3, r9
 800f74e:	d1e5      	bne.n	800f71c <rmw_validate_full_topic_name+0x4c>
 800f750:	f8df e084 	ldr.w	lr, [pc, #132]	; 800f7d8 <rmw_validate_full_topic_name+0x108>
 800f754:	2300      	movs	r3, #0
 800f756:	f107 0801 	add.w	r8, r7, #1
 800f75a:	e005      	b.n	800f768 <rmw_validate_full_topic_name+0x98>
 800f75c:	4611      	mov	r1, r2
 800f75e:	4288      	cmp	r0, r1
 800f760:	4613      	mov	r3, r2
 800f762:	f104 0401 	add.w	r4, r4, #1
 800f766:	d925      	bls.n	800f7b4 <rmw_validate_full_topic_name+0xe4>
 800f768:	429f      	cmp	r7, r3
 800f76a:	f103 0201 	add.w	r2, r3, #1
 800f76e:	d01e      	beq.n	800f7ae <rmw_validate_full_topic_name+0xde>
 800f770:	7821      	ldrb	r1, [r4, #0]
 800f772:	292f      	cmp	r1, #47	; 0x2f
 800f774:	d1f2      	bne.n	800f75c <rmw_validate_full_topic_name+0x8c>
 800f776:	f894 c001 	ldrb.w	ip, [r4, #1]
 800f77a:	1c5a      	adds	r2, r3, #1
 800f77c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800f780:	4611      	mov	r1, r2
 800f782:	d024      	beq.n	800f7ce <rmw_validate_full_topic_name+0xfe>
 800f784:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800f788:	075b      	lsls	r3, r3, #29
 800f78a:	d5e8      	bpl.n	800f75e <rmw_validate_full_topic_name+0x8e>
 800f78c:	2306      	movs	r3, #6
 800f78e:	602b      	str	r3, [r5, #0]
 800f790:	2e00      	cmp	r6, #0
 800f792:	d0b7      	beq.n	800f704 <rmw_validate_full_topic_name+0x34>
 800f794:	6032      	str	r2, [r6, #0]
 800f796:	2000      	movs	r0, #0
 800f798:	e7ae      	b.n	800f6f8 <rmw_validate_full_topic_name+0x28>
 800f79a:	200b      	movs	r0, #11
 800f79c:	4770      	bx	lr
 800f79e:	200b      	movs	r0, #11
 800f7a0:	e7aa      	b.n	800f6f8 <rmw_validate_full_topic_name+0x28>
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	602b      	str	r3, [r5, #0]
 800f7a6:	2e00      	cmp	r6, #0
 800f7a8:	d0ac      	beq.n	800f704 <rmw_validate_full_topic_name+0x34>
 800f7aa:	6037      	str	r7, [r6, #0]
 800f7ac:	e7aa      	b.n	800f704 <rmw_validate_full_topic_name+0x34>
 800f7ae:	4641      	mov	r1, r8
 800f7b0:	1c7a      	adds	r2, r7, #1
 800f7b2:	e7d4      	b.n	800f75e <rmw_validate_full_topic_name+0x8e>
 800f7b4:	28f7      	cmp	r0, #247	; 0xf7
 800f7b6:	d802      	bhi.n	800f7be <rmw_validate_full_topic_name+0xee>
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	6028      	str	r0, [r5, #0]
 800f7bc:	e79c      	b.n	800f6f8 <rmw_validate_full_topic_name+0x28>
 800f7be:	2307      	movs	r3, #7
 800f7c0:	602b      	str	r3, [r5, #0]
 800f7c2:	2e00      	cmp	r6, #0
 800f7c4:	d09e      	beq.n	800f704 <rmw_validate_full_topic_name+0x34>
 800f7c6:	23f6      	movs	r3, #246	; 0xf6
 800f7c8:	6033      	str	r3, [r6, #0]
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	e794      	b.n	800f6f8 <rmw_validate_full_topic_name+0x28>
 800f7ce:	2305      	movs	r3, #5
 800f7d0:	602b      	str	r3, [r5, #0]
 800f7d2:	2e00      	cmp	r6, #0
 800f7d4:	d1de      	bne.n	800f794 <rmw_validate_full_topic_name+0xc4>
 800f7d6:	e795      	b.n	800f704 <rmw_validate_full_topic_name+0x34>
 800f7d8:	0801f331 	.word	0x0801f331

0800f7dc <rmw_uros_set_custom_transport>:
 800f7dc:	b470      	push	{r4, r5, r6}
 800f7de:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f7e2:	b162      	cbz	r2, 800f7fe <rmw_uros_set_custom_transport+0x22>
 800f7e4:	b15b      	cbz	r3, 800f7fe <rmw_uros_set_custom_transport+0x22>
 800f7e6:	b155      	cbz	r5, 800f7fe <rmw_uros_set_custom_transport+0x22>
 800f7e8:	b14e      	cbz	r6, 800f7fe <rmw_uros_set_custom_transport+0x22>
 800f7ea:	4c06      	ldr	r4, [pc, #24]	; (800f804 <rmw_uros_set_custom_transport+0x28>)
 800f7ec:	7020      	strb	r0, [r4, #0]
 800f7ee:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f7f2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f7f6:	6166      	str	r6, [r4, #20]
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	bc70      	pop	{r4, r5, r6}
 800f7fc:	4770      	bx	lr
 800f7fe:	200b      	movs	r0, #11
 800f800:	bc70      	pop	{r4, r5, r6}
 800f802:	4770      	bx	lr
 800f804:	20009fa8 	.word	0x20009fa8

0800f808 <rmw_init_options_init>:
 800f808:	b084      	sub	sp, #16
 800f80a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f80e:	ad09      	add	r5, sp, #36	; 0x24
 800f810:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f814:	b130      	cbz	r0, 800f824 <rmw_init_options_init+0x1c>
 800f816:	4604      	mov	r4, r0
 800f818:	4628      	mov	r0, r5
 800f81a:	f7ff fd87 	bl	800f32c <rcutils_allocator_is_valid>
 800f81e:	b108      	cbz	r0, 800f824 <rmw_init_options_init+0x1c>
 800f820:	68a3      	ldr	r3, [r4, #8]
 800f822:	b123      	cbz	r3, 800f82e <rmw_init_options_init+0x26>
 800f824:	200b      	movs	r0, #11
 800f826:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f82a:	b004      	add	sp, #16
 800f82c:	4770      	bx	lr
 800f82e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f830:	4f1c      	ldr	r7, [pc, #112]	; (800f8a4 <rmw_init_options_init+0x9c>)
 800f832:	682e      	ldr	r6, [r5, #0]
 800f834:	683d      	ldr	r5, [r7, #0]
 800f836:	60a5      	str	r5, [r4, #8]
 800f838:	f04f 0800 	mov.w	r8, #0
 800f83c:	f04f 0900 	mov.w	r9, #0
 800f840:	f104 0520 	add.w	r5, r4, #32
 800f844:	e9c4 8900 	strd	r8, r9, [r4]
 800f848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f84a:	4b17      	ldr	r3, [pc, #92]	; (800f8a8 <rmw_init_options_init+0xa0>)
 800f84c:	4817      	ldr	r0, [pc, #92]	; (800f8ac <rmw_init_options_init+0xa4>)
 800f84e:	602e      	str	r6, [r5, #0]
 800f850:	4917      	ldr	r1, [pc, #92]	; (800f8b0 <rmw_init_options_init+0xa8>)
 800f852:	61e3      	str	r3, [r4, #28]
 800f854:	2203      	movs	r2, #3
 800f856:	f000 ff37 	bl	80106c8 <rmw_uxrce_init_init_options_impl_memory>
 800f85a:	4814      	ldr	r0, [pc, #80]	; (800f8ac <rmw_init_options_init+0xa4>)
 800f85c:	f007 fc92 	bl	8017184 <get_memory>
 800f860:	b1e8      	cbz	r0, 800f89e <rmw_init_options_init+0x96>
 800f862:	4a14      	ldr	r2, [pc, #80]	; (800f8b4 <rmw_init_options_init+0xac>)
 800f864:	68c3      	ldr	r3, [r0, #12]
 800f866:	6851      	ldr	r1, [r2, #4]
 800f868:	7810      	ldrb	r0, [r2, #0]
 800f86a:	6363      	str	r3, [r4, #52]	; 0x34
 800f86c:	7418      	strb	r0, [r3, #16]
 800f86e:	6159      	str	r1, [r3, #20]
 800f870:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800f874:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800f878:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800f87c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800f880:	f003 fdd4 	bl	801342c <uxr_nanos>
 800f884:	f00b f944 	bl	801ab10 <srand>
 800f888:	f00b f970 	bl	801ab6c <rand>
 800f88c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f88e:	6298      	str	r0, [r3, #40]	; 0x28
 800f890:	2800      	cmp	r0, #0
 800f892:	d0f9      	beq.n	800f888 <rmw_init_options_init+0x80>
 800f894:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f898:	2000      	movs	r0, #0
 800f89a:	b004      	add	sp, #16
 800f89c:	4770      	bx	lr
 800f89e:	2001      	movs	r0, #1
 800f8a0:	e7c1      	b.n	800f826 <rmw_init_options_init+0x1e>
 800f8a2:	bf00      	nop
 800f8a4:	0801f314 	.word	0x0801f314
 800f8a8:	0801eb80 	.word	0x0801eb80
 800f8ac:	2000d2c4 	.word	0x2000d2c4
 800f8b0:	2000cf18 	.word	0x2000cf18
 800f8b4:	20009fa8 	.word	0x20009fa8

0800f8b8 <rmw_init_options_copy>:
 800f8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ba:	b158      	cbz	r0, 800f8d4 <rmw_init_options_copy+0x1c>
 800f8bc:	460e      	mov	r6, r1
 800f8be:	b149      	cbz	r1, 800f8d4 <rmw_init_options_copy+0x1c>
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	6880      	ldr	r0, [r0, #8]
 800f8c4:	b120      	cbz	r0, 800f8d0 <rmw_init_options_copy+0x18>
 800f8c6:	4b1b      	ldr	r3, [pc, #108]	; (800f934 <rmw_init_options_copy+0x7c>)
 800f8c8:	6819      	ldr	r1, [r3, #0]
 800f8ca:	f7f0 fc89 	bl	80001e0 <strcmp>
 800f8ce:	bb60      	cbnz	r0, 800f92a <rmw_init_options_copy+0x72>
 800f8d0:	68b3      	ldr	r3, [r6, #8]
 800f8d2:	b113      	cbz	r3, 800f8da <rmw_init_options_copy+0x22>
 800f8d4:	230b      	movs	r3, #11
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8da:	4623      	mov	r3, r4
 800f8dc:	4632      	mov	r2, r6
 800f8de:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800f8e2:	681d      	ldr	r5, [r3, #0]
 800f8e4:	6858      	ldr	r0, [r3, #4]
 800f8e6:	6899      	ldr	r1, [r3, #8]
 800f8e8:	68df      	ldr	r7, [r3, #12]
 800f8ea:	60d7      	str	r7, [r2, #12]
 800f8ec:	3310      	adds	r3, #16
 800f8ee:	4563      	cmp	r3, ip
 800f8f0:	6015      	str	r5, [r2, #0]
 800f8f2:	6050      	str	r0, [r2, #4]
 800f8f4:	6091      	str	r1, [r2, #8]
 800f8f6:	f102 0210 	add.w	r2, r2, #16
 800f8fa:	d1f2      	bne.n	800f8e2 <rmw_init_options_copy+0x2a>
 800f8fc:	6819      	ldr	r1, [r3, #0]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	480d      	ldr	r0, [pc, #52]	; (800f938 <rmw_init_options_copy+0x80>)
 800f902:	6053      	str	r3, [r2, #4]
 800f904:	6011      	str	r1, [r2, #0]
 800f906:	f007 fc3d 	bl	8017184 <get_memory>
 800f90a:	b188      	cbz	r0, 800f930 <rmw_init_options_copy+0x78>
 800f90c:	68c5      	ldr	r5, [r0, #12]
 800f90e:	6375      	str	r5, [r6, #52]	; 0x34
 800f910:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800f912:	3610      	adds	r6, #16
 800f914:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f916:	f105 0410 	add.w	r4, r5, #16
 800f91a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f91c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f920:	2300      	movs	r3, #0
 800f922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f926:	4618      	mov	r0, r3
 800f928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f92a:	230c      	movs	r3, #12
 800f92c:	4618      	mov	r0, r3
 800f92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f930:	2301      	movs	r3, #1
 800f932:	e7d0      	b.n	800f8d6 <rmw_init_options_copy+0x1e>
 800f934:	0801f314 	.word	0x0801f314
 800f938:	2000d2c4 	.word	0x2000d2c4

0800f93c <rmw_init_options_fini>:
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d036      	beq.n	800f9ae <rmw_init_options_fini+0x72>
 800f940:	b530      	push	{r4, r5, lr}
 800f942:	4604      	mov	r4, r0
 800f944:	b08f      	sub	sp, #60	; 0x3c
 800f946:	3020      	adds	r0, #32
 800f948:	f7ff fcf0 	bl	800f32c <rcutils_allocator_is_valid>
 800f94c:	b328      	cbz	r0, 800f99a <rmw_init_options_fini+0x5e>
 800f94e:	68a0      	ldr	r0, [r4, #8]
 800f950:	b120      	cbz	r0, 800f95c <rmw_init_options_fini+0x20>
 800f952:	4b18      	ldr	r3, [pc, #96]	; (800f9b4 <rmw_init_options_fini+0x78>)
 800f954:	6819      	ldr	r1, [r3, #0]
 800f956:	f7f0 fc43 	bl	80001e0 <strcmp>
 800f95a:	bb30      	cbnz	r0, 800f9aa <rmw_init_options_fini+0x6e>
 800f95c:	4b16      	ldr	r3, [pc, #88]	; (800f9b8 <rmw_init_options_fini+0x7c>)
 800f95e:	6819      	ldr	r1, [r3, #0]
 800f960:	b1f9      	cbz	r1, 800f9a2 <rmw_init_options_fini+0x66>
 800f962:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f964:	e001      	b.n	800f96a <rmw_init_options_fini+0x2e>
 800f966:	6889      	ldr	r1, [r1, #8]
 800f968:	b1d9      	cbz	r1, 800f9a2 <rmw_init_options_fini+0x66>
 800f96a:	68cb      	ldr	r3, [r1, #12]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d1fa      	bne.n	800f966 <rmw_init_options_fini+0x2a>
 800f970:	4811      	ldr	r0, [pc, #68]	; (800f9b8 <rmw_init_options_fini+0x7c>)
 800f972:	f007 fc17 	bl	80171a4 <put_memory>
 800f976:	466d      	mov	r5, sp
 800f978:	4668      	mov	r0, sp
 800f97a:	f7ff fe93 	bl	800f6a4 <rmw_get_zero_initialized_init_options>
 800f97e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f98a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f98e:	e884 0003 	stmia.w	r4, {r0, r1}
 800f992:	2300      	movs	r3, #0
 800f994:	4618      	mov	r0, r3
 800f996:	b00f      	add	sp, #60	; 0x3c
 800f998:	bd30      	pop	{r4, r5, pc}
 800f99a:	230b      	movs	r3, #11
 800f99c:	4618      	mov	r0, r3
 800f99e:	b00f      	add	sp, #60	; 0x3c
 800f9a0:	bd30      	pop	{r4, r5, pc}
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	b00f      	add	sp, #60	; 0x3c
 800f9a8:	bd30      	pop	{r4, r5, pc}
 800f9aa:	230c      	movs	r3, #12
 800f9ac:	e7f2      	b.n	800f994 <rmw_init_options_fini+0x58>
 800f9ae:	230b      	movs	r3, #11
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	4770      	bx	lr
 800f9b4:	0801f314 	.word	0x0801f314
 800f9b8:	2000d2c4 	.word	0x2000d2c4

0800f9bc <rmw_init>:
 800f9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9c0:	b082      	sub	sp, #8
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	f000 80d6 	beq.w	800fb74 <rmw_init+0x1b8>
 800f9c8:	460e      	mov	r6, r1
 800f9ca:	2900      	cmp	r1, #0
 800f9cc:	f000 80d2 	beq.w	800fb74 <rmw_init+0x1b8>
 800f9d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f9d2:	4605      	mov	r5, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f000 80cd 	beq.w	800fb74 <rmw_init+0x1b8>
 800f9da:	4b79      	ldr	r3, [pc, #484]	; (800fbc0 <rmw_init+0x204>)
 800f9dc:	6880      	ldr	r0, [r0, #8]
 800f9de:	f8d3 9000 	ldr.w	r9, [r3]
 800f9e2:	b128      	cbz	r0, 800f9f0 <rmw_init+0x34>
 800f9e4:	4649      	mov	r1, r9
 800f9e6:	f7f0 fbfb 	bl	80001e0 <strcmp>
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	f040 80cc 	bne.w	800fb88 <rmw_init+0x1cc>
 800f9f0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f9f4:	68eb      	ldr	r3, [r5, #12]
 800f9f6:	61f3      	str	r3, [r6, #28]
 800f9f8:	e9c6 0100 	strd	r0, r1, [r6]
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	4971      	ldr	r1, [pc, #452]	; (800fbc4 <rmw_init+0x208>)
 800fa00:	4871      	ldr	r0, [pc, #452]	; (800fbc8 <rmw_init+0x20c>)
 800fa02:	f8c6 9008 	str.w	r9, [r6, #8]
 800fa06:	f000 fe07 	bl	8010618 <rmw_uxrce_init_session_memory>
 800fa0a:	4870      	ldr	r0, [pc, #448]	; (800fbcc <rmw_init+0x210>)
 800fa0c:	4970      	ldr	r1, [pc, #448]	; (800fbd0 <rmw_init+0x214>)
 800fa0e:	2204      	movs	r2, #4
 800fa10:	f000 fe3c 	bl	801068c <rmw_uxrce_init_static_input_buffer_memory>
 800fa14:	486c      	ldr	r0, [pc, #432]	; (800fbc8 <rmw_init+0x20c>)
 800fa16:	f007 fbb5 	bl	8017184 <get_memory>
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	f000 80af 	beq.w	800fb7e <rmw_init+0x1c2>
 800fa20:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800fa22:	68c4      	ldr	r4, [r0, #12]
 800fa24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa26:	7c39      	ldrb	r1, [r7, #16]
 800fa28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fa2c:	9001      	str	r0, [sp, #4]
 800fa2e:	6a38      	ldr	r0, [r7, #32]
 800fa30:	9000      	str	r0, [sp, #0]
 800fa32:	f104 0a10 	add.w	sl, r4, #16
 800fa36:	4650      	mov	r0, sl
 800fa38:	f001 fca0 	bl	801137c <uxr_set_custom_transport_callbacks>
 800fa3c:	f241 5294 	movw	r2, #5524	; 0x1594
 800fa40:	f241 5398 	movw	r3, #5528	; 0x1598
 800fa44:	f04f 0800 	mov.w	r8, #0
 800fa48:	f241 509c 	movw	r0, #5532	; 0x159c
 800fa4c:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800fa50:	f844 8002 	str.w	r8, [r4, r2]
 800fa54:	f844 8003 	str.w	r8, [r4, r3]
 800fa58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fa5c:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800fa60:	f844 8000 	str.w	r8, [r4, r0]
 800fa64:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800fa68:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800fa6c:	4859      	ldr	r0, [pc, #356]	; (800fbd4 <rmw_init+0x218>)
 800fa6e:	f8c1 8000 	str.w	r8, [r1]
 800fa72:	2201      	movs	r2, #1
 800fa74:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 800fa78:	4957      	ldr	r1, [pc, #348]	; (800fbd8 <rmw_init+0x21c>)
 800fa7a:	64b4      	str	r4, [r6, #72]	; 0x48
 800fa7c:	f000 fdb2 	bl	80105e4 <rmw_uxrce_init_node_memory>
 800fa80:	4956      	ldr	r1, [pc, #344]	; (800fbdc <rmw_init+0x220>)
 800fa82:	4857      	ldr	r0, [pc, #348]	; (800fbe0 <rmw_init+0x224>)
 800fa84:	2205      	movs	r2, #5
 800fa86:	f000 fd93 	bl	80105b0 <rmw_uxrce_init_subscription_memory>
 800fa8a:	4956      	ldr	r1, [pc, #344]	; (800fbe4 <rmw_init+0x228>)
 800fa8c:	4856      	ldr	r0, [pc, #344]	; (800fbe8 <rmw_init+0x22c>)
 800fa8e:	220a      	movs	r2, #10
 800fa90:	f000 fd74 	bl	801057c <rmw_uxrce_init_publisher_memory>
 800fa94:	4955      	ldr	r1, [pc, #340]	; (800fbec <rmw_init+0x230>)
 800fa96:	4856      	ldr	r0, [pc, #344]	; (800fbf0 <rmw_init+0x234>)
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f000 fd3b 	bl	8010514 <rmw_uxrce_init_service_memory>
 800fa9e:	4955      	ldr	r1, [pc, #340]	; (800fbf4 <rmw_init+0x238>)
 800faa0:	4855      	ldr	r0, [pc, #340]	; (800fbf8 <rmw_init+0x23c>)
 800faa2:	2201      	movs	r2, #1
 800faa4:	f000 fd50 	bl	8010548 <rmw_uxrce_init_client_memory>
 800faa8:	4954      	ldr	r1, [pc, #336]	; (800fbfc <rmw_init+0x240>)
 800faaa:	4855      	ldr	r0, [pc, #340]	; (800fc00 <rmw_init+0x244>)
 800faac:	220f      	movs	r2, #15
 800faae:	f000 fdd1 	bl	8010654 <rmw_uxrce_init_topic_memory>
 800fab2:	4954      	ldr	r1, [pc, #336]	; (800fc04 <rmw_init+0x248>)
 800fab4:	4854      	ldr	r0, [pc, #336]	; (800fc08 <rmw_init+0x24c>)
 800fab6:	2203      	movs	r2, #3
 800fab8:	f000 fe06 	bl	80106c8 <rmw_uxrce_init_init_options_impl_memory>
 800fabc:	4953      	ldr	r1, [pc, #332]	; (800fc0c <rmw_init+0x250>)
 800fabe:	4854      	ldr	r0, [pc, #336]	; (800fc10 <rmw_init+0x254>)
 800fac0:	2204      	movs	r2, #4
 800fac2:	f000 fe1b 	bl	80106fc <rmw_uxrce_init_wait_set_memory>
 800fac6:	4953      	ldr	r1, [pc, #332]	; (800fc14 <rmw_init+0x258>)
 800fac8:	4853      	ldr	r0, [pc, #332]	; (800fc18 <rmw_init+0x25c>)
 800faca:	2204      	movs	r2, #4
 800facc:	f000 fe32 	bl	8010734 <rmw_uxrce_init_guard_condition_memory>
 800fad0:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800fad2:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800fad4:	4642      	mov	r2, r8
 800fad6:	f000 fd05 	bl	80104e4 <rmw_uxrce_transport_init>
 800fada:	4607      	mov	r7, r0
 800fadc:	2800      	cmp	r0, #0
 800fade:	d158      	bne.n	800fb92 <rmw_init+0x1d6>
 800fae0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800fae2:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800fae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fae8:	4628      	mov	r0, r5
 800faea:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800faee:	f001 fe6b 	bl	80117c8 <uxr_init_session>
 800faf2:	494a      	ldr	r1, [pc, #296]	; (800fc1c <rmw_init+0x260>)
 800faf4:	4622      	mov	r2, r4
 800faf6:	4628      	mov	r0, r5
 800faf8:	f001 fe88 	bl	801180c <uxr_set_topic_callback>
 800fafc:	4948      	ldr	r1, [pc, #288]	; (800fc20 <rmw_init+0x264>)
 800fafe:	463a      	mov	r2, r7
 800fb00:	4628      	mov	r0, r5
 800fb02:	f001 fe7f 	bl	8011804 <uxr_set_status_callback>
 800fb06:	4947      	ldr	r1, [pc, #284]	; (800fc24 <rmw_init+0x268>)
 800fb08:	463a      	mov	r2, r7
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f001 fe82 	bl	8011814 <uxr_set_request_callback>
 800fb10:	4945      	ldr	r1, [pc, #276]	; (800fc28 <rmw_init+0x26c>)
 800fb12:	463a      	mov	r2, r7
 800fb14:	4628      	mov	r0, r5
 800fb16:	f001 fe81 	bl	801181c <uxr_set_reply_callback>
 800fb1a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fb1e:	2304      	movs	r3, #4
 800fb20:	0092      	lsls	r2, r2, #2
 800fb22:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800fb26:	4628      	mov	r0, r5
 800fb28:	f001 feb8 	bl	801189c <uxr_create_input_reliable_stream>
 800fb2c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fb30:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800fb34:	0092      	lsls	r2, r2, #2
 800fb36:	2304      	movs	r3, #4
 800fb38:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	f001 fe83 	bl	8011848 <uxr_create_output_reliable_stream>
 800fb42:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800fb46:	4628      	mov	r0, r5
 800fb48:	f001 fea2 	bl	8011890 <uxr_create_input_best_effort_stream>
 800fb4c:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800fb50:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800fb54:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fb58:	4628      	mov	r0, r5
 800fb5a:	3114      	adds	r1, #20
 800fb5c:	f001 fe62 	bl	8011824 <uxr_create_output_best_effort_stream>
 800fb60:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800fb64:	4628      	mov	r0, r5
 800fb66:	f002 faf3 	bl	8012150 <uxr_create_session>
 800fb6a:	b1f8      	cbz	r0, 800fbac <rmw_init+0x1f0>
 800fb6c:	4638      	mov	r0, r7
 800fb6e:	b002      	add	sp, #8
 800fb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb74:	270b      	movs	r7, #11
 800fb76:	4638      	mov	r0, r7
 800fb78:	b002      	add	sp, #8
 800fb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb7e:	2701      	movs	r7, #1
 800fb80:	4638      	mov	r0, r7
 800fb82:	b002      	add	sp, #8
 800fb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb88:	270c      	movs	r7, #12
 800fb8a:	4638      	mov	r0, r7
 800fb8c:	b002      	add	sp, #8
 800fb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb92:	4650      	mov	r0, sl
 800fb94:	f001 fc32 	bl	80113fc <uxr_close_custom_transport>
 800fb98:	480b      	ldr	r0, [pc, #44]	; (800fbc8 <rmw_init+0x20c>)
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	f007 fb02 	bl	80171a4 <put_memory>
 800fba0:	4638      	mov	r0, r7
 800fba2:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 800fba6:	b002      	add	sp, #8
 800fba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbac:	4650      	mov	r0, sl
 800fbae:	f001 fc25 	bl	80113fc <uxr_close_custom_transport>
 800fbb2:	4805      	ldr	r0, [pc, #20]	; (800fbc8 <rmw_init+0x20c>)
 800fbb4:	4621      	mov	r1, r4
 800fbb6:	f007 faf5 	bl	80171a4 <put_memory>
 800fbba:	64b7      	str	r7, [r6, #72]	; 0x48
 800fbbc:	2701      	movs	r7, #1
 800fbbe:	e7d5      	b.n	800fb6c <rmw_init+0x1b0>
 800fbc0:	0801f314 	.word	0x0801f314
 800fbc4:	2000d3a0 	.word	0x2000d3a0
 800fbc8:	2000d170 	.word	0x2000d170
 800fbcc:	20009fc8 	.word	0x20009fc8
 800fbd0:	2000ada8 	.word	0x2000ada8
 800fbd4:	2000cf9c 	.word	0x2000cf9c
 800fbd8:	2000d180 	.word	0x2000d180
 800fbdc:	2000a8d0 	.word	0x2000a8d0
 800fbe0:	2000d234 	.word	0x2000d234
 800fbe4:	20009fe8 	.word	0x20009fe8
 800fbe8:	20009fd8 	.word	0x20009fd8
 800fbec:	2000d2d8 	.word	0x2000d2d8
 800fbf0:	2000d224 	.word	0x2000d224
 800fbf4:	2000ace0 	.word	0x2000ace0
 800fbf8:	2000a858 	.word	0x2000a858
 800fbfc:	2000cfac 	.word	0x2000cfac
 800fc00:	2000d160 	.word	0x2000d160
 800fc04:	2000cf18 	.word	0x2000cf18
 800fc08:	2000d2c4 	.word	0x2000d2c4
 800fc0c:	2000cea8 	.word	0x2000cea8
 800fc10:	2000e948 	.word	0x2000e948
 800fc14:	2000d244 	.word	0x2000d244
 800fc18:	2000d150 	.word	0x2000d150
 800fc1c:	08016fc5 	.word	0x08016fc5
 800fc20:	08016fbd 	.word	0x08016fbd
 800fc24:	08017059 	.word	0x08017059
 800fc28:	080170f1 	.word	0x080170f1

0800fc2c <rmw_context_fini>:
 800fc2c:	4b17      	ldr	r3, [pc, #92]	; (800fc8c <rmw_context_fini+0x60>)
 800fc2e:	b570      	push	{r4, r5, r6, lr}
 800fc30:	681c      	ldr	r4, [r3, #0]
 800fc32:	4605      	mov	r5, r0
 800fc34:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800fc36:	b33c      	cbz	r4, 800fc88 <rmw_context_fini+0x5c>
 800fc38:	2600      	movs	r6, #0
 800fc3a:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800fc3e:	691a      	ldr	r2, [r3, #16]
 800fc40:	4282      	cmp	r2, r0
 800fc42:	d018      	beq.n	800fc76 <rmw_context_fini+0x4a>
 800fc44:	2c00      	cmp	r4, #0
 800fc46:	d1f8      	bne.n	800fc3a <rmw_context_fini+0xe>
 800fc48:	b188      	cbz	r0, 800fc6e <rmw_context_fini+0x42>
 800fc4a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fc4e:	789b      	ldrb	r3, [r3, #2]
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	bf14      	ite	ne
 800fc54:	210a      	movne	r1, #10
 800fc56:	2100      	moveq	r1, #0
 800fc58:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc5c:	f002 fc3a 	bl	80124d4 <uxr_delete_session_retries>
 800fc60:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800fc62:	f000 fd81 	bl	8010768 <rmw_uxrce_fini_session_memory>
 800fc66:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800fc68:	3010      	adds	r0, #16
 800fc6a:	f001 fbc7 	bl	80113fc <uxr_close_custom_transport>
 800fc6e:	2300      	movs	r3, #0
 800fc70:	4630      	mov	r0, r6
 800fc72:	64ab      	str	r3, [r5, #72]	; 0x48
 800fc74:	bd70      	pop	{r4, r5, r6, pc}
 800fc76:	f103 0018 	add.w	r0, r3, #24
 800fc7a:	f000 f89b 	bl	800fdb4 <rmw_destroy_node>
 800fc7e:	4606      	mov	r6, r0
 800fc80:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800fc82:	2c00      	cmp	r4, #0
 800fc84:	d1d9      	bne.n	800fc3a <rmw_context_fini+0xe>
 800fc86:	e7df      	b.n	800fc48 <rmw_context_fini+0x1c>
 800fc88:	4626      	mov	r6, r4
 800fc8a:	e7dd      	b.n	800fc48 <rmw_context_fini+0x1c>
 800fc8c:	2000cf9c 	.word	0x2000cf9c

0800fc90 <create_node>:
 800fc90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc94:	b083      	sub	sp, #12
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d05f      	beq.n	800fd5a <create_node+0xca>
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	4835      	ldr	r0, [pc, #212]	; (800fd74 <create_node+0xe4>)
 800fc9e:	460f      	mov	r7, r1
 800fca0:	4690      	mov	r8, r2
 800fca2:	461d      	mov	r5, r3
 800fca4:	f007 fa6e 	bl	8017184 <get_memory>
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d056      	beq.n	800fd5a <create_node+0xca>
 800fcac:	68c4      	ldr	r4, [r0, #12]
 800fcae:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800fcb0:	6123      	str	r3, [r4, #16]
 800fcb2:	f007 facf 	bl	8017254 <rmw_get_implementation_identifier>
 800fcb6:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800fcba:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800fcbe:	f8c4 9020 	str.w	r9, [r4, #32]
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	f7f0 fa96 	bl	80001f4 <strlen>
 800fcc8:	1c42      	adds	r2, r0, #1
 800fcca:	2a3c      	cmp	r2, #60	; 0x3c
 800fccc:	f104 0518 	add.w	r5, r4, #24
 800fcd0:	d840      	bhi.n	800fd54 <create_node+0xc4>
 800fcd2:	4648      	mov	r0, r9
 800fcd4:	4631      	mov	r1, r6
 800fcd6:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800fcda:	f009 feeb 	bl	8019ab4 <memcpy>
 800fcde:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800fce2:	4638      	mov	r0, r7
 800fce4:	f7f0 fa86 	bl	80001f4 <strlen>
 800fce8:	1c42      	adds	r2, r0, #1
 800fcea:	2a3c      	cmp	r2, #60	; 0x3c
 800fcec:	d832      	bhi.n	800fd54 <create_node+0xc4>
 800fcee:	4639      	mov	r1, r7
 800fcf0:	4648      	mov	r0, r9
 800fcf2:	f009 fedf 	bl	8019ab4 <memcpy>
 800fcf6:	f241 5394 	movw	r3, #5524	; 0x1594
 800fcfa:	6922      	ldr	r2, [r4, #16]
 800fcfc:	5ad0      	ldrh	r0, [r2, r3]
 800fcfe:	2101      	movs	r1, #1
 800fd00:	eb00 0c01 	add.w	ip, r0, r1
 800fd04:	f822 c003 	strh.w	ip, [r2, r3]
 800fd08:	f001 fb7c 	bl	8011404 <uxr_object_id>
 800fd0c:	6160      	str	r0, [r4, #20]
 800fd0e:	783b      	ldrb	r3, [r7, #0]
 800fd10:	2b2f      	cmp	r3, #47	; 0x2f
 800fd12:	d127      	bne.n	800fd64 <create_node+0xd4>
 800fd14:	787b      	ldrb	r3, [r7, #1]
 800fd16:	bb2b      	cbnz	r3, 800fd64 <create_node+0xd4>
 800fd18:	4a17      	ldr	r2, [pc, #92]	; (800fd78 <create_node+0xe8>)
 800fd1a:	4818      	ldr	r0, [pc, #96]	; (800fd7c <create_node+0xec>)
 800fd1c:	4633      	mov	r3, r6
 800fd1e:	213c      	movs	r1, #60	; 0x3c
 800fd20:	f00a ffea 	bl	801acf8 <sniprintf>
 800fd24:	6920      	ldr	r0, [r4, #16]
 800fd26:	4b15      	ldr	r3, [pc, #84]	; (800fd7c <create_node+0xec>)
 800fd28:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	2306      	movs	r3, #6
 800fd30:	9301      	str	r3, [sp, #4]
 800fd32:	6811      	ldr	r1, [r2, #0]
 800fd34:	6962      	ldr	r2, [r4, #20]
 800fd36:	fa1f f388 	uxth.w	r3, r8
 800fd3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fd3e:	f001 f8eb 	bl	8010f18 <uxr_buffer_create_participant_bin>
 800fd42:	4602      	mov	r2, r0
 800fd44:	6920      	ldr	r0, [r4, #16]
 800fd46:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fd4a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fd4e:	f000 fe7b 	bl	8010a48 <run_xrce_session>
 800fd52:	b918      	cbnz	r0, 800fd5c <create_node+0xcc>
 800fd54:	4628      	mov	r0, r5
 800fd56:	f000 fd0d 	bl	8010774 <rmw_uxrce_fini_node_memory>
 800fd5a:	2500      	movs	r5, #0
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	b003      	add	sp, #12
 800fd60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd64:	4a06      	ldr	r2, [pc, #24]	; (800fd80 <create_node+0xf0>)
 800fd66:	9600      	str	r6, [sp, #0]
 800fd68:	463b      	mov	r3, r7
 800fd6a:	213c      	movs	r1, #60	; 0x3c
 800fd6c:	4803      	ldr	r0, [pc, #12]	; (800fd7c <create_node+0xec>)
 800fd6e:	f00a ffc3 	bl	801acf8 <sniprintf>
 800fd72:	e7d7      	b.n	800fd24 <create_node+0x94>
 800fd74:	2000cf9c 	.word	0x2000cf9c
 800fd78:	0801ebc0 	.word	0x0801ebc0
 800fd7c:	20009df8 	.word	0x20009df8
 800fd80:	0801eb84 	.word	0x0801eb84

0800fd84 <rmw_create_node>:
 800fd84:	b199      	cbz	r1, 800fdae <rmw_create_node+0x2a>
 800fd86:	b430      	push	{r4, r5}
 800fd88:	4615      	mov	r5, r2
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	780b      	ldrb	r3, [r1, #0]
 800fd8e:	460c      	mov	r4, r1
 800fd90:	b153      	cbz	r3, 800fda8 <rmw_create_node+0x24>
 800fd92:	b14d      	cbz	r5, 800fda8 <rmw_create_node+0x24>
 800fd94:	782b      	ldrb	r3, [r5, #0]
 800fd96:	b13b      	cbz	r3, 800fda8 <rmw_create_node+0x24>
 800fd98:	b902      	cbnz	r2, 800fd9c <rmw_create_node+0x18>
 800fd9a:	69c2      	ldr	r2, [r0, #28]
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	4629      	mov	r1, r5
 800fda0:	4620      	mov	r0, r4
 800fda2:	bc30      	pop	{r4, r5}
 800fda4:	f7ff bf74 	b.w	800fc90 <create_node>
 800fda8:	2000      	movs	r0, #0
 800fdaa:	bc30      	pop	{r4, r5}
 800fdac:	4770      	bx	lr
 800fdae:	2000      	movs	r0, #0
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop

0800fdb4 <rmw_destroy_node>:
 800fdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d066      	beq.n	800fe88 <rmw_destroy_node+0xd4>
 800fdba:	4607      	mov	r7, r0
 800fdbc:	6800      	ldr	r0, [r0, #0]
 800fdbe:	b128      	cbz	r0, 800fdcc <rmw_destroy_node+0x18>
 800fdc0:	4b34      	ldr	r3, [pc, #208]	; (800fe94 <rmw_destroy_node+0xe0>)
 800fdc2:	6819      	ldr	r1, [r3, #0]
 800fdc4:	f7f0 fa0c 	bl	80001e0 <strcmp>
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d15d      	bne.n	800fe88 <rmw_destroy_node+0xd4>
 800fdcc:	687c      	ldr	r4, [r7, #4]
 800fdce:	2c00      	cmp	r4, #0
 800fdd0:	d05a      	beq.n	800fe88 <rmw_destroy_node+0xd4>
 800fdd2:	4b31      	ldr	r3, [pc, #196]	; (800fe98 <rmw_destroy_node+0xe4>)
 800fdd4:	681d      	ldr	r5, [r3, #0]
 800fdd6:	2d00      	cmp	r5, #0
 800fdd8:	d059      	beq.n	800fe8e <rmw_destroy_node+0xda>
 800fdda:	2600      	movs	r6, #0
 800fddc:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800fde0:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800fde4:	429c      	cmp	r4, r3
 800fde6:	d047      	beq.n	800fe78 <rmw_destroy_node+0xc4>
 800fde8:	2d00      	cmp	r5, #0
 800fdea:	d1f7      	bne.n	800fddc <rmw_destroy_node+0x28>
 800fdec:	4b2b      	ldr	r3, [pc, #172]	; (800fe9c <rmw_destroy_node+0xe8>)
 800fdee:	681d      	ldr	r5, [r3, #0]
 800fdf0:	b15d      	cbz	r5, 800fe0a <rmw_destroy_node+0x56>
 800fdf2:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800fdf6:	6a0b      	ldr	r3, [r1, #32]
 800fdf8:	429c      	cmp	r4, r3
 800fdfa:	d1f9      	bne.n	800fdf0 <rmw_destroy_node+0x3c>
 800fdfc:	317c      	adds	r1, #124	; 0x7c
 800fdfe:	4638      	mov	r0, r7
 800fe00:	f000 fb12 	bl	8010428 <rmw_destroy_subscription>
 800fe04:	4606      	mov	r6, r0
 800fe06:	2d00      	cmp	r5, #0
 800fe08:	d1f3      	bne.n	800fdf2 <rmw_destroy_node+0x3e>
 800fe0a:	4b25      	ldr	r3, [pc, #148]	; (800fea0 <rmw_destroy_node+0xec>)
 800fe0c:	681d      	ldr	r5, [r3, #0]
 800fe0e:	b15d      	cbz	r5, 800fe28 <rmw_destroy_node+0x74>
 800fe10:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800fe14:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800fe16:	429c      	cmp	r4, r3
 800fe18:	d1f9      	bne.n	800fe0e <rmw_destroy_node+0x5a>
 800fe1a:	317c      	adds	r1, #124	; 0x7c
 800fe1c:	4638      	mov	r0, r7
 800fe1e:	f000 f9dd 	bl	80101dc <rmw_destroy_service>
 800fe22:	4606      	mov	r6, r0
 800fe24:	2d00      	cmp	r5, #0
 800fe26:	d1f3      	bne.n	800fe10 <rmw_destroy_node+0x5c>
 800fe28:	4b1e      	ldr	r3, [pc, #120]	; (800fea4 <rmw_destroy_node+0xf0>)
 800fe2a:	681d      	ldr	r5, [r3, #0]
 800fe2c:	b15d      	cbz	r5, 800fe46 <rmw_destroy_node+0x92>
 800fe2e:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800fe32:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800fe34:	429c      	cmp	r4, r3
 800fe36:	d1f9      	bne.n	800fe2c <rmw_destroy_node+0x78>
 800fe38:	317c      	adds	r1, #124	; 0x7c
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	f007 f9c6 	bl	80171cc <rmw_destroy_client>
 800fe40:	4606      	mov	r6, r0
 800fe42:	2d00      	cmp	r5, #0
 800fe44:	d1f3      	bne.n	800fe2e <rmw_destroy_node+0x7a>
 800fe46:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800fe4a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fe4e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe52:	6819      	ldr	r1, [r3, #0]
 800fe54:	f001 f814 	bl	8010e80 <uxr_buffer_delete_entity>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	6920      	ldr	r0, [r4, #16]
 800fe5c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800fe60:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fe64:	f000 fdf0 	bl	8010a48 <run_xrce_session>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	bf08      	it	eq
 800fe6c:	2602      	moveq	r6, #2
 800fe6e:	4638      	mov	r0, r7
 800fe70:	f000 fc80 	bl	8010774 <rmw_uxrce_fini_node_memory>
 800fe74:	4630      	mov	r0, r6
 800fe76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe78:	3184      	adds	r1, #132	; 0x84
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	f000 f95e 	bl	801013c <rmw_destroy_publisher>
 800fe80:	4606      	mov	r6, r0
 800fe82:	2d00      	cmp	r5, #0
 800fe84:	d1aa      	bne.n	800fddc <rmw_destroy_node+0x28>
 800fe86:	e7b1      	b.n	800fdec <rmw_destroy_node+0x38>
 800fe88:	2601      	movs	r6, #1
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe8e:	462e      	mov	r6, r5
 800fe90:	e7ac      	b.n	800fdec <rmw_destroy_node+0x38>
 800fe92:	bf00      	nop
 800fe94:	0801f314 	.word	0x0801f314
 800fe98:	20009fd8 	.word	0x20009fd8
 800fe9c:	2000d234 	.word	0x2000d234
 800fea0:	2000d224 	.word	0x2000d224
 800fea4:	2000a858 	.word	0x2000a858

0800fea8 <rmw_node_get_graph_guard_condition>:
 800fea8:	6843      	ldr	r3, [r0, #4]
 800feaa:	6918      	ldr	r0, [r3, #16]
 800feac:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop

0800feb4 <flush_session>:
 800feb4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800feb6:	f002 b8d3 	b.w	8012060 <uxr_run_session_until_confirm_delivery>
 800feba:	bf00      	nop

0800febc <rmw_publish>:
 800febc:	2800      	cmp	r0, #0
 800febe:	d053      	beq.n	800ff68 <rmw_publish+0xac>
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	460d      	mov	r5, r1
 800fec4:	b08e      	sub	sp, #56	; 0x38
 800fec6:	2900      	cmp	r1, #0
 800fec8:	d04b      	beq.n	800ff62 <rmw_publish+0xa6>
 800feca:	4604      	mov	r4, r0
 800fecc:	6800      	ldr	r0, [r0, #0]
 800fece:	f000 fe3b 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d045      	beq.n	800ff62 <rmw_publish+0xa6>
 800fed6:	6866      	ldr	r6, [r4, #4]
 800fed8:	2e00      	cmp	r6, #0
 800feda:	d042      	beq.n	800ff62 <rmw_publish+0xa6>
 800fedc:	69b4      	ldr	r4, [r6, #24]
 800fede:	4628      	mov	r0, r5
 800fee0:	6923      	ldr	r3, [r4, #16]
 800fee2:	4798      	blx	r3
 800fee4:	69f3      	ldr	r3, [r6, #28]
 800fee6:	9005      	str	r0, [sp, #20]
 800fee8:	b113      	cbz	r3, 800fef0 <rmw_publish+0x34>
 800feea:	a805      	add	r0, sp, #20
 800feec:	4798      	blx	r3
 800feee:	9805      	ldr	r0, [sp, #20]
 800fef0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fef4:	691b      	ldr	r3, [r3, #16]
 800fef6:	9000      	str	r0, [sp, #0]
 800fef8:	6972      	ldr	r2, [r6, #20]
 800fefa:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fefc:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ff00:	ab06      	add	r3, sp, #24
 800ff02:	f003 fb33 	bl	801356c <uxr_prepare_output_stream>
 800ff06:	b1d8      	cbz	r0, 800ff40 <rmw_publish+0x84>
 800ff08:	68a3      	ldr	r3, [r4, #8]
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	a906      	add	r1, sp, #24
 800ff0e:	4798      	blx	r3
 800ff10:	6a33      	ldr	r3, [r6, #32]
 800ff12:	4604      	mov	r4, r0
 800ff14:	b10b      	cbz	r3, 800ff1a <rmw_publish+0x5e>
 800ff16:	a806      	add	r0, sp, #24
 800ff18:	4798      	blx	r3
 800ff1a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ff24:	d022      	beq.n	800ff6c <rmw_publish+0xb0>
 800ff26:	6918      	ldr	r0, [r3, #16]
 800ff28:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800ff2a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff2e:	f002 f897 	bl	8012060 <uxr_run_session_until_confirm_delivery>
 800ff32:	4020      	ands	r0, r4
 800ff34:	b2c4      	uxtb	r4, r0
 800ff36:	f084 0001 	eor.w	r0, r4, #1
 800ff3a:	b2c0      	uxtb	r0, r0
 800ff3c:	b00e      	add	sp, #56	; 0x38
 800ff3e:	bd70      	pop	{r4, r5, r6, pc}
 800ff40:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ff44:	4a0c      	ldr	r2, [pc, #48]	; (800ff78 <rmw_publish+0xbc>)
 800ff46:	6918      	ldr	r0, [r3, #16]
 800ff48:	9b05      	ldr	r3, [sp, #20]
 800ff4a:	9300      	str	r3, [sp, #0]
 800ff4c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800ff50:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff54:	6972      	ldr	r2, [r6, #20]
 800ff56:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ff58:	ab06      	add	r3, sp, #24
 800ff5a:	f003 fb37 	bl	80135cc <uxr_prepare_output_stream_fragmented>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d1d2      	bne.n	800ff08 <rmw_publish+0x4c>
 800ff62:	2001      	movs	r0, #1
 800ff64:	b00e      	add	sp, #56	; 0x38
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	2001      	movs	r0, #1
 800ff6a:	4770      	bx	lr
 800ff6c:	6918      	ldr	r0, [r3, #16]
 800ff6e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff72:	f001 fcb9 	bl	80118e8 <uxr_flash_output_streams>
 800ff76:	e7de      	b.n	800ff36 <rmw_publish+0x7a>
 800ff78:	0800feb5 	.word	0x0800feb5

0800ff7c <rmw_create_publisher>:
 800ff7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff80:	b087      	sub	sp, #28
 800ff82:	2800      	cmp	r0, #0
 800ff84:	f000 80cc 	beq.w	8010120 <rmw_create_publisher+0x1a4>
 800ff88:	460e      	mov	r6, r1
 800ff8a:	2900      	cmp	r1, #0
 800ff8c:	f000 80c8 	beq.w	8010120 <rmw_create_publisher+0x1a4>
 800ff90:	4604      	mov	r4, r0
 800ff92:	6800      	ldr	r0, [r0, #0]
 800ff94:	4615      	mov	r5, r2
 800ff96:	4698      	mov	r8, r3
 800ff98:	f000 fdd6 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	f000 80bf 	beq.w	8010120 <rmw_create_publisher+0x1a4>
 800ffa2:	2d00      	cmp	r5, #0
 800ffa4:	f000 80bc 	beq.w	8010120 <rmw_create_publisher+0x1a4>
 800ffa8:	782b      	ldrb	r3, [r5, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f000 80b8 	beq.w	8010120 <rmw_create_publisher+0x1a4>
 800ffb0:	f1b8 0f00 	cmp.w	r8, #0
 800ffb4:	f000 80b4 	beq.w	8010120 <rmw_create_publisher+0x1a4>
 800ffb8:	485c      	ldr	r0, [pc, #368]	; (801012c <rmw_create_publisher+0x1b0>)
 800ffba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ffbe:	f007 f8e1 	bl	8017184 <get_memory>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	f000 80ac 	beq.w	8010120 <rmw_create_publisher+0x1a4>
 800ffc8:	68c4      	ldr	r4, [r0, #12]
 800ffca:	2300      	movs	r3, #0
 800ffcc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800ffd0:	f007 f940 	bl	8017254 <rmw_get_implementation_identifier>
 800ffd4:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800ffd8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800ffdc:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	f7f0 f907 	bl	80001f4 <strlen>
 800ffe6:	3001      	adds	r0, #1
 800ffe8:	283c      	cmp	r0, #60	; 0x3c
 800ffea:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800ffee:	f200 8094 	bhi.w	801011a <rmw_create_publisher+0x19e>
 800fff2:	4a4f      	ldr	r2, [pc, #316]	; (8010130 <rmw_create_publisher+0x1b4>)
 800fff4:	462b      	mov	r3, r5
 800fff6:	213c      	movs	r1, #60	; 0x3c
 800fff8:	4650      	mov	r0, sl
 800fffa:	f00a fe7d 	bl	801acf8 <sniprintf>
 800fffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010002:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 8010006:	4641      	mov	r1, r8
 8010008:	2250      	movs	r2, #80	; 0x50
 801000a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801000e:	f009 fd51 	bl	8019ab4 <memcpy>
 8010012:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010016:	4947      	ldr	r1, [pc, #284]	; (8010134 <rmw_create_publisher+0x1b8>)
 8010018:	2b02      	cmp	r3, #2
 801001a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801001e:	bf0c      	ite	eq
 8010020:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8010024:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8010028:	67a3      	str	r3, [r4, #120]	; 0x78
 801002a:	2300      	movs	r3, #0
 801002c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010030:	4630      	mov	r0, r6
 8010032:	f000 fd97 	bl	8010b64 <get_message_typesupport_handle>
 8010036:	2800      	cmp	r0, #0
 8010038:	d06f      	beq.n	801011a <rmw_create_publisher+0x19e>
 801003a:	6842      	ldr	r2, [r0, #4]
 801003c:	61a2      	str	r2, [r4, #24]
 801003e:	2a00      	cmp	r2, #0
 8010040:	d06b      	beq.n	801011a <rmw_create_publisher+0x19e>
 8010042:	4629      	mov	r1, r5
 8010044:	4643      	mov	r3, r8
 8010046:	4648      	mov	r0, r9
 8010048:	f007 f90a 	bl	8017260 <create_topic>
 801004c:	6260      	str	r0, [r4, #36]	; 0x24
 801004e:	2800      	cmp	r0, #0
 8010050:	d063      	beq.n	801011a <rmw_create_publisher+0x19e>
 8010052:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010056:	f241 5398 	movw	r3, #5528	; 0x1598
 801005a:	2103      	movs	r1, #3
 801005c:	5ad0      	ldrh	r0, [r2, r3]
 801005e:	1c45      	adds	r5, r0, #1
 8010060:	52d5      	strh	r5, [r2, r3]
 8010062:	f001 f9cf 	bl	8011404 <uxr_object_id>
 8010066:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801006a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801006e:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8010072:	6912      	ldr	r2, [r2, #16]
 8010074:	6120      	str	r0, [r4, #16]
 8010076:	f04f 0a06 	mov.w	sl, #6
 801007a:	f8cd a000 	str.w	sl, [sp]
 801007e:	6819      	ldr	r1, [r3, #0]
 8010080:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010084:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 8010088:	6922      	ldr	r2, [r4, #16]
 801008a:	f000 ffab 	bl	8010fe4 <uxr_buffer_create_publisher_bin>
 801008e:	4602      	mov	r2, r0
 8010090:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010094:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010098:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801009c:	f000 fcd4 	bl	8010a48 <run_xrce_session>
 80100a0:	b3b8      	cbz	r0, 8010112 <rmw_create_publisher+0x196>
 80100a2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80100a6:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 80100aa:	f241 539a 	movw	r3, #5530	; 0x159a
 80100ae:	2105      	movs	r1, #5
 80100b0:	5ad0      	ldrh	r0, [r2, r3]
 80100b2:	1c45      	adds	r5, r0, #1
 80100b4:	52d5      	strh	r5, [r2, r3]
 80100b6:	f001 f9a5 	bl	8011404 <uxr_object_id>
 80100ba:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80100be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80100c2:	6915      	ldr	r5, [r2, #16]
 80100c4:	6160      	str	r0, [r4, #20]
 80100c6:	ae04      	add	r6, sp, #16
 80100c8:	4641      	mov	r1, r8
 80100ca:	4630      	mov	r0, r6
 80100cc:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 80100d0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80100d4:	f000 fcd4 	bl	8010a80 <convert_qos_profile>
 80100d8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80100dc:	f8cd a00c 	str.w	sl, [sp, #12]
 80100e0:	9001      	str	r0, [sp, #4]
 80100e2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80100e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 80100f0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80100f4:	f8d8 1000 	ldr.w	r1, [r8]
 80100f8:	4628      	mov	r0, r5
 80100fa:	f000 ffd1 	bl	80110a0 <uxr_buffer_create_datawriter_bin>
 80100fe:	4602      	mov	r2, r0
 8010100:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010104:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010108:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801010c:	f000 fc9c 	bl	8010a48 <run_xrce_session>
 8010110:	b938      	cbnz	r0, 8010122 <rmw_create_publisher+0x1a6>
 8010112:	4806      	ldr	r0, [pc, #24]	; (801012c <rmw_create_publisher+0x1b0>)
 8010114:	4621      	mov	r1, r4
 8010116:	f007 f845 	bl	80171a4 <put_memory>
 801011a:	4638      	mov	r0, r7
 801011c:	f000 fb42 	bl	80107a4 <rmw_uxrce_fini_publisher_memory>
 8010120:	2700      	movs	r7, #0
 8010122:	4638      	mov	r0, r7
 8010124:	b007      	add	sp, #28
 8010126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801012a:	bf00      	nop
 801012c:	20009fd8 	.word	0x20009fd8
 8010130:	0801ebc0 	.word	0x0801ebc0
 8010134:	0801eb8c 	.word	0x0801eb8c

08010138 <rmw_publisher_get_actual_qos>:
 8010138:	2000      	movs	r0, #0
 801013a:	4770      	bx	lr

0801013c <rmw_destroy_publisher>:
 801013c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013e:	b128      	cbz	r0, 801014c <rmw_destroy_publisher+0x10>
 8010140:	4604      	mov	r4, r0
 8010142:	6800      	ldr	r0, [r0, #0]
 8010144:	460d      	mov	r5, r1
 8010146:	f000 fcff 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 801014a:	b910      	cbnz	r0, 8010152 <rmw_destroy_publisher+0x16>
 801014c:	2401      	movs	r4, #1
 801014e:	4620      	mov	r0, r4
 8010150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010152:	6863      	ldr	r3, [r4, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d0f9      	beq.n	801014c <rmw_destroy_publisher+0x10>
 8010158:	2d00      	cmp	r5, #0
 801015a:	d0f7      	beq.n	801014c <rmw_destroy_publisher+0x10>
 801015c:	6828      	ldr	r0, [r5, #0]
 801015e:	f000 fcf3 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 8010162:	2800      	cmp	r0, #0
 8010164:	d0f2      	beq.n	801014c <rmw_destroy_publisher+0x10>
 8010166:	686c      	ldr	r4, [r5, #4]
 8010168:	2c00      	cmp	r4, #0
 801016a:	d0ef      	beq.n	801014c <rmw_destroy_publisher+0x10>
 801016c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801016e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8010172:	f007 f8d7 	bl	8017324 <destroy_topic>
 8010176:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801017a:	6962      	ldr	r2, [r4, #20]
 801017c:	6918      	ldr	r0, [r3, #16]
 801017e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010182:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010186:	6819      	ldr	r1, [r3, #0]
 8010188:	f000 fe7a 	bl	8010e80 <uxr_buffer_delete_entity>
 801018c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8010190:	6922      	ldr	r2, [r4, #16]
 8010192:	4603      	mov	r3, r0
 8010194:	6908      	ldr	r0, [r1, #16]
 8010196:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801019a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801019e:	6809      	ldr	r1, [r1, #0]
 80101a0:	461c      	mov	r4, r3
 80101a2:	f000 fe6d 	bl	8010e80 <uxr_buffer_delete_entity>
 80101a6:	4606      	mov	r6, r0
 80101a8:	6938      	ldr	r0, [r7, #16]
 80101aa:	4622      	mov	r2, r4
 80101ac:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80101b0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80101b4:	f000 fc48 	bl	8010a48 <run_xrce_session>
 80101b8:	4604      	mov	r4, r0
 80101ba:	6938      	ldr	r0, [r7, #16]
 80101bc:	4632      	mov	r2, r6
 80101be:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80101c2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80101c6:	f000 fc3f 	bl	8010a48 <run_xrce_session>
 80101ca:	b12c      	cbz	r4, 80101d8 <rmw_destroy_publisher+0x9c>
 80101cc:	b120      	cbz	r0, 80101d8 <rmw_destroy_publisher+0x9c>
 80101ce:	2400      	movs	r4, #0
 80101d0:	4628      	mov	r0, r5
 80101d2:	f000 fae7 	bl	80107a4 <rmw_uxrce_fini_publisher_memory>
 80101d6:	e7ba      	b.n	801014e <rmw_destroy_publisher+0x12>
 80101d8:	2402      	movs	r4, #2
 80101da:	e7f9      	b.n	80101d0 <rmw_destroy_publisher+0x94>

080101dc <rmw_destroy_service>:
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	b128      	cbz	r0, 80101ec <rmw_destroy_service+0x10>
 80101e0:	4604      	mov	r4, r0
 80101e2:	6800      	ldr	r0, [r0, #0]
 80101e4:	460d      	mov	r5, r1
 80101e6:	f000 fcaf 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 80101ea:	b910      	cbnz	r0, 80101f2 <rmw_destroy_service+0x16>
 80101ec:	2401      	movs	r4, #1
 80101ee:	4620      	mov	r0, r4
 80101f0:	bd70      	pop	{r4, r5, r6, pc}
 80101f2:	6863      	ldr	r3, [r4, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d0f9      	beq.n	80101ec <rmw_destroy_service+0x10>
 80101f8:	2d00      	cmp	r5, #0
 80101fa:	d0f7      	beq.n	80101ec <rmw_destroy_service+0x10>
 80101fc:	6828      	ldr	r0, [r5, #0]
 80101fe:	f000 fca3 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 8010202:	2800      	cmp	r0, #0
 8010204:	d0f2      	beq.n	80101ec <rmw_destroy_service+0x10>
 8010206:	686e      	ldr	r6, [r5, #4]
 8010208:	2e00      	cmp	r6, #0
 801020a:	d0ef      	beq.n	80101ec <rmw_destroy_service+0x10>
 801020c:	6864      	ldr	r4, [r4, #4]
 801020e:	6932      	ldr	r2, [r6, #16]
 8010210:	6920      	ldr	r0, [r4, #16]
 8010212:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010216:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801021a:	6819      	ldr	r1, [r3, #0]
 801021c:	f001 f95a 	bl	80114d4 <uxr_buffer_cancel_data>
 8010220:	4602      	mov	r2, r0
 8010222:	6920      	ldr	r0, [r4, #16]
 8010224:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010228:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801022c:	f000 fc0c 	bl	8010a48 <run_xrce_session>
 8010230:	6920      	ldr	r0, [r4, #16]
 8010232:	6932      	ldr	r2, [r6, #16]
 8010234:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010238:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801023c:	6819      	ldr	r1, [r3, #0]
 801023e:	f000 fe1f 	bl	8010e80 <uxr_buffer_delete_entity>
 8010242:	4602      	mov	r2, r0
 8010244:	6920      	ldr	r0, [r4, #16]
 8010246:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801024a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801024e:	f000 fbfb 	bl	8010a48 <run_xrce_session>
 8010252:	2800      	cmp	r0, #0
 8010254:	4628      	mov	r0, r5
 8010256:	bf14      	ite	ne
 8010258:	2400      	movne	r4, #0
 801025a:	2402      	moveq	r4, #2
 801025c:	f000 face 	bl	80107fc <rmw_uxrce_fini_service_memory>
 8010260:	e7c5      	b.n	80101ee <rmw_destroy_service+0x12>
 8010262:	bf00      	nop

08010264 <rmw_create_subscription>:
 8010264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010268:	b08d      	sub	sp, #52	; 0x34
 801026a:	2800      	cmp	r0, #0
 801026c:	f000 80cf 	beq.w	801040e <rmw_create_subscription+0x1aa>
 8010270:	460e      	mov	r6, r1
 8010272:	2900      	cmp	r1, #0
 8010274:	f000 80cb 	beq.w	801040e <rmw_create_subscription+0x1aa>
 8010278:	4604      	mov	r4, r0
 801027a:	6800      	ldr	r0, [r0, #0]
 801027c:	4615      	mov	r5, r2
 801027e:	4698      	mov	r8, r3
 8010280:	f000 fc62 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 8010284:	2800      	cmp	r0, #0
 8010286:	f000 80c2 	beq.w	801040e <rmw_create_subscription+0x1aa>
 801028a:	2d00      	cmp	r5, #0
 801028c:	f000 80bf 	beq.w	801040e <rmw_create_subscription+0x1aa>
 8010290:	782b      	ldrb	r3, [r5, #0]
 8010292:	2b00      	cmp	r3, #0
 8010294:	f000 80bb 	beq.w	801040e <rmw_create_subscription+0x1aa>
 8010298:	f1b8 0f00 	cmp.w	r8, #0
 801029c:	f000 80b7 	beq.w	801040e <rmw_create_subscription+0x1aa>
 80102a0:	485d      	ldr	r0, [pc, #372]	; (8010418 <rmw_create_subscription+0x1b4>)
 80102a2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80102a6:	f006 ff6d 	bl	8017184 <get_memory>
 80102aa:	4604      	mov	r4, r0
 80102ac:	2800      	cmp	r0, #0
 80102ae:	f000 80af 	beq.w	8010410 <rmw_create_subscription+0x1ac>
 80102b2:	68c7      	ldr	r7, [r0, #12]
 80102b4:	2300      	movs	r3, #0
 80102b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80102ba:	f006 ffcb 	bl	8017254 <rmw_get_implementation_identifier>
 80102be:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 80102c2:	67f8      	str	r0, [r7, #124]	; 0x7c
 80102c4:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 80102c8:	4628      	mov	r0, r5
 80102ca:	f7ef ff93 	bl	80001f4 <strlen>
 80102ce:	3001      	adds	r0, #1
 80102d0:	283c      	cmp	r0, #60	; 0x3c
 80102d2:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80102d6:	f200 8097 	bhi.w	8010408 <rmw_create_subscription+0x1a4>
 80102da:	4a50      	ldr	r2, [pc, #320]	; (801041c <rmw_create_subscription+0x1b8>)
 80102dc:	462b      	mov	r3, r5
 80102de:	213c      	movs	r1, #60	; 0x3c
 80102e0:	4650      	mov	r0, sl
 80102e2:	f00a fd09 	bl	801acf8 <sniprintf>
 80102e6:	4641      	mov	r1, r8
 80102e8:	f8c7 9020 	str.w	r9, [r7, #32]
 80102ec:	2250      	movs	r2, #80	; 0x50
 80102ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80102f2:	f009 fbdf 	bl	8019ab4 <memcpy>
 80102f6:	494a      	ldr	r1, [pc, #296]	; (8010420 <rmw_create_subscription+0x1bc>)
 80102f8:	4630      	mov	r0, r6
 80102fa:	f000 fc33 	bl	8010b64 <get_message_typesupport_handle>
 80102fe:	2800      	cmp	r0, #0
 8010300:	f000 8082 	beq.w	8010408 <rmw_create_subscription+0x1a4>
 8010304:	6842      	ldr	r2, [r0, #4]
 8010306:	61ba      	str	r2, [r7, #24]
 8010308:	2a00      	cmp	r2, #0
 801030a:	d07d      	beq.n	8010408 <rmw_create_subscription+0x1a4>
 801030c:	4629      	mov	r1, r5
 801030e:	4643      	mov	r3, r8
 8010310:	4648      	mov	r0, r9
 8010312:	f006 ffa5 	bl	8017260 <create_topic>
 8010316:	61f8      	str	r0, [r7, #28]
 8010318:	2800      	cmp	r0, #0
 801031a:	d075      	beq.n	8010408 <rmw_create_subscription+0x1a4>
 801031c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010320:	f241 539c 	movw	r3, #5532	; 0x159c
 8010324:	2104      	movs	r1, #4
 8010326:	5ad0      	ldrh	r0, [r2, r3]
 8010328:	1c45      	adds	r5, r0, #1
 801032a:	52d5      	strh	r5, [r2, r3]
 801032c:	f001 f86a 	bl	8011404 <uxr_object_id>
 8010330:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010334:	6138      	str	r0, [r7, #16]
 8010336:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801033a:	2606      	movs	r6, #6
 801033c:	9600      	str	r6, [sp, #0]
 801033e:	6811      	ldr	r1, [r2, #0]
 8010340:	693a      	ldr	r2, [r7, #16]
 8010342:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010346:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801034a:	f000 fe79 	bl	8011040 <uxr_buffer_create_subscriber_bin>
 801034e:	4602      	mov	r2, r0
 8010350:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010354:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010358:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801035c:	f000 fb74 	bl	8010a48 <run_xrce_session>
 8010360:	2800      	cmp	r0, #0
 8010362:	d04d      	beq.n	8010400 <rmw_create_subscription+0x19c>
 8010364:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010368:	f241 539e 	movw	r3, #5534	; 0x159e
 801036c:	4631      	mov	r1, r6
 801036e:	5ad0      	ldrh	r0, [r2, r3]
 8010370:	1c45      	adds	r5, r0, #1
 8010372:	52d5      	strh	r5, [r2, r3]
 8010374:	f001 f846 	bl	8011404 <uxr_object_id>
 8010378:	ad08      	add	r5, sp, #32
 801037a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	6178      	str	r0, [r7, #20]
 8010382:	4641      	mov	r1, r8
 8010384:	4628      	mov	r0, r5
 8010386:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801038a:	9305      	str	r3, [sp, #20]
 801038c:	f000 fb78 	bl	8010a80 <convert_qos_profile>
 8010390:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010394:	9b05      	ldr	r3, [sp, #20]
 8010396:	9001      	str	r0, [sp, #4]
 8010398:	9603      	str	r6, [sp, #12]
 801039a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801039e:	691b      	ldr	r3, [r3, #16]
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80103a6:	f8db 1000 	ldr.w	r1, [fp]
 80103aa:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 80103ae:	f000 feef 	bl	8011190 <uxr_buffer_create_datareader_bin>
 80103b2:	4602      	mov	r2, r0
 80103b4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80103b8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80103bc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80103c0:	f000 fb42 	bl	8010a48 <run_xrce_session>
 80103c4:	b1e0      	cbz	r0, 8010400 <rmw_create_subscription+0x19c>
 80103c6:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 80103ca:	f898 3008 	ldrb.w	r3, [r8, #8]
 80103ce:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80103d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80103d6:	2200      	movs	r2, #0
 80103d8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80103dc:	2b02      	cmp	r3, #2
 80103de:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80103e2:	bf0c      	ite	eq
 80103e4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80103e8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 80103ec:	9307      	str	r3, [sp, #28]
 80103ee:	aa0a      	add	r2, sp, #40	; 0x28
 80103f0:	9200      	str	r2, [sp, #0]
 80103f2:	697a      	ldr	r2, [r7, #20]
 80103f4:	6809      	ldr	r1, [r1, #0]
 80103f6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80103fa:	f001 f831 	bl	8011460 <uxr_buffer_request_data>
 80103fe:	e007      	b.n	8010410 <rmw_create_subscription+0x1ac>
 8010400:	4805      	ldr	r0, [pc, #20]	; (8010418 <rmw_create_subscription+0x1b4>)
 8010402:	4639      	mov	r1, r7
 8010404:	f006 fece 	bl	80171a4 <put_memory>
 8010408:	4620      	mov	r0, r4
 801040a:	f000 f9e1 	bl	80107d0 <rmw_uxrce_fini_subscription_memory>
 801040e:	2400      	movs	r4, #0
 8010410:	4620      	mov	r0, r4
 8010412:	b00d      	add	sp, #52	; 0x34
 8010414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010418:	2000d234 	.word	0x2000d234
 801041c:	0801ebc0 	.word	0x0801ebc0
 8010420:	0801eb8c 	.word	0x0801eb8c

08010424 <rmw_subscription_get_actual_qos>:
 8010424:	2000      	movs	r0, #0
 8010426:	4770      	bx	lr

08010428 <rmw_destroy_subscription>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	b128      	cbz	r0, 8010438 <rmw_destroy_subscription+0x10>
 801042c:	4604      	mov	r4, r0
 801042e:	6800      	ldr	r0, [r0, #0]
 8010430:	460d      	mov	r5, r1
 8010432:	f000 fb89 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 8010436:	b910      	cbnz	r0, 801043e <rmw_destroy_subscription+0x16>
 8010438:	2401      	movs	r4, #1
 801043a:	4620      	mov	r0, r4
 801043c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801043e:	6863      	ldr	r3, [r4, #4]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d0f9      	beq.n	8010438 <rmw_destroy_subscription+0x10>
 8010444:	2d00      	cmp	r5, #0
 8010446:	d0f7      	beq.n	8010438 <rmw_destroy_subscription+0x10>
 8010448:	6828      	ldr	r0, [r5, #0]
 801044a:	f000 fb7d 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 801044e:	2800      	cmp	r0, #0
 8010450:	d0f2      	beq.n	8010438 <rmw_destroy_subscription+0x10>
 8010452:	686c      	ldr	r4, [r5, #4]
 8010454:	2c00      	cmp	r4, #0
 8010456:	d0ef      	beq.n	8010438 <rmw_destroy_subscription+0x10>
 8010458:	6a26      	ldr	r6, [r4, #32]
 801045a:	6962      	ldr	r2, [r4, #20]
 801045c:	6930      	ldr	r0, [r6, #16]
 801045e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010462:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010466:	6819      	ldr	r1, [r3, #0]
 8010468:	f001 f834 	bl	80114d4 <uxr_buffer_cancel_data>
 801046c:	4602      	mov	r2, r0
 801046e:	6930      	ldr	r0, [r6, #16]
 8010470:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010474:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010478:	f000 fae6 	bl	8010a48 <run_xrce_session>
 801047c:	69e0      	ldr	r0, [r4, #28]
 801047e:	f006 ff51 	bl	8017324 <destroy_topic>
 8010482:	6a23      	ldr	r3, [r4, #32]
 8010484:	6962      	ldr	r2, [r4, #20]
 8010486:	6918      	ldr	r0, [r3, #16]
 8010488:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801048c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010490:	6819      	ldr	r1, [r3, #0]
 8010492:	f000 fcf5 	bl	8010e80 <uxr_buffer_delete_entity>
 8010496:	6a21      	ldr	r1, [r4, #32]
 8010498:	6922      	ldr	r2, [r4, #16]
 801049a:	4603      	mov	r3, r0
 801049c:	6908      	ldr	r0, [r1, #16]
 801049e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80104a2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80104a6:	6809      	ldr	r1, [r1, #0]
 80104a8:	461c      	mov	r4, r3
 80104aa:	f000 fce9 	bl	8010e80 <uxr_buffer_delete_entity>
 80104ae:	4607      	mov	r7, r0
 80104b0:	6930      	ldr	r0, [r6, #16]
 80104b2:	4622      	mov	r2, r4
 80104b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80104b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80104bc:	f000 fac4 	bl	8010a48 <run_xrce_session>
 80104c0:	4604      	mov	r4, r0
 80104c2:	6930      	ldr	r0, [r6, #16]
 80104c4:	463a      	mov	r2, r7
 80104c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80104ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80104ce:	f000 fabb 	bl	8010a48 <run_xrce_session>
 80104d2:	b12c      	cbz	r4, 80104e0 <rmw_destroy_subscription+0xb8>
 80104d4:	b120      	cbz	r0, 80104e0 <rmw_destroy_subscription+0xb8>
 80104d6:	2400      	movs	r4, #0
 80104d8:	4628      	mov	r0, r5
 80104da:	f000 f979 	bl	80107d0 <rmw_uxrce_fini_subscription_memory>
 80104de:	e7ac      	b.n	801043a <rmw_destroy_subscription+0x12>
 80104e0:	2402      	movs	r4, #2
 80104e2:	e7f9      	b.n	80104d8 <rmw_destroy_subscription+0xb0>

080104e4 <rmw_uxrce_transport_init>:
 80104e4:	b508      	push	{r3, lr}
 80104e6:	b108      	cbz	r0, 80104ec <rmw_uxrce_transport_init+0x8>
 80104e8:	f100 0210 	add.w	r2, r0, #16
 80104ec:	b139      	cbz	r1, 80104fe <rmw_uxrce_transport_init+0x1a>
 80104ee:	6949      	ldr	r1, [r1, #20]
 80104f0:	4610      	mov	r0, r2
 80104f2:	f000 ff4f 	bl	8011394 <uxr_init_custom_transport>
 80104f6:	f080 0001 	eor.w	r0, r0, #1
 80104fa:	b2c0      	uxtb	r0, r0
 80104fc:	bd08      	pop	{r3, pc}
 80104fe:	4b04      	ldr	r3, [pc, #16]	; (8010510 <rmw_uxrce_transport_init+0x2c>)
 8010500:	4610      	mov	r0, r2
 8010502:	6859      	ldr	r1, [r3, #4]
 8010504:	f000 ff46 	bl	8011394 <uxr_init_custom_transport>
 8010508:	f080 0001 	eor.w	r0, r0, #1
 801050c:	b2c0      	uxtb	r0, r0
 801050e:	bd08      	pop	{r3, pc}
 8010510:	20009fa8 	.word	0x20009fa8

08010514 <rmw_uxrce_init_service_memory>:
 8010514:	b1b2      	cbz	r2, 8010544 <rmw_uxrce_init_service_memory+0x30>
 8010516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010518:	7a07      	ldrb	r7, [r0, #8]
 801051a:	4605      	mov	r5, r0
 801051c:	b98f      	cbnz	r7, 8010542 <rmw_uxrce_init_service_memory+0x2e>
 801051e:	e9c0 7700 	strd	r7, r7, [r0]
 8010522:	460c      	mov	r4, r1
 8010524:	23c8      	movs	r3, #200	; 0xc8
 8010526:	2101      	movs	r1, #1
 8010528:	fb03 4602 	mla	r6, r3, r2, r4
 801052c:	60c3      	str	r3, [r0, #12]
 801052e:	7201      	strb	r1, [r0, #8]
 8010530:	4621      	mov	r1, r4
 8010532:	4628      	mov	r0, r5
 8010534:	f006 fe36 	bl	80171a4 <put_memory>
 8010538:	60e4      	str	r4, [r4, #12]
 801053a:	f804 7bc8 	strb.w	r7, [r4], #200
 801053e:	42a6      	cmp	r6, r4
 8010540:	d1f6      	bne.n	8010530 <rmw_uxrce_init_service_memory+0x1c>
 8010542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop

08010548 <rmw_uxrce_init_client_memory>:
 8010548:	b1b2      	cbz	r2, 8010578 <rmw_uxrce_init_client_memory+0x30>
 801054a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801054c:	7a07      	ldrb	r7, [r0, #8]
 801054e:	4605      	mov	r5, r0
 8010550:	b98f      	cbnz	r7, 8010576 <rmw_uxrce_init_client_memory+0x2e>
 8010552:	e9c0 7700 	strd	r7, r7, [r0]
 8010556:	460c      	mov	r4, r1
 8010558:	23c8      	movs	r3, #200	; 0xc8
 801055a:	2101      	movs	r1, #1
 801055c:	fb03 4602 	mla	r6, r3, r2, r4
 8010560:	60c3      	str	r3, [r0, #12]
 8010562:	7201      	strb	r1, [r0, #8]
 8010564:	4621      	mov	r1, r4
 8010566:	4628      	mov	r0, r5
 8010568:	f006 fe1c 	bl	80171a4 <put_memory>
 801056c:	60e4      	str	r4, [r4, #12]
 801056e:	f804 7bc8 	strb.w	r7, [r4], #200
 8010572:	42a6      	cmp	r6, r4
 8010574:	d1f6      	bne.n	8010564 <rmw_uxrce_init_client_memory+0x1c>
 8010576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop

0801057c <rmw_uxrce_init_publisher_memory>:
 801057c:	b1b2      	cbz	r2, 80105ac <rmw_uxrce_init_publisher_memory+0x30>
 801057e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010580:	7a07      	ldrb	r7, [r0, #8]
 8010582:	4605      	mov	r5, r0
 8010584:	b98f      	cbnz	r7, 80105aa <rmw_uxrce_init_publisher_memory+0x2e>
 8010586:	e9c0 7700 	strd	r7, r7, [r0]
 801058a:	460c      	mov	r4, r1
 801058c:	23d8      	movs	r3, #216	; 0xd8
 801058e:	2101      	movs	r1, #1
 8010590:	fb03 4602 	mla	r6, r3, r2, r4
 8010594:	60c3      	str	r3, [r0, #12]
 8010596:	7201      	strb	r1, [r0, #8]
 8010598:	4621      	mov	r1, r4
 801059a:	4628      	mov	r0, r5
 801059c:	f006 fe02 	bl	80171a4 <put_memory>
 80105a0:	60e4      	str	r4, [r4, #12]
 80105a2:	f804 7bd8 	strb.w	r7, [r4], #216
 80105a6:	42a6      	cmp	r6, r4
 80105a8:	d1f6      	bne.n	8010598 <rmw_uxrce_init_publisher_memory+0x1c>
 80105aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop

080105b0 <rmw_uxrce_init_subscription_memory>:
 80105b0:	b1b2      	cbz	r2, 80105e0 <rmw_uxrce_init_subscription_memory+0x30>
 80105b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105b4:	7a07      	ldrb	r7, [r0, #8]
 80105b6:	4605      	mov	r5, r0
 80105b8:	b98f      	cbnz	r7, 80105de <rmw_uxrce_init_subscription_memory+0x2e>
 80105ba:	e9c0 7700 	strd	r7, r7, [r0]
 80105be:	460c      	mov	r4, r1
 80105c0:	23d0      	movs	r3, #208	; 0xd0
 80105c2:	2101      	movs	r1, #1
 80105c4:	fb03 4602 	mla	r6, r3, r2, r4
 80105c8:	60c3      	str	r3, [r0, #12]
 80105ca:	7201      	strb	r1, [r0, #8]
 80105cc:	4621      	mov	r1, r4
 80105ce:	4628      	mov	r0, r5
 80105d0:	f006 fde8 	bl	80171a4 <put_memory>
 80105d4:	60e4      	str	r4, [r4, #12]
 80105d6:	f804 7bd0 	strb.w	r7, [r4], #208
 80105da:	42a6      	cmp	r6, r4
 80105dc:	d1f6      	bne.n	80105cc <rmw_uxrce_init_subscription_memory+0x1c>
 80105de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop

080105e4 <rmw_uxrce_init_node_memory>:
 80105e4:	b1b2      	cbz	r2, 8010614 <rmw_uxrce_init_node_memory+0x30>
 80105e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e8:	7a07      	ldrb	r7, [r0, #8]
 80105ea:	4605      	mov	r5, r0
 80105ec:	b98f      	cbnz	r7, 8010612 <rmw_uxrce_init_node_memory+0x2e>
 80105ee:	e9c0 7700 	strd	r7, r7, [r0]
 80105f2:	460c      	mov	r4, r1
 80105f4:	23a4      	movs	r3, #164	; 0xa4
 80105f6:	2101      	movs	r1, #1
 80105f8:	fb03 4602 	mla	r6, r3, r2, r4
 80105fc:	60c3      	str	r3, [r0, #12]
 80105fe:	7201      	strb	r1, [r0, #8]
 8010600:	4621      	mov	r1, r4
 8010602:	4628      	mov	r0, r5
 8010604:	f006 fdce 	bl	80171a4 <put_memory>
 8010608:	60e4      	str	r4, [r4, #12]
 801060a:	f804 7ba4 	strb.w	r7, [r4], #164
 801060e:	42a6      	cmp	r6, r4
 8010610:	d1f6      	bne.n	8010600 <rmw_uxrce_init_node_memory+0x1c>
 8010612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop

08010618 <rmw_uxrce_init_session_memory>:
 8010618:	b1d2      	cbz	r2, 8010650 <rmw_uxrce_init_session_memory+0x38>
 801061a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801061e:	7a07      	ldrb	r7, [r0, #8]
 8010620:	4605      	mov	r5, r0
 8010622:	b99f      	cbnz	r7, 801064c <rmw_uxrce_init_session_memory+0x34>
 8010624:	e9c0 7700 	strd	r7, r7, [r0]
 8010628:	f241 53a8 	movw	r3, #5544	; 0x15a8
 801062c:	460c      	mov	r4, r1
 801062e:	2101      	movs	r1, #1
 8010630:	fb03 4602 	mla	r6, r3, r2, r4
 8010634:	60c3      	str	r3, [r0, #12]
 8010636:	4698      	mov	r8, r3
 8010638:	7201      	strb	r1, [r0, #8]
 801063a:	4621      	mov	r1, r4
 801063c:	4628      	mov	r0, r5
 801063e:	f006 fdb1 	bl	80171a4 <put_memory>
 8010642:	60e4      	str	r4, [r4, #12]
 8010644:	7027      	strb	r7, [r4, #0]
 8010646:	4444      	add	r4, r8
 8010648:	42a6      	cmp	r6, r4
 801064a:	d1f6      	bne.n	801063a <rmw_uxrce_init_session_memory+0x22>
 801064c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010650:	4770      	bx	lr
 8010652:	bf00      	nop

08010654 <rmw_uxrce_init_topic_memory>:
 8010654:	b1c2      	cbz	r2, 8010688 <rmw_uxrce_init_topic_memory+0x34>
 8010656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010658:	7a07      	ldrb	r7, [r0, #8]
 801065a:	4606      	mov	r6, r0
 801065c:	b99f      	cbnz	r7, 8010686 <rmw_uxrce_init_topic_memory+0x32>
 801065e:	e9c0 7700 	strd	r7, r7, [r0]
 8010662:	460c      	mov	r4, r1
 8010664:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010668:	2101      	movs	r1, #1
 801066a:	231c      	movs	r3, #28
 801066c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010670:	7201      	strb	r1, [r0, #8]
 8010672:	60c3      	str	r3, [r0, #12]
 8010674:	4621      	mov	r1, r4
 8010676:	4630      	mov	r0, r6
 8010678:	f006 fd94 	bl	80171a4 <put_memory>
 801067c:	60e4      	str	r4, [r4, #12]
 801067e:	f804 7b1c 	strb.w	r7, [r4], #28
 8010682:	42a5      	cmp	r5, r4
 8010684:	d1f6      	bne.n	8010674 <rmw_uxrce_init_topic_memory+0x20>
 8010686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010688:	4770      	bx	lr
 801068a:	bf00      	nop

0801068c <rmw_uxrce_init_static_input_buffer_memory>:
 801068c:	b1d2      	cbz	r2, 80106c4 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 801068e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010690:	7a07      	ldrb	r7, [r0, #8]
 8010692:	4606      	mov	r6, r0
 8010694:	b9af      	cbnz	r7, 80106c2 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 8010696:	e9c0 7700 	strd	r7, r7, [r0]
 801069a:	460c      	mov	r4, r1
 801069c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80106a0:	2101      	movs	r1, #1
 80106a2:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80106a6:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 80106aa:	7201      	strb	r1, [r0, #8]
 80106ac:	60c3      	str	r3, [r0, #12]
 80106ae:	4621      	mov	r1, r4
 80106b0:	4630      	mov	r0, r6
 80106b2:	f006 fd77 	bl	80171a4 <put_memory>
 80106b6:	60e4      	str	r4, [r4, #12]
 80106b8:	7027      	strb	r7, [r4, #0]
 80106ba:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80106be:	42a5      	cmp	r5, r4
 80106c0:	d1f5      	bne.n	80106ae <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80106c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop

080106c8 <rmw_uxrce_init_init_options_impl_memory>:
 80106c8:	b1b2      	cbz	r2, 80106f8 <rmw_uxrce_init_init_options_impl_memory+0x30>
 80106ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106cc:	7a07      	ldrb	r7, [r0, #8]
 80106ce:	4605      	mov	r5, r0
 80106d0:	b98f      	cbnz	r7, 80106f6 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 80106d2:	e9c0 7700 	strd	r7, r7, [r0]
 80106d6:	460c      	mov	r4, r1
 80106d8:	232c      	movs	r3, #44	; 0x2c
 80106da:	2101      	movs	r1, #1
 80106dc:	fb03 4602 	mla	r6, r3, r2, r4
 80106e0:	60c3      	str	r3, [r0, #12]
 80106e2:	7201      	strb	r1, [r0, #8]
 80106e4:	4621      	mov	r1, r4
 80106e6:	4628      	mov	r0, r5
 80106e8:	f006 fd5c 	bl	80171a4 <put_memory>
 80106ec:	60e4      	str	r4, [r4, #12]
 80106ee:	f804 7b2c 	strb.w	r7, [r4], #44
 80106f2:	42a6      	cmp	r6, r4
 80106f4:	d1f6      	bne.n	80106e4 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 80106f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106f8:	4770      	bx	lr
 80106fa:	bf00      	nop

080106fc <rmw_uxrce_init_wait_set_memory>:
 80106fc:	b1c2      	cbz	r2, 8010730 <rmw_uxrce_init_wait_set_memory+0x34>
 80106fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010700:	7a07      	ldrb	r7, [r0, #8]
 8010702:	4606      	mov	r6, r0
 8010704:	b99f      	cbnz	r7, 801072e <rmw_uxrce_init_wait_set_memory+0x32>
 8010706:	e9c0 7700 	strd	r7, r7, [r0]
 801070a:	460c      	mov	r4, r1
 801070c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010710:	2101      	movs	r1, #1
 8010712:	231c      	movs	r3, #28
 8010714:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010718:	7201      	strb	r1, [r0, #8]
 801071a:	60c3      	str	r3, [r0, #12]
 801071c:	4621      	mov	r1, r4
 801071e:	4630      	mov	r0, r6
 8010720:	f006 fd40 	bl	80171a4 <put_memory>
 8010724:	60e4      	str	r4, [r4, #12]
 8010726:	f804 7b1c 	strb.w	r7, [r4], #28
 801072a:	42a5      	cmp	r5, r4
 801072c:	d1f6      	bne.n	801071c <rmw_uxrce_init_wait_set_memory+0x20>
 801072e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop

08010734 <rmw_uxrce_init_guard_condition_memory>:
 8010734:	b1b2      	cbz	r2, 8010764 <rmw_uxrce_init_guard_condition_memory+0x30>
 8010736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010738:	7a07      	ldrb	r7, [r0, #8]
 801073a:	4605      	mov	r5, r0
 801073c:	b98f      	cbnz	r7, 8010762 <rmw_uxrce_init_guard_condition_memory+0x2e>
 801073e:	e9c0 7700 	strd	r7, r7, [r0]
 8010742:	460c      	mov	r4, r1
 8010744:	2320      	movs	r3, #32
 8010746:	2101      	movs	r1, #1
 8010748:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 801074c:	7201      	strb	r1, [r0, #8]
 801074e:	60c3      	str	r3, [r0, #12]
 8010750:	4621      	mov	r1, r4
 8010752:	4628      	mov	r0, r5
 8010754:	f006 fd26 	bl	80171a4 <put_memory>
 8010758:	60e4      	str	r4, [r4, #12]
 801075a:	f804 7b20 	strb.w	r7, [r4], #32
 801075e:	42a6      	cmp	r6, r4
 8010760:	d1f6      	bne.n	8010750 <rmw_uxrce_init_guard_condition_memory+0x1c>
 8010762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010764:	4770      	bx	lr
 8010766:	bf00      	nop

08010768 <rmw_uxrce_fini_session_memory>:
 8010768:	4601      	mov	r1, r0
 801076a:	4801      	ldr	r0, [pc, #4]	; (8010770 <rmw_uxrce_fini_session_memory+0x8>)
 801076c:	f006 bd1a 	b.w	80171a4 <put_memory>
 8010770:	2000d170 	.word	0x2000d170

08010774 <rmw_uxrce_fini_node_memory>:
 8010774:	b538      	push	{r3, r4, r5, lr}
 8010776:	4604      	mov	r4, r0
 8010778:	6800      	ldr	r0, [r0, #0]
 801077a:	b128      	cbz	r0, 8010788 <rmw_uxrce_fini_node_memory+0x14>
 801077c:	4b07      	ldr	r3, [pc, #28]	; (801079c <rmw_uxrce_fini_node_memory+0x28>)
 801077e:	6819      	ldr	r1, [r3, #0]
 8010780:	f7ef fd2e 	bl	80001e0 <strcmp>
 8010784:	b940      	cbnz	r0, 8010798 <rmw_uxrce_fini_node_memory+0x24>
 8010786:	6020      	str	r0, [r4, #0]
 8010788:	6861      	ldr	r1, [r4, #4]
 801078a:	b129      	cbz	r1, 8010798 <rmw_uxrce_fini_node_memory+0x24>
 801078c:	2500      	movs	r5, #0
 801078e:	4804      	ldr	r0, [pc, #16]	; (80107a0 <rmw_uxrce_fini_node_memory+0x2c>)
 8010790:	610d      	str	r5, [r1, #16]
 8010792:	f006 fd07 	bl	80171a4 <put_memory>
 8010796:	6065      	str	r5, [r4, #4]
 8010798:	bd38      	pop	{r3, r4, r5, pc}
 801079a:	bf00      	nop
 801079c:	0801f314 	.word	0x0801f314
 80107a0:	2000cf9c 	.word	0x2000cf9c

080107a4 <rmw_uxrce_fini_publisher_memory>:
 80107a4:	b510      	push	{r4, lr}
 80107a6:	4604      	mov	r4, r0
 80107a8:	6800      	ldr	r0, [r0, #0]
 80107aa:	b128      	cbz	r0, 80107b8 <rmw_uxrce_fini_publisher_memory+0x14>
 80107ac:	4b06      	ldr	r3, [pc, #24]	; (80107c8 <rmw_uxrce_fini_publisher_memory+0x24>)
 80107ae:	6819      	ldr	r1, [r3, #0]
 80107b0:	f7ef fd16 	bl	80001e0 <strcmp>
 80107b4:	b938      	cbnz	r0, 80107c6 <rmw_uxrce_fini_publisher_memory+0x22>
 80107b6:	6020      	str	r0, [r4, #0]
 80107b8:	6861      	ldr	r1, [r4, #4]
 80107ba:	b121      	cbz	r1, 80107c6 <rmw_uxrce_fini_publisher_memory+0x22>
 80107bc:	4803      	ldr	r0, [pc, #12]	; (80107cc <rmw_uxrce_fini_publisher_memory+0x28>)
 80107be:	f006 fcf1 	bl	80171a4 <put_memory>
 80107c2:	2300      	movs	r3, #0
 80107c4:	6063      	str	r3, [r4, #4]
 80107c6:	bd10      	pop	{r4, pc}
 80107c8:	0801f314 	.word	0x0801f314
 80107cc:	20009fd8 	.word	0x20009fd8

080107d0 <rmw_uxrce_fini_subscription_memory>:
 80107d0:	b510      	push	{r4, lr}
 80107d2:	4604      	mov	r4, r0
 80107d4:	6800      	ldr	r0, [r0, #0]
 80107d6:	b128      	cbz	r0, 80107e4 <rmw_uxrce_fini_subscription_memory+0x14>
 80107d8:	4b06      	ldr	r3, [pc, #24]	; (80107f4 <rmw_uxrce_fini_subscription_memory+0x24>)
 80107da:	6819      	ldr	r1, [r3, #0]
 80107dc:	f7ef fd00 	bl	80001e0 <strcmp>
 80107e0:	b938      	cbnz	r0, 80107f2 <rmw_uxrce_fini_subscription_memory+0x22>
 80107e2:	6020      	str	r0, [r4, #0]
 80107e4:	6861      	ldr	r1, [r4, #4]
 80107e6:	b121      	cbz	r1, 80107f2 <rmw_uxrce_fini_subscription_memory+0x22>
 80107e8:	4803      	ldr	r0, [pc, #12]	; (80107f8 <rmw_uxrce_fini_subscription_memory+0x28>)
 80107ea:	f006 fcdb 	bl	80171a4 <put_memory>
 80107ee:	2300      	movs	r3, #0
 80107f0:	6063      	str	r3, [r4, #4]
 80107f2:	bd10      	pop	{r4, pc}
 80107f4:	0801f314 	.word	0x0801f314
 80107f8:	2000d234 	.word	0x2000d234

080107fc <rmw_uxrce_fini_service_memory>:
 80107fc:	b510      	push	{r4, lr}
 80107fe:	4604      	mov	r4, r0
 8010800:	6800      	ldr	r0, [r0, #0]
 8010802:	b128      	cbz	r0, 8010810 <rmw_uxrce_fini_service_memory+0x14>
 8010804:	4b06      	ldr	r3, [pc, #24]	; (8010820 <rmw_uxrce_fini_service_memory+0x24>)
 8010806:	6819      	ldr	r1, [r3, #0]
 8010808:	f7ef fcea 	bl	80001e0 <strcmp>
 801080c:	b938      	cbnz	r0, 801081e <rmw_uxrce_fini_service_memory+0x22>
 801080e:	6020      	str	r0, [r4, #0]
 8010810:	6861      	ldr	r1, [r4, #4]
 8010812:	b121      	cbz	r1, 801081e <rmw_uxrce_fini_service_memory+0x22>
 8010814:	4803      	ldr	r0, [pc, #12]	; (8010824 <rmw_uxrce_fini_service_memory+0x28>)
 8010816:	f006 fcc5 	bl	80171a4 <put_memory>
 801081a:	2300      	movs	r3, #0
 801081c:	6063      	str	r3, [r4, #4]
 801081e:	bd10      	pop	{r4, pc}
 8010820:	0801f314 	.word	0x0801f314
 8010824:	2000d224 	.word	0x2000d224

08010828 <rmw_uxrce_fini_client_memory>:
 8010828:	b510      	push	{r4, lr}
 801082a:	4604      	mov	r4, r0
 801082c:	6800      	ldr	r0, [r0, #0]
 801082e:	b128      	cbz	r0, 801083c <rmw_uxrce_fini_client_memory+0x14>
 8010830:	4b06      	ldr	r3, [pc, #24]	; (801084c <rmw_uxrce_fini_client_memory+0x24>)
 8010832:	6819      	ldr	r1, [r3, #0]
 8010834:	f7ef fcd4 	bl	80001e0 <strcmp>
 8010838:	b938      	cbnz	r0, 801084a <rmw_uxrce_fini_client_memory+0x22>
 801083a:	6020      	str	r0, [r4, #0]
 801083c:	6861      	ldr	r1, [r4, #4]
 801083e:	b121      	cbz	r1, 801084a <rmw_uxrce_fini_client_memory+0x22>
 8010840:	4803      	ldr	r0, [pc, #12]	; (8010850 <rmw_uxrce_fini_client_memory+0x28>)
 8010842:	f006 fcaf 	bl	80171a4 <put_memory>
 8010846:	2300      	movs	r3, #0
 8010848:	6063      	str	r3, [r4, #4]
 801084a:	bd10      	pop	{r4, pc}
 801084c:	0801f314 	.word	0x0801f314
 8010850:	2000a858 	.word	0x2000a858

08010854 <rmw_uxrce_fini_topic_memory>:
 8010854:	b510      	push	{r4, lr}
 8010856:	4601      	mov	r1, r0
 8010858:	4604      	mov	r4, r0
 801085a:	4803      	ldr	r0, [pc, #12]	; (8010868 <rmw_uxrce_fini_topic_memory+0x14>)
 801085c:	f006 fca2 	bl	80171a4 <put_memory>
 8010860:	2300      	movs	r3, #0
 8010862:	61a3      	str	r3, [r4, #24]
 8010864:	bd10      	pop	{r4, pc}
 8010866:	bf00      	nop
 8010868:	2000d160 	.word	0x2000d160

0801086c <rmw_uxrce_get_static_input_buffer_for_entity>:
 801086c:	b082      	sub	sp, #8
 801086e:	b4f0      	push	{r4, r5, r6, r7}
 8010870:	4923      	ldr	r1, [pc, #140]	; (8010900 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8010872:	ac04      	add	r4, sp, #16
 8010874:	e884 000c 	stmia.w	r4, {r2, r3}
 8010878:	680d      	ldr	r5, [r1, #0]
 801087a:	9c05      	ldr	r4, [sp, #20]
 801087c:	2d00      	cmp	r5, #0
 801087e:	d03d      	beq.n	80108fc <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8010880:	462b      	mov	r3, r5
 8010882:	2100      	movs	r1, #0
 8010884:	68da      	ldr	r2, [r3, #12]
 8010886:	689b      	ldr	r3, [r3, #8]
 8010888:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 801088c:	4290      	cmp	r0, r2
 801088e:	bf08      	it	eq
 8010890:	3101      	addeq	r1, #1
 8010892:	2b00      	cmp	r3, #0
 8010894:	d1f6      	bne.n	8010884 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010896:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801089a:	2b02      	cmp	r3, #2
 801089c:	d026      	beq.n	80108ec <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 801089e:	d906      	bls.n	80108ae <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80108a0:	2b03      	cmp	r3, #3
 80108a2:	d004      	beq.n	80108ae <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80108a4:	2100      	movs	r1, #0
 80108a6:	bcf0      	pop	{r4, r5, r6, r7}
 80108a8:	4608      	mov	r0, r1
 80108aa:	b002      	add	sp, #8
 80108ac:	4770      	bx	lr
 80108ae:	b304      	cbz	r4, 80108f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80108b0:	428c      	cmp	r4, r1
 80108b2:	d81e      	bhi.n	80108f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80108b4:	2d00      	cmp	r5, #0
 80108b6:	d0f5      	beq.n	80108a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80108b8:	2100      	movs	r1, #0
 80108ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80108be:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80108c2:	e002      	b.n	80108ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 80108c4:	68ad      	ldr	r5, [r5, #8]
 80108c6:	2d00      	cmp	r5, #0
 80108c8:	d0ed      	beq.n	80108a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80108ca:	68eb      	ldr	r3, [r5, #12]
 80108cc:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 80108d0:	4290      	cmp	r0, r2
 80108d2:	d1f7      	bne.n	80108c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80108d4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80108d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108dc:	42b2      	cmp	r2, r6
 80108de:	eb73 0407 	sbcs.w	r4, r3, r7
 80108e2:	daef      	bge.n	80108c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80108e4:	4616      	mov	r6, r2
 80108e6:	461f      	mov	r7, r3
 80108e8:	4629      	mov	r1, r5
 80108ea:	e7eb      	b.n	80108c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80108ec:	b10c      	cbz	r4, 80108f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80108ee:	428c      	cmp	r4, r1
 80108f0:	d9d8      	bls.n	80108a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80108f2:	bcf0      	pop	{r4, r5, r6, r7}
 80108f4:	4802      	ldr	r0, [pc, #8]	; (8010900 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80108f6:	b002      	add	sp, #8
 80108f8:	f006 bc44 	b.w	8017184 <get_memory>
 80108fc:	4629      	mov	r1, r5
 80108fe:	e7ca      	b.n	8010896 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010900:	20009fc8 	.word	0x20009fc8

08010904 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010904:	4b12      	ldr	r3, [pc, #72]	; (8010950 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	b1fb      	cbz	r3, 801094a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801090a:	b4f0      	push	{r4, r5, r6, r7}
 801090c:	f04f 0c00 	mov.w	ip, #0
 8010910:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010914:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8010918:	e001      	b.n	801091e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	b193      	cbz	r3, 8010944 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 801091e:	68da      	ldr	r2, [r3, #12]
 8010920:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8010924:	4288      	cmp	r0, r1
 8010926:	d1f8      	bne.n	801091a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010928:	f602 0218 	addw	r2, r2, #2072	; 0x818
 801092c:	e9d2 6700 	ldrd	r6, r7, [r2]
 8010930:	42a6      	cmp	r6, r4
 8010932:	eb77 0205 	sbcs.w	r2, r7, r5
 8010936:	daf0      	bge.n	801091a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010938:	469c      	mov	ip, r3
 801093a:	689b      	ldr	r3, [r3, #8]
 801093c:	4634      	mov	r4, r6
 801093e:	463d      	mov	r5, r7
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1ec      	bne.n	801091e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010944:	4660      	mov	r0, ip
 8010946:	bcf0      	pop	{r4, r5, r6, r7}
 8010948:	4770      	bx	lr
 801094a:	4618      	mov	r0, r3
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	20009fc8 	.word	0x20009fc8
 8010954:	00000000 	.word	0x00000000

08010958 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	4e38      	ldr	r6, [pc, #224]	; (8010a40 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 801095e:	f8d6 8000 	ldr.w	r8, [r6]
 8010962:	b083      	sub	sp, #12
 8010964:	f006 fffa 	bl	801795c <rmw_uros_epoch_nanos>
 8010968:	f1b8 0f00 	cmp.w	r8, #0
 801096c:	d05f      	beq.n	8010a2e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 801096e:	46b1      	mov	r9, r6
 8010970:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010974:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010978:	2b04      	cmp	r3, #4
 801097a:	4682      	mov	sl, r0
 801097c:	468b      	mov	fp, r1
 801097e:	d02d      	beq.n	80109dc <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010980:	2b05      	cmp	r3, #5
 8010982:	d041      	beq.n	8010a08 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 8010984:	2b03      	cmp	r3, #3
 8010986:	d029      	beq.n	80109dc <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010988:	2200      	movs	r2, #0
 801098a:	2300      	movs	r3, #0
 801098c:	e9cd 2300 	strd	r2, r3, [sp]
 8010990:	2001      	movs	r0, #1
 8010992:	2100      	movs	r1, #0
 8010994:	9b00      	ldr	r3, [sp, #0]
 8010996:	f606 0618 	addw	r6, r6, #2072	; 0x818
 801099a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801099e:	18c2      	adds	r2, r0, r3
 80109a0:	9b01      	ldr	r3, [sp, #4]
 80109a2:	eb41 0303 	adc.w	r3, r1, r3
 80109a6:	1994      	adds	r4, r2, r6
 80109a8:	eb43 0507 	adc.w	r5, r3, r7
 80109ac:	4554      	cmp	r4, sl
 80109ae:	eb75 020b 	sbcs.w	r2, r5, fp
 80109b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109b6:	db03      	blt.n	80109c0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 80109b8:	45b2      	cmp	sl, r6
 80109ba:	eb7b 0207 	sbcs.w	r2, fp, r7
 80109be:	da05      	bge.n	80109cc <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 80109c0:	4641      	mov	r1, r8
 80109c2:	4648      	mov	r0, r9
 80109c4:	9300      	str	r3, [sp, #0]
 80109c6:	f006 fbed 	bl	80171a4 <put_memory>
 80109ca:	9b00      	ldr	r3, [sp, #0]
 80109cc:	b37b      	cbz	r3, 8010a2e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 80109ce:	4698      	mov	r8, r3
 80109d0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80109d4:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 80109d8:	2b04      	cmp	r3, #4
 80109da:	d1d1      	bne.n	8010980 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 80109dc:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 80109e0:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 80109e4:	e9cd 2300 	strd	r2, r3, [sp]
 80109e8:	4313      	orrs	r3, r2
 80109ea:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 80109ee:	d015      	beq.n	8010a1c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80109f0:	9a01      	ldr	r2, [sp, #4]
 80109f2:	4b14      	ldr	r3, [pc, #80]	; (8010a44 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 80109f4:	fb03 f702 	mul.w	r7, r3, r2
 80109f8:	9a00      	ldr	r2, [sp, #0]
 80109fa:	fba2 2303 	umull	r2, r3, r2, r3
 80109fe:	e9cd 2300 	strd	r2, r3, [sp]
 8010a02:	443b      	add	r3, r7
 8010a04:	9301      	str	r3, [sp, #4]
 8010a06:	e7c5      	b.n	8010994 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010a08:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010a0c:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 8010a10:	e9cd 2300 	strd	r2, r3, [sp]
 8010a14:	4313      	orrs	r3, r2
 8010a16:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8010a1a:	d1e9      	bne.n	80109f0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 8010a1c:	ea50 0301 	orrs.w	r3, r0, r1
 8010a20:	bf02      	ittt	eq
 8010a22:	a305      	addeq	r3, pc, #20	; (adr r3, 8010a38 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 8010a24:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010a28:	e9cd 2300 	strdeq	r2, r3, [sp]
 8010a2c:	e7b2      	b.n	8010994 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010a2e:	b003      	add	sp, #12
 8010a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a34:	f3af 8000 	nop.w
 8010a38:	fc23ac00 	.word	0xfc23ac00
 8010a3c:	00000006 	.word	0x00000006
 8010a40:	20009fc8 	.word	0x20009fc8
 8010a44:	3b9aca00 	.word	0x3b9aca00

08010a48 <run_xrce_session>:
 8010a48:	b510      	push	{r4, lr}
 8010a4a:	788c      	ldrb	r4, [r1, #2]
 8010a4c:	b086      	sub	sp, #24
 8010a4e:	2c01      	cmp	r4, #1
 8010a50:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010a54:	d00c      	beq.n	8010a70 <run_xrce_session+0x28>
 8010a56:	4619      	mov	r1, r3
 8010a58:	2301      	movs	r3, #1
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	f10d 020e 	add.w	r2, sp, #14
 8010a60:	f10d 0317 	add.w	r3, sp, #23
 8010a64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010a68:	f001 fb20 	bl	80120ac <uxr_run_session_until_all_status>
 8010a6c:	b006      	add	sp, #24
 8010a6e:	bd10      	pop	{r4, pc}
 8010a70:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010a74:	f000 ff38 	bl	80118e8 <uxr_flash_output_streams>
 8010a78:	4620      	mov	r0, r4
 8010a7a:	b006      	add	sp, #24
 8010a7c:	bd10      	pop	{r4, pc}
 8010a7e:	bf00      	nop

08010a80 <convert_qos_profile>:
 8010a80:	b430      	push	{r4, r5}
 8010a82:	7a0d      	ldrb	r5, [r1, #8]
 8010a84:	780c      	ldrb	r4, [r1, #0]
 8010a86:	7a4a      	ldrb	r2, [r1, #9]
 8010a88:	8889      	ldrh	r1, [r1, #4]
 8010a8a:	8081      	strh	r1, [r0, #4]
 8010a8c:	f1a5 0502 	sub.w	r5, r5, #2
 8010a90:	f1a4 0402 	sub.w	r4, r4, #2
 8010a94:	2a02      	cmp	r2, #2
 8010a96:	fab5 f585 	clz	r5, r5
 8010a9a:	fab4 f484 	clz	r4, r4
 8010a9e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010aa2:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010aa6:	bf18      	it	ne
 8010aa8:	2200      	movne	r2, #0
 8010aaa:	7045      	strb	r5, [r0, #1]
 8010aac:	7084      	strb	r4, [r0, #2]
 8010aae:	7002      	strb	r2, [r0, #0]
 8010ab0:	bc30      	pop	{r4, r5}
 8010ab2:	4770      	bx	lr

08010ab4 <generate_type_name>:
 8010ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	700b      	strb	r3, [r1, #0]
 8010aba:	6803      	ldr	r3, [r0, #0]
 8010abc:	b087      	sub	sp, #28
 8010abe:	4614      	mov	r4, r2
 8010ac0:	b1d3      	cbz	r3, 8010af8 <generate_type_name+0x44>
 8010ac2:	4d0f      	ldr	r5, [pc, #60]	; (8010b00 <generate_type_name+0x4c>)
 8010ac4:	462f      	mov	r7, r5
 8010ac6:	4a0f      	ldr	r2, [pc, #60]	; (8010b04 <generate_type_name+0x50>)
 8010ac8:	4e0f      	ldr	r6, [pc, #60]	; (8010b08 <generate_type_name+0x54>)
 8010aca:	6840      	ldr	r0, [r0, #4]
 8010acc:	9004      	str	r0, [sp, #16]
 8010ace:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8010ad2:	4608      	mov	r0, r1
 8010ad4:	9205      	str	r2, [sp, #20]
 8010ad6:	9503      	str	r5, [sp, #12]
 8010ad8:	4a0c      	ldr	r2, [pc, #48]	; (8010b0c <generate_type_name+0x58>)
 8010ada:	9700      	str	r7, [sp, #0]
 8010adc:	4621      	mov	r1, r4
 8010ade:	f00a f90b 	bl	801acf8 <sniprintf>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	db05      	blt.n	8010af2 <generate_type_name+0x3e>
 8010ae6:	4284      	cmp	r4, r0
 8010ae8:	bfd4      	ite	le
 8010aea:	2000      	movle	r0, #0
 8010aec:	2001      	movgt	r0, #1
 8010aee:	b007      	add	sp, #28
 8010af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010af2:	2000      	movs	r0, #0
 8010af4:	b007      	add	sp, #28
 8010af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010af8:	4b05      	ldr	r3, [pc, #20]	; (8010b10 <generate_type_name+0x5c>)
 8010afa:	4d01      	ldr	r5, [pc, #4]	; (8010b00 <generate_type_name+0x4c>)
 8010afc:	461f      	mov	r7, r3
 8010afe:	e7e2      	b.n	8010ac6 <generate_type_name+0x12>
 8010b00:	0801ebb0 	.word	0x0801ebb0
 8010b04:	0801ebc4 	.word	0x0801ebc4
 8010b08:	0801ebc8 	.word	0x0801ebc8
 8010b0c:	0801ebb4 	.word	0x0801ebb4
 8010b10:	0801f0ec 	.word	0x0801f0ec

08010b14 <generate_topic_name>:
 8010b14:	b510      	push	{r4, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	4b09      	ldr	r3, [pc, #36]	; (8010b40 <generate_topic_name+0x2c>)
 8010b1a:	9000      	str	r0, [sp, #0]
 8010b1c:	4614      	mov	r4, r2
 8010b1e:	4608      	mov	r0, r1
 8010b20:	4611      	mov	r1, r2
 8010b22:	4a08      	ldr	r2, [pc, #32]	; (8010b44 <generate_topic_name+0x30>)
 8010b24:	f00a f8e8 	bl	801acf8 <sniprintf>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	db05      	blt.n	8010b38 <generate_topic_name+0x24>
 8010b2c:	4284      	cmp	r4, r0
 8010b2e:	bfd4      	ite	le
 8010b30:	2000      	movle	r0, #0
 8010b32:	2001      	movgt	r0, #1
 8010b34:	b002      	add	sp, #8
 8010b36:	bd10      	pop	{r4, pc}
 8010b38:	2000      	movs	r0, #0
 8010b3a:	b002      	add	sp, #8
 8010b3c:	bd10      	pop	{r4, pc}
 8010b3e:	bf00      	nop
 8010b40:	0801ebd4 	.word	0x0801ebd4
 8010b44:	0801ebcc 	.word	0x0801ebcc

08010b48 <is_uxrce_rmw_identifier_valid>:
 8010b48:	b510      	push	{r4, lr}
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	b140      	cbz	r0, 8010b60 <is_uxrce_rmw_identifier_valid+0x18>
 8010b4e:	f006 fb81 	bl	8017254 <rmw_get_implementation_identifier>
 8010b52:	4601      	mov	r1, r0
 8010b54:	4620      	mov	r0, r4
 8010b56:	f7ef fb43 	bl	80001e0 <strcmp>
 8010b5a:	fab0 f080 	clz	r0, r0
 8010b5e:	0940      	lsrs	r0, r0, #5
 8010b60:	bd10      	pop	{r4, pc}
 8010b62:	bf00      	nop

08010b64 <get_message_typesupport_handle>:
 8010b64:	6883      	ldr	r3, [r0, #8]
 8010b66:	4718      	bx	r3

08010b68 <get_message_typesupport_handle_function>:
 8010b68:	b510      	push	{r4, lr}
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	6800      	ldr	r0, [r0, #0]
 8010b6e:	f7ef fb37 	bl	80001e0 <strcmp>
 8010b72:	2800      	cmp	r0, #0
 8010b74:	bf0c      	ite	eq
 8010b76:	4620      	moveq	r0, r4
 8010b78:	2000      	movne	r0, #0
 8010b7a:	bd10      	pop	{r4, pc}

08010b7c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8010b7c:	f000 b862 	b.w	8010c44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>

08010b80 <_String__max_serialized_size>:
 8010b80:	2000      	movs	r0, #0
 8010b82:	4770      	bx	lr

08010b84 <_String__cdr_serialize>:
 8010b84:	b1c0      	cbz	r0, 8010bb8 <_String__cdr_serialize+0x34>
 8010b86:	b570      	push	{r4, r5, r6, lr}
 8010b88:	6806      	ldr	r6, [r0, #0]
 8010b8a:	460d      	mov	r5, r1
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	b156      	cbz	r6, 8010ba6 <_String__cdr_serialize+0x22>
 8010b90:	4630      	mov	r0, r6
 8010b92:	f7ef fb2f 	bl	80001f4 <strlen>
 8010b96:	4631      	mov	r1, r6
 8010b98:	6060      	str	r0, [r4, #4]
 8010b9a:	1c42      	adds	r2, r0, #1
 8010b9c:	4628      	mov	r0, r5
 8010b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ba2:	f000 b915 	b.w	8010dd0 <ucdr_serialize_sequence_char>
 8010ba6:	4630      	mov	r0, r6
 8010ba8:	6060      	str	r0, [r4, #4]
 8010baa:	4632      	mov	r2, r6
 8010bac:	4631      	mov	r1, r6
 8010bae:	4628      	mov	r0, r5
 8010bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bb4:	f000 b90c 	b.w	8010dd0 <ucdr_serialize_sequence_char>
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop

08010bbc <get_serialized_size_std_msgs__msg__String>:
 8010bbc:	b510      	push	{r4, lr}
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	b130      	cbz	r0, 8010bd0 <get_serialized_size_std_msgs__msg__String+0x14>
 8010bc2:	4608      	mov	r0, r1
 8010bc4:	2104      	movs	r1, #4
 8010bc6:	f000 f897 	bl	8010cf8 <ucdr_alignment>
 8010bca:	6863      	ldr	r3, [r4, #4]
 8010bcc:	3305      	adds	r3, #5
 8010bce:	4418      	add	r0, r3
 8010bd0:	bd10      	pop	{r4, pc}
 8010bd2:	bf00      	nop

08010bd4 <_String__cdr_deserialize>:
 8010bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bd6:	460c      	mov	r4, r1
 8010bd8:	b083      	sub	sp, #12
 8010bda:	b1a1      	cbz	r1, 8010c06 <_String__cdr_deserialize+0x32>
 8010bdc:	688f      	ldr	r7, [r1, #8]
 8010bde:	6809      	ldr	r1, [r1, #0]
 8010be0:	ab01      	add	r3, sp, #4
 8010be2:	463a      	mov	r2, r7
 8010be4:	4606      	mov	r6, r0
 8010be6:	f000 f905 	bl	8010df4 <ucdr_deserialize_sequence_char>
 8010bea:	9b01      	ldr	r3, [sp, #4]
 8010bec:	4605      	mov	r5, r0
 8010bee:	b920      	cbnz	r0, 8010bfa <_String__cdr_deserialize+0x26>
 8010bf0:	429f      	cmp	r7, r3
 8010bf2:	d30c      	bcc.n	8010c0e <_String__cdr_deserialize+0x3a>
 8010bf4:	4628      	mov	r0, r5
 8010bf6:	b003      	add	sp, #12
 8010bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bfa:	b103      	cbz	r3, 8010bfe <_String__cdr_deserialize+0x2a>
 8010bfc:	3b01      	subs	r3, #1
 8010bfe:	4628      	mov	r0, r5
 8010c00:	6063      	str	r3, [r4, #4]
 8010c02:	b003      	add	sp, #12
 8010c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c06:	460d      	mov	r5, r1
 8010c08:	4628      	mov	r0, r5
 8010c0a:	b003      	add	sp, #12
 8010c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c0e:	2101      	movs	r1, #1
 8010c10:	75b0      	strb	r0, [r6, #22]
 8010c12:	7571      	strb	r1, [r6, #21]
 8010c14:	6060      	str	r0, [r4, #4]
 8010c16:	4630      	mov	r0, r6
 8010c18:	f000 f884 	bl	8010d24 <ucdr_align_to>
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	9901      	ldr	r1, [sp, #4]
 8010c20:	f000 f8b6 	bl	8010d90 <ucdr_advance_buffer>
 8010c24:	4628      	mov	r0, r5
 8010c26:	b003      	add	sp, #12
 8010c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c2a:	bf00      	nop

08010c2c <_String__get_serialized_size>:
 8010c2c:	b510      	push	{r4, lr}
 8010c2e:	4604      	mov	r4, r0
 8010c30:	b130      	cbz	r0, 8010c40 <_String__get_serialized_size+0x14>
 8010c32:	2104      	movs	r1, #4
 8010c34:	2000      	movs	r0, #0
 8010c36:	f000 f85f 	bl	8010cf8 <ucdr_alignment>
 8010c3a:	6863      	ldr	r3, [r4, #4]
 8010c3c:	3305      	adds	r3, #5
 8010c3e:	4418      	add	r0, r3
 8010c40:	bd10      	pop	{r4, pc}
 8010c42:	bf00      	nop

08010c44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8010c44:	4800      	ldr	r0, [pc, #0]	; (8010c48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8010c46:	4770      	bx	lr
 8010c48:	20000064 	.word	0x20000064

08010c4c <ucdr_check_buffer_available_for>:
 8010c4c:	7d83      	ldrb	r3, [r0, #22]
 8010c4e:	b93b      	cbnz	r3, 8010c60 <ucdr_check_buffer_available_for+0x14>
 8010c50:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010c54:	4419      	add	r1, r3
 8010c56:	4288      	cmp	r0, r1
 8010c58:	bf34      	ite	cc
 8010c5a:	2000      	movcc	r0, #0
 8010c5c:	2001      	movcs	r0, #1
 8010c5e:	4770      	bx	lr
 8010c60:	2000      	movs	r0, #0
 8010c62:	4770      	bx	lr

08010c64 <ucdr_check_final_buffer_behavior>:
 8010c64:	7d83      	ldrb	r3, [r0, #22]
 8010c66:	b943      	cbnz	r3, 8010c7a <ucdr_check_final_buffer_behavior+0x16>
 8010c68:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010c6c:	4291      	cmp	r1, r2
 8010c6e:	b510      	push	{r4, lr}
 8010c70:	4604      	mov	r4, r0
 8010c72:	d205      	bcs.n	8010c80 <ucdr_check_final_buffer_behavior+0x1c>
 8010c74:	2301      	movs	r3, #1
 8010c76:	4618      	mov	r0, r3
 8010c78:	bd10      	pop	{r4, pc}
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	4770      	bx	lr
 8010c80:	6982      	ldr	r2, [r0, #24]
 8010c82:	b13a      	cbz	r2, 8010c94 <ucdr_check_final_buffer_behavior+0x30>
 8010c84:	69c1      	ldr	r1, [r0, #28]
 8010c86:	4790      	blx	r2
 8010c88:	f080 0301 	eor.w	r3, r0, #1
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	75a0      	strb	r0, [r4, #22]
 8010c90:	4618      	mov	r0, r3
 8010c92:	bd10      	pop	{r4, pc}
 8010c94:	2001      	movs	r0, #1
 8010c96:	75a0      	strb	r0, [r4, #22]
 8010c98:	e7fa      	b.n	8010c90 <ucdr_check_final_buffer_behavior+0x2c>
 8010c9a:	bf00      	nop

08010c9c <ucdr_set_on_full_buffer_callback>:
 8010c9c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop

08010ca4 <ucdr_init_buffer_origin_offset_endian>:
 8010ca4:	b430      	push	{r4, r5}
 8010ca6:	9c02      	ldr	r4, [sp, #8]
 8010ca8:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8010cac:	6001      	str	r1, [r0, #0]
 8010cae:	440a      	add	r2, r1
 8010cb0:	60c3      	str	r3, [r0, #12]
 8010cb2:	4421      	add	r1, r4
 8010cb4:	441c      	add	r4, r3
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	6104      	str	r4, [r0, #16]
 8010cba:	7505      	strb	r5, [r0, #20]
 8010cbc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8010cc0:	bc30      	pop	{r4, r5}
 8010cc2:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8010cc6:	7543      	strb	r3, [r0, #21]
 8010cc8:	7583      	strb	r3, [r0, #22]
 8010cca:	4770      	bx	lr

08010ccc <ucdr_init_buffer_origin_offset>:
 8010ccc:	b510      	push	{r4, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	9c04      	ldr	r4, [sp, #16]
 8010cd2:	9400      	str	r4, [sp, #0]
 8010cd4:	2401      	movs	r4, #1
 8010cd6:	9401      	str	r4, [sp, #4]
 8010cd8:	f7ff ffe4 	bl	8010ca4 <ucdr_init_buffer_origin_offset_endian>
 8010cdc:	b002      	add	sp, #8
 8010cde:	bd10      	pop	{r4, pc}

08010ce0 <ucdr_init_buffer_origin>:
 8010ce0:	b510      	push	{r4, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	2400      	movs	r4, #0
 8010ce6:	9400      	str	r4, [sp, #0]
 8010ce8:	f7ff fff0 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 8010cec:	b002      	add	sp, #8
 8010cee:	bd10      	pop	{r4, pc}

08010cf0 <ucdr_init_buffer>:
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f7ff bff5 	b.w	8010ce0 <ucdr_init_buffer_origin>
 8010cf6:	bf00      	nop

08010cf8 <ucdr_alignment>:
 8010cf8:	fbb0 f3f1 	udiv	r3, r0, r1
 8010cfc:	fb03 0011 	mls	r0, r3, r1, r0
 8010d00:	1a08      	subs	r0, r1, r0
 8010d02:	3901      	subs	r1, #1
 8010d04:	4008      	ands	r0, r1
 8010d06:	4770      	bx	lr

08010d08 <ucdr_buffer_alignment>:
 8010d08:	7d43      	ldrb	r3, [r0, #21]
 8010d0a:	428b      	cmp	r3, r1
 8010d0c:	d208      	bcs.n	8010d20 <ucdr_buffer_alignment+0x18>
 8010d0e:	6903      	ldr	r3, [r0, #16]
 8010d10:	fbb3 f0f1 	udiv	r0, r3, r1
 8010d14:	fb01 3010 	mls	r0, r1, r0, r3
 8010d18:	1a08      	subs	r0, r1, r0
 8010d1a:	3901      	subs	r1, #1
 8010d1c:	4008      	ands	r0, r1
 8010d1e:	4770      	bx	lr
 8010d20:	2000      	movs	r0, #0
 8010d22:	4770      	bx	lr

08010d24 <ucdr_align_to>:
 8010d24:	b570      	push	{r4, r5, r6, lr}
 8010d26:	4604      	mov	r4, r0
 8010d28:	460e      	mov	r6, r1
 8010d2a:	f7ff ffed 	bl	8010d08 <ucdr_buffer_alignment>
 8010d2e:	68a5      	ldr	r5, [r4, #8]
 8010d30:	6863      	ldr	r3, [r4, #4]
 8010d32:	6922      	ldr	r2, [r4, #16]
 8010d34:	7566      	strb	r6, [r4, #21]
 8010d36:	4405      	add	r5, r0
 8010d38:	42ab      	cmp	r3, r5
 8010d3a:	4410      	add	r0, r2
 8010d3c:	bf28      	it	cs
 8010d3e:	462b      	movcs	r3, r5
 8010d40:	6120      	str	r0, [r4, #16]
 8010d42:	60a3      	str	r3, [r4, #8]
 8010d44:	bd70      	pop	{r4, r5, r6, pc}
 8010d46:	bf00      	nop

08010d48 <ucdr_buffer_length>:
 8010d48:	6882      	ldr	r2, [r0, #8]
 8010d4a:	6800      	ldr	r0, [r0, #0]
 8010d4c:	1a10      	subs	r0, r2, r0
 8010d4e:	4770      	bx	lr

08010d50 <ucdr_buffer_remaining>:
 8010d50:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010d54:	1a10      	subs	r0, r2, r0
 8010d56:	4770      	bx	lr

08010d58 <ucdr_check_final_buffer_behavior_array>:
 8010d58:	b538      	push	{r3, r4, r5, lr}
 8010d5a:	7d83      	ldrb	r3, [r0, #22]
 8010d5c:	b963      	cbnz	r3, 8010d78 <ucdr_check_final_buffer_behavior_array+0x20>
 8010d5e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	4604      	mov	r4, r0
 8010d66:	460d      	mov	r5, r1
 8010d68:	d308      	bcc.n	8010d7c <ucdr_check_final_buffer_behavior_array+0x24>
 8010d6a:	b139      	cbz	r1, 8010d7c <ucdr_check_final_buffer_behavior_array+0x24>
 8010d6c:	6983      	ldr	r3, [r0, #24]
 8010d6e:	b163      	cbz	r3, 8010d8a <ucdr_check_final_buffer_behavior_array+0x32>
 8010d70:	69c1      	ldr	r1, [r0, #28]
 8010d72:	4798      	blx	r3
 8010d74:	75a0      	strb	r0, [r4, #22]
 8010d76:	b108      	cbz	r0, 8010d7c <ucdr_check_final_buffer_behavior_array+0x24>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	bd38      	pop	{r3, r4, r5, pc}
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f7ff ffe7 	bl	8010d50 <ucdr_buffer_remaining>
 8010d82:	42a8      	cmp	r0, r5
 8010d84:	bf28      	it	cs
 8010d86:	4628      	movcs	r0, r5
 8010d88:	bd38      	pop	{r3, r4, r5, pc}
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	7583      	strb	r3, [r0, #22]
 8010d8e:	e7f3      	b.n	8010d78 <ucdr_check_final_buffer_behavior_array+0x20>

08010d90 <ucdr_advance_buffer>:
 8010d90:	b538      	push	{r3, r4, r5, lr}
 8010d92:	4604      	mov	r4, r0
 8010d94:	460d      	mov	r5, r1
 8010d96:	f7ff ff59 	bl	8010c4c <ucdr_check_buffer_available_for>
 8010d9a:	b178      	cbz	r0, 8010dbc <ucdr_advance_buffer+0x2c>
 8010d9c:	68a3      	ldr	r3, [r4, #8]
 8010d9e:	6921      	ldr	r1, [r4, #16]
 8010da0:	442b      	add	r3, r5
 8010da2:	60a3      	str	r3, [r4, #8]
 8010da4:	2301      	movs	r3, #1
 8010da6:	4429      	add	r1, r5
 8010da8:	7563      	strb	r3, [r4, #21]
 8010daa:	6121      	str	r1, [r4, #16]
 8010dac:	bd38      	pop	{r3, r4, r5, pc}
 8010dae:	68a2      	ldr	r2, [r4, #8]
 8010db0:	6923      	ldr	r3, [r4, #16]
 8010db2:	4402      	add	r2, r0
 8010db4:	4403      	add	r3, r0
 8010db6:	1a2d      	subs	r5, r5, r0
 8010db8:	60a2      	str	r2, [r4, #8]
 8010dba:	6123      	str	r3, [r4, #16]
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	4629      	mov	r1, r5
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f7ff ffc9 	bl	8010d58 <ucdr_check_final_buffer_behavior_array>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d1f1      	bne.n	8010dae <ucdr_advance_buffer+0x1e>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	7563      	strb	r3, [r4, #21]
 8010dce:	bd38      	pop	{r3, r4, r5, pc}

08010dd0 <ucdr_serialize_sequence_char>:
 8010dd0:	b570      	push	{r4, r5, r6, lr}
 8010dd2:	460e      	mov	r6, r1
 8010dd4:	4615      	mov	r5, r2
 8010dd6:	7d01      	ldrb	r1, [r0, #20]
 8010dd8:	4604      	mov	r4, r0
 8010dda:	f007 f9d7 	bl	801818c <ucdr_serialize_endian_uint32_t>
 8010dde:	b90d      	cbnz	r5, 8010de4 <ucdr_serialize_sequence_char+0x14>
 8010de0:	2001      	movs	r0, #1
 8010de2:	bd70      	pop	{r4, r5, r6, pc}
 8010de4:	7d21      	ldrb	r1, [r4, #20]
 8010de6:	462b      	mov	r3, r5
 8010de8:	4632      	mov	r2, r6
 8010dea:	4620      	mov	r0, r4
 8010dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010df0:	f006 bdc2 	b.w	8017978 <ucdr_serialize_endian_array_char>

08010df4 <ucdr_deserialize_sequence_char>:
 8010df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df8:	461d      	mov	r5, r3
 8010dfa:	4616      	mov	r6, r2
 8010dfc:	460f      	mov	r7, r1
 8010dfe:	461a      	mov	r2, r3
 8010e00:	7d01      	ldrb	r1, [r0, #20]
 8010e02:	4604      	mov	r4, r0
 8010e04:	f007 faea 	bl	80183dc <ucdr_deserialize_endian_uint32_t>
 8010e08:	682b      	ldr	r3, [r5, #0]
 8010e0a:	429e      	cmp	r6, r3
 8010e0c:	bf3c      	itt	cc
 8010e0e:	2201      	movcc	r2, #1
 8010e10:	75a2      	strbcc	r2, [r4, #22]
 8010e12:	b913      	cbnz	r3, 8010e1a <ucdr_deserialize_sequence_char+0x26>
 8010e14:	2001      	movs	r0, #1
 8010e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e1a:	7d21      	ldrb	r1, [r4, #20]
 8010e1c:	463a      	mov	r2, r7
 8010e1e:	4620      	mov	r0, r4
 8010e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e24:	f006 bdda 	b.w	80179dc <ucdr_deserialize_endian_array_char>

08010e28 <ucdr_serialize_sequence_uint8_t>:
 8010e28:	b570      	push	{r4, r5, r6, lr}
 8010e2a:	460e      	mov	r6, r1
 8010e2c:	4615      	mov	r5, r2
 8010e2e:	7d01      	ldrb	r1, [r0, #20]
 8010e30:	4604      	mov	r4, r0
 8010e32:	f007 f9ab 	bl	801818c <ucdr_serialize_endian_uint32_t>
 8010e36:	b90d      	cbnz	r5, 8010e3c <ucdr_serialize_sequence_uint8_t+0x14>
 8010e38:	2001      	movs	r0, #1
 8010e3a:	bd70      	pop	{r4, r5, r6, pc}
 8010e3c:	7d21      	ldrb	r1, [r4, #20]
 8010e3e:	462b      	mov	r3, r5
 8010e40:	4632      	mov	r2, r6
 8010e42:	4620      	mov	r0, r4
 8010e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e48:	f006 be2c 	b.w	8017aa4 <ucdr_serialize_endian_array_uint8_t>

08010e4c <ucdr_deserialize_sequence_uint8_t>:
 8010e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e50:	461d      	mov	r5, r3
 8010e52:	4616      	mov	r6, r2
 8010e54:	460f      	mov	r7, r1
 8010e56:	461a      	mov	r2, r3
 8010e58:	7d01      	ldrb	r1, [r0, #20]
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	f007 fabe 	bl	80183dc <ucdr_deserialize_endian_uint32_t>
 8010e60:	682b      	ldr	r3, [r5, #0]
 8010e62:	429e      	cmp	r6, r3
 8010e64:	bf3c      	itt	cc
 8010e66:	2201      	movcc	r2, #1
 8010e68:	75a2      	strbcc	r2, [r4, #22]
 8010e6a:	b913      	cbnz	r3, 8010e72 <ucdr_deserialize_sequence_uint8_t+0x26>
 8010e6c:	2001      	movs	r0, #1
 8010e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e72:	7d21      	ldrb	r1, [r4, #20]
 8010e74:	463a      	mov	r2, r7
 8010e76:	4620      	mov	r0, r4
 8010e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e7c:	f006 be76 	b.w	8017b6c <ucdr_deserialize_endian_array_uint8_t>

08010e80 <uxr_buffer_delete_entity>:
 8010e80:	b530      	push	{r4, r5, lr}
 8010e82:	b08f      	sub	sp, #60	; 0x3c
 8010e84:	2403      	movs	r4, #3
 8010e86:	2500      	movs	r5, #0
 8010e88:	e9cd 4500 	strd	r4, r5, [sp]
 8010e8c:	9202      	str	r2, [sp, #8]
 8010e8e:	ab06      	add	r3, sp, #24
 8010e90:	2204      	movs	r2, #4
 8010e92:	9103      	str	r1, [sp, #12]
 8010e94:	4604      	mov	r4, r0
 8010e96:	f001 fb45 	bl	8012524 <uxr_prepare_stream_to_write_submessage>
 8010e9a:	b918      	cbnz	r0, 8010ea4 <uxr_buffer_delete_entity+0x24>
 8010e9c:	4604      	mov	r4, r0
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	b00f      	add	sp, #60	; 0x3c
 8010ea2:	bd30      	pop	{r4, r5, pc}
 8010ea4:	9902      	ldr	r1, [sp, #8]
 8010ea6:	aa05      	add	r2, sp, #20
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f001 fc75 	bl	8012798 <uxr_init_base_object_request>
 8010eae:	a905      	add	r1, sp, #20
 8010eb0:	4604      	mov	r4, r0
 8010eb2:	a806      	add	r0, sp, #24
 8010eb4:	f003 fb2e 	bl	8014514 <uxr_serialize_DELETE_Payload>
 8010eb8:	4620      	mov	r0, r4
 8010eba:	b00f      	add	sp, #60	; 0x3c
 8010ebc:	bd30      	pop	{r4, r5, pc}
 8010ebe:	bf00      	nop

08010ec0 <uxr_common_create_entity>:
 8010ec0:	b530      	push	{r4, r5, lr}
 8010ec2:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8010ec6:	b08d      	sub	sp, #52	; 0x34
 8010ec8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010ecc:	2d01      	cmp	r5, #1
 8010ece:	bf0c      	ite	eq
 8010ed0:	f003 0201 	andeq.w	r2, r3, #1
 8010ed4:	2200      	movne	r2, #0
 8010ed6:	330e      	adds	r3, #14
 8010ed8:	4604      	mov	r4, r0
 8010eda:	441a      	add	r2, r3
 8010edc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8010ee0:	9001      	str	r0, [sp, #4]
 8010ee2:	2101      	movs	r1, #1
 8010ee4:	9100      	str	r1, [sp, #0]
 8010ee6:	b292      	uxth	r2, r2
 8010ee8:	9903      	ldr	r1, [sp, #12]
 8010eea:	ab04      	add	r3, sp, #16
 8010eec:	4620      	mov	r0, r4
 8010eee:	f001 fb19 	bl	8012524 <uxr_prepare_stream_to_write_submessage>
 8010ef2:	b918      	cbnz	r0, 8010efc <uxr_common_create_entity+0x3c>
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	b00d      	add	sp, #52	; 0x34
 8010efa:	bd30      	pop	{r4, r5, pc}
 8010efc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010efe:	9902      	ldr	r1, [sp, #8]
 8010f00:	4620      	mov	r0, r4
 8010f02:	f001 fc49 	bl	8012798 <uxr_init_base_object_request>
 8010f06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010f08:	4604      	mov	r4, r0
 8010f0a:	a804      	add	r0, sp, #16
 8010f0c:	f003 fa56 	bl	80143bc <uxr_serialize_CREATE_Payload>
 8010f10:	4620      	mov	r0, r4
 8010f12:	b00d      	add	sp, #52	; 0x34
 8010f14:	bd30      	pop	{r4, r5, pc}
 8010f16:	bf00      	nop

08010f18 <uxr_buffer_create_participant_bin>:
 8010f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f1a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8010f1e:	ac11      	add	r4, sp, #68	; 0x44
 8010f20:	9103      	str	r1, [sp, #12]
 8010f22:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8010f24:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8010f28:	2103      	movs	r1, #3
 8010f2a:	7221      	strb	r1, [r4, #8]
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	2100      	movs	r1, #0
 8010f30:	7123      	strb	r3, [r4, #4]
 8010f32:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 8010f36:	9202      	str	r2, [sp, #8]
 8010f38:	4605      	mov	r5, r0
 8010f3a:	f88d 1014 	strb.w	r1, [sp, #20]
 8010f3e:	b1ce      	cbz	r6, 8010f74 <uxr_buffer_create_participant_bin+0x5c>
 8010f40:	f88d 301c 	strb.w	r3, [sp, #28]
 8010f44:	9608      	str	r6, [sp, #32]
 8010f46:	a809      	add	r0, sp, #36	; 0x24
 8010f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010f4c:	a915      	add	r1, sp, #84	; 0x54
 8010f4e:	f7ff fecf 	bl	8010cf0 <ucdr_init_buffer>
 8010f52:	a905      	add	r1, sp, #20
 8010f54:	a809      	add	r0, sp, #36	; 0x24
 8010f56:	f002 fdf9 	bl	8013b4c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010f5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010f5c:	9401      	str	r4, [sp, #4]
 8010f5e:	b283      	uxth	r3, r0
 8010f60:	9700      	str	r7, [sp, #0]
 8010f62:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010f66:	60e0      	str	r0, [r4, #12]
 8010f68:	4628      	mov	r0, r5
 8010f6a:	f7ff ffa9 	bl	8010ec0 <uxr_common_create_entity>
 8010f6e:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8010f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f74:	f88d 601c 	strb.w	r6, [sp, #28]
 8010f78:	e7e5      	b.n	8010f46 <uxr_buffer_create_participant_bin+0x2e>
 8010f7a:	bf00      	nop

08010f7c <uxr_buffer_create_topic_bin>:
 8010f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f7e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010f82:	ac13      	add	r4, sp, #76	; 0x4c
 8010f84:	4605      	mov	r5, r0
 8010f86:	9105      	str	r1, [sp, #20]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	a997      	add	r1, sp, #604	; 0x25c
 8010f8c:	2602      	movs	r6, #2
 8010f8e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010f92:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8010f96:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 8010f9a:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 8010f9c:	f000 fa54 	bl	8011448 <uxr_object_id_to_raw>
 8010fa0:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8010fa2:	9206      	str	r2, [sp, #24]
 8010fa4:	2303      	movs	r3, #3
 8010fa6:	2101      	movs	r1, #1
 8010fa8:	7223      	strb	r3, [r4, #8]
 8010faa:	a80b      	add	r0, sp, #44	; 0x2c
 8010fac:	2300      	movs	r3, #0
 8010fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010fb2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8010fb6:	a917      	add	r1, sp, #92	; 0x5c
 8010fb8:	f88d 301c 	strb.w	r3, [sp, #28]
 8010fbc:	960a      	str	r6, [sp, #40]	; 0x28
 8010fbe:	f7ff fe97 	bl	8010cf0 <ucdr_init_buffer>
 8010fc2:	a906      	add	r1, sp, #24
 8010fc4:	a80b      	add	r0, sp, #44	; 0x2c
 8010fc6:	f002 fde3 	bl	8013b90 <uxr_serialize_OBJK_Topic_Binary>
 8010fca:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010fcc:	9401      	str	r4, [sp, #4]
 8010fce:	9700      	str	r7, [sp, #0]
 8010fd0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	b2b3      	uxth	r3, r6
 8010fd8:	60e6      	str	r6, [r4, #12]
 8010fda:	f7ff ff71 	bl	8010ec0 <uxr_common_create_entity>
 8010fde:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fe4 <uxr_buffer_create_publisher_bin>:
 8010fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fe6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8010fea:	ac0e      	add	r4, sp, #56	; 0x38
 8010fec:	4605      	mov	r5, r0
 8010fee:	9105      	str	r1, [sp, #20]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	2603      	movs	r6, #3
 8010ff4:	a992      	add	r1, sp, #584	; 0x248
 8010ff6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010ffa:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8010ffe:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011002:	f000 fa21 	bl	8011448 <uxr_object_id_to_raw>
 8011006:	2300      	movs	r3, #0
 8011008:	a806      	add	r0, sp, #24
 801100a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801100e:	a912      	add	r1, sp, #72	; 0x48
 8011010:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011014:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011018:	7226      	strb	r6, [r4, #8]
 801101a:	f7ff fe69 	bl	8010cf0 <ucdr_init_buffer>
 801101e:	a993      	add	r1, sp, #588	; 0x24c
 8011020:	a806      	add	r0, sp, #24
 8011022:	f002 fe69 	bl	8013cf8 <uxr_serialize_OBJK_Publisher_Binary>
 8011026:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011028:	9700      	str	r7, [sp, #0]
 801102a:	9401      	str	r4, [sp, #4]
 801102c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011030:	4628      	mov	r0, r5
 8011032:	b2b3      	uxth	r3, r6
 8011034:	60e6      	str	r6, [r4, #12]
 8011036:	f7ff ff43 	bl	8010ec0 <uxr_common_create_entity>
 801103a:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801103e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011040 <uxr_buffer_create_subscriber_bin>:
 8011040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011042:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011046:	ac0e      	add	r4, sp, #56	; 0x38
 8011048:	4605      	mov	r5, r0
 801104a:	9105      	str	r1, [sp, #20]
 801104c:	4618      	mov	r0, r3
 801104e:	a992      	add	r1, sp, #584	; 0x248
 8011050:	2604      	movs	r6, #4
 8011052:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011056:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 801105a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801105e:	f000 f9f3 	bl	8011448 <uxr_object_id_to_raw>
 8011062:	2103      	movs	r1, #3
 8011064:	2300      	movs	r3, #0
 8011066:	a806      	add	r0, sp, #24
 8011068:	f44f 7200 	mov.w	r2, #512	; 0x200
 801106c:	7221      	strb	r1, [r4, #8]
 801106e:	a912      	add	r1, sp, #72	; 0x48
 8011070:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011074:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011078:	f7ff fe3a 	bl	8010cf0 <ucdr_init_buffer>
 801107c:	a993      	add	r1, sp, #588	; 0x24c
 801107e:	a806      	add	r0, sp, #24
 8011080:	f002 feea 	bl	8013e58 <uxr_serialize_OBJK_Subscriber_Binary>
 8011084:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011086:	9700      	str	r7, [sp, #0]
 8011088:	9401      	str	r4, [sp, #4]
 801108a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801108e:	4628      	mov	r0, r5
 8011090:	b2b3      	uxth	r3, r6
 8011092:	60e6      	str	r6, [r4, #12]
 8011094:	f7ff ff14 	bl	8010ec0 <uxr_common_create_entity>
 8011098:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801109c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801109e:	bf00      	nop

080110a0 <uxr_buffer_create_datawriter_bin>:
 80110a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110a4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80110a8:	ac1d      	add	r4, sp, #116	; 0x74
 80110aa:	2505      	movs	r5, #5
 80110ac:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80110b0:	9105      	str	r1, [sp, #20]
 80110b2:	4606      	mov	r6, r0
 80110b4:	a9a1      	add	r1, sp, #644	; 0x284
 80110b6:	4618      	mov	r0, r3
 80110b8:	7125      	strb	r5, [r4, #4]
 80110ba:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 80110be:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 80110c2:	2703      	movs	r7, #3
 80110c4:	f000 f9c0 	bl	8011448 <uxr_object_id_to_raw>
 80110c8:	a90e      	add	r1, sp, #56	; 0x38
 80110ca:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 80110cc:	7227      	strb	r7, [r4, #8]
 80110ce:	f000 f9bb 	bl	8011448 <uxr_object_id_to_raw>
 80110d2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80110d6:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 80110da:	3d00      	subs	r5, #0
 80110dc:	f04f 0300 	mov.w	r3, #0
 80110e0:	bf18      	it	ne
 80110e2:	2501      	movne	r5, #1
 80110e4:	2201      	movs	r2, #1
 80110e6:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80110ea:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80110ee:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80110f2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80110f6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80110fa:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80110fe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011102:	bb89      	cbnz	r1, 8011168 <uxr_buffer_create_datawriter_bin+0xc8>
 8011104:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011108:	f04f 0e23 	mov.w	lr, #35	; 0x23
 801110c:	f04f 0c13 	mov.w	ip, #19
 8011110:	250b      	movs	r5, #11
 8011112:	2221      	movs	r2, #33	; 0x21
 8011114:	2111      	movs	r1, #17
 8011116:	2009      	movs	r0, #9
 8011118:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 801111c:	b923      	cbnz	r3, 8011128 <uxr_buffer_create_datawriter_bin+0x88>
 801111e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011122:	4672      	mov	r2, lr
 8011124:	4661      	mov	r1, ip
 8011126:	4628      	mov	r0, r5
 8011128:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 801112c:	2b01      	cmp	r3, #1
 801112e:	d025      	beq.n	801117c <uxr_buffer_create_datawriter_bin+0xdc>
 8011130:	2b03      	cmp	r3, #3
 8011132:	d029      	beq.n	8011188 <uxr_buffer_create_datawriter_bin+0xe8>
 8011134:	b32b      	cbz	r3, 8011182 <uxr_buffer_create_datawriter_bin+0xe2>
 8011136:	a806      	add	r0, sp, #24
 8011138:	f44f 7200 	mov.w	r2, #512	; 0x200
 801113c:	a921      	add	r1, sp, #132	; 0x84
 801113e:	f7ff fdd7 	bl	8010cf0 <ucdr_init_buffer>
 8011142:	a90e      	add	r1, sp, #56	; 0x38
 8011144:	a806      	add	r0, sp, #24
 8011146:	f002 ff39 	bl	8013fbc <uxr_serialize_OBJK_DataWriter_Binary>
 801114a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801114c:	9401      	str	r4, [sp, #4]
 801114e:	b283      	uxth	r3, r0
 8011150:	f8cd 8000 	str.w	r8, [sp]
 8011154:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011158:	60e0      	str	r0, [r4, #12]
 801115a:	4630      	mov	r0, r6
 801115c:	f7ff feb0 	bl	8010ec0 <uxr_common_create_entity>
 8011160:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011168:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801116c:	f04f 0c12 	mov.w	ip, #18
 8011170:	250a      	movs	r5, #10
 8011172:	2220      	movs	r2, #32
 8011174:	2110      	movs	r1, #16
 8011176:	2008      	movs	r0, #8
 8011178:	2702      	movs	r7, #2
 801117a:	e7cd      	b.n	8011118 <uxr_buffer_create_datawriter_bin+0x78>
 801117c:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011180:	e7d9      	b.n	8011136 <uxr_buffer_create_datawriter_bin+0x96>
 8011182:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011186:	e7d6      	b.n	8011136 <uxr_buffer_create_datawriter_bin+0x96>
 8011188:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801118c:	e7d3      	b.n	8011136 <uxr_buffer_create_datawriter_bin+0x96>
 801118e:	bf00      	nop

08011190 <uxr_buffer_create_datareader_bin>:
 8011190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011194:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011198:	ac1f      	add	r4, sp, #124	; 0x7c
 801119a:	2506      	movs	r5, #6
 801119c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80111a0:	9105      	str	r1, [sp, #20]
 80111a2:	4606      	mov	r6, r0
 80111a4:	a9a3      	add	r1, sp, #652	; 0x28c
 80111a6:	4618      	mov	r0, r3
 80111a8:	7125      	strb	r5, [r4, #4]
 80111aa:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 80111ae:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 80111b2:	2703      	movs	r7, #3
 80111b4:	f000 f948 	bl	8011448 <uxr_object_id_to_raw>
 80111b8:	a90e      	add	r1, sp, #56	; 0x38
 80111ba:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 80111bc:	7227      	strb	r7, [r4, #8]
 80111be:	f000 f943 	bl	8011448 <uxr_object_id_to_raw>
 80111c2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80111c6:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 80111ca:	3d00      	subs	r5, #0
 80111cc:	f04f 0300 	mov.w	r3, #0
 80111d0:	bf18      	it	ne
 80111d2:	2501      	movne	r5, #1
 80111d4:	2201      	movs	r2, #1
 80111d6:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80111da:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80111de:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80111e2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80111e6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80111ea:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80111ee:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80111f2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80111f6:	bb89      	cbnz	r1, 801125c <uxr_buffer_create_datareader_bin+0xcc>
 80111f8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80111fc:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011200:	f04f 0c13 	mov.w	ip, #19
 8011204:	250b      	movs	r5, #11
 8011206:	2221      	movs	r2, #33	; 0x21
 8011208:	2111      	movs	r1, #17
 801120a:	2009      	movs	r0, #9
 801120c:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8011210:	b923      	cbnz	r3, 801121c <uxr_buffer_create_datareader_bin+0x8c>
 8011212:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011216:	4672      	mov	r2, lr
 8011218:	4661      	mov	r1, ip
 801121a:	4628      	mov	r0, r5
 801121c:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8011220:	2b01      	cmp	r3, #1
 8011222:	d025      	beq.n	8011270 <uxr_buffer_create_datareader_bin+0xe0>
 8011224:	2b03      	cmp	r3, #3
 8011226:	d029      	beq.n	801127c <uxr_buffer_create_datareader_bin+0xec>
 8011228:	b32b      	cbz	r3, 8011276 <uxr_buffer_create_datareader_bin+0xe6>
 801122a:	a806      	add	r0, sp, #24
 801122c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011230:	a923      	add	r1, sp, #140	; 0x8c
 8011232:	f7ff fd5d 	bl	8010cf0 <ucdr_init_buffer>
 8011236:	a90e      	add	r1, sp, #56	; 0x38
 8011238:	a806      	add	r0, sp, #24
 801123a:	f002 fe83 	bl	8013f44 <uxr_serialize_OBJK_DataReader_Binary>
 801123e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011240:	9401      	str	r4, [sp, #4]
 8011242:	b283      	uxth	r3, r0
 8011244:	f8cd 8000 	str.w	r8, [sp]
 8011248:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801124c:	60e0      	str	r0, [r4, #12]
 801124e:	4630      	mov	r0, r6
 8011250:	f7ff fe36 	bl	8010ec0 <uxr_common_create_entity>
 8011254:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801125c:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011260:	f04f 0c12 	mov.w	ip, #18
 8011264:	250a      	movs	r5, #10
 8011266:	2220      	movs	r2, #32
 8011268:	2110      	movs	r1, #16
 801126a:	2008      	movs	r0, #8
 801126c:	2702      	movs	r7, #2
 801126e:	e7cd      	b.n	801120c <uxr_buffer_create_datareader_bin+0x7c>
 8011270:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011274:	e7d9      	b.n	801122a <uxr_buffer_create_datareader_bin+0x9a>
 8011276:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801127a:	e7d6      	b.n	801122a <uxr_buffer_create_datareader_bin+0x9a>
 801127c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011280:	e7d3      	b.n	801122a <uxr_buffer_create_datareader_bin+0x9a>
 8011282:	bf00      	nop

08011284 <get_custom_error>:
 8011284:	4b01      	ldr	r3, [pc, #4]	; (801128c <get_custom_error+0x8>)
 8011286:	7818      	ldrb	r0, [r3, #0]
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	20009e34 	.word	0x20009e34

08011290 <recv_custom_msg>:
 8011290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8011298:	b089      	sub	sp, #36	; 0x24
 801129a:	2600      	movs	r6, #0
 801129c:	4604      	mov	r4, r0
 801129e:	9305      	str	r3, [sp, #20]
 80112a0:	468a      	mov	sl, r1
 80112a2:	4693      	mov	fp, r2
 80112a4:	f88d 601e 	strb.w	r6, [sp, #30]
 80112a8:	b325      	cbz	r5, 80112f4 <recv_custom_msg+0x64>
 80112aa:	f200 2902 	addw	r9, r0, #514	; 0x202
 80112ae:	f10d 081f 	add.w	r8, sp, #31
 80112b2:	af05      	add	r7, sp, #20
 80112b4:	f10d 061e 	add.w	r6, sp, #30
 80112b8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80112bc:	e002      	b.n	80112c4 <recv_custom_msg+0x34>
 80112be:	9b05      	ldr	r3, [sp, #20]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	dd0f      	ble.n	80112e4 <recv_custom_msg+0x54>
 80112c4:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80112c8:	e9cd 5600 	strd	r5, r6, [sp]
 80112cc:	4623      	mov	r3, r4
 80112ce:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80112d2:	4622      	mov	r2, r4
 80112d4:	4648      	mov	r0, r9
 80112d6:	f001 fc7d 	bl	8012bd4 <uxr_read_framed_msg>
 80112da:	2800      	cmp	r0, #0
 80112dc:	d0ef      	beq.n	80112be <recv_custom_msg+0x2e>
 80112de:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80112e2:	b1b3      	cbz	r3, 8011312 <recv_custom_msg+0x82>
 80112e4:	4b0f      	ldr	r3, [pc, #60]	; (8011324 <recv_custom_msg+0x94>)
 80112e6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80112ea:	701a      	strb	r2, [r3, #0]
 80112ec:	2000      	movs	r0, #0
 80112ee:	b009      	add	sp, #36	; 0x24
 80112f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f4:	f10d 021f 	add.w	r2, sp, #31
 80112f8:	9200      	str	r2, [sp, #0]
 80112fa:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80112fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011302:	4601      	mov	r1, r0
 8011304:	47a8      	blx	r5
 8011306:	2800      	cmp	r0, #0
 8011308:	d0ec      	beq.n	80112e4 <recv_custom_msg+0x54>
 801130a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d1e8      	bne.n	80112e4 <recv_custom_msg+0x54>
 8011312:	f8cb 0000 	str.w	r0, [fp]
 8011316:	2001      	movs	r0, #1
 8011318:	f8ca 4000 	str.w	r4, [sl]
 801131c:	b009      	add	sp, #36	; 0x24
 801131e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011322:	bf00      	nop
 8011324:	20009e34 	.word	0x20009e34

08011328 <send_custom_msg>:
 8011328:	b570      	push	{r4, r5, r6, lr}
 801132a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801132e:	b086      	sub	sp, #24
 8011330:	4616      	mov	r6, r2
 8011332:	b975      	cbnz	r5, 8011352 <send_custom_msg+0x2a>
 8011334:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8011338:	f10d 0317 	add.w	r3, sp, #23
 801133c:	47a0      	blx	r4
 801133e:	b108      	cbz	r0, 8011344 <send_custom_msg+0x1c>
 8011340:	42b0      	cmp	r0, r6
 8011342:	d015      	beq.n	8011370 <send_custom_msg+0x48>
 8011344:	4b0c      	ldr	r3, [pc, #48]	; (8011378 <send_custom_msg+0x50>)
 8011346:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801134a:	701a      	strb	r2, [r3, #0]
 801134c:	2000      	movs	r0, #0
 801134e:	b006      	add	sp, #24
 8011350:	bd70      	pop	{r4, r5, r6, pc}
 8011352:	460b      	mov	r3, r1
 8011354:	2200      	movs	r2, #0
 8011356:	f10d 0117 	add.w	r1, sp, #23
 801135a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801135e:	9600      	str	r6, [sp, #0]
 8011360:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8011364:	4602      	mov	r2, r0
 8011366:	f200 2002 	addw	r0, r0, #514	; 0x202
 801136a:	f001 fa4b 	bl	8012804 <uxr_write_framed_msg>
 801136e:	e7e6      	b.n	801133e <send_custom_msg+0x16>
 8011370:	2001      	movs	r0, #1
 8011372:	b006      	add	sp, #24
 8011374:	bd70      	pop	{r4, r5, r6, pc}
 8011376:	bf00      	nop
 8011378:	20009e34 	.word	0x20009e34

0801137c <uxr_set_custom_transport_callbacks>:
 801137c:	b430      	push	{r4, r5}
 801137e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8011382:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8011386:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801138a:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801138e:	bc30      	pop	{r4, r5}
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop

08011394 <uxr_init_custom_transport>:
 8011394:	b538      	push	{r3, r4, r5, lr}
 8011396:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801139a:	b303      	cbz	r3, 80113de <uxr_init_custom_transport+0x4a>
 801139c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80113a0:	4604      	mov	r4, r0
 80113a2:	b1e2      	cbz	r2, 80113de <uxr_init_custom_transport+0x4a>
 80113a4:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80113a8:	b1ca      	cbz	r2, 80113de <uxr_init_custom_transport+0x4a>
 80113aa:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80113ae:	b1b2      	cbz	r2, 80113de <uxr_init_custom_transport+0x4a>
 80113b0:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80113b4:	4798      	blx	r3
 80113b6:	4605      	mov	r5, r0
 80113b8:	b188      	cbz	r0, 80113de <uxr_init_custom_transport+0x4a>
 80113ba:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80113be:	b98b      	cbnz	r3, 80113e4 <uxr_init_custom_transport+0x50>
 80113c0:	480b      	ldr	r0, [pc, #44]	; (80113f0 <uxr_init_custom_transport+0x5c>)
 80113c2:	490c      	ldr	r1, [pc, #48]	; (80113f4 <uxr_init_custom_transport+0x60>)
 80113c4:	4a0c      	ldr	r2, [pc, #48]	; (80113f8 <uxr_init_custom_transport+0x64>)
 80113c6:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 80113ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80113ce:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 80113d2:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80113d6:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80113da:	4628      	mov	r0, r5
 80113dc:	bd38      	pop	{r3, r4, r5, pc}
 80113de:	2500      	movs	r5, #0
 80113e0:	4628      	mov	r0, r5
 80113e2:	bd38      	pop	{r3, r4, r5, pc}
 80113e4:	2100      	movs	r1, #0
 80113e6:	f204 2002 	addw	r0, r4, #514	; 0x202
 80113ea:	f001 fa05 	bl	80127f8 <uxr_init_framing_io>
 80113ee:	e7e7      	b.n	80113c0 <uxr_init_custom_transport+0x2c>
 80113f0:	08011329 	.word	0x08011329
 80113f4:	08011291 	.word	0x08011291
 80113f8:	08011285 	.word	0x08011285

080113fc <uxr_close_custom_transport>:
 80113fc:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8011400:	4718      	bx	r3
 8011402:	bf00      	nop

08011404 <uxr_object_id>:
 8011404:	b082      	sub	sp, #8
 8011406:	2300      	movs	r3, #0
 8011408:	f88d 1006 	strb.w	r1, [sp, #6]
 801140c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011410:	f360 030f 	bfi	r3, r0, #0, #16
 8011414:	f362 431f 	bfi	r3, r2, #16, #16
 8011418:	4618      	mov	r0, r3
 801141a:	b002      	add	sp, #8
 801141c:	4770      	bx	lr
 801141e:	bf00      	nop

08011420 <uxr_object_id_from_raw>:
 8011420:	7843      	ldrb	r3, [r0, #1]
 8011422:	7801      	ldrb	r1, [r0, #0]
 8011424:	b082      	sub	sp, #8
 8011426:	f003 000f 	and.w	r0, r3, #15
 801142a:	f88d 0006 	strb.w	r0, [sp, #6]
 801142e:	091b      	lsrs	r3, r3, #4
 8011430:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011434:	2200      	movs	r2, #0
 8011436:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801143a:	f363 020f 	bfi	r2, r3, #0, #16
 801143e:	f361 421f 	bfi	r2, r1, #16, #16
 8011442:	4610      	mov	r0, r2
 8011444:	b002      	add	sp, #8
 8011446:	4770      	bx	lr

08011448 <uxr_object_id_to_raw>:
 8011448:	4602      	mov	r2, r0
 801144a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801144e:	b082      	sub	sp, #8
 8011450:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8011454:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8011458:	700a      	strb	r2, [r1, #0]
 801145a:	704b      	strb	r3, [r1, #1]
 801145c:	b002      	add	sp, #8
 801145e:	4770      	bx	lr

08011460 <uxr_buffer_request_data>:
 8011460:	b530      	push	{r4, r5, lr}
 8011462:	b095      	sub	sp, #84	; 0x54
 8011464:	4604      	mov	r4, r0
 8011466:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011468:	9105      	str	r1, [sp, #20]
 801146a:	2d00      	cmp	r5, #0
 801146c:	bf14      	ite	ne
 801146e:	2101      	movne	r1, #1
 8011470:	2100      	moveq	r1, #0
 8011472:	9204      	str	r2, [sp, #16]
 8011474:	f04f 0200 	mov.w	r2, #0
 8011478:	9303      	str	r3, [sp, #12]
 801147a:	f88d 301c 	strb.w	r3, [sp, #28]
 801147e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011482:	f88d 201d 	strb.w	r2, [sp, #29]
 8011486:	f88d 201e 	strb.w	r2, [sp, #30]
 801148a:	d021      	beq.n	80114d0 <uxr_buffer_request_data+0x70>
 801148c:	686a      	ldr	r2, [r5, #4]
 801148e:	682b      	ldr	r3, [r5, #0]
 8011490:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8011494:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8011498:	2210      	movs	r2, #16
 801149a:	2000      	movs	r0, #0
 801149c:	2108      	movs	r1, #8
 801149e:	e9cd 1000 	strd	r1, r0, [sp]
 80114a2:	ab0c      	add	r3, sp, #48	; 0x30
 80114a4:	9905      	ldr	r1, [sp, #20]
 80114a6:	4620      	mov	r0, r4
 80114a8:	f001 f83c 	bl	8012524 <uxr_prepare_stream_to_write_submessage>
 80114ac:	b918      	cbnz	r0, 80114b6 <uxr_buffer_request_data+0x56>
 80114ae:	4604      	mov	r4, r0
 80114b0:	4620      	mov	r0, r4
 80114b2:	b015      	add	sp, #84	; 0x54
 80114b4:	bd30      	pop	{r4, r5, pc}
 80114b6:	9904      	ldr	r1, [sp, #16]
 80114b8:	aa06      	add	r2, sp, #24
 80114ba:	4620      	mov	r0, r4
 80114bc:	f001 f96c 	bl	8012798 <uxr_init_base_object_request>
 80114c0:	a906      	add	r1, sp, #24
 80114c2:	4604      	mov	r4, r0
 80114c4:	a80c      	add	r0, sp, #48	; 0x30
 80114c6:	f003 f8cf 	bl	8014668 <uxr_serialize_READ_DATA_Payload>
 80114ca:	4620      	mov	r0, r4
 80114cc:	b015      	add	sp, #84	; 0x54
 80114ce:	bd30      	pop	{r4, r5, pc}
 80114d0:	2208      	movs	r2, #8
 80114d2:	e7e2      	b.n	801149a <uxr_buffer_request_data+0x3a>

080114d4 <uxr_buffer_cancel_data>:
 80114d4:	b530      	push	{r4, r5, lr}
 80114d6:	b095      	sub	sp, #84	; 0x54
 80114d8:	2400      	movs	r4, #0
 80114da:	2308      	movs	r3, #8
 80114dc:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80114e0:	9300      	str	r3, [sp, #0]
 80114e2:	9205      	str	r2, [sp, #20]
 80114e4:	2501      	movs	r5, #1
 80114e6:	ab0c      	add	r3, sp, #48	; 0x30
 80114e8:	2210      	movs	r2, #16
 80114ea:	f8ad 401c 	strh.w	r4, [sp, #28]
 80114ee:	f88d 401e 	strb.w	r4, [sp, #30]
 80114f2:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 80114f6:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 80114fa:	9103      	str	r1, [sp, #12]
 80114fc:	4604      	mov	r4, r0
 80114fe:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8011502:	f001 f80f 	bl	8012524 <uxr_prepare_stream_to_write_submessage>
 8011506:	b918      	cbnz	r0, 8011510 <uxr_buffer_cancel_data+0x3c>
 8011508:	4604      	mov	r4, r0
 801150a:	4620      	mov	r0, r4
 801150c:	b015      	add	sp, #84	; 0x54
 801150e:	bd30      	pop	{r4, r5, pc}
 8011510:	9905      	ldr	r1, [sp, #20]
 8011512:	aa06      	add	r2, sp, #24
 8011514:	4620      	mov	r0, r4
 8011516:	f001 f93f 	bl	8012798 <uxr_init_base_object_request>
 801151a:	a906      	add	r1, sp, #24
 801151c:	4604      	mov	r4, r0
 801151e:	a80c      	add	r0, sp, #48	; 0x30
 8011520:	f003 f8a2 	bl	8014668 <uxr_serialize_READ_DATA_Payload>
 8011524:	4620      	mov	r0, r4
 8011526:	b015      	add	sp, #84	; 0x54
 8011528:	bd30      	pop	{r4, r5, pc}
 801152a:	bf00      	nop

0801152c <read_submessage_format>:
 801152c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011530:	b095      	sub	sp, #84	; 0x54
 8011532:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8011536:	b113      	cbz	r3, 801153e <read_submessage_format+0x12>
 8011538:	b015      	add	sp, #84	; 0x54
 801153a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801153e:	460c      	mov	r4, r1
 8011540:	4616      	mov	r6, r2
 8011542:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011546:	461d      	mov	r5, r3
 8011548:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801154a:	9304      	str	r3, [sp, #16]
 801154c:	1a52      	subs	r2, r2, r1
 801154e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011550:	9305      	str	r3, [sp, #20]
 8011552:	4607      	mov	r7, r0
 8011554:	a80c      	add	r0, sp, #48	; 0x30
 8011556:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801155a:	f7ff fbc9 	bl	8010cf0 <ucdr_init_buffer>
 801155e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011562:	a80c      	add	r0, sp, #48	; 0x30
 8011564:	f7ff fb9a 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 8011568:	69e3      	ldr	r3, [r4, #28]
 801156a:	b193      	cbz	r3, 8011592 <read_submessage_format+0x66>
 801156c:	f1b8 0f07 	cmp.w	r8, #7
 8011570:	751d      	strb	r5, [r3, #20]
 8011572:	d03e      	beq.n	80115f2 <read_submessage_format+0xc6>
 8011574:	f1b8 0f08 	cmp.w	r8, #8
 8011578:	d02c      	beq.n	80115d4 <read_submessage_format+0xa8>
 801157a:	f1b8 0f06 	cmp.w	r8, #6
 801157e:	d011      	beq.n	80115a4 <read_submessage_format+0x78>
 8011580:	2201      	movs	r2, #1
 8011582:	751a      	strb	r2, [r3, #20]
 8011584:	4631      	mov	r1, r6
 8011586:	4620      	mov	r0, r4
 8011588:	f7ff fc02 	bl	8010d90 <ucdr_advance_buffer>
 801158c:	b015      	add	sp, #84	; 0x54
 801158e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011592:	f1b8 0f07 	cmp.w	r8, #7
 8011596:	d02c      	beq.n	80115f2 <read_submessage_format+0xc6>
 8011598:	f1b8 0f08 	cmp.w	r8, #8
 801159c:	d01a      	beq.n	80115d4 <read_submessage_format+0xa8>
 801159e:	f1b8 0f06 	cmp.w	r8, #6
 80115a2:	d1ef      	bne.n	8011584 <read_submessage_format+0x58>
 80115a4:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 80115a8:	b18d      	cbz	r5, 80115ce <read_submessage_format+0xa2>
 80115aa:	2306      	movs	r3, #6
 80115ac:	f88d 3016 	strb.w	r3, [sp, #22]
 80115b0:	aa0c      	add	r2, sp, #48	; 0x30
 80115b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115b6:	9302      	str	r3, [sp, #8]
 80115b8:	9200      	str	r2, [sp, #0]
 80115ba:	9b04      	ldr	r3, [sp, #16]
 80115bc:	9905      	ldr	r1, [sp, #20]
 80115be:	9601      	str	r6, [sp, #4]
 80115c0:	464a      	mov	r2, r9
 80115c2:	4638      	mov	r0, r7
 80115c4:	47a8      	blx	r5
 80115c6:	2301      	movs	r3, #1
 80115c8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80115cc:	69e3      	ldr	r3, [r4, #28]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1d6      	bne.n	8011580 <read_submessage_format+0x54>
 80115d2:	e7d7      	b.n	8011584 <read_submessage_format+0x58>
 80115d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80115d8:	2a00      	cmp	r2, #0
 80115da:	d0f8      	beq.n	80115ce <read_submessage_format+0xa2>
 80115dc:	a906      	add	r1, sp, #24
 80115de:	a80c      	add	r0, sp, #48	; 0x30
 80115e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80115e2:	f003 f907 	bl	80147f4 <uxr_deserialize_SampleIdentity>
 80115e6:	2800      	cmp	r0, #0
 80115e8:	d13c      	bne.n	8011664 <read_submessage_format+0x138>
 80115ea:	69e3      	ldr	r3, [r4, #28]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d1c7      	bne.n	8011580 <read_submessage_format+0x54>
 80115f0:	e7c8      	b.n	8011584 <read_submessage_format+0x58>
 80115f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80115f6:	b132      	cbz	r2, 8011606 <read_submessage_format+0xda>
 80115f8:	a906      	add	r1, sp, #24
 80115fa:	a80c      	add	r0, sp, #48	; 0x30
 80115fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80115fe:	f002 fdb7 	bl	8014170 <uxr_deserialize_BaseObjectRequest>
 8011602:	b930      	cbnz	r0, 8011612 <read_submessage_format+0xe6>
 8011604:	69e3      	ldr	r3, [r4, #28]
 8011606:	68a2      	ldr	r2, [r4, #8]
 8011608:	4432      	add	r2, r6
 801160a:	60a2      	str	r2, [r4, #8]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d1b7      	bne.n	8011580 <read_submessage_format+0x54>
 8011610:	e7b8      	b.n	8011584 <read_submessage_format+0x58>
 8011612:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011616:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011618:	1a52      	subs	r2, r2, r1
 801161a:	a80c      	add	r0, sp, #48	; 0x30
 801161c:	1aed      	subs	r5, r5, r3
 801161e:	f7ff fb67 	bl	8010cf0 <ucdr_init_buffer>
 8011622:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011626:	a80c      	add	r0, sp, #48	; 0x30
 8011628:	f7ff fb38 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 801162c:	4435      	add	r5, r6
 801162e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011632:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011636:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801163a:	9002      	str	r0, [sp, #8]
 801163c:	2207      	movs	r2, #7
 801163e:	f88d 2016 	strb.w	r2, [sp, #22]
 8011642:	b2ad      	uxth	r5, r5
 8011644:	aa0c      	add	r2, sp, #48	; 0x30
 8011646:	9200      	str	r2, [sp, #0]
 8011648:	9501      	str	r5, [sp, #4]
 801164a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801164e:	b29b      	uxth	r3, r3
 8011650:	9905      	ldr	r1, [sp, #20]
 8011652:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8011656:	464a      	mov	r2, r9
 8011658:	4638      	mov	r0, r7
 801165a:	47a8      	blx	r5
 801165c:	2301      	movs	r3, #1
 801165e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011662:	e7cf      	b.n	8011604 <read_submessage_format+0xd8>
 8011664:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011668:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801166a:	1a52      	subs	r2, r2, r1
 801166c:	a80c      	add	r0, sp, #48	; 0x30
 801166e:	1aed      	subs	r5, r5, r3
 8011670:	f7ff fb3e 	bl	8010cf0 <ucdr_init_buffer>
 8011674:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011678:	a80c      	add	r0, sp, #48	; 0x30
 801167a:	f7ff fb0f 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 801167e:	4435      	add	r5, r6
 8011680:	2308      	movs	r3, #8
 8011682:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8011686:	f88d 3016 	strb.w	r3, [sp, #22]
 801168a:	b2ad      	uxth	r5, r5
 801168c:	ab0c      	add	r3, sp, #48	; 0x30
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	9002      	str	r0, [sp, #8]
 8011692:	9501      	str	r5, [sp, #4]
 8011694:	ab06      	add	r3, sp, #24
 8011696:	9905      	ldr	r1, [sp, #20]
 8011698:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 801169c:	464a      	mov	r2, r9
 801169e:	4638      	mov	r0, r7
 80116a0:	47a8      	blx	r5
 80116a2:	2301      	movs	r3, #1
 80116a4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80116a8:	e79f      	b.n	80115ea <read_submessage_format+0xbe>
 80116aa:	bf00      	nop

080116ac <on_get_fragmentation_info>:
 80116ac:	b500      	push	{lr}
 80116ae:	b08b      	sub	sp, #44	; 0x2c
 80116b0:	4601      	mov	r1, r0
 80116b2:	2204      	movs	r2, #4
 80116b4:	a802      	add	r0, sp, #8
 80116b6:	f7ff fb1b 	bl	8010cf0 <ucdr_init_buffer>
 80116ba:	f10d 0305 	add.w	r3, sp, #5
 80116be:	a802      	add	r0, sp, #8
 80116c0:	f10d 0206 	add.w	r2, sp, #6
 80116c4:	a901      	add	r1, sp, #4
 80116c6:	f001 fe69 	bl	801339c <uxr_read_submessage_header>
 80116ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80116ce:	2b0d      	cmp	r3, #13
 80116d0:	d003      	beq.n	80116da <on_get_fragmentation_info+0x2e>
 80116d2:	2000      	movs	r0, #0
 80116d4:	b00b      	add	sp, #44	; 0x2c
 80116d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80116da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80116de:	f013 0f02 	tst.w	r3, #2
 80116e2:	bf14      	ite	ne
 80116e4:	2002      	movne	r0, #2
 80116e6:	2001      	moveq	r0, #1
 80116e8:	b00b      	add	sp, #44	; 0x2c
 80116ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80116ee:	bf00      	nop

080116f0 <read_submessage_get_info>:
 80116f0:	b570      	push	{r4, r5, r6, lr}
 80116f2:	2500      	movs	r5, #0
 80116f4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80116f8:	4604      	mov	r4, r0
 80116fa:	f44f 7224 	mov.w	r2, #656	; 0x290
 80116fe:	460e      	mov	r6, r1
 8011700:	a810      	add	r0, sp, #64	; 0x40
 8011702:	4629      	mov	r1, r5
 8011704:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8011708:	f008 f9fc 	bl	8019b04 <memset>
 801170c:	a903      	add	r1, sp, #12
 801170e:	4630      	mov	r0, r6
 8011710:	f002 feec 	bl	80144ec <uxr_deserialize_GET_INFO_Payload>
 8011714:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011718:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801171c:	4620      	mov	r0, r4
 801171e:	f001 f833 	bl	8012788 <uxr_session_header_offset>
 8011722:	462b      	mov	r3, r5
 8011724:	9000      	str	r0, [sp, #0]
 8011726:	a905      	add	r1, sp, #20
 8011728:	a808      	add	r0, sp, #32
 801172a:	220c      	movs	r2, #12
 801172c:	f7ff face 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 8011730:	a910      	add	r1, sp, #64	; 0x40
 8011732:	a808      	add	r0, sp, #32
 8011734:	f002 ff4c 	bl	80145d0 <uxr_serialize_INFO_Payload>
 8011738:	9b08      	ldr	r3, [sp, #32]
 801173a:	462a      	mov	r2, r5
 801173c:	4629      	mov	r1, r5
 801173e:	4620      	mov	r0, r4
 8011740:	f000 ffca 	bl	80126d8 <uxr_stamp_session_header>
 8011744:	a808      	add	r0, sp, #32
 8011746:	f7ff faff 	bl	8010d48 <ucdr_buffer_length>
 801174a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801174c:	4602      	mov	r2, r0
 801174e:	a905      	add	r1, sp, #20
 8011750:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011754:	47a0      	blx	r4
 8011756:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 801175a:	bd70      	pop	{r4, r5, r6, pc}

0801175c <write_submessage_acknack.isra.0>:
 801175c:	b570      	push	{r4, r5, r6, lr}
 801175e:	b092      	sub	sp, #72	; 0x48
 8011760:	4605      	mov	r5, r0
 8011762:	460e      	mov	r6, r1
 8011764:	4614      	mov	r4, r2
 8011766:	f001 f80f 	bl	8012788 <uxr_session_header_offset>
 801176a:	a905      	add	r1, sp, #20
 801176c:	9000      	str	r0, [sp, #0]
 801176e:	2300      	movs	r3, #0
 8011770:	a80a      	add	r0, sp, #40	; 0x28
 8011772:	2211      	movs	r2, #17
 8011774:	f7ff faaa 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 8011778:	2218      	movs	r2, #24
 801177a:	fb02 5404 	mla	r4, r2, r4, r5
 801177e:	2300      	movs	r3, #0
 8011780:	2205      	movs	r2, #5
 8011782:	3450      	adds	r4, #80	; 0x50
 8011784:	a80a      	add	r0, sp, #40	; 0x28
 8011786:	210a      	movs	r1, #10
 8011788:	f001 fdee 	bl	8013368 <uxr_buffer_submessage_header>
 801178c:	a903      	add	r1, sp, #12
 801178e:	4620      	mov	r0, r4
 8011790:	f007 fb54 	bl	8018e3c <uxr_compute_acknack>
 8011794:	a903      	add	r1, sp, #12
 8011796:	ba43      	rev16	r3, r0
 8011798:	a80a      	add	r0, sp, #40	; 0x28
 801179a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801179e:	f88d 6010 	strb.w	r6, [sp, #16]
 80117a2:	f002 ff85 	bl	80146b0 <uxr_serialize_ACKNACK_Payload>
 80117a6:	2200      	movs	r2, #0
 80117a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117aa:	4611      	mov	r1, r2
 80117ac:	4628      	mov	r0, r5
 80117ae:	f000 ff93 	bl	80126d8 <uxr_stamp_session_header>
 80117b2:	a80a      	add	r0, sp, #40	; 0x28
 80117b4:	f7ff fac8 	bl	8010d48 <ucdr_buffer_length>
 80117b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80117ba:	4602      	mov	r2, r0
 80117bc:	a905      	add	r1, sp, #20
 80117be:	e9d3 0400 	ldrd	r0, r4, [r3]
 80117c2:	47a0      	blx	r4
 80117c4:	b012      	add	sp, #72	; 0x48
 80117c6:	bd70      	pop	{r4, r5, r6, pc}

080117c8 <uxr_init_session>:
 80117c8:	b5d0      	push	{r4, r6, r7, lr}
 80117ca:	2300      	movs	r3, #0
 80117cc:	2600      	movs	r6, #0
 80117ce:	2700      	movs	r7, #0
 80117d0:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 80117d4:	4604      	mov	r4, r0
 80117d6:	6701      	str	r1, [r0, #112]	; 0x70
 80117d8:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 80117dc:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 80117e0:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 80117e4:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 80117e8:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 80117ec:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80117f0:	2181      	movs	r1, #129	; 0x81
 80117f2:	f000 fedb 	bl	80125ac <uxr_init_session_info>
 80117f6:	f104 0008 	add.w	r0, r4, #8
 80117fa:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 80117fe:	f001 bccf 	b.w	80131a0 <uxr_init_stream_storage>
 8011802:	bf00      	nop

08011804 <uxr_set_status_callback>:
 8011804:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8011808:	4770      	bx	lr
 801180a:	bf00      	nop

0801180c <uxr_set_topic_callback>:
 801180c:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8011810:	4770      	bx	lr
 8011812:	bf00      	nop

08011814 <uxr_set_request_callback>:
 8011814:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop

0801181c <uxr_set_reply_callback>:
 801181c:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop

08011824 <uxr_create_output_best_effort_stream>:
 8011824:	b510      	push	{r4, lr}
 8011826:	b084      	sub	sp, #16
 8011828:	e9cd 2100 	strd	r2, r1, [sp]
 801182c:	4604      	mov	r4, r0
 801182e:	f000 ffab 	bl	8012788 <uxr_session_header_offset>
 8011832:	e9dd 2100 	ldrd	r2, r1, [sp]
 8011836:	4603      	mov	r3, r0
 8011838:	f104 0008 	add.w	r0, r4, #8
 801183c:	b004      	add	sp, #16
 801183e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011842:	f001 bcf7 	b.w	8013234 <uxr_add_output_best_effort_buffer>
 8011846:	bf00      	nop

08011848 <uxr_create_output_reliable_stream>:
 8011848:	b530      	push	{r4, r5, lr}
 801184a:	b089      	sub	sp, #36	; 0x24
 801184c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011850:	9303      	str	r3, [sp, #12]
 8011852:	4604      	mov	r4, r0
 8011854:	f000 ff98 	bl	8012788 <uxr_session_header_offset>
 8011858:	4605      	mov	r5, r0
 801185a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801185e:	9905      	ldr	r1, [sp, #20]
 8011860:	9500      	str	r5, [sp, #0]
 8011862:	f104 0008 	add.w	r0, r4, #8
 8011866:	f001 fcf7 	bl	8013258 <uxr_add_output_reliable_buffer>
 801186a:	2200      	movs	r2, #0
 801186c:	b2c3      	uxtb	r3, r0
 801186e:	f363 0207 	bfi	r2, r3, #0, #8
 8011872:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011876:	f363 220f 	bfi	r2, r3, #8, #8
 801187a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801187e:	f363 4217 	bfi	r2, r3, #16, #8
 8011882:	0e03      	lsrs	r3, r0, #24
 8011884:	f363 621f 	bfi	r2, r3, #24, #8
 8011888:	4610      	mov	r0, r2
 801188a:	b009      	add	sp, #36	; 0x24
 801188c:	bd30      	pop	{r4, r5, pc}
 801188e:	bf00      	nop

08011890 <uxr_create_input_best_effort_stream>:
 8011890:	b082      	sub	sp, #8
 8011892:	3008      	adds	r0, #8
 8011894:	b002      	add	sp, #8
 8011896:	f001 bcf9 	b.w	801328c <uxr_add_input_best_effort_buffer>
 801189a:	bf00      	nop

0801189c <uxr_create_input_reliable_stream>:
 801189c:	b510      	push	{r4, lr}
 801189e:	b084      	sub	sp, #16
 80118a0:	4c0b      	ldr	r4, [pc, #44]	; (80118d0 <uxr_create_input_reliable_stream+0x34>)
 80118a2:	9400      	str	r4, [sp, #0]
 80118a4:	3008      	adds	r0, #8
 80118a6:	f001 fd07 	bl	80132b8 <uxr_add_input_reliable_buffer>
 80118aa:	2200      	movs	r2, #0
 80118ac:	b2c3      	uxtb	r3, r0
 80118ae:	f363 0207 	bfi	r2, r3, #0, #8
 80118b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80118b6:	f363 220f 	bfi	r2, r3, #8, #8
 80118ba:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80118be:	f363 4217 	bfi	r2, r3, #16, #8
 80118c2:	0e03      	lsrs	r3, r0, #24
 80118c4:	f363 621f 	bfi	r2, r3, #24, #8
 80118c8:	4610      	mov	r0, r2
 80118ca:	b004      	add	sp, #16
 80118cc:	bd10      	pop	{r4, pc}
 80118ce:	bf00      	nop
 80118d0:	080116ad 	.word	0x080116ad

080118d4 <uxr_epoch_nanos>:
 80118d4:	b510      	push	{r4, lr}
 80118d6:	4604      	mov	r4, r0
 80118d8:	f001 fda8 	bl	801342c <uxr_nanos>
 80118dc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80118e0:	1ac0      	subs	r0, r0, r3
 80118e2:	eb61 0102 	sbc.w	r1, r1, r2
 80118e6:	bd10      	pop	{r4, pc}

080118e8 <uxr_flash_output_streams>:
 80118e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118ec:	7e03      	ldrb	r3, [r0, #24]
 80118ee:	b084      	sub	sp, #16
 80118f0:	4604      	mov	r4, r0
 80118f2:	b1fb      	cbz	r3, 8011934 <uxr_flash_output_streams+0x4c>
 80118f4:	f04f 0900 	mov.w	r9, #0
 80118f8:	4648      	mov	r0, r9
 80118fa:	f10d 0802 	add.w	r8, sp, #2
 80118fe:	af03      	add	r7, sp, #12
 8011900:	ae02      	add	r6, sp, #8
 8011902:	2201      	movs	r2, #1
 8011904:	4611      	mov	r1, r2
 8011906:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801190a:	f001 fbf3 	bl	80130f4 <uxr_stream_id>
 801190e:	3508      	adds	r5, #8
 8011910:	4684      	mov	ip, r0
 8011912:	4643      	mov	r3, r8
 8011914:	4628      	mov	r0, r5
 8011916:	463a      	mov	r2, r7
 8011918:	4631      	mov	r1, r6
 801191a:	f8cd c004 	str.w	ip, [sp, #4]
 801191e:	f007 fb15 	bl	8018f4c <uxr_prepare_best_effort_buffer_to_send>
 8011922:	2800      	cmp	r0, #0
 8011924:	d13d      	bne.n	80119a2 <uxr_flash_output_streams+0xba>
 8011926:	7e23      	ldrb	r3, [r4, #24]
 8011928:	f109 0901 	add.w	r9, r9, #1
 801192c:	fa5f f089 	uxtb.w	r0, r9
 8011930:	4283      	cmp	r3, r0
 8011932:	d8e6      	bhi.n	8011902 <uxr_flash_output_streams+0x1a>
 8011934:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011938:	b383      	cbz	r3, 801199c <uxr_flash_output_streams+0xb4>
 801193a:	f04f 0900 	mov.w	r9, #0
 801193e:	4648      	mov	r0, r9
 8011940:	f10d 0802 	add.w	r8, sp, #2
 8011944:	af03      	add	r7, sp, #12
 8011946:	ae02      	add	r6, sp, #8
 8011948:	2201      	movs	r2, #1
 801194a:	2102      	movs	r1, #2
 801194c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011950:	f001 fbd0 	bl	80130f4 <uxr_stream_id>
 8011954:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011958:	3520      	adds	r5, #32
 801195a:	9001      	str	r0, [sp, #4]
 801195c:	e00c      	b.n	8011978 <uxr_flash_output_streams+0x90>
 801195e:	9b02      	ldr	r3, [sp, #8]
 8011960:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011964:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011968:	f000 feb6 	bl	80126d8 <uxr_stamp_session_header>
 801196c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801196e:	9a03      	ldr	r2, [sp, #12]
 8011970:	9902      	ldr	r1, [sp, #8]
 8011972:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8011976:	47d0      	blx	sl
 8011978:	4643      	mov	r3, r8
 801197a:	463a      	mov	r2, r7
 801197c:	4631      	mov	r1, r6
 801197e:	4628      	mov	r0, r5
 8011980:	f007 fcec 	bl	801935c <uxr_prepare_next_reliable_buffer_to_send>
 8011984:	4603      	mov	r3, r0
 8011986:	4620      	mov	r0, r4
 8011988:	2b00      	cmp	r3, #0
 801198a:	d1e8      	bne.n	801195e <uxr_flash_output_streams+0x76>
 801198c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011990:	f109 0901 	add.w	r9, r9, #1
 8011994:	fa5f f089 	uxtb.w	r0, r9
 8011998:	4283      	cmp	r3, r0
 801199a:	d8d5      	bhi.n	8011948 <uxr_flash_output_streams+0x60>
 801199c:	b004      	add	sp, #16
 801199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a2:	9b02      	ldr	r3, [sp, #8]
 80119a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80119a8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80119ac:	4620      	mov	r0, r4
 80119ae:	f000 fe93 	bl	80126d8 <uxr_stamp_session_header>
 80119b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80119b4:	9a03      	ldr	r2, [sp, #12]
 80119b6:	9902      	ldr	r1, [sp, #8]
 80119b8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80119bc:	47a8      	blx	r5
 80119be:	f109 0901 	add.w	r9, r9, #1
 80119c2:	7e23      	ldrb	r3, [r4, #24]
 80119c4:	fa5f f089 	uxtb.w	r0, r9
 80119c8:	4283      	cmp	r3, r0
 80119ca:	d89a      	bhi.n	8011902 <uxr_flash_output_streams+0x1a>
 80119cc:	e7b2      	b.n	8011934 <uxr_flash_output_streams+0x4c>
 80119ce:	bf00      	nop

080119d0 <read_submessage_info>:
 80119d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d4:	460d      	mov	r5, r1
 80119d6:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80119da:	4669      	mov	r1, sp
 80119dc:	4607      	mov	r7, r0
 80119de:	4628      	mov	r0, r5
 80119e0:	f002 fc8a 	bl	80142f8 <uxr_deserialize_BaseObjectReply>
 80119e4:	a902      	add	r1, sp, #8
 80119e6:	4604      	mov	r4, r0
 80119e8:	4628      	mov	r0, r5
 80119ea:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80119ee:	f006 f905 	bl	8017bfc <ucdr_deserialize_bool>
 80119f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80119f6:	4004      	ands	r4, r0
 80119f8:	b2e4      	uxtb	r4, r4
 80119fa:	b95b      	cbnz	r3, 8011a14 <read_submessage_info+0x44>
 80119fc:	a987      	add	r1, sp, #540	; 0x21c
 80119fe:	4628      	mov	r0, r5
 8011a00:	f006 f8fc 	bl	8017bfc <ucdr_deserialize_bool>
 8011a04:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8011a08:	4606      	mov	r6, r0
 8011a0a:	b94b      	cbnz	r3, 8011a20 <read_submessage_info+0x50>
 8011a0c:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a14:	a903      	add	r1, sp, #12
 8011a16:	4628      	mov	r0, r5
 8011a18:	f002 fafc 	bl	8014014 <uxr_deserialize_ObjectVariant>
 8011a1c:	4004      	ands	r4, r0
 8011a1e:	e7ed      	b.n	80119fc <read_submessage_info+0x2c>
 8011a20:	a988      	add	r1, sp, #544	; 0x220
 8011a22:	4628      	mov	r0, r5
 8011a24:	f006 f91a 	bl	8017c5c <ucdr_deserialize_uint8_t>
 8011a28:	4234      	tst	r4, r6
 8011a2a:	d0ef      	beq.n	8011a0c <read_submessage_info+0x3c>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d0ed      	beq.n	8011a0c <read_submessage_info+0x3c>
 8011a30:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8011a34:	2b0d      	cmp	r3, #13
 8011a36:	d1e9      	bne.n	8011a0c <read_submessage_info+0x3c>
 8011a38:	4628      	mov	r0, r5
 8011a3a:	a98a      	add	r1, sp, #552	; 0x228
 8011a3c:	f006 feb4 	bl	80187a8 <ucdr_deserialize_int16_t>
 8011a40:	b140      	cbz	r0, 8011a54 <read_submessage_info+0x84>
 8011a42:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	dd07      	ble.n	8011a5a <read_submessage_info+0x8a>
 8011a4a:	f1b8 0f00 	cmp.w	r8, #0
 8011a4e:	bf14      	ite	ne
 8011a50:	2001      	movne	r0, #1
 8011a52:	2002      	moveq	r0, #2
 8011a54:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8011a58:	e7d8      	b.n	8011a0c <read_submessage_info+0x3c>
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	e7fa      	b.n	8011a54 <read_submessage_info+0x84>
 8011a5e:	bf00      	nop

08011a60 <read_submessage_list>:
 8011a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a64:	b098      	sub	sp, #96	; 0x60
 8011a66:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8011d6c <read_submessage_list+0x30c>
 8011a6a:	920b      	str	r2, [sp, #44]	; 0x2c
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	4688      	mov	r8, r1
 8011a70:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8011a74:	aa0e      	add	r2, sp, #56	; 0x38
 8011a76:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8011a7a:	4640      	mov	r0, r8
 8011a7c:	f001 fc8e 	bl	801339c <uxr_read_submessage_header>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	f000 813d 	beq.w	8011d00 <read_submessage_list+0x2a0>
 8011a86:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8011a8a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8011a8e:	3b02      	subs	r3, #2
 8011a90:	2b0d      	cmp	r3, #13
 8011a92:	d8ed      	bhi.n	8011a70 <read_submessage_list+0x10>
 8011a94:	a101      	add	r1, pc, #4	; (adr r1, 8011a9c <read_submessage_list+0x3c>)
 8011a96:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a9a:	bf00      	nop
 8011a9c:	08011cf7 	.word	0x08011cf7
 8011aa0:	08011a71 	.word	0x08011a71
 8011aa4:	08011ce7 	.word	0x08011ce7
 8011aa8:	08011c8b 	.word	0x08011c8b
 8011aac:	08011c81 	.word	0x08011c81
 8011ab0:	08011a71 	.word	0x08011a71
 8011ab4:	08011a71 	.word	0x08011a71
 8011ab8:	08011be3 	.word	0x08011be3
 8011abc:	08011b75 	.word	0x08011b75
 8011ac0:	08011b33 	.word	0x08011b33
 8011ac4:	08011a71 	.word	0x08011a71
 8011ac8:	08011a71 	.word	0x08011a71
 8011acc:	08011a71 	.word	0x08011a71
 8011ad0:	08011ad5 	.word	0x08011ad5
 8011ad4:	a912      	add	r1, sp, #72	; 0x48
 8011ad6:	4640      	mov	r0, r8
 8011ad8:	f002 fe3a 	bl	8014750 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011adc:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8011ae0:	2d00      	cmp	r5, #0
 8011ae2:	f000 8115 	beq.w	8011d10 <read_submessage_list+0x2b0>
 8011ae6:	f001 fca1 	bl	801342c <uxr_nanos>
 8011aea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011aec:	460b      	mov	r3, r1
 8011aee:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011af0:	2700      	movs	r7, #0
 8011af2:	fbc9 6701 	smlal	r6, r7, r9, r1
 8011af6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011afa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011afc:	4602      	mov	r2, r0
 8011afe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011b00:	460e      	mov	r6, r1
 8011b02:	2700      	movs	r7, #0
 8011b04:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8011b08:	9106      	str	r1, [sp, #24]
 8011b0a:	fbc9 6700 	smlal	r6, r7, r9, r0
 8011b0e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011b10:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011b14:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011b16:	2700      	movs	r7, #0
 8011b18:	4608      	mov	r0, r1
 8011b1a:	4639      	mov	r1, r7
 8011b1c:	fbc9 0106 	smlal	r0, r1, r9, r6
 8011b20:	e9cd 0100 	strd	r0, r1, [sp]
 8011b24:	4620      	mov	r0, r4
 8011b26:	47a8      	blx	r5
 8011b28:	f04f 0301 	mov.w	r3, #1
 8011b2c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8011b30:	e79e      	b.n	8011a70 <read_submessage_list+0x10>
 8011b32:	a912      	add	r1, sp, #72	; 0x48
 8011b34:	4640      	mov	r0, r8
 8011b36:	f002 fdf9 	bl	801472c <uxr_deserialize_HEARTBEAT_Payload>
 8011b3a:	2100      	movs	r1, #0
 8011b3c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8011b40:	f001 fb02 	bl	8013148 <uxr_stream_id_from_raw>
 8011b44:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011b48:	4603      	mov	r3, r0
 8011b4a:	4629      	mov	r1, r5
 8011b4c:	f104 0008 	add.w	r0, r4, #8
 8011b50:	9311      	str	r3, [sp, #68]	; 0x44
 8011b52:	f001 fbe7 	bl	8013324 <uxr_get_input_reliable_stream>
 8011b56:	2800      	cmp	r0, #0
 8011b58:	d08a      	beq.n	8011a70 <read_submessage_list+0x10>
 8011b5a:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8011b5e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8011b62:	f007 f95f 	bl	8018e24 <uxr_process_heartbeat>
 8011b66:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8011b6a:	462a      	mov	r2, r5
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	f7ff fdf5 	bl	801175c <write_submessage_acknack.isra.0>
 8011b72:	e77d      	b.n	8011a70 <read_submessage_list+0x10>
 8011b74:	a912      	add	r1, sp, #72	; 0x48
 8011b76:	4640      	mov	r0, r8
 8011b78:	f002 fdb0 	bl	80146dc <uxr_deserialize_ACKNACK_Payload>
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8011b82:	f001 fae1 	bl	8013148 <uxr_stream_id_from_raw>
 8011b86:	4603      	mov	r3, r0
 8011b88:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011b8c:	f104 0008 	add.w	r0, r4, #8
 8011b90:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b92:	f001 fbb1 	bl	80132f8 <uxr_get_output_reliable_stream>
 8011b96:	4605      	mov	r5, r0
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	f43f af69 	beq.w	8011a70 <read_submessage_list+0x10>
 8011b9e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8011ba2:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8011ba6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8011baa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011bae:	b289      	uxth	r1, r1
 8011bb0:	f007 fc7c 	bl	80194ac <uxr_process_acknack>
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	f007 fc3f 	bl	8019438 <uxr_begin_output_nack_buffer_it>
 8011bba:	af10      	add	r7, sp, #64	; 0x40
 8011bbc:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8011bc0:	e005      	b.n	8011bce <read_submessage_list+0x16e>
 8011bc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011bc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011bc6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011bc8:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011bcc:	47b0      	blx	r6
 8011bce:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8011bd2:	aa11      	add	r2, sp, #68	; 0x44
 8011bd4:	4639      	mov	r1, r7
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	f007 fc30 	bl	801943c <uxr_next_reliable_nack_buffer_to_send>
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d1f0      	bne.n	8011bc2 <read_submessage_list+0x162>
 8011be0:	e746      	b.n	8011a70 <read_submessage_list+0x10>
 8011be2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8011be6:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8011bea:	af10      	add	r7, sp, #64	; 0x40
 8011bec:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8011bf0:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8011bf4:	4639      	mov	r1, r7
 8011bf6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8011bfa:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8011bfe:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011c02:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 8011c06:	4640      	mov	r0, r8
 8011c08:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8011c0c:	f002 fab0 	bl	8014170 <uxr_deserialize_BaseObjectRequest>
 8011c10:	4638      	mov	r0, r7
 8011c12:	a911      	add	r1, sp, #68	; 0x44
 8011c14:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8011c18:	f000 fddc 	bl	80127d4 <uxr_parse_base_object_request>
 8011c1c:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8011c20:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011c22:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 8011c26:	9112      	str	r1, [sp, #72]	; 0x48
 8011c28:	3d04      	subs	r5, #4
 8011c2a:	f006 060e 	and.w	r6, r6, #14
 8011c2e:	b2ad      	uxth	r5, r5
 8011c30:	f1ba 0f00 	cmp.w	sl, #0
 8011c34:	d006      	beq.n	8011c44 <read_submessage_list+0x1e4>
 8011c36:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	463a      	mov	r2, r7
 8011c3e:	2300      	movs	r3, #0
 8011c40:	4620      	mov	r0, r4
 8011c42:	47d0      	blx	sl
 8011c44:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8011c46:	b168      	cbz	r0, 8011c64 <read_submessage_list+0x204>
 8011c48:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	3902      	subs	r1, #2
 8011c4e:	e002      	b.n	8011c56 <read_submessage_list+0x1f6>
 8011c50:	3301      	adds	r3, #1
 8011c52:	4283      	cmp	r3, r0
 8011c54:	d006      	beq.n	8011c64 <read_submessage_list+0x204>
 8011c56:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8011c5a:	42ba      	cmp	r2, r7
 8011c5c:	d1f8      	bne.n	8011c50 <read_submessage_list+0x1f0>
 8011c5e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8011c60:	2100      	movs	r1, #0
 8011c62:	54d1      	strb	r1, [r2, r3]
 8011c64:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011c66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011c68:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011c6c:	9302      	str	r3, [sp, #8]
 8011c6e:	e9cd 1000 	strd	r1, r0, [sp]
 8011c72:	4633      	mov	r3, r6
 8011c74:	462a      	mov	r2, r5
 8011c76:	4641      	mov	r1, r8
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f7ff fc57 	bl	801152c <read_submessage_format>
 8011c7e:	e6f7      	b.n	8011a70 <read_submessage_list+0x10>
 8011c80:	4641      	mov	r1, r8
 8011c82:	4620      	mov	r0, r4
 8011c84:	f7ff fea4 	bl	80119d0 <read_submessage_info>
 8011c88:	e6f2      	b.n	8011a70 <read_submessage_list+0x10>
 8011c8a:	2a00      	cmp	r2, #0
 8011c8c:	d03b      	beq.n	8011d06 <read_submessage_list+0x2a6>
 8011c8e:	a912      	add	r1, sp, #72	; 0x48
 8011c90:	4640      	mov	r0, r8
 8011c92:	f002 fc7f 	bl	8014594 <uxr_deserialize_STATUS_Payload>
 8011c96:	a910      	add	r1, sp, #64	; 0x40
 8011c98:	aa0f      	add	r2, sp, #60	; 0x3c
 8011c9a:	a812      	add	r0, sp, #72	; 0x48
 8011c9c:	f000 fd9a 	bl	80127d4 <uxr_parse_base_object_request>
 8011ca0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8011ca4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011ca6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8011caa:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8011cae:	9111      	str	r1, [sp, #68]	; 0x44
 8011cb0:	b135      	cbz	r5, 8011cc0 <read_submessage_list+0x260>
 8011cb2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011cb6:	9300      	str	r3, [sp, #0]
 8011cb8:	4632      	mov	r2, r6
 8011cba:	463b      	mov	r3, r7
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	47a8      	blx	r5
 8011cc0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	f43f aed4 	beq.w	8011a70 <read_submessage_list+0x10>
 8011cc8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8011cca:	2100      	movs	r1, #0
 8011ccc:	3802      	subs	r0, #2
 8011cce:	e003      	b.n	8011cd8 <read_submessage_list+0x278>
 8011cd0:	3101      	adds	r1, #1
 8011cd2:	4299      	cmp	r1, r3
 8011cd4:	f43f aecc 	beq.w	8011a70 <read_submessage_list+0x10>
 8011cd8:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8011cdc:	42b2      	cmp	r2, r6
 8011cde:	d1f7      	bne.n	8011cd0 <read_submessage_list+0x270>
 8011ce0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011ce2:	545f      	strb	r7, [r3, r1]
 8011ce4:	e6c4      	b.n	8011a70 <read_submessage_list+0x10>
 8011ce6:	2a00      	cmp	r2, #0
 8011ce8:	f47f aec2 	bne.w	8011a70 <read_submessage_list+0x10>
 8011cec:	4641      	mov	r1, r8
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f000 fcb4 	bl	801265c <uxr_read_create_session_status>
 8011cf4:	e6bc      	b.n	8011a70 <read_submessage_list+0x10>
 8011cf6:	4641      	mov	r1, r8
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	f7ff fcf9 	bl	80116f0 <read_submessage_get_info>
 8011cfe:	e6b7      	b.n	8011a70 <read_submessage_list+0x10>
 8011d00:	b018      	add	sp, #96	; 0x60
 8011d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d06:	4641      	mov	r1, r8
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f000 fcb3 	bl	8012674 <uxr_read_delete_session_status>
 8011d0e:	e6af      	b.n	8011a70 <read_submessage_list+0x10>
 8011d10:	f001 fb8c 	bl	801342c <uxr_nanos>
 8011d14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011d16:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011d18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011d1c:	2700      	movs	r7, #0
 8011d1e:	fbc9 6703 	smlal	r6, r7, r9, r3
 8011d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d24:	eb16 0c00 	adds.w	ip, r6, r0
 8011d28:	4618      	mov	r0, r3
 8011d2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d2c:	eb47 0e01 	adc.w	lr, r7, r1
 8011d30:	461e      	mov	r6, r3
 8011d32:	2100      	movs	r1, #0
 8011d34:	2700      	movs	r7, #0
 8011d36:	fbc9 0105 	smlal	r0, r1, r9, r5
 8011d3a:	fbc9 6702 	smlal	r6, r7, r9, r2
 8011d3e:	1983      	adds	r3, r0, r6
 8011d40:	eb41 0207 	adc.w	r2, r1, r7
 8011d44:	ebbc 0303 	subs.w	r3, ip, r3
 8011d48:	9308      	str	r3, [sp, #32]
 8011d4a:	eb6e 0302 	sbc.w	r3, lr, r2
 8011d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d50:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011d54:	0fd3      	lsrs	r3, r2, #31
 8011d56:	18c9      	adds	r1, r1, r3
 8011d58:	f142 0200 	adc.w	r2, r2, #0
 8011d5c:	084b      	lsrs	r3, r1, #1
 8011d5e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011d62:	1052      	asrs	r2, r2, #1
 8011d64:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8011d68:	e6de      	b.n	8011b28 <read_submessage_list+0xc8>
 8011d6a:	bf00      	nop
 8011d6c:	3b9aca00 	.word	0x3b9aca00

08011d70 <listen_message_reliably>:
 8011d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d74:	1e0b      	subs	r3, r1, #0
 8011d76:	b09d      	sub	sp, #116	; 0x74
 8011d78:	bfb8      	it	lt
 8011d7a:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8011d7e:	9305      	str	r3, [sp, #20]
 8011d80:	4607      	mov	r7, r0
 8011d82:	f001 fb37 	bl	80133f4 <uxr_millis>
 8011d86:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8011d8a:	4681      	mov	r9, r0
 8011d8c:	2a00      	cmp	r2, #0
 8011d8e:	f000 8095 	beq.w	8011ebc <listen_message_reliably+0x14c>
 8011d92:	2600      	movs	r6, #0
 8011d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d98:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8011d9c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011da0:	4630      	mov	r0, r6
 8011da2:	4688      	mov	r8, r1
 8011da4:	46ca      	mov	sl, r9
 8011da6:	e00f      	b.n	8011dc8 <listen_message_reliably+0x58>
 8011da8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011dac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011db0:	42a2      	cmp	r2, r4
 8011db2:	eb73 0105 	sbcs.w	r1, r3, r5
 8011db6:	bfb8      	it	lt
 8011db8:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 8011dbc:	3601      	adds	r6, #1
 8011dbe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011dc2:	b2f0      	uxtb	r0, r6
 8011dc4:	4283      	cmp	r3, r0
 8011dc6:	d951      	bls.n	8011e6c <listen_message_reliably+0xfc>
 8011dc8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011dcc:	2201      	movs	r2, #1
 8011dce:	2102      	movs	r1, #2
 8011dd0:	f001 f990 	bl	80130f4 <uxr_stream_id>
 8011dd4:	00e4      	lsls	r4, r4, #3
 8011dd6:	f104 0520 	add.w	r5, r4, #32
 8011dda:	443d      	add	r5, r7
 8011ddc:	4601      	mov	r1, r0
 8011dde:	4643      	mov	r3, r8
 8011de0:	4652      	mov	r2, sl
 8011de2:	4628      	mov	r0, r5
 8011de4:	9109      	str	r1, [sp, #36]	; 0x24
 8011de6:	f007 fafb 	bl	80193e0 <uxr_update_output_stream_heartbeat_timestamp>
 8011dea:	193b      	adds	r3, r7, r4
 8011dec:	2800      	cmp	r0, #0
 8011dee:	d0db      	beq.n	8011da8 <listen_message_reliably+0x38>
 8011df0:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8011df4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8011df8:	4638      	mov	r0, r7
 8011dfa:	f000 fcc5 	bl	8012788 <uxr_session_header_offset>
 8011dfe:	3501      	adds	r5, #1
 8011e00:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 8011e04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011e08:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8011e0c:	9000      	str	r0, [sp, #0]
 8011e0e:	2300      	movs	r3, #0
 8011e10:	4658      	mov	r0, fp
 8011e12:	2211      	movs	r2, #17
 8011e14:	a90c      	add	r1, sp, #48	; 0x30
 8011e16:	f7fe ff59 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	2205      	movs	r2, #5
 8011e1e:	210b      	movs	r1, #11
 8011e20:	4658      	mov	r0, fp
 8011e22:	f001 faa1 	bl	8013368 <uxr_buffer_submessage_header>
 8011e26:	8968      	ldrh	r0, [r5, #10]
 8011e28:	2101      	movs	r1, #1
 8011e2a:	f007 fb97 	bl	801955c <uxr_seq_num_add>
 8011e2e:	892a      	ldrh	r2, [r5, #8]
 8011e30:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8011e34:	4603      	mov	r3, r0
 8011e36:	a90a      	add	r1, sp, #40	; 0x28
 8011e38:	4658      	mov	r0, fp
 8011e3a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8011e3e:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 8011e42:	f002 fc5f 	bl	8014704 <uxr_serialize_HEARTBEAT_Payload>
 8011e46:	2200      	movs	r2, #0
 8011e48:	4611      	mov	r1, r2
 8011e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f000 fc43 	bl	80126d8 <uxr_stamp_session_header>
 8011e52:	4658      	mov	r0, fp
 8011e54:	f7fe ff78 	bl	8010d48 <ucdr_buffer_length>
 8011e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	a90c      	add	r1, sp, #48	; 0x30
 8011e5e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011e62:	443c      	add	r4, r7
 8011e64:	47a8      	blx	r5
 8011e66:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8011e6a:	e79f      	b.n	8011dac <listen_message_reliably+0x3c>
 8011e6c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8011e70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8011e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011e78:	4294      	cmp	r4, r2
 8011e7a:	bf08      	it	eq
 8011e7c:	428b      	cmpeq	r3, r1
 8011e7e:	d01d      	beq.n	8011ebc <listen_message_reliably+0x14c>
 8011e80:	eba3 030a 	sub.w	r3, r3, sl
 8011e84:	9905      	ldr	r1, [sp, #20]
 8011e86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	bf08      	it	eq
 8011e8c:	2301      	moveq	r3, #1
 8011e8e:	4299      	cmp	r1, r3
 8011e90:	bfa8      	it	ge
 8011e92:	4619      	movge	r1, r3
 8011e94:	6894      	ldr	r4, [r2, #8]
 8011e96:	6810      	ldr	r0, [r2, #0]
 8011e98:	4689      	mov	r9, r1
 8011e9a:	460b      	mov	r3, r1
 8011e9c:	aa08      	add	r2, sp, #32
 8011e9e:	a907      	add	r1, sp, #28
 8011ea0:	47a0      	blx	r4
 8011ea2:	b968      	cbnz	r0, 8011ec0 <listen_message_reliably+0x150>
 8011ea4:	9b05      	ldr	r3, [sp, #20]
 8011ea6:	eba3 0309 	sub.w	r3, r3, r9
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	9305      	str	r3, [sp, #20]
 8011eae:	f73f af68 	bgt.w	8011d82 <listen_message_reliably+0x12>
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	b01d      	add	sp, #116	; 0x74
 8011eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ebc:	9b05      	ldr	r3, [sp, #20]
 8011ebe:	e7e1      	b.n	8011e84 <listen_message_reliably+0x114>
 8011ec0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	a80c      	add	r0, sp, #48	; 0x30
 8011ec8:	f7fe ff12 	bl	8010cf0 <ucdr_init_buffer>
 8011ecc:	2500      	movs	r5, #0
 8011ece:	a90c      	add	r1, sp, #48	; 0x30
 8011ed0:	f10d 031a 	add.w	r3, sp, #26
 8011ed4:	aa06      	add	r2, sp, #24
 8011ed6:	4638      	mov	r0, r7
 8011ed8:	f88d 5018 	strb.w	r5, [sp, #24]
 8011edc:	f000 fc12 	bl	8012704 <uxr_read_session_header>
 8011ee0:	b918      	cbnz	r0, 8011eea <listen_message_reliably+0x17a>
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	b01d      	add	sp, #116	; 0x74
 8011ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eea:	4629      	mov	r1, r5
 8011eec:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011ef0:	f001 f92a 	bl	8013148 <uxr_stream_id_from_raw>
 8011ef4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011ef8:	2e01      	cmp	r6, #1
 8011efa:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011efe:	900a      	str	r0, [sp, #40]	; 0x28
 8011f00:	fa5f fa80 	uxtb.w	sl, r0
 8011f04:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011f08:	d04b      	beq.n	8011fa2 <listen_message_reliably+0x232>
 8011f0a:	2e02      	cmp	r6, #2
 8011f0c:	d00f      	beq.n	8011f2e <listen_message_reliably+0x1be>
 8011f0e:	2e00      	cmp	r6, #0
 8011f10:	d1e7      	bne.n	8011ee2 <listen_message_reliably+0x172>
 8011f12:	4631      	mov	r1, r6
 8011f14:	4630      	mov	r0, r6
 8011f16:	f001 f917 	bl	8013148 <uxr_stream_id_from_raw>
 8011f1a:	a90c      	add	r1, sp, #48	; 0x30
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	4638      	mov	r0, r7
 8011f20:	920a      	str	r2, [sp, #40]	; 0x28
 8011f22:	f7ff fd9d 	bl	8011a60 <read_submessage_list>
 8011f26:	4620      	mov	r0, r4
 8011f28:	b01d      	add	sp, #116	; 0x74
 8011f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f2e:	4629      	mov	r1, r5
 8011f30:	f107 0008 	add.w	r0, r7, #8
 8011f34:	f001 f9f6 	bl	8013324 <uxr_get_input_reliable_stream>
 8011f38:	4680      	mov	r8, r0
 8011f3a:	b348      	cbz	r0, 8011f90 <listen_message_reliably+0x220>
 8011f3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f3e:	9202      	str	r2, [sp, #8]
 8011f40:	a80c      	add	r0, sp, #48	; 0x30
 8011f42:	f7fe ff05 	bl	8010d50 <ucdr_buffer_remaining>
 8011f46:	4603      	mov	r3, r0
 8011f48:	f10d 0019 	add.w	r0, sp, #25
 8011f4c:	9000      	str	r0, [sp, #0]
 8011f4e:	9a02      	ldr	r2, [sp, #8]
 8011f50:	4649      	mov	r1, r9
 8011f52:	4640      	mov	r0, r8
 8011f54:	f006 fe68 	bl	8018c28 <uxr_receive_reliable_message>
 8011f58:	b1d0      	cbz	r0, 8011f90 <listen_message_reliably+0x220>
 8011f5a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d037      	beq.n	8011fd2 <listen_message_reliably+0x262>
 8011f62:	ae14      	add	r6, sp, #80	; 0x50
 8011f64:	f04f 0902 	mov.w	r9, #2
 8011f68:	e008      	b.n	8011f7c <listen_message_reliably+0x20c>
 8011f6a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8011f6e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8011f72:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8011f76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f78:	f7ff fd72 	bl	8011a60 <read_submessage_list>
 8011f7c:	4631      	mov	r1, r6
 8011f7e:	2204      	movs	r2, #4
 8011f80:	4640      	mov	r0, r8
 8011f82:	f006 fed1 	bl	8018d28 <uxr_next_input_reliable_buffer_available>
 8011f86:	4603      	mov	r3, r0
 8011f88:	4631      	mov	r1, r6
 8011f8a:	4638      	mov	r0, r7
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d1ec      	bne.n	8011f6a <listen_message_reliably+0x1fa>
 8011f90:	4638      	mov	r0, r7
 8011f92:	462a      	mov	r2, r5
 8011f94:	4651      	mov	r1, sl
 8011f96:	f7ff fbe1 	bl	801175c <write_submessage_acknack.isra.0>
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	b01d      	add	sp, #116	; 0x74
 8011f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	f107 0008 	add.w	r0, r7, #8
 8011fa8:	f001 f9b2 	bl	8013310 <uxr_get_input_best_effort_stream>
 8011fac:	2800      	cmp	r0, #0
 8011fae:	d098      	beq.n	8011ee2 <listen_message_reliably+0x172>
 8011fb0:	4649      	mov	r1, r9
 8011fb2:	f006 fdb5 	bl	8018b20 <uxr_receive_best_effort_message>
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d093      	beq.n	8011ee2 <listen_message_reliably+0x172>
 8011fba:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8011fbe:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8011fc2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8011fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fc8:	a90c      	add	r1, sp, #48	; 0x30
 8011fca:	4638      	mov	r0, r7
 8011fcc:	f7ff fd48 	bl	8011a60 <read_submessage_list>
 8011fd0:	e787      	b.n	8011ee2 <listen_message_reliably+0x172>
 8011fd2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8011fd6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8011fda:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8011fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fe0:	a90c      	add	r1, sp, #48	; 0x30
 8011fe2:	4638      	mov	r0, r7
 8011fe4:	f7ff fd3c 	bl	8011a60 <read_submessage_list>
 8011fe8:	e7bb      	b.n	8011f62 <listen_message_reliably+0x1f2>
 8011fea:	bf00      	nop

08011fec <uxr_run_session_timeout>:
 8011fec:	b570      	push	{r4, r5, r6, lr}
 8011fee:	4604      	mov	r4, r0
 8011ff0:	460d      	mov	r5, r1
 8011ff2:	f001 f9ff 	bl	80133f4 <uxr_millis>
 8011ff6:	4606      	mov	r6, r0
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f7ff fc75 	bl	80118e8 <uxr_flash_output_streams>
 8011ffe:	4629      	mov	r1, r5
 8012000:	4620      	mov	r0, r4
 8012002:	f7ff feb5 	bl	8011d70 <listen_message_reliably>
 8012006:	f001 f9f5 	bl	80133f4 <uxr_millis>
 801200a:	1b83      	subs	r3, r0, r6
 801200c:	1ae9      	subs	r1, r5, r3
 801200e:	2900      	cmp	r1, #0
 8012010:	dcf6      	bgt.n	8012000 <uxr_run_session_timeout+0x14>
 8012012:	f104 0008 	add.w	r0, r4, #8
 8012016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801201a:	f001 b98f 	b.w	801333c <uxr_output_streams_confirmed>
 801201e:	bf00      	nop

08012020 <uxr_run_session_until_data>:
 8012020:	b570      	push	{r4, r5, r6, lr}
 8012022:	4604      	mov	r4, r0
 8012024:	460d      	mov	r5, r1
 8012026:	f001 f9e5 	bl	80133f4 <uxr_millis>
 801202a:	4606      	mov	r6, r0
 801202c:	4620      	mov	r0, r4
 801202e:	f7ff fc5b 	bl	80118e8 <uxr_flash_output_streams>
 8012032:	2300      	movs	r3, #0
 8012034:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8012038:	4629      	mov	r1, r5
 801203a:	e005      	b.n	8012048 <uxr_run_session_until_data+0x28>
 801203c:	f001 f9da 	bl	80133f4 <uxr_millis>
 8012040:	1b83      	subs	r3, r0, r6
 8012042:	1ae9      	subs	r1, r5, r3
 8012044:	2900      	cmp	r1, #0
 8012046:	dd07      	ble.n	8012058 <uxr_run_session_until_data+0x38>
 8012048:	4620      	mov	r0, r4
 801204a:	f7ff fe91 	bl	8011d70 <listen_message_reliably>
 801204e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012052:	2800      	cmp	r0, #0
 8012054:	d0f2      	beq.n	801203c <uxr_run_session_until_data+0x1c>
 8012056:	bd70      	pop	{r4, r5, r6, pc}
 8012058:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801205c:	bd70      	pop	{r4, r5, r6, pc}
 801205e:	bf00      	nop

08012060 <uxr_run_session_until_confirm_delivery>:
 8012060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012064:	4606      	mov	r6, r0
 8012066:	460d      	mov	r5, r1
 8012068:	f001 f9c4 	bl	80133f4 <uxr_millis>
 801206c:	4607      	mov	r7, r0
 801206e:	4630      	mov	r0, r6
 8012070:	f7ff fc3a 	bl	80118e8 <uxr_flash_output_streams>
 8012074:	2d00      	cmp	r5, #0
 8012076:	f106 0808 	add.w	r8, r6, #8
 801207a:	bfa8      	it	ge
 801207c:	462c      	movge	r4, r5
 801207e:	da07      	bge.n	8012090 <uxr_run_session_until_confirm_delivery+0x30>
 8012080:	e00e      	b.n	80120a0 <uxr_run_session_until_confirm_delivery+0x40>
 8012082:	f7ff fe75 	bl	8011d70 <listen_message_reliably>
 8012086:	f001 f9b5 	bl	80133f4 <uxr_millis>
 801208a:	1bc3      	subs	r3, r0, r7
 801208c:	1aec      	subs	r4, r5, r3
 801208e:	d407      	bmi.n	80120a0 <uxr_run_session_until_confirm_delivery+0x40>
 8012090:	4640      	mov	r0, r8
 8012092:	f001 f953 	bl	801333c <uxr_output_streams_confirmed>
 8012096:	4603      	mov	r3, r0
 8012098:	4621      	mov	r1, r4
 801209a:	4630      	mov	r0, r6
 801209c:	2b00      	cmp	r3, #0
 801209e:	d0f0      	beq.n	8012082 <uxr_run_session_until_confirm_delivery+0x22>
 80120a0:	4640      	mov	r0, r8
 80120a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120a6:	f001 b949 	b.w	801333c <uxr_output_streams_confirmed>
 80120aa:	bf00      	nop

080120ac <uxr_run_session_until_all_status>:
 80120ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120b0:	9d08      	ldr	r5, [sp, #32]
 80120b2:	460f      	mov	r7, r1
 80120b4:	4692      	mov	sl, r2
 80120b6:	461c      	mov	r4, r3
 80120b8:	4606      	mov	r6, r0
 80120ba:	f7ff fc15 	bl	80118e8 <uxr_flash_output_streams>
 80120be:	b125      	cbz	r5, 80120ca <uxr_run_session_until_all_status+0x1e>
 80120c0:	462a      	mov	r2, r5
 80120c2:	21ff      	movs	r1, #255	; 0xff
 80120c4:	4620      	mov	r0, r4
 80120c6:	f007 fd1d 	bl	8019b04 <memset>
 80120ca:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 80120ce:	67f5      	str	r5, [r6, #124]	; 0x7c
 80120d0:	f001 f990 	bl	80133f4 <uxr_millis>
 80120d4:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80120d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80120dc:	4680      	mov	r8, r0
 80120de:	4639      	mov	r1, r7
 80120e0:	4630      	mov	r0, r6
 80120e2:	f7ff fe45 	bl	8011d70 <listen_message_reliably>
 80120e6:	f001 f985 	bl	80133f4 <uxr_millis>
 80120ea:	eba0 0008 	sub.w	r0, r0, r8
 80120ee:	1a39      	subs	r1, r7, r0
 80120f0:	b33d      	cbz	r5, 8012142 <uxr_run_session_until_all_status+0x96>
 80120f2:	46cc      	mov	ip, r9
 80120f4:	464a      	mov	r2, r9
 80120f6:	2301      	movs	r3, #1
 80120f8:	e002      	b.n	8012100 <uxr_run_session_until_all_status+0x54>
 80120fa:	42ab      	cmp	r3, r5
 80120fc:	d20c      	bcs.n	8012118 <uxr_run_session_until_all_status+0x6c>
 80120fe:	3301      	adds	r3, #1
 8012100:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8012104:	2cff      	cmp	r4, #255	; 0xff
 8012106:	d1f8      	bne.n	80120fa <uxr_run_session_until_all_status+0x4e>
 8012108:	42ab      	cmp	r3, r5
 801210a:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 801210e:	d213      	bcs.n	8012138 <uxr_run_session_until_all_status+0x8c>
 8012110:	2800      	cmp	r0, #0
 8012112:	d0f4      	beq.n	80120fe <uxr_run_session_until_all_status+0x52>
 8012114:	2900      	cmp	r1, #0
 8012116:	dce3      	bgt.n	80120e0 <uxr_run_session_until_all_status+0x34>
 8012118:	2300      	movs	r3, #0
 801211a:	444d      	add	r5, r9
 801211c:	67f3      	str	r3, [r6, #124]	; 0x7c
 801211e:	e001      	b.n	8012124 <uxr_run_session_until_all_status+0x78>
 8012120:	2b01      	cmp	r3, #1
 8012122:	d812      	bhi.n	801214a <uxr_run_session_until_all_status+0x9e>
 8012124:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8012128:	4565      	cmp	r5, ip
 801212a:	d1f9      	bne.n	8012120 <uxr_run_session_until_all_status+0x74>
 801212c:	2b01      	cmp	r3, #1
 801212e:	bf8c      	ite	hi
 8012130:	2000      	movhi	r0, #0
 8012132:	2001      	movls	r0, #1
 8012134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012138:	2900      	cmp	r1, #0
 801213a:	dded      	ble.n	8012118 <uxr_run_session_until_all_status+0x6c>
 801213c:	2800      	cmp	r0, #0
 801213e:	d1cf      	bne.n	80120e0 <uxr_run_session_until_all_status+0x34>
 8012140:	e7ea      	b.n	8012118 <uxr_run_session_until_all_status+0x6c>
 8012142:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012144:	2001      	movs	r0, #1
 8012146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801214a:	2000      	movs	r0, #0
 801214c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012150 <uxr_create_session>:
 8012150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012154:	ed2d 8b02 	vpush	{d8}
 8012158:	f100 0808 	add.w	r8, r0, #8
 801215c:	b0a9      	sub	sp, #164	; 0xa4
 801215e:	4604      	mov	r4, r0
 8012160:	4640      	mov	r0, r8
 8012162:	f001 f827 	bl	80131b4 <uxr_reset_stream_storage>
 8012166:	4620      	mov	r0, r4
 8012168:	f000 fb0e 	bl	8012788 <uxr_session_header_offset>
 801216c:	a909      	add	r1, sp, #36	; 0x24
 801216e:	9000      	str	r0, [sp, #0]
 8012170:	2300      	movs	r3, #0
 8012172:	a810      	add	r0, sp, #64	; 0x40
 8012174:	221c      	movs	r2, #28
 8012176:	f7fe fda9 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 801217a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801217c:	8a1a      	ldrh	r2, [r3, #16]
 801217e:	3a04      	subs	r2, #4
 8012180:	b292      	uxth	r2, r2
 8012182:	4620      	mov	r0, r4
 8012184:	a910      	add	r1, sp, #64	; 0x40
 8012186:	f000 fa23 	bl	80125d0 <uxr_buffer_create_session>
 801218a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801218c:	4620      	mov	r0, r4
 801218e:	f000 fa8f 	bl	80126b0 <uxr_stamp_create_session_header>
 8012192:	a810      	add	r0, sp, #64	; 0x40
 8012194:	f7fe fdd8 	bl	8010d48 <ucdr_buffer_length>
 8012198:	23ff      	movs	r3, #255	; 0xff
 801219a:	ee08 0a10 	vmov	s16, r0
 801219e:	7163      	strb	r3, [r4, #5]
 80121a0:	f04f 090a 	mov.w	r9, #10
 80121a4:	46c2      	mov	sl, r8
 80121a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80121a8:	ee18 2a10 	vmov	r2, s16
 80121ac:	e9d3 0500 	ldrd	r0, r5, [r3]
 80121b0:	a909      	add	r1, sp, #36	; 0x24
 80121b2:	47a8      	blx	r5
 80121b4:	f001 f91e 	bl	80133f4 <uxr_millis>
 80121b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80121bc:	9002      	str	r0, [sp, #8]
 80121be:	e00c      	b.n	80121da <uxr_create_session+0x8a>
 80121c0:	f001 f918 	bl	80133f4 <uxr_millis>
 80121c4:	9b02      	ldr	r3, [sp, #8]
 80121c6:	7962      	ldrb	r2, [r4, #5]
 80121c8:	1ac0      	subs	r0, r0, r3
 80121ca:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	f340 8094 	ble.w	80122fc <uxr_create_session+0x1ac>
 80121d4:	2aff      	cmp	r2, #255	; 0xff
 80121d6:	f040 8097 	bne.w	8012308 <uxr_create_session+0x1b8>
 80121da:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80121dc:	a905      	add	r1, sp, #20
 80121de:	6895      	ldr	r5, [r2, #8]
 80121e0:	6810      	ldr	r0, [r2, #0]
 80121e2:	aa06      	add	r2, sp, #24
 80121e4:	47a8      	blx	r5
 80121e6:	2800      	cmp	r0, #0
 80121e8:	d0ea      	beq.n	80121c0 <uxr_create_session+0x70>
 80121ea:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80121ee:	a818      	add	r0, sp, #96	; 0x60
 80121f0:	f7fe fd7e 	bl	8010cf0 <ucdr_init_buffer>
 80121f4:	2500      	movs	r5, #0
 80121f6:	f10d 0312 	add.w	r3, sp, #18
 80121fa:	aa04      	add	r2, sp, #16
 80121fc:	a918      	add	r1, sp, #96	; 0x60
 80121fe:	4620      	mov	r0, r4
 8012200:	f88d 5010 	strb.w	r5, [sp, #16]
 8012204:	f000 fa7e 	bl	8012704 <uxr_read_session_header>
 8012208:	2800      	cmp	r0, #0
 801220a:	d0d9      	beq.n	80121c0 <uxr_create_session+0x70>
 801220c:	4629      	mov	r1, r5
 801220e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8012212:	f000 ff99 	bl	8013148 <uxr_stream_id_from_raw>
 8012216:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801221a:	2f01      	cmp	r7, #1
 801221c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012220:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8012224:	fa5f f880 	uxtb.w	r8, r0
 8012228:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801222c:	d04d      	beq.n	80122ca <uxr_create_session+0x17a>
 801222e:	2f02      	cmp	r7, #2
 8012230:	d00c      	beq.n	801224c <uxr_create_session+0xfc>
 8012232:	2f00      	cmp	r7, #0
 8012234:	d1c4      	bne.n	80121c0 <uxr_create_session+0x70>
 8012236:	4639      	mov	r1, r7
 8012238:	4638      	mov	r0, r7
 801223a:	f000 ff85 	bl	8013148 <uxr_stream_id_from_raw>
 801223e:	a918      	add	r1, sp, #96	; 0x60
 8012240:	4602      	mov	r2, r0
 8012242:	4620      	mov	r0, r4
 8012244:	9208      	str	r2, [sp, #32]
 8012246:	f7ff fc0b 	bl	8011a60 <read_submessage_list>
 801224a:	e7b9      	b.n	80121c0 <uxr_create_session+0x70>
 801224c:	4629      	mov	r1, r5
 801224e:	4650      	mov	r0, sl
 8012250:	f001 f868 	bl	8013324 <uxr_get_input_reliable_stream>
 8012254:	4606      	mov	r6, r0
 8012256:	b390      	cbz	r0, 80122be <uxr_create_session+0x16e>
 8012258:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801225a:	9203      	str	r2, [sp, #12]
 801225c:	a818      	add	r0, sp, #96	; 0x60
 801225e:	f7fe fd77 	bl	8010d50 <ucdr_buffer_remaining>
 8012262:	4603      	mov	r3, r0
 8012264:	f10d 0011 	add.w	r0, sp, #17
 8012268:	9000      	str	r0, [sp, #0]
 801226a:	9a03      	ldr	r2, [sp, #12]
 801226c:	4659      	mov	r1, fp
 801226e:	4630      	mov	r0, r6
 8012270:	f006 fcda 	bl	8018c28 <uxr_receive_reliable_message>
 8012274:	b318      	cbz	r0, 80122be <uxr_create_session+0x16e>
 8012276:	f89d 3011 	ldrb.w	r3, [sp, #17]
 801227a:	b9b3      	cbnz	r3, 80122aa <uxr_create_session+0x15a>
 801227c:	f88d 8020 	strb.w	r8, [sp, #32]
 8012280:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012284:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012288:	9a08      	ldr	r2, [sp, #32]
 801228a:	a918      	add	r1, sp, #96	; 0x60
 801228c:	4620      	mov	r0, r4
 801228e:	f7ff fbe7 	bl	8011a60 <read_submessage_list>
 8012292:	e00a      	b.n	80122aa <uxr_create_session+0x15a>
 8012294:	f04f 0302 	mov.w	r3, #2
 8012298:	f88d 8020 	strb.w	r8, [sp, #32]
 801229c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80122a0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 80122a4:	9a08      	ldr	r2, [sp, #32]
 80122a6:	f7ff fbdb 	bl	8011a60 <read_submessage_list>
 80122aa:	a920      	add	r1, sp, #128	; 0x80
 80122ac:	2204      	movs	r2, #4
 80122ae:	4630      	mov	r0, r6
 80122b0:	f006 fd3a 	bl	8018d28 <uxr_next_input_reliable_buffer_available>
 80122b4:	4603      	mov	r3, r0
 80122b6:	a920      	add	r1, sp, #128	; 0x80
 80122b8:	4620      	mov	r0, r4
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d1ea      	bne.n	8012294 <uxr_create_session+0x144>
 80122be:	462a      	mov	r2, r5
 80122c0:	4641      	mov	r1, r8
 80122c2:	4620      	mov	r0, r4
 80122c4:	f7ff fa4a 	bl	801175c <write_submessage_acknack.isra.0>
 80122c8:	e77a      	b.n	80121c0 <uxr_create_session+0x70>
 80122ca:	4629      	mov	r1, r5
 80122cc:	4650      	mov	r0, sl
 80122ce:	f001 f81f 	bl	8013310 <uxr_get_input_best_effort_stream>
 80122d2:	2800      	cmp	r0, #0
 80122d4:	f43f af74 	beq.w	80121c0 <uxr_create_session+0x70>
 80122d8:	4659      	mov	r1, fp
 80122da:	f006 fc21 	bl	8018b20 <uxr_receive_best_effort_message>
 80122de:	2800      	cmp	r0, #0
 80122e0:	f43f af6e 	beq.w	80121c0 <uxr_create_session+0x70>
 80122e4:	f88d 8020 	strb.w	r8, [sp, #32]
 80122e8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80122ec:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 80122f0:	9a08      	ldr	r2, [sp, #32]
 80122f2:	a918      	add	r1, sp, #96	; 0x60
 80122f4:	4620      	mov	r0, r4
 80122f6:	f7ff fbb3 	bl	8011a60 <read_submessage_list>
 80122fa:	e761      	b.n	80121c0 <uxr_create_session+0x70>
 80122fc:	f1b9 0901 	subs.w	r9, r9, #1
 8012300:	d002      	beq.n	8012308 <uxr_create_session+0x1b8>
 8012302:	2aff      	cmp	r2, #255	; 0xff
 8012304:	f43f af4f 	beq.w	80121a6 <uxr_create_session+0x56>
 8012308:	b12a      	cbz	r2, 8012316 <uxr_create_session+0x1c6>
 801230a:	2000      	movs	r0, #0
 801230c:	b029      	add	sp, #164	; 0xa4
 801230e:	ecbd 8b02 	vpop	{d8}
 8012312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012316:	4650      	mov	r0, sl
 8012318:	f000 ff4c 	bl	80131b4 <uxr_reset_stream_storage>
 801231c:	2001      	movs	r0, #1
 801231e:	b029      	add	sp, #164	; 0xa4
 8012320:	ecbd 8b02 	vpop	{d8}
 8012324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012328 <wait_session_status>:
 8012328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232c:	4604      	mov	r4, r0
 801232e:	b09d      	sub	sp, #116	; 0x74
 8012330:	20ff      	movs	r0, #255	; 0xff
 8012332:	7160      	strb	r0, [r4, #5]
 8012334:	9304      	str	r3, [sp, #16]
 8012336:	2b00      	cmp	r3, #0
 8012338:	f000 80b8 	beq.w	80124ac <wait_session_status+0x184>
 801233c:	2300      	movs	r3, #0
 801233e:	468b      	mov	fp, r1
 8012340:	4692      	mov	sl, r2
 8012342:	9303      	str	r3, [sp, #12]
 8012344:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012346:	4652      	mov	r2, sl
 8012348:	e9d3 0500 	ldrd	r0, r5, [r3]
 801234c:	4659      	mov	r1, fp
 801234e:	47a8      	blx	r5
 8012350:	f001 f850 	bl	80133f4 <uxr_millis>
 8012354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012358:	4605      	mov	r5, r0
 801235a:	e009      	b.n	8012370 <wait_session_status+0x48>
 801235c:	f001 f84a 	bl	80133f4 <uxr_millis>
 8012360:	1b40      	subs	r0, r0, r5
 8012362:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012366:	2b00      	cmp	r3, #0
 8012368:	dd42      	ble.n	80123f0 <wait_session_status+0xc8>
 801236a:	7960      	ldrb	r0, [r4, #5]
 801236c:	28ff      	cmp	r0, #255	; 0xff
 801236e:	d148      	bne.n	8012402 <wait_session_status+0xda>
 8012370:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012372:	a908      	add	r1, sp, #32
 8012374:	6896      	ldr	r6, [r2, #8]
 8012376:	6810      	ldr	r0, [r2, #0]
 8012378:	aa09      	add	r2, sp, #36	; 0x24
 801237a:	47b0      	blx	r6
 801237c:	2800      	cmp	r0, #0
 801237e:	d0ed      	beq.n	801235c <wait_session_status+0x34>
 8012380:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012384:	a80c      	add	r0, sp, #48	; 0x30
 8012386:	f7fe fcb3 	bl	8010cf0 <ucdr_init_buffer>
 801238a:	2600      	movs	r6, #0
 801238c:	f10d 031e 	add.w	r3, sp, #30
 8012390:	aa07      	add	r2, sp, #28
 8012392:	a90c      	add	r1, sp, #48	; 0x30
 8012394:	4620      	mov	r0, r4
 8012396:	f88d 601c 	strb.w	r6, [sp, #28]
 801239a:	f000 f9b3 	bl	8012704 <uxr_read_session_header>
 801239e:	2800      	cmp	r0, #0
 80123a0:	d0dc      	beq.n	801235c <wait_session_status+0x34>
 80123a2:	4631      	mov	r1, r6
 80123a4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80123a8:	f000 fece 	bl	8013148 <uxr_stream_id_from_raw>
 80123ac:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80123b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80123b4:	9302      	str	r3, [sp, #8]
 80123b6:	2f01      	cmp	r7, #1
 80123b8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80123bc:	fa5f f880 	uxtb.w	r8, r0
 80123c0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80123c4:	d058      	beq.n	8012478 <wait_session_status+0x150>
 80123c6:	2f02      	cmp	r7, #2
 80123c8:	d021      	beq.n	801240e <wait_session_status+0xe6>
 80123ca:	2f00      	cmp	r7, #0
 80123cc:	d1c6      	bne.n	801235c <wait_session_status+0x34>
 80123ce:	4639      	mov	r1, r7
 80123d0:	4638      	mov	r0, r7
 80123d2:	f000 feb9 	bl	8013148 <uxr_stream_id_from_raw>
 80123d6:	a90c      	add	r1, sp, #48	; 0x30
 80123d8:	4602      	mov	r2, r0
 80123da:	4620      	mov	r0, r4
 80123dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80123de:	f7ff fb3f 	bl	8011a60 <read_submessage_list>
 80123e2:	f001 f807 	bl	80133f4 <uxr_millis>
 80123e6:	1b40      	subs	r0, r0, r5
 80123e8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	dcbc      	bgt.n	801236a <wait_session_status+0x42>
 80123f0:	9b03      	ldr	r3, [sp, #12]
 80123f2:	9a04      	ldr	r2, [sp, #16]
 80123f4:	7960      	ldrb	r0, [r4, #5]
 80123f6:	3301      	adds	r3, #1
 80123f8:	429a      	cmp	r2, r3
 80123fa:	9303      	str	r3, [sp, #12]
 80123fc:	d001      	beq.n	8012402 <wait_session_status+0xda>
 80123fe:	28ff      	cmp	r0, #255	; 0xff
 8012400:	d0a0      	beq.n	8012344 <wait_session_status+0x1c>
 8012402:	38ff      	subs	r0, #255	; 0xff
 8012404:	bf18      	it	ne
 8012406:	2001      	movne	r0, #1
 8012408:	b01d      	add	sp, #116	; 0x74
 801240a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801240e:	4631      	mov	r1, r6
 8012410:	f104 0008 	add.w	r0, r4, #8
 8012414:	f000 ff86 	bl	8013324 <uxr_get_input_reliable_stream>
 8012418:	4681      	mov	r9, r0
 801241a:	b338      	cbz	r0, 801246c <wait_session_status+0x144>
 801241c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801241e:	9205      	str	r2, [sp, #20]
 8012420:	a80c      	add	r0, sp, #48	; 0x30
 8012422:	f7fe fc95 	bl	8010d50 <ucdr_buffer_remaining>
 8012426:	4603      	mov	r3, r0
 8012428:	f10d 001d 	add.w	r0, sp, #29
 801242c:	9000      	str	r0, [sp, #0]
 801242e:	9a05      	ldr	r2, [sp, #20]
 8012430:	9902      	ldr	r1, [sp, #8]
 8012432:	4648      	mov	r0, r9
 8012434:	f006 fbf8 	bl	8018c28 <uxr_receive_reliable_message>
 8012438:	b1c0      	cbz	r0, 801246c <wait_session_status+0x144>
 801243a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801243e:	b95b      	cbnz	r3, 8012458 <wait_session_status+0x130>
 8012440:	e03c      	b.n	80124bc <wait_session_status+0x194>
 8012442:	f04f 0302 	mov.w	r3, #2
 8012446:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 801244a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801244e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012454:	f7ff fb04 	bl	8011a60 <read_submessage_list>
 8012458:	a914      	add	r1, sp, #80	; 0x50
 801245a:	2204      	movs	r2, #4
 801245c:	4648      	mov	r0, r9
 801245e:	f006 fc63 	bl	8018d28 <uxr_next_input_reliable_buffer_available>
 8012462:	4603      	mov	r3, r0
 8012464:	a914      	add	r1, sp, #80	; 0x50
 8012466:	4620      	mov	r0, r4
 8012468:	2b00      	cmp	r3, #0
 801246a:	d1ea      	bne.n	8012442 <wait_session_status+0x11a>
 801246c:	4632      	mov	r2, r6
 801246e:	4641      	mov	r1, r8
 8012470:	4620      	mov	r0, r4
 8012472:	f7ff f973 	bl	801175c <write_submessage_acknack.isra.0>
 8012476:	e771      	b.n	801235c <wait_session_status+0x34>
 8012478:	4631      	mov	r1, r6
 801247a:	f104 0008 	add.w	r0, r4, #8
 801247e:	f000 ff47 	bl	8013310 <uxr_get_input_best_effort_stream>
 8012482:	2800      	cmp	r0, #0
 8012484:	f43f af6a 	beq.w	801235c <wait_session_status+0x34>
 8012488:	9902      	ldr	r1, [sp, #8]
 801248a:	f006 fb49 	bl	8018b20 <uxr_receive_best_effort_message>
 801248e:	2800      	cmp	r0, #0
 8012490:	f43f af64 	beq.w	801235c <wait_session_status+0x34>
 8012494:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012498:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801249c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80124a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124a2:	a90c      	add	r1, sp, #48	; 0x30
 80124a4:	4620      	mov	r0, r4
 80124a6:	f7ff fadb 	bl	8011a60 <read_submessage_list>
 80124aa:	e757      	b.n	801235c <wait_session_status+0x34>
 80124ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80124ae:	e9d3 0400 	ldrd	r0, r4, [r3]
 80124b2:	47a0      	blx	r4
 80124b4:	2001      	movs	r0, #1
 80124b6:	b01d      	add	sp, #116	; 0x74
 80124b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124bc:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 80124c0:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80124c4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80124c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124ca:	a90c      	add	r1, sp, #48	; 0x30
 80124cc:	4620      	mov	r0, r4
 80124ce:	f7ff fac7 	bl	8011a60 <read_submessage_list>
 80124d2:	e7c1      	b.n	8012458 <wait_session_status+0x130>

080124d4 <uxr_delete_session_retries>:
 80124d4:	b530      	push	{r4, r5, lr}
 80124d6:	b08f      	sub	sp, #60	; 0x3c
 80124d8:	4604      	mov	r4, r0
 80124da:	460d      	mov	r5, r1
 80124dc:	f000 f954 	bl	8012788 <uxr_session_header_offset>
 80124e0:	2300      	movs	r3, #0
 80124e2:	2210      	movs	r2, #16
 80124e4:	9000      	str	r0, [sp, #0]
 80124e6:	a902      	add	r1, sp, #8
 80124e8:	a806      	add	r0, sp, #24
 80124ea:	f7fe fbef 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 80124ee:	a906      	add	r1, sp, #24
 80124f0:	4620      	mov	r0, r4
 80124f2:	f000 f897 	bl	8012624 <uxr_buffer_delete_session>
 80124f6:	2200      	movs	r2, #0
 80124f8:	4611      	mov	r1, r2
 80124fa:	9b06      	ldr	r3, [sp, #24]
 80124fc:	4620      	mov	r0, r4
 80124fe:	f000 f8eb 	bl	80126d8 <uxr_stamp_session_header>
 8012502:	a806      	add	r0, sp, #24
 8012504:	f7fe fc20 	bl	8010d48 <ucdr_buffer_length>
 8012508:	462b      	mov	r3, r5
 801250a:	4602      	mov	r2, r0
 801250c:	a902      	add	r1, sp, #8
 801250e:	4620      	mov	r0, r4
 8012510:	f7ff ff0a 	bl	8012328 <wait_session_status>
 8012514:	b118      	cbz	r0, 801251e <uxr_delete_session_retries+0x4a>
 8012516:	7960      	ldrb	r0, [r4, #5]
 8012518:	fab0 f080 	clz	r0, r0
 801251c:	0940      	lsrs	r0, r0, #5
 801251e:	b00f      	add	sp, #60	; 0x3c
 8012520:	bd30      	pop	{r4, r5, pc}
 8012522:	bf00      	nop

08012524 <uxr_prepare_stream_to_write_submessage>:
 8012524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012528:	b082      	sub	sp, #8
 801252a:	4682      	mov	sl, r0
 801252c:	4610      	mov	r0, r2
 801252e:	4615      	mov	r5, r2
 8012530:	461e      	mov	r6, r3
 8012532:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012536:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801253a:	9101      	str	r1, [sp, #4]
 801253c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012540:	f000 ff52 	bl	80133e8 <uxr_submessage_padding>
 8012544:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012548:	f105 0904 	add.w	r9, r5, #4
 801254c:	2b01      	cmp	r3, #1
 801254e:	4481      	add	r9, r0
 8012550:	d01d      	beq.n	801258e <uxr_prepare_stream_to_write_submessage+0x6a>
 8012552:	2b02      	cmp	r3, #2
 8012554:	d116      	bne.n	8012584 <uxr_prepare_stream_to_write_submessage+0x60>
 8012556:	4621      	mov	r1, r4
 8012558:	f10a 0008 	add.w	r0, sl, #8
 801255c:	f000 fecc 	bl	80132f8 <uxr_get_output_reliable_stream>
 8012560:	4604      	mov	r4, r0
 8012562:	b158      	cbz	r0, 801257c <uxr_prepare_stream_to_write_submessage+0x58>
 8012564:	4649      	mov	r1, r9
 8012566:	4632      	mov	r2, r6
 8012568:	f006 fd94 	bl	8019094 <uxr_prepare_reliable_buffer_to_write>
 801256c:	4604      	mov	r4, r0
 801256e:	b12c      	cbz	r4, 801257c <uxr_prepare_stream_to_write_submessage+0x58>
 8012570:	4643      	mov	r3, r8
 8012572:	b2aa      	uxth	r2, r5
 8012574:	4639      	mov	r1, r7
 8012576:	4630      	mov	r0, r6
 8012578:	f000 fef6 	bl	8013368 <uxr_buffer_submessage_header>
 801257c:	4620      	mov	r0, r4
 801257e:	b002      	add	sp, #8
 8012580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012584:	2400      	movs	r4, #0
 8012586:	4620      	mov	r0, r4
 8012588:	b002      	add	sp, #8
 801258a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801258e:	4621      	mov	r1, r4
 8012590:	f10a 0008 	add.w	r0, sl, #8
 8012594:	f000 fea8 	bl	80132e8 <uxr_get_output_best_effort_stream>
 8012598:	4604      	mov	r4, r0
 801259a:	2800      	cmp	r0, #0
 801259c:	d0ee      	beq.n	801257c <uxr_prepare_stream_to_write_submessage+0x58>
 801259e:	4649      	mov	r1, r9
 80125a0:	4632      	mov	r2, r6
 80125a2:	f006 fcb3 	bl	8018f0c <uxr_prepare_best_effort_buffer_to_write>
 80125a6:	4604      	mov	r4, r0
 80125a8:	e7e1      	b.n	801256e <uxr_prepare_stream_to_write_submessage+0x4a>
 80125aa:	bf00      	nop

080125ac <uxr_init_session_info>:
 80125ac:	b470      	push	{r4, r5, r6}
 80125ae:	7102      	strb	r2, [r0, #4]
 80125b0:	0e16      	lsrs	r6, r2, #24
 80125b2:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80125b6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80125ba:	23ff      	movs	r3, #255	; 0xff
 80125bc:	2209      	movs	r2, #9
 80125be:	7046      	strb	r6, [r0, #1]
 80125c0:	7085      	strb	r5, [r0, #2]
 80125c2:	70c4      	strb	r4, [r0, #3]
 80125c4:	7001      	strb	r1, [r0, #0]
 80125c6:	bc70      	pop	{r4, r5, r6}
 80125c8:	80c2      	strh	r2, [r0, #6]
 80125ca:	7143      	strb	r3, [r0, #5]
 80125cc:	4770      	bx	lr
 80125ce:	bf00      	nop

080125d0 <uxr_buffer_create_session>:
 80125d0:	b570      	push	{r4, r5, r6, lr}
 80125d2:	b088      	sub	sp, #32
 80125d4:	2300      	movs	r3, #0
 80125d6:	4d12      	ldr	r5, [pc, #72]	; (8012620 <uxr_buffer_create_session+0x50>)
 80125d8:	9307      	str	r3, [sp, #28]
 80125da:	f8ad 201c 	strh.w	r2, [sp, #28]
 80125de:	7802      	ldrb	r2, [r0, #0]
 80125e0:	9303      	str	r3, [sp, #12]
 80125e2:	460c      	mov	r4, r1
 80125e4:	f88d 200c 	strb.w	r2, [sp, #12]
 80125e8:	2101      	movs	r1, #1
 80125ea:	682a      	ldr	r2, [r5, #0]
 80125ec:	f8d0 6001 	ldr.w	r6, [r0, #1]
 80125f0:	88ad      	ldrh	r5, [r5, #4]
 80125f2:	80c1      	strh	r1, [r0, #6]
 80125f4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80125f8:	9200      	str	r2, [sp, #0]
 80125fa:	4619      	mov	r1, r3
 80125fc:	2210      	movs	r2, #16
 80125fe:	4620      	mov	r0, r4
 8012600:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012604:	9306      	str	r3, [sp, #24]
 8012606:	f88d 300d 	strb.w	r3, [sp, #13]
 801260a:	9602      	str	r6, [sp, #8]
 801260c:	f8ad 5006 	strh.w	r5, [sp, #6]
 8012610:	f000 feaa 	bl	8013368 <uxr_buffer_submessage_header>
 8012614:	4620      	mov	r0, r4
 8012616:	4669      	mov	r1, sp
 8012618:	f001 fece 	bl	80143b8 <uxr_serialize_CREATE_CLIENT_Payload>
 801261c:	b008      	add	sp, #32
 801261e:	bd70      	pop	{r4, r5, r6, pc}
 8012620:	0801e994 	.word	0x0801e994

08012624 <uxr_buffer_delete_session>:
 8012624:	b530      	push	{r4, r5, lr}
 8012626:	4b0c      	ldr	r3, [pc, #48]	; (8012658 <uxr_buffer_delete_session+0x34>)
 8012628:	b083      	sub	sp, #12
 801262a:	891b      	ldrh	r3, [r3, #8]
 801262c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012630:	2202      	movs	r2, #2
 8012632:	460c      	mov	r4, r1
 8012634:	80c2      	strh	r2, [r0, #6]
 8012636:	2300      	movs	r3, #0
 8012638:	2204      	movs	r2, #4
 801263a:	4608      	mov	r0, r1
 801263c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012640:	2103      	movs	r1, #3
 8012642:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012646:	f000 fe8f 	bl	8013368 <uxr_buffer_submessage_header>
 801264a:	4620      	mov	r0, r4
 801264c:	a901      	add	r1, sp, #4
 801264e:	f001 ff61 	bl	8014514 <uxr_serialize_DELETE_Payload>
 8012652:	b003      	add	sp, #12
 8012654:	bd30      	pop	{r4, r5, pc}
 8012656:	bf00      	nop
 8012658:	0801e994 	.word	0x0801e994

0801265c <uxr_read_create_session_status>:
 801265c:	b510      	push	{r4, lr}
 801265e:	b088      	sub	sp, #32
 8012660:	4604      	mov	r4, r0
 8012662:	4608      	mov	r0, r1
 8012664:	a901      	add	r1, sp, #4
 8012666:	f001 ff65 	bl	8014534 <uxr_deserialize_STATUS_AGENT_Payload>
 801266a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801266e:	7163      	strb	r3, [r4, #5]
 8012670:	b008      	add	sp, #32
 8012672:	bd10      	pop	{r4, pc}

08012674 <uxr_read_delete_session_status>:
 8012674:	b510      	push	{r4, lr}
 8012676:	4604      	mov	r4, r0
 8012678:	b084      	sub	sp, #16
 801267a:	4608      	mov	r0, r1
 801267c:	a902      	add	r1, sp, #8
 801267e:	f001 ff89 	bl	8014594 <uxr_deserialize_STATUS_Payload>
 8012682:	88e3      	ldrh	r3, [r4, #6]
 8012684:	2b02      	cmp	r3, #2
 8012686:	d001      	beq.n	801268c <uxr_read_delete_session_status+0x18>
 8012688:	b004      	add	sp, #16
 801268a:	bd10      	pop	{r4, pc}
 801268c:	f10d 000a 	add.w	r0, sp, #10
 8012690:	f7fe fec6 	bl	8011420 <uxr_object_id_from_raw>
 8012694:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012698:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801269c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	2b02      	cmp	r3, #2
 80126a4:	bf04      	itt	eq
 80126a6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80126aa:	7163      	strbeq	r3, [r4, #5]
 80126ac:	b004      	add	sp, #16
 80126ae:	bd10      	pop	{r4, pc}

080126b0 <uxr_stamp_create_session_header>:
 80126b0:	b510      	push	{r4, lr}
 80126b2:	4604      	mov	r4, r0
 80126b4:	b08a      	sub	sp, #40	; 0x28
 80126b6:	a802      	add	r0, sp, #8
 80126b8:	2208      	movs	r2, #8
 80126ba:	f7fe fb19 	bl	8010cf0 <ucdr_init_buffer>
 80126be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126c2:	9400      	str	r4, [sp, #0]
 80126c4:	2300      	movs	r3, #0
 80126c6:	a802      	add	r0, sp, #8
 80126c8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80126cc:	461a      	mov	r2, r3
 80126ce:	f001 f849 	bl	8013764 <uxr_serialize_message_header>
 80126d2:	b00a      	add	sp, #40	; 0x28
 80126d4:	bd10      	pop	{r4, pc}
 80126d6:	bf00      	nop

080126d8 <uxr_stamp_session_header>:
 80126d8:	b570      	push	{r4, r5, r6, lr}
 80126da:	4604      	mov	r4, r0
 80126dc:	b08c      	sub	sp, #48	; 0x30
 80126de:	460d      	mov	r5, r1
 80126e0:	4616      	mov	r6, r2
 80126e2:	4619      	mov	r1, r3
 80126e4:	a804      	add	r0, sp, #16
 80126e6:	2208      	movs	r2, #8
 80126e8:	9603      	str	r6, [sp, #12]
 80126ea:	f7fe fb01 	bl	8010cf0 <ucdr_init_buffer>
 80126ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126f2:	9b03      	ldr	r3, [sp, #12]
 80126f4:	9400      	str	r4, [sp, #0]
 80126f6:	462a      	mov	r2, r5
 80126f8:	a804      	add	r0, sp, #16
 80126fa:	f001 f833 	bl	8013764 <uxr_serialize_message_header>
 80126fe:	b00c      	add	sp, #48	; 0x30
 8012700:	bd70      	pop	{r4, r5, r6, pc}
 8012702:	bf00      	nop

08012704 <uxr_read_session_header>:
 8012704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012708:	4607      	mov	r7, r0
 801270a:	b084      	sub	sp, #16
 801270c:	4608      	mov	r0, r1
 801270e:	460c      	mov	r4, r1
 8012710:	4615      	mov	r5, r2
 8012712:	461e      	mov	r6, r3
 8012714:	f7fe fb1c 	bl	8010d50 <ucdr_buffer_remaining>
 8012718:	2808      	cmp	r0, #8
 801271a:	d803      	bhi.n	8012724 <uxr_read_session_header+0x20>
 801271c:	2000      	movs	r0, #0
 801271e:	b004      	add	sp, #16
 8012720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012724:	f10d 080c 	add.w	r8, sp, #12
 8012728:	4633      	mov	r3, r6
 801272a:	462a      	mov	r2, r5
 801272c:	4620      	mov	r0, r4
 801272e:	f8cd 8000 	str.w	r8, [sp]
 8012732:	f10d 010b 	add.w	r1, sp, #11
 8012736:	f001 f833 	bl	80137a0 <uxr_deserialize_message_header>
 801273a:	783a      	ldrb	r2, [r7, #0]
 801273c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012740:	4293      	cmp	r3, r2
 8012742:	d1eb      	bne.n	801271c <uxr_read_session_header+0x18>
 8012744:	061b      	lsls	r3, r3, #24
 8012746:	d41c      	bmi.n	8012782 <uxr_read_session_header+0x7e>
 8012748:	f898 2000 	ldrb.w	r2, [r8]
 801274c:	787b      	ldrb	r3, [r7, #1]
 801274e:	429a      	cmp	r2, r3
 8012750:	d003      	beq.n	801275a <uxr_read_session_header+0x56>
 8012752:	2001      	movs	r0, #1
 8012754:	f080 0001 	eor.w	r0, r0, #1
 8012758:	e7e1      	b.n	801271e <uxr_read_session_header+0x1a>
 801275a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801275e:	78bb      	ldrb	r3, [r7, #2]
 8012760:	429a      	cmp	r2, r3
 8012762:	f107 0102 	add.w	r1, r7, #2
 8012766:	d1f4      	bne.n	8012752 <uxr_read_session_header+0x4e>
 8012768:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801276c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012770:	429a      	cmp	r2, r3
 8012772:	d1ee      	bne.n	8012752 <uxr_read_session_header+0x4e>
 8012774:	784b      	ldrb	r3, [r1, #1]
 8012776:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801277a:	429a      	cmp	r2, r3
 801277c:	d1e9      	bne.n	8012752 <uxr_read_session_header+0x4e>
 801277e:	2000      	movs	r0, #0
 8012780:	e7e8      	b.n	8012754 <uxr_read_session_header+0x50>
 8012782:	2001      	movs	r0, #1
 8012784:	e7cb      	b.n	801271e <uxr_read_session_header+0x1a>
 8012786:	bf00      	nop

08012788 <uxr_session_header_offset>:
 8012788:	f990 3000 	ldrsb.w	r3, [r0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	bfac      	ite	ge
 8012790:	2008      	movge	r0, #8
 8012792:	2004      	movlt	r0, #4
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop

08012798 <uxr_init_base_object_request>:
 8012798:	b530      	push	{r4, r5, lr}
 801279a:	88c3      	ldrh	r3, [r0, #6]
 801279c:	b083      	sub	sp, #12
 801279e:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80127a2:	9101      	str	r1, [sp, #4]
 80127a4:	f1a3 010a 	sub.w	r1, r3, #10
 80127a8:	b289      	uxth	r1, r1
 80127aa:	42a1      	cmp	r1, r4
 80127ac:	d80e      	bhi.n	80127cc <uxr_init_base_object_request+0x34>
 80127ae:	3301      	adds	r3, #1
 80127b0:	b29c      	uxth	r4, r3
 80127b2:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	80c4      	strh	r4, [r0, #6]
 80127ba:	1c91      	adds	r1, r2, #2
 80127bc:	9801      	ldr	r0, [sp, #4]
 80127be:	7015      	strb	r5, [r2, #0]
 80127c0:	7053      	strb	r3, [r2, #1]
 80127c2:	f7fe fe41 	bl	8011448 <uxr_object_id_to_raw>
 80127c6:	4620      	mov	r0, r4
 80127c8:	b003      	add	sp, #12
 80127ca:	bd30      	pop	{r4, r5, pc}
 80127cc:	230a      	movs	r3, #10
 80127ce:	461c      	mov	r4, r3
 80127d0:	2500      	movs	r5, #0
 80127d2:	e7f1      	b.n	80127b8 <uxr_init_base_object_request+0x20>

080127d4 <uxr_parse_base_object_request>:
 80127d4:	b570      	push	{r4, r5, r6, lr}
 80127d6:	4604      	mov	r4, r0
 80127d8:	3002      	adds	r0, #2
 80127da:	460d      	mov	r5, r1
 80127dc:	4616      	mov	r6, r2
 80127de:	f7fe fe1f 	bl	8011420 <uxr_object_id_from_raw>
 80127e2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80127e6:	8028      	strh	r0, [r5, #0]
 80127e8:	806b      	strh	r3, [r5, #2]
 80127ea:	7822      	ldrb	r2, [r4, #0]
 80127ec:	7863      	ldrb	r3, [r4, #1]
 80127ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80127f2:	8033      	strh	r3, [r6, #0]
 80127f4:	bd70      	pop	{r4, r5, r6, pc}
 80127f6:	bf00      	nop

080127f8 <uxr_init_framing_io>:
 80127f8:	2300      	movs	r3, #0
 80127fa:	7041      	strb	r1, [r0, #1]
 80127fc:	7003      	strb	r3, [r0, #0]
 80127fe:	8583      	strh	r3, [r0, #44]	; 0x2c
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop

08012804 <uxr_write_framed_msg>:
 8012804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012808:	7845      	ldrb	r5, [r0, #1]
 801280a:	b085      	sub	sp, #20
 801280c:	4604      	mov	r4, r0
 801280e:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8012812:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8012816:	f1bc 0f01 	cmp.w	ip, #1
 801281a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801281e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8012822:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8012826:	460e      	mov	r6, r1
 8012828:	4617      	mov	r7, r2
 801282a:	469b      	mov	fp, r3
 801282c:	f240 8116 	bls.w	8012a5c <uxr_write_framed_msg+0x258>
 8012830:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8012834:	2302      	movs	r3, #2
 8012836:	2a01      	cmp	r2, #1
 8012838:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 801283c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012840:	f240 8091 	bls.w	8012966 <uxr_write_framed_msg+0x162>
 8012844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012846:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801284a:	b2d9      	uxtb	r1, r3
 801284c:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8012850:	2203      	movs	r2, #3
 8012852:	2b01      	cmp	r3, #1
 8012854:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012858:	f240 809a 	bls.w	8012990 <uxr_write_framed_msg+0x18c>
 801285c:	18a3      	adds	r3, r4, r2
 801285e:	3201      	adds	r2, #1
 8012860:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8012864:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801286a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801286e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012872:	2901      	cmp	r1, #1
 8012874:	eb04 0102 	add.w	r1, r4, r2
 8012878:	f240 8101 	bls.w	8012a7e <uxr_write_framed_msg+0x27a>
 801287c:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8012880:	3201      	adds	r2, #1
 8012882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012884:	b2d2      	uxtb	r2, r2
 8012886:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801288a:	2b00      	cmp	r3, #0
 801288c:	f000 8106 	beq.w	8012a9c <uxr_write_framed_msg+0x298>
 8012890:	f04f 0a00 	mov.w	sl, #0
 8012894:	46d1      	mov	r9, sl
 8012896:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801289a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801289e:	2901      	cmp	r1, #1
 80128a0:	f240 80a3 	bls.w	80129ea <uxr_write_framed_msg+0x1e6>
 80128a4:	2a29      	cmp	r2, #41	; 0x29
 80128a6:	d87f      	bhi.n	80129a8 <uxr_write_framed_msg+0x1a4>
 80128a8:	18a1      	adds	r1, r4, r2
 80128aa:	3201      	adds	r2, #1
 80128ac:	b2d2      	uxtb	r2, r2
 80128ae:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80128b2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80128b6:	ea8a 0303 	eor.w	r3, sl, r3
 80128ba:	4984      	ldr	r1, [pc, #528]	; (8012acc <uxr_write_framed_msg+0x2c8>)
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	f109 0901 	add.w	r9, r9, #1
 80128c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80128c6:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 80128ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128cc:	454b      	cmp	r3, r9
 80128ce:	d8e2      	bhi.n	8012896 <uxr_write_framed_msg+0x92>
 80128d0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80128d4:	fa5f f98a 	uxtb.w	r9, sl
 80128d8:	9301      	str	r3, [sp, #4]
 80128da:	f04f 0b00 	mov.w	fp, #0
 80128de:	f88d 900c 	strb.w	r9, [sp, #12]
 80128e2:	f88d 300d 	strb.w	r3, [sp, #13]
 80128e6:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 80128ea:	fa5f f18a 	uxtb.w	r1, sl
 80128ee:	2901      	cmp	r1, #1
 80128f0:	d920      	bls.n	8012934 <uxr_write_framed_msg+0x130>
 80128f2:	2a29      	cmp	r2, #41	; 0x29
 80128f4:	f240 808b 	bls.w	8012a0e <uxr_write_framed_msg+0x20a>
 80128f8:	2500      	movs	r5, #0
 80128fa:	e000      	b.n	80128fe <uxr_write_framed_msg+0xfa>
 80128fc:	b160      	cbz	r0, 8012918 <uxr_write_framed_msg+0x114>
 80128fe:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012902:	1b52      	subs	r2, r2, r5
 8012904:	4421      	add	r1, r4
 8012906:	4643      	mov	r3, r8
 8012908:	4638      	mov	r0, r7
 801290a:	47b0      	blx	r6
 801290c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012910:	4405      	add	r5, r0
 8012912:	4295      	cmp	r5, r2
 8012914:	d3f2      	bcc.n	80128fc <uxr_write_framed_msg+0xf8>
 8012916:	d003      	beq.n	8012920 <uxr_write_framed_msg+0x11c>
 8012918:	2000      	movs	r0, #0
 801291a:	b005      	add	sp, #20
 801291c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012920:	fa5f f18a 	uxtb.w	r1, sl
 8012924:	f04f 0300 	mov.w	r3, #0
 8012928:	2901      	cmp	r1, #1
 801292a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801292e:	f04f 0200 	mov.w	r2, #0
 8012932:	d86c      	bhi.n	8012a0e <uxr_write_framed_msg+0x20a>
 8012934:	1c51      	adds	r1, r2, #1
 8012936:	b2c9      	uxtb	r1, r1
 8012938:	2929      	cmp	r1, #41	; 0x29
 801293a:	d8dd      	bhi.n	80128f8 <uxr_write_framed_msg+0xf4>
 801293c:	18a0      	adds	r0, r4, r2
 801293e:	3202      	adds	r2, #2
 8012940:	f089 0920 	eor.w	r9, r9, #32
 8012944:	b2d2      	uxtb	r2, r2
 8012946:	4659      	mov	r1, fp
 8012948:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801294c:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8012950:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8012954:	f04f 0b01 	mov.w	fp, #1
 8012958:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801295c:	2900      	cmp	r1, #0
 801295e:	d162      	bne.n	8012a26 <uxr_write_framed_msg+0x222>
 8012960:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012964:	e7bf      	b.n	80128e6 <uxr_write_framed_msg+0xe2>
 8012966:	2204      	movs	r2, #4
 8012968:	2503      	movs	r5, #3
 801296a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801296c:	4423      	add	r3, r4
 801296e:	b2c9      	uxtb	r1, r1
 8012970:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8012974:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8012978:	4425      	add	r5, r4
 801297a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801297e:	f080 0020 	eor.w	r0, r0, #32
 8012982:	2b01      	cmp	r3, #1
 8012984:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8012988:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801298c:	f63f af66 	bhi.w	801285c <uxr_write_framed_msg+0x58>
 8012990:	18a3      	adds	r3, r4, r2
 8012992:	f081 0120 	eor.w	r1, r1, #32
 8012996:	3202      	adds	r2, #2
 8012998:	207d      	movs	r0, #125	; 0x7d
 801299a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801299e:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 80129a2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80129a6:	e75f      	b.n	8012868 <uxr_write_framed_msg+0x64>
 80129a8:	2500      	movs	r5, #0
 80129aa:	e001      	b.n	80129b0 <uxr_write_framed_msg+0x1ac>
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d0b3      	beq.n	8012918 <uxr_write_framed_msg+0x114>
 80129b0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80129b4:	1b52      	subs	r2, r2, r5
 80129b6:	4421      	add	r1, r4
 80129b8:	4643      	mov	r3, r8
 80129ba:	4638      	mov	r0, r7
 80129bc:	47b0      	blx	r6
 80129be:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80129c2:	4405      	add	r5, r0
 80129c4:	4295      	cmp	r5, r2
 80129c6:	d3f1      	bcc.n	80129ac <uxr_write_framed_msg+0x1a8>
 80129c8:	d1a6      	bne.n	8012918 <uxr_write_framed_msg+0x114>
 80129ca:	f04f 0300 	mov.w	r3, #0
 80129ce:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80129d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129d4:	454b      	cmp	r3, r9
 80129d6:	d971      	bls.n	8012abc <uxr_write_framed_msg+0x2b8>
 80129d8:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80129dc:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80129e0:	2901      	cmp	r1, #1
 80129e2:	f04f 0200 	mov.w	r2, #0
 80129e6:	f63f af5d 	bhi.w	80128a4 <uxr_write_framed_msg+0xa0>
 80129ea:	1c51      	adds	r1, r2, #1
 80129ec:	b2c9      	uxtb	r1, r1
 80129ee:	2929      	cmp	r1, #41	; 0x29
 80129f0:	d8da      	bhi.n	80129a8 <uxr_write_framed_msg+0x1a4>
 80129f2:	18a0      	adds	r0, r4, r2
 80129f4:	3202      	adds	r2, #2
 80129f6:	b2d2      	uxtb	r2, r2
 80129f8:	f083 0120 	eor.w	r1, r3, #32
 80129fc:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8012a00:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8012a04:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8012a08:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012a0c:	e753      	b.n	80128b6 <uxr_write_framed_msg+0xb2>
 8012a0e:	18a0      	adds	r0, r4, r2
 8012a10:	3201      	adds	r2, #1
 8012a12:	b2d2      	uxtb	r2, r2
 8012a14:	4659      	mov	r1, fp
 8012a16:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8012a1a:	f04f 0b01 	mov.w	fp, #1
 8012a1e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012a22:	2900      	cmp	r1, #0
 8012a24:	d09c      	beq.n	8012960 <uxr_write_framed_msg+0x15c>
 8012a26:	2500      	movs	r5, #0
 8012a28:	e002      	b.n	8012a30 <uxr_write_framed_msg+0x22c>
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	f43f af74 	beq.w	8012918 <uxr_write_framed_msg+0x114>
 8012a30:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012a34:	1b52      	subs	r2, r2, r5
 8012a36:	4421      	add	r1, r4
 8012a38:	4643      	mov	r3, r8
 8012a3a:	4638      	mov	r0, r7
 8012a3c:	47b0      	blx	r6
 8012a3e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012a42:	4405      	add	r5, r0
 8012a44:	4295      	cmp	r5, r2
 8012a46:	d3f0      	bcc.n	8012a2a <uxr_write_framed_msg+0x226>
 8012a48:	f47f af66 	bne.w	8012918 <uxr_write_framed_msg+0x114>
 8012a4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a4e:	2300      	movs	r3, #0
 8012a50:	b290      	uxth	r0, r2
 8012a52:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012a56:	b005      	add	sp, #20
 8012a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a5c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8012a60:	f085 0520 	eor.w	r5, r5, #32
 8012a64:	2303      	movs	r3, #3
 8012a66:	217d      	movs	r1, #125	; 0x7d
 8012a68:	2a01      	cmp	r2, #1
 8012a6a:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8012a6e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012a72:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8012a76:	d814      	bhi.n	8012aa2 <uxr_write_framed_msg+0x29e>
 8012a78:	2205      	movs	r2, #5
 8012a7a:	2504      	movs	r5, #4
 8012a7c:	e775      	b.n	801296a <uxr_write_framed_msg+0x166>
 8012a7e:	f083 0320 	eor.w	r3, r3, #32
 8012a82:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8012a86:	3202      	adds	r2, #2
 8012a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a8a:	b2d2      	uxtb	r2, r2
 8012a8c:	207d      	movs	r0, #125	; 0x7d
 8012a8e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8012a92:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f47f aefa 	bne.w	8012890 <uxr_write_framed_msg+0x8c>
 8012a9c:	9301      	str	r3, [sp, #4]
 8012a9e:	4699      	mov	r9, r3
 8012aa0:	e71b      	b.n	80128da <uxr_write_framed_msg+0xd6>
 8012aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012aa4:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8012aa8:	b2d9      	uxtb	r1, r3
 8012aaa:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8012aae:	2204      	movs	r2, #4
 8012ab0:	2b01      	cmp	r3, #1
 8012ab2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012ab6:	f63f aed1 	bhi.w	801285c <uxr_write_framed_msg+0x58>
 8012aba:	e769      	b.n	8012990 <uxr_write_framed_msg+0x18c>
 8012abc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012ac0:	fa5f f98a 	uxtb.w	r9, sl
 8012ac4:	9301      	str	r3, [sp, #4]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	e707      	b.n	80128da <uxr_write_framed_msg+0xd6>
 8012aca:	bf00      	nop
 8012acc:	0801ebf0 	.word	0x0801ebf0

08012ad0 <uxr_framing_read_transport>:
 8012ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	461f      	mov	r7, r3
 8012ada:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8012ade:	4689      	mov	r9, r1
 8012ae0:	4692      	mov	sl, r2
 8012ae2:	f000 fc87 	bl	80133f4 <uxr_millis>
 8012ae6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012aea:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8012aee:	42b3      	cmp	r3, r6
 8012af0:	4680      	mov	r8, r0
 8012af2:	d05f      	beq.n	8012bb4 <uxr_framing_read_transport+0xe4>
 8012af4:	d81b      	bhi.n	8012b2e <uxr_framing_read_transport+0x5e>
 8012af6:	1e75      	subs	r5, r6, #1
 8012af8:	1aed      	subs	r5, r5, r3
 8012afa:	b2ed      	uxtb	r5, r5
 8012afc:	2600      	movs	r6, #0
 8012afe:	455d      	cmp	r5, fp
 8012b00:	d81e      	bhi.n	8012b40 <uxr_framing_read_transport+0x70>
 8012b02:	19ab      	adds	r3, r5, r6
 8012b04:	455b      	cmp	r3, fp
 8012b06:	bf84      	itt	hi
 8012b08:	ebab 0605 	subhi.w	r6, fp, r5
 8012b0c:	b2f6      	uxtbhi	r6, r6
 8012b0e:	b9e5      	cbnz	r5, 8012b4a <uxr_framing_read_transport+0x7a>
 8012b10:	f04f 0b00 	mov.w	fp, #0
 8012b14:	f000 fc6e 	bl	80133f4 <uxr_millis>
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	eba0 0008 	sub.w	r0, r0, r8
 8012b1e:	1a1b      	subs	r3, r3, r0
 8012b20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012b24:	4658      	mov	r0, fp
 8012b26:	603b      	str	r3, [r7, #0]
 8012b28:	b003      	add	sp, #12
 8012b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b2e:	2e00      	cmp	r6, #0
 8012b30:	d048      	beq.n	8012bc4 <uxr_framing_read_transport+0xf4>
 8012b32:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8012b36:	b2ed      	uxtb	r5, r5
 8012b38:	3e01      	subs	r6, #1
 8012b3a:	455d      	cmp	r5, fp
 8012b3c:	b2f6      	uxtb	r6, r6
 8012b3e:	d9e0      	bls.n	8012b02 <uxr_framing_read_transport+0x32>
 8012b40:	fa5f f58b 	uxtb.w	r5, fp
 8012b44:	2600      	movs	r6, #0
 8012b46:	2d00      	cmp	r5, #0
 8012b48:	d0e2      	beq.n	8012b10 <uxr_framing_read_transport+0x40>
 8012b4a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012b4e:	3102      	adds	r1, #2
 8012b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b52:	9300      	str	r3, [sp, #0]
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	4421      	add	r1, r4
 8012b58:	462a      	mov	r2, r5
 8012b5a:	4650      	mov	r0, sl
 8012b5c:	47c8      	blx	r9
 8012b5e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012b62:	4a1b      	ldr	r2, [pc, #108]	; (8012bd0 <uxr_framing_read_transport+0x100>)
 8012b64:	4403      	add	r3, r0
 8012b66:	0859      	lsrs	r1, r3, #1
 8012b68:	fba2 2101 	umull	r2, r1, r2, r1
 8012b6c:	0889      	lsrs	r1, r1, #2
 8012b6e:	222a      	movs	r2, #42	; 0x2a
 8012b70:	fb02 3111 	mls	r1, r2, r1, r3
 8012b74:	4683      	mov	fp, r0
 8012b76:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	d0c8      	beq.n	8012b10 <uxr_framing_read_transport+0x40>
 8012b7e:	42a8      	cmp	r0, r5
 8012b80:	d1c8      	bne.n	8012b14 <uxr_framing_read_transport+0x44>
 8012b82:	b31e      	cbz	r6, 8012bcc <uxr_framing_read_transport+0xfc>
 8012b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b86:	9300      	str	r3, [sp, #0]
 8012b88:	3102      	adds	r1, #2
 8012b8a:	4421      	add	r1, r4
 8012b8c:	4632      	mov	r2, r6
 8012b8e:	2300      	movs	r3, #0
 8012b90:	4650      	mov	r0, sl
 8012b92:	47c8      	blx	r9
 8012b94:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012b98:	490d      	ldr	r1, [pc, #52]	; (8012bd0 <uxr_framing_read_transport+0x100>)
 8012b9a:	181a      	adds	r2, r3, r0
 8012b9c:	0853      	lsrs	r3, r2, #1
 8012b9e:	fba1 1303 	umull	r1, r3, r1, r3
 8012ba2:	089b      	lsrs	r3, r3, #2
 8012ba4:	212a      	movs	r1, #42	; 0x2a
 8012ba6:	fb01 2313 	mls	r3, r1, r3, r2
 8012baa:	eb00 0b05 	add.w	fp, r0, r5
 8012bae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8012bb2:	e7af      	b.n	8012b14 <uxr_framing_read_transport+0x44>
 8012bb4:	2600      	movs	r6, #0
 8012bb6:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8012bba:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8012bbc:	d9c0      	bls.n	8012b40 <uxr_framing_read_transport+0x70>
 8012bbe:	2102      	movs	r1, #2
 8012bc0:	2529      	movs	r5, #41	; 0x29
 8012bc2:	e7c5      	b.n	8012b50 <uxr_framing_read_transport+0x80>
 8012bc4:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8012bc8:	b2ed      	uxtb	r5, r5
 8012bca:	e798      	b.n	8012afe <uxr_framing_read_transport+0x2e>
 8012bcc:	46ab      	mov	fp, r5
 8012bce:	e7a1      	b.n	8012b14 <uxr_framing_read_transport+0x44>
 8012bd0:	30c30c31 	.word	0x30c30c31

08012bd4 <uxr_read_framed_msg>:
 8012bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bd8:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8012bdc:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8012be0:	42ae      	cmp	r6, r5
 8012be2:	b083      	sub	sp, #12
 8012be4:	4604      	mov	r4, r0
 8012be6:	461f      	mov	r7, r3
 8012be8:	4689      	mov	r9, r1
 8012bea:	4692      	mov	sl, r2
 8012bec:	f000 817d 	beq.w	8012eea <uxr_read_framed_msg+0x316>
 8012bf0:	7823      	ldrb	r3, [r4, #0]
 8012bf2:	4ecc      	ldr	r6, [pc, #816]	; (8012f24 <uxr_read_framed_msg+0x350>)
 8012bf4:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8012f28 <uxr_read_framed_msg+0x354>
 8012bf8:	2b07      	cmp	r3, #7
 8012bfa:	d8fd      	bhi.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012bfc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012c00:	00f40113 	.word	0x00f40113
 8012c04:	00b700d4 	.word	0x00b700d4
 8012c08:	004d008e 	.word	0x004d008e
 8012c0c:	00080030 	.word	0x00080030
 8012c10:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012c14:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012c18:	4298      	cmp	r0, r3
 8012c1a:	f000 8141 	beq.w	8012ea0 <uxr_read_framed_msg+0x2cc>
 8012c1e:	18e2      	adds	r2, r4, r3
 8012c20:	7891      	ldrb	r1, [r2, #2]
 8012c22:	297d      	cmp	r1, #125	; 0x7d
 8012c24:	f000 81a2 	beq.w	8012f6c <uxr_read_framed_msg+0x398>
 8012c28:	3301      	adds	r3, #1
 8012c2a:	085a      	lsrs	r2, r3, #1
 8012c2c:	fba6 0202 	umull	r0, r2, r6, r2
 8012c30:	0892      	lsrs	r2, r2, #2
 8012c32:	202a      	movs	r0, #42	; 0x2a
 8012c34:	fb00 3312 	mls	r3, r0, r2, r3
 8012c38:	297e      	cmp	r1, #126	; 0x7e
 8012c3a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012c3e:	f000 8251 	beq.w	80130e4 <uxr_read_framed_msg+0x510>
 8012c42:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012c44:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012c46:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	86a3      	strh	r3, [r4, #52]	; 0x34
 8012c52:	7021      	strb	r1, [r4, #0]
 8012c54:	f000 8182 	beq.w	8012f5c <uxr_read_framed_msg+0x388>
 8012c58:	2000      	movs	r0, #0
 8012c5a:	b003      	add	sp, #12
 8012c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c60:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012c64:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012c68:	4298      	cmp	r0, r3
 8012c6a:	f000 8128 	beq.w	8012ebe <uxr_read_framed_msg+0x2ea>
 8012c6e:	18e2      	adds	r2, r4, r3
 8012c70:	7891      	ldrb	r1, [r2, #2]
 8012c72:	297d      	cmp	r1, #125	; 0x7d
 8012c74:	f000 8196 	beq.w	8012fa4 <uxr_read_framed_msg+0x3d0>
 8012c78:	3301      	adds	r3, #1
 8012c7a:	085a      	lsrs	r2, r3, #1
 8012c7c:	fba6 0202 	umull	r0, r2, r6, r2
 8012c80:	0892      	lsrs	r2, r2, #2
 8012c82:	202a      	movs	r0, #42	; 0x2a
 8012c84:	fb00 3312 	mls	r3, r0, r2, r3
 8012c88:	297e      	cmp	r1, #126	; 0x7e
 8012c8a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012c8e:	f000 8219 	beq.w	80130c4 <uxr_read_framed_msg+0x4f0>
 8012c92:	2307      	movs	r3, #7
 8012c94:	86a1      	strh	r1, [r4, #52]	; 0x34
 8012c96:	7023      	strb	r3, [r4, #0]
 8012c98:	e7ae      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012c9a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012c9c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8012c9e:	429d      	cmp	r5, r3
 8012ca0:	d937      	bls.n	8012d12 <uxr_read_framed_msg+0x13e>
 8012ca2:	ee07 9a90 	vmov	s15, r9
 8012ca6:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8012caa:	e01e      	b.n	8012cea <uxr_read_framed_msg+0x116>
 8012cac:	f89e e002 	ldrb.w	lr, [lr, #2]
 8012cb0:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8012cb4:	f000 80d2 	beq.w	8012e5c <uxr_read_framed_msg+0x288>
 8012cb8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012cbc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012cc0:	f000 8214 	beq.w	80130ec <uxr_read_framed_msg+0x518>
 8012cc4:	f807 e003 	strb.w	lr, [r7, r3]
 8012cc8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8012cca:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012ccc:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8012cce:	ea80 010e 	eor.w	r1, r0, lr
 8012cd2:	b2c9      	uxtb	r1, r1
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8012ce0:	42ab      	cmp	r3, r5
 8012ce2:	86e2      	strh	r2, [r4, #54]	; 0x36
 8012ce4:	8663      	strh	r3, [r4, #50]	; 0x32
 8012ce6:	f080 8121 	bcs.w	8012f2c <uxr_read_framed_msg+0x358>
 8012cea:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8012cee:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012cf2:	f101 0b01 	add.w	fp, r1, #1
 8012cf6:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8012cfa:	fba6 9202 	umull	r9, r2, r6, r2
 8012cfe:	0892      	lsrs	r2, r2, #2
 8012d00:	4288      	cmp	r0, r1
 8012d02:	eb04 0e01 	add.w	lr, r4, r1
 8012d06:	fb0c b212 	mls	r2, ip, r2, fp
 8012d0a:	d1cf      	bne.n	8012cac <uxr_read_framed_msg+0xd8>
 8012d0c:	ee17 9a90 	vmov	r9, s15
 8012d10:	429d      	cmp	r5, r3
 8012d12:	f040 8112 	bne.w	8012f3a <uxr_read_framed_msg+0x366>
 8012d16:	2306      	movs	r3, #6
 8012d18:	7023      	strb	r3, [r4, #0]
 8012d1a:	e76d      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012d1c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012d20:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012d24:	4298      	cmp	r0, r3
 8012d26:	f000 80bb 	beq.w	8012ea0 <uxr_read_framed_msg+0x2cc>
 8012d2a:	18e2      	adds	r2, r4, r3
 8012d2c:	7891      	ldrb	r1, [r2, #2]
 8012d2e:	297d      	cmp	r1, #125	; 0x7d
 8012d30:	f000 8153 	beq.w	8012fda <uxr_read_framed_msg+0x406>
 8012d34:	3301      	adds	r3, #1
 8012d36:	085a      	lsrs	r2, r3, #1
 8012d38:	fba6 0202 	umull	r0, r2, r6, r2
 8012d3c:	0892      	lsrs	r2, r2, #2
 8012d3e:	202a      	movs	r0, #42	; 0x2a
 8012d40:	fb00 3212 	mls	r2, r0, r2, r3
 8012d44:	297e      	cmp	r1, #126	; 0x7e
 8012d46:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012d4a:	f000 81cb 	beq.w	80130e4 <uxr_read_framed_msg+0x510>
 8012d4e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012d50:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012d54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	2000      	movs	r0, #0
 8012d5a:	428b      	cmp	r3, r1
 8012d5c:	8623      	strh	r3, [r4, #48]	; 0x30
 8012d5e:	8660      	strh	r0, [r4, #50]	; 0x32
 8012d60:	86e0      	strh	r0, [r4, #54]	; 0x36
 8012d62:	f240 80db 	bls.w	8012f1c <uxr_read_framed_msg+0x348>
 8012d66:	7020      	strb	r0, [r4, #0]
 8012d68:	b003      	add	sp, #12
 8012d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012d72:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012d76:	4298      	cmp	r0, r3
 8012d78:	f000 80a1 	beq.w	8012ebe <uxr_read_framed_msg+0x2ea>
 8012d7c:	18e2      	adds	r2, r4, r3
 8012d7e:	7891      	ldrb	r1, [r2, #2]
 8012d80:	297d      	cmp	r1, #125	; 0x7d
 8012d82:	f000 8167 	beq.w	8013054 <uxr_read_framed_msg+0x480>
 8012d86:	3301      	adds	r3, #1
 8012d88:	085a      	lsrs	r2, r3, #1
 8012d8a:	fba6 0202 	umull	r0, r2, r6, r2
 8012d8e:	0892      	lsrs	r2, r2, #2
 8012d90:	202a      	movs	r0, #42	; 0x2a
 8012d92:	fb00 3312 	mls	r3, r0, r2, r3
 8012d96:	297e      	cmp	r1, #126	; 0x7e
 8012d98:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012d9c:	f000 8192 	beq.w	80130c4 <uxr_read_framed_msg+0x4f0>
 8012da0:	2304      	movs	r3, #4
 8012da2:	8621      	strh	r1, [r4, #48]	; 0x30
 8012da4:	7023      	strb	r3, [r4, #0]
 8012da6:	e727      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012da8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012dac:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012db0:	4290      	cmp	r0, r2
 8012db2:	f000 80b1 	beq.w	8012f18 <uxr_read_framed_msg+0x344>
 8012db6:	18a3      	adds	r3, r4, r2
 8012db8:	7899      	ldrb	r1, [r3, #2]
 8012dba:	297d      	cmp	r1, #125	; 0x7d
 8012dbc:	f000 8166 	beq.w	801308c <uxr_read_framed_msg+0x4b8>
 8012dc0:	3201      	adds	r2, #1
 8012dc2:	0850      	lsrs	r0, r2, #1
 8012dc4:	fba6 3000 	umull	r3, r0, r6, r0
 8012dc8:	0880      	lsrs	r0, r0, #2
 8012dca:	232a      	movs	r3, #42	; 0x2a
 8012dcc:	fb03 2210 	mls	r2, r3, r0, r2
 8012dd0:	297e      	cmp	r1, #126	; 0x7e
 8012dd2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012dd6:	f000 8187 	beq.w	80130e8 <uxr_read_framed_msg+0x514>
 8012dda:	7863      	ldrb	r3, [r4, #1]
 8012ddc:	428b      	cmp	r3, r1
 8012dde:	bf0c      	ite	eq
 8012de0:	2303      	moveq	r3, #3
 8012de2:	2300      	movne	r3, #0
 8012de4:	7023      	strb	r3, [r4, #0]
 8012de6:	e707      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012de8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012dec:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012df0:	2200      	movs	r2, #0
 8012df2:	4299      	cmp	r1, r3
 8012df4:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8012df8:	d063      	beq.n	8012ec2 <uxr_read_framed_msg+0x2ee>
 8012dfa:	18e2      	adds	r2, r4, r3
 8012dfc:	7892      	ldrb	r2, [r2, #2]
 8012dfe:	2a7d      	cmp	r2, #125	; 0x7d
 8012e00:	f000 8107 	beq.w	8013012 <uxr_read_framed_msg+0x43e>
 8012e04:	1c59      	adds	r1, r3, #1
 8012e06:	084b      	lsrs	r3, r1, #1
 8012e08:	fba6 0303 	umull	r0, r3, r6, r3
 8012e0c:	089b      	lsrs	r3, r3, #2
 8012e0e:	202a      	movs	r0, #42	; 0x2a
 8012e10:	fb00 1313 	mls	r3, r0, r3, r1
 8012e14:	2a7e      	cmp	r2, #126	; 0x7e
 8012e16:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8012e1a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012e1e:	d050      	beq.n	8012ec2 <uxr_read_framed_msg+0x2ee>
 8012e20:	2302      	movs	r3, #2
 8012e22:	7023      	strb	r3, [r4, #0]
 8012e24:	e6e8      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012e26:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8012e2a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012e2e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8012e32:	1c51      	adds	r1, r2, #1
 8012e34:	084b      	lsrs	r3, r1, #1
 8012e36:	fba6 5303 	umull	r5, r3, r6, r3
 8012e3a:	089b      	lsrs	r3, r3, #2
 8012e3c:	fb0c 1313 	mls	r3, ip, r3, r1
 8012e40:	4596      	cmp	lr, r2
 8012e42:	eb04 0002 	add.w	r0, r4, r2
 8012e46:	b2da      	uxtb	r2, r3
 8012e48:	f43f af06 	beq.w	8012c58 <uxr_read_framed_msg+0x84>
 8012e4c:	7883      	ldrb	r3, [r0, #2]
 8012e4e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012e52:	2b7e      	cmp	r3, #126	; 0x7e
 8012e54:	d1ed      	bne.n	8012e32 <uxr_read_framed_msg+0x25e>
 8012e56:	2301      	movs	r3, #1
 8012e58:	7023      	strb	r3, [r4, #0]
 8012e5a:	e6cd      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012e5c:	f101 0b01 	add.w	fp, r1, #1
 8012e60:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8012e64:	fba6 e202 	umull	lr, r2, r6, r2
 8012e68:	3102      	adds	r1, #2
 8012e6a:	0892      	lsrs	r2, r2, #2
 8012e6c:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8012e70:	fb0c b212 	mls	r2, ip, r2, fp
 8012e74:	fba6 9e0e 	umull	r9, lr, r6, lr
 8012e78:	eb04 0b02 	add.w	fp, r4, r2
 8012e7c:	b2d2      	uxtb	r2, r2
 8012e7e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8012e82:	4290      	cmp	r0, r2
 8012e84:	fb0c 111e 	mls	r1, ip, lr, r1
 8012e88:	f43f af40 	beq.w	8012d0c <uxr_read_framed_msg+0x138>
 8012e8c:	f89b e002 	ldrb.w	lr, [fp, #2]
 8012e90:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8012e94:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012e98:	d036      	beq.n	8012f08 <uxr_read_framed_msg+0x334>
 8012e9a:	f08e 0e20 	eor.w	lr, lr, #32
 8012e9e:	e711      	b.n	8012cc4 <uxr_read_framed_msg+0xf0>
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ea4:	4649      	mov	r1, r9
 8012ea6:	e9cd 2300 	strd	r2, r3, [sp]
 8012eaa:	4620      	mov	r0, r4
 8012eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012eae:	4652      	mov	r2, sl
 8012eb0:	f7ff fe0e 	bl	8012ad0 <uxr_framing_read_transport>
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	f43f aecf 	beq.w	8012c58 <uxr_read_framed_msg+0x84>
 8012eba:	7823      	ldrb	r3, [r4, #0]
 8012ebc:	e69c      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012ebe:	2302      	movs	r3, #2
 8012ec0:	e7ef      	b.n	8012ea2 <uxr_read_framed_msg+0x2ce>
 8012ec2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ec4:	2304      	movs	r3, #4
 8012ec6:	e9cd 2300 	strd	r2, r3, [sp]
 8012eca:	4649      	mov	r1, r9
 8012ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ece:	4652      	mov	r2, sl
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	f7ff fdfd 	bl	8012ad0 <uxr_framing_read_transport>
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	d1ef      	bne.n	8012eba <uxr_read_framed_msg+0x2e6>
 8012eda:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8012ede:	387e      	subs	r0, #126	; 0x7e
 8012ee0:	bf18      	it	ne
 8012ee2:	2001      	movne	r0, #1
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d0e8      	beq.n	8012eba <uxr_read_framed_msg+0x2e6>
 8012ee8:	e6b6      	b.n	8012c58 <uxr_read_framed_msg+0x84>
 8012eea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012eec:	2305      	movs	r3, #5
 8012eee:	e9cd 5300 	strd	r5, r3, [sp]
 8012ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ef4:	f7ff fdec 	bl	8012ad0 <uxr_framing_read_transport>
 8012ef8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012efc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012f00:	429a      	cmp	r2, r3
 8012f02:	f43f aea9 	beq.w	8012c58 <uxr_read_framed_msg+0x84>
 8012f06:	e673      	b.n	8012bf0 <uxr_read_framed_msg+0x1c>
 8012f08:	429d      	cmp	r5, r3
 8012f0a:	ee17 9a90 	vmov	r9, s15
 8012f0e:	f43f af02 	beq.w	8012d16 <uxr_read_framed_msg+0x142>
 8012f12:	2301      	movs	r3, #1
 8012f14:	7023      	strb	r3, [r4, #0]
 8012f16:	e66f      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012f18:	2303      	movs	r3, #3
 8012f1a:	e7c2      	b.n	8012ea2 <uxr_read_framed_msg+0x2ce>
 8012f1c:	2305      	movs	r3, #5
 8012f1e:	7023      	strb	r3, [r4, #0]
 8012f20:	e66a      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 8012f22:	bf00      	nop
 8012f24:	30c30c31 	.word	0x30c30c31
 8012f28:	0801ebf0 	.word	0x0801ebf0
 8012f2c:	ee17 9a90 	vmov	r9, s15
 8012f30:	f43f aef1 	beq.w	8012d16 <uxr_read_framed_msg+0x142>
 8012f34:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012f38:	d08d      	beq.n	8012e56 <uxr_read_framed_msg+0x282>
 8012f3a:	1aeb      	subs	r3, r5, r3
 8012f3c:	3302      	adds	r3, #2
 8012f3e:	9301      	str	r3, [sp, #4]
 8012f40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	4652      	mov	r2, sl
 8012f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f48:	4649      	mov	r1, r9
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f7ff fdc0 	bl	8012ad0 <uxr_framing_read_transport>
 8012f50:	fab0 f080 	clz	r0, r0
 8012f54:	0940      	lsrs	r0, r0, #5
 8012f56:	2800      	cmp	r0, #0
 8012f58:	d0af      	beq.n	8012eba <uxr_read_framed_msg+0x2e6>
 8012f5a:	e67d      	b.n	8012c58 <uxr_read_framed_msg+0x84>
 8012f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012f5e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8012f62:	7013      	strb	r3, [r2, #0]
 8012f64:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8012f66:	b003      	add	sp, #12
 8012f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f6c:	1c59      	adds	r1, r3, #1
 8012f6e:	084a      	lsrs	r2, r1, #1
 8012f70:	fba6 5202 	umull	r5, r2, r6, r2
 8012f74:	0892      	lsrs	r2, r2, #2
 8012f76:	252a      	movs	r5, #42	; 0x2a
 8012f78:	fb05 1212 	mls	r2, r5, r2, r1
 8012f7c:	b2d1      	uxtb	r1, r2
 8012f7e:	4288      	cmp	r0, r1
 8012f80:	d08e      	beq.n	8012ea0 <uxr_read_framed_msg+0x2cc>
 8012f82:	3302      	adds	r3, #2
 8012f84:	4422      	add	r2, r4
 8012f86:	0858      	lsrs	r0, r3, #1
 8012f88:	fba6 1000 	umull	r1, r0, r6, r0
 8012f8c:	7891      	ldrb	r1, [r2, #2]
 8012f8e:	0882      	lsrs	r2, r0, #2
 8012f90:	fb05 3312 	mls	r3, r5, r2, r3
 8012f94:	297e      	cmp	r1, #126	; 0x7e
 8012f96:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012f9a:	f000 80a3 	beq.w	80130e4 <uxr_read_framed_msg+0x510>
 8012f9e:	f081 0120 	eor.w	r1, r1, #32
 8012fa2:	e64e      	b.n	8012c42 <uxr_read_framed_msg+0x6e>
 8012fa4:	1c59      	adds	r1, r3, #1
 8012fa6:	084a      	lsrs	r2, r1, #1
 8012fa8:	fba6 5202 	umull	r5, r2, r6, r2
 8012fac:	0892      	lsrs	r2, r2, #2
 8012fae:	252a      	movs	r5, #42	; 0x2a
 8012fb0:	fb05 1212 	mls	r2, r5, r2, r1
 8012fb4:	b2d1      	uxtb	r1, r2
 8012fb6:	4288      	cmp	r0, r1
 8012fb8:	d081      	beq.n	8012ebe <uxr_read_framed_msg+0x2ea>
 8012fba:	3302      	adds	r3, #2
 8012fbc:	4422      	add	r2, r4
 8012fbe:	0858      	lsrs	r0, r3, #1
 8012fc0:	fba6 1000 	umull	r1, r0, r6, r0
 8012fc4:	7891      	ldrb	r1, [r2, #2]
 8012fc6:	0882      	lsrs	r2, r0, #2
 8012fc8:	fb05 3312 	mls	r3, r5, r2, r3
 8012fcc:	297e      	cmp	r1, #126	; 0x7e
 8012fce:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012fd2:	d077      	beq.n	80130c4 <uxr_read_framed_msg+0x4f0>
 8012fd4:	f081 0120 	eor.w	r1, r1, #32
 8012fd8:	e65b      	b.n	8012c92 <uxr_read_framed_msg+0xbe>
 8012fda:	1c59      	adds	r1, r3, #1
 8012fdc:	084a      	lsrs	r2, r1, #1
 8012fde:	fba6 5202 	umull	r5, r2, r6, r2
 8012fe2:	0892      	lsrs	r2, r2, #2
 8012fe4:	252a      	movs	r5, #42	; 0x2a
 8012fe6:	fb05 1212 	mls	r2, r5, r2, r1
 8012fea:	b2d1      	uxtb	r1, r2
 8012fec:	4288      	cmp	r0, r1
 8012fee:	f43f af57 	beq.w	8012ea0 <uxr_read_framed_msg+0x2cc>
 8012ff2:	3302      	adds	r3, #2
 8012ff4:	4422      	add	r2, r4
 8012ff6:	0858      	lsrs	r0, r3, #1
 8012ff8:	fba6 1000 	umull	r1, r0, r6, r0
 8012ffc:	7891      	ldrb	r1, [r2, #2]
 8012ffe:	0882      	lsrs	r2, r0, #2
 8013000:	fb05 3312 	mls	r3, r5, r2, r3
 8013004:	297e      	cmp	r1, #126	; 0x7e
 8013006:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801300a:	d06b      	beq.n	80130e4 <uxr_read_framed_msg+0x510>
 801300c:	f081 0120 	eor.w	r1, r1, #32
 8013010:	e69d      	b.n	8012d4e <uxr_read_framed_msg+0x17a>
 8013012:	1c5d      	adds	r5, r3, #1
 8013014:	086a      	lsrs	r2, r5, #1
 8013016:	fba6 0202 	umull	r0, r2, r6, r2
 801301a:	0892      	lsrs	r2, r2, #2
 801301c:	202a      	movs	r0, #42	; 0x2a
 801301e:	fb00 5212 	mls	r2, r0, r2, r5
 8013022:	b2d5      	uxtb	r5, r2
 8013024:	42a9      	cmp	r1, r5
 8013026:	f43f af4c 	beq.w	8012ec2 <uxr_read_framed_msg+0x2ee>
 801302a:	3302      	adds	r3, #2
 801302c:	4422      	add	r2, r4
 801302e:	0859      	lsrs	r1, r3, #1
 8013030:	fba6 5101 	umull	r5, r1, r6, r1
 8013034:	7895      	ldrb	r5, [r2, #2]
 8013036:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801303a:	088a      	lsrs	r2, r1, #2
 801303c:	fb00 3312 	mls	r3, r0, r2, r3
 8013040:	2d7e      	cmp	r5, #126	; 0x7e
 8013042:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013046:	f43f af3c 	beq.w	8012ec2 <uxr_read_framed_msg+0x2ee>
 801304a:	f085 0520 	eor.w	r5, r5, #32
 801304e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8013052:	e6e5      	b.n	8012e20 <uxr_read_framed_msg+0x24c>
 8013054:	1c59      	adds	r1, r3, #1
 8013056:	084a      	lsrs	r2, r1, #1
 8013058:	fba6 5202 	umull	r5, r2, r6, r2
 801305c:	0892      	lsrs	r2, r2, #2
 801305e:	252a      	movs	r5, #42	; 0x2a
 8013060:	fb05 1212 	mls	r2, r5, r2, r1
 8013064:	b2d1      	uxtb	r1, r2
 8013066:	4288      	cmp	r0, r1
 8013068:	f43f af29 	beq.w	8012ebe <uxr_read_framed_msg+0x2ea>
 801306c:	3302      	adds	r3, #2
 801306e:	4422      	add	r2, r4
 8013070:	0858      	lsrs	r0, r3, #1
 8013072:	fba6 1000 	umull	r1, r0, r6, r0
 8013076:	7891      	ldrb	r1, [r2, #2]
 8013078:	0882      	lsrs	r2, r0, #2
 801307a:	fb05 3312 	mls	r3, r5, r2, r3
 801307e:	297e      	cmp	r1, #126	; 0x7e
 8013080:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013084:	d01e      	beq.n	80130c4 <uxr_read_framed_msg+0x4f0>
 8013086:	f081 0120 	eor.w	r1, r1, #32
 801308a:	e689      	b.n	8012da0 <uxr_read_framed_msg+0x1cc>
 801308c:	1c51      	adds	r1, r2, #1
 801308e:	084b      	lsrs	r3, r1, #1
 8013090:	fba6 5303 	umull	r5, r3, r6, r3
 8013094:	089b      	lsrs	r3, r3, #2
 8013096:	252a      	movs	r5, #42	; 0x2a
 8013098:	fb05 1313 	mls	r3, r5, r3, r1
 801309c:	b2d9      	uxtb	r1, r3
 801309e:	4288      	cmp	r0, r1
 80130a0:	f43f af3a 	beq.w	8012f18 <uxr_read_framed_msg+0x344>
 80130a4:	3202      	adds	r2, #2
 80130a6:	4423      	add	r3, r4
 80130a8:	0850      	lsrs	r0, r2, #1
 80130aa:	789b      	ldrb	r3, [r3, #2]
 80130ac:	fba6 1000 	umull	r1, r0, r6, r0
 80130b0:	0880      	lsrs	r0, r0, #2
 80130b2:	fb05 2210 	mls	r2, r5, r0, r2
 80130b6:	2b7e      	cmp	r3, #126	; 0x7e
 80130b8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80130bc:	d014      	beq.n	80130e8 <uxr_read_framed_msg+0x514>
 80130be:	f083 0120 	eor.w	r1, r3, #32
 80130c2:	e68a      	b.n	8012dda <uxr_read_framed_msg+0x206>
 80130c4:	2302      	movs	r3, #2
 80130c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80130c8:	4649      	mov	r1, r9
 80130ca:	e9cd 2300 	strd	r2, r3, [sp]
 80130ce:	4620      	mov	r0, r4
 80130d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80130d2:	4652      	mov	r2, sl
 80130d4:	f7ff fcfc 	bl	8012ad0 <uxr_framing_read_transport>
 80130d8:	2800      	cmp	r0, #0
 80130da:	f47f aeee 	bne.w	8012eba <uxr_read_framed_msg+0x2e6>
 80130de:	2301      	movs	r3, #1
 80130e0:	7023      	strb	r3, [r4, #0]
 80130e2:	e589      	b.n	8012bf8 <uxr_read_framed_msg+0x24>
 80130e4:	2301      	movs	r3, #1
 80130e6:	e7ee      	b.n	80130c6 <uxr_read_framed_msg+0x4f2>
 80130e8:	2303      	movs	r3, #3
 80130ea:	e7ec      	b.n	80130c6 <uxr_read_framed_msg+0x4f2>
 80130ec:	ee17 9a90 	vmov	r9, s15
 80130f0:	e6b1      	b.n	8012e56 <uxr_read_framed_msg+0x282>
 80130f2:	bf00      	nop

080130f4 <uxr_stream_id>:
 80130f4:	b410      	push	{r4}
 80130f6:	2901      	cmp	r1, #1
 80130f8:	b083      	sub	sp, #12
 80130fa:	d01f      	beq.n	801313c <uxr_stream_id+0x48>
 80130fc:	2902      	cmp	r1, #2
 80130fe:	f04f 0400 	mov.w	r4, #0
 8013102:	d01e      	beq.n	8013142 <uxr_stream_id+0x4e>
 8013104:	2300      	movs	r3, #0
 8013106:	f364 0307 	bfi	r3, r4, #0, #8
 801310a:	f360 230f 	bfi	r3, r0, #8, #8
 801310e:	f361 4317 	bfi	r3, r1, #16, #8
 8013112:	f362 631f 	bfi	r3, r2, #24, #8
 8013116:	b2da      	uxtb	r2, r3
 8013118:	2000      	movs	r0, #0
 801311a:	f362 0007 	bfi	r0, r2, #0, #8
 801311e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013122:	f362 200f 	bfi	r0, r2, #8, #8
 8013126:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801312a:	f362 4017 	bfi	r0, r2, #16, #8
 801312e:	0e1b      	lsrs	r3, r3, #24
 8013130:	f363 601f 	bfi	r0, r3, #24, #8
 8013134:	b003      	add	sp, #12
 8013136:	f85d 4b04 	ldr.w	r4, [sp], #4
 801313a:	4770      	bx	lr
 801313c:	1c44      	adds	r4, r0, #1
 801313e:	b2e4      	uxtb	r4, r4
 8013140:	e7e0      	b.n	8013104 <uxr_stream_id+0x10>
 8013142:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8013146:	e7dd      	b.n	8013104 <uxr_stream_id+0x10>

08013148 <uxr_stream_id_from_raw>:
 8013148:	b410      	push	{r4}
 801314a:	b083      	sub	sp, #12
 801314c:	b128      	cbz	r0, 801315a <uxr_stream_id_from_raw+0x12>
 801314e:	0603      	lsls	r3, r0, #24
 8013150:	d421      	bmi.n	8013196 <uxr_stream_id_from_raw+0x4e>
 8013152:	1e42      	subs	r2, r0, #1
 8013154:	b2d2      	uxtb	r2, r2
 8013156:	2401      	movs	r4, #1
 8013158:	e001      	b.n	801315e <uxr_stream_id_from_raw+0x16>
 801315a:	4604      	mov	r4, r0
 801315c:	4602      	mov	r2, r0
 801315e:	2300      	movs	r3, #0
 8013160:	f360 0307 	bfi	r3, r0, #0, #8
 8013164:	f362 230f 	bfi	r3, r2, #8, #8
 8013168:	f364 4317 	bfi	r3, r4, #16, #8
 801316c:	f361 631f 	bfi	r3, r1, #24, #8
 8013170:	b2da      	uxtb	r2, r3
 8013172:	2000      	movs	r0, #0
 8013174:	f362 0007 	bfi	r0, r2, #0, #8
 8013178:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801317c:	f362 200f 	bfi	r0, r2, #8, #8
 8013180:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013184:	f362 4017 	bfi	r0, r2, #16, #8
 8013188:	0e1b      	lsrs	r3, r3, #24
 801318a:	f363 601f 	bfi	r0, r3, #24, #8
 801318e:	b003      	add	sp, #12
 8013190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013194:	4770      	bx	lr
 8013196:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801319a:	2402      	movs	r4, #2
 801319c:	e7df      	b.n	801315e <uxr_stream_id_from_raw+0x16>
 801319e:	bf00      	nop

080131a0 <uxr_init_stream_storage>:
 80131a0:	2300      	movs	r3, #0
 80131a2:	7403      	strb	r3, [r0, #16]
 80131a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80131a8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80131ac:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80131b0:	4770      	bx	lr
 80131b2:	bf00      	nop

080131b4 <uxr_reset_stream_storage>:
 80131b4:	b570      	push	{r4, r5, r6, lr}
 80131b6:	7c03      	ldrb	r3, [r0, #16]
 80131b8:	4604      	mov	r4, r0
 80131ba:	b153      	cbz	r3, 80131d2 <uxr_reset_stream_storage+0x1e>
 80131bc:	4606      	mov	r6, r0
 80131be:	2500      	movs	r5, #0
 80131c0:	4630      	mov	r0, r6
 80131c2:	f005 fe9d 	bl	8018f00 <uxr_reset_output_best_effort_stream>
 80131c6:	7c23      	ldrb	r3, [r4, #16]
 80131c8:	3501      	adds	r5, #1
 80131ca:	42ab      	cmp	r3, r5
 80131cc:	f106 0610 	add.w	r6, r6, #16
 80131d0:	d8f6      	bhi.n	80131c0 <uxr_reset_stream_storage+0xc>
 80131d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80131d6:	b163      	cbz	r3, 80131f2 <uxr_reset_stream_storage+0x3e>
 80131d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80131dc:	2500      	movs	r5, #0
 80131de:	4630      	mov	r0, r6
 80131e0:	f005 fc9a 	bl	8018b18 <uxr_reset_input_best_effort_stream>
 80131e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80131e8:	3501      	adds	r5, #1
 80131ea:	42ab      	cmp	r3, r5
 80131ec:	f106 0602 	add.w	r6, r6, #2
 80131f0:	d8f5      	bhi.n	80131de <uxr_reset_stream_storage+0x2a>
 80131f2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80131f6:	b163      	cbz	r3, 8013212 <uxr_reset_stream_storage+0x5e>
 80131f8:	f104 0618 	add.w	r6, r4, #24
 80131fc:	2500      	movs	r5, #0
 80131fe:	4630      	mov	r0, r6
 8013200:	f005 ff1e 	bl	8019040 <uxr_reset_output_reliable_stream>
 8013204:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013208:	3501      	adds	r5, #1
 801320a:	42ab      	cmp	r3, r5
 801320c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8013210:	d8f5      	bhi.n	80131fe <uxr_reset_stream_storage+0x4a>
 8013212:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8013216:	b163      	cbz	r3, 8013232 <uxr_reset_stream_storage+0x7e>
 8013218:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801321c:	2500      	movs	r5, #0
 801321e:	4630      	mov	r0, r6
 8013220:	f005 fce2 	bl	8018be8 <uxr_reset_input_reliable_stream>
 8013224:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8013228:	3501      	adds	r5, #1
 801322a:	42ab      	cmp	r3, r5
 801322c:	f106 0618 	add.w	r6, r6, #24
 8013230:	d8f5      	bhi.n	801321e <uxr_reset_stream_storage+0x6a>
 8013232:	bd70      	pop	{r4, r5, r6, pc}

08013234 <uxr_add_output_best_effort_buffer>:
 8013234:	b530      	push	{r4, r5, lr}
 8013236:	7c04      	ldrb	r4, [r0, #16]
 8013238:	1c65      	adds	r5, r4, #1
 801323a:	b083      	sub	sp, #12
 801323c:	7405      	strb	r5, [r0, #16]
 801323e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013242:	f005 fe51 	bl	8018ee8 <uxr_init_output_best_effort_stream>
 8013246:	2201      	movs	r2, #1
 8013248:	4620      	mov	r0, r4
 801324a:	4611      	mov	r1, r2
 801324c:	b003      	add	sp, #12
 801324e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013252:	f7ff bf4f 	b.w	80130f4 <uxr_stream_id>
 8013256:	bf00      	nop

08013258 <uxr_add_output_reliable_buffer>:
 8013258:	b570      	push	{r4, r5, r6, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8013260:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8013264:	9600      	str	r6, [sp, #0]
 8013266:	2528      	movs	r5, #40	; 0x28
 8013268:	1c66      	adds	r6, r4, #1
 801326a:	fb05 0504 	mla	r5, r5, r4, r0
 801326e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8013272:	f105 0018 	add.w	r0, r5, #24
 8013276:	f005 feb1 	bl	8018fdc <uxr_init_output_reliable_stream>
 801327a:	4620      	mov	r0, r4
 801327c:	2201      	movs	r2, #1
 801327e:	2102      	movs	r1, #2
 8013280:	b004      	add	sp, #16
 8013282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013286:	f7ff bf35 	b.w	80130f4 <uxr_stream_id>
 801328a:	bf00      	nop

0801328c <uxr_add_input_best_effort_buffer>:
 801328c:	b510      	push	{r4, lr}
 801328e:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8013292:	1c62      	adds	r2, r4, #1
 8013294:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8013298:	b082      	sub	sp, #8
 801329a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801329e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80132a2:	f005 fc35 	bl	8018b10 <uxr_init_input_best_effort_stream>
 80132a6:	4620      	mov	r0, r4
 80132a8:	2200      	movs	r2, #0
 80132aa:	2101      	movs	r1, #1
 80132ac:	b002      	add	sp, #8
 80132ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132b2:	f7ff bf1f 	b.w	80130f4 <uxr_stream_id>
 80132b6:	bf00      	nop

080132b8 <uxr_add_input_reliable_buffer>:
 80132b8:	b570      	push	{r4, r5, r6, lr}
 80132ba:	b084      	sub	sp, #16
 80132bc:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80132c0:	9e08      	ldr	r6, [sp, #32]
 80132c2:	9600      	str	r6, [sp, #0]
 80132c4:	2518      	movs	r5, #24
 80132c6:	1c66      	adds	r6, r4, #1
 80132c8:	fb05 0504 	mla	r5, r5, r4, r0
 80132cc:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 80132d0:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80132d4:	f005 fc64 	bl	8018ba0 <uxr_init_input_reliable_stream>
 80132d8:	4620      	mov	r0, r4
 80132da:	2200      	movs	r2, #0
 80132dc:	2102      	movs	r1, #2
 80132de:	b004      	add	sp, #16
 80132e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132e4:	f7ff bf06 	b.w	80130f4 <uxr_stream_id>

080132e8 <uxr_get_output_best_effort_stream>:
 80132e8:	7c03      	ldrb	r3, [r0, #16]
 80132ea:	428b      	cmp	r3, r1
 80132ec:	bf8c      	ite	hi
 80132ee:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80132f2:	2000      	movls	r0, #0
 80132f4:	4770      	bx	lr
 80132f6:	bf00      	nop

080132f8 <uxr_get_output_reliable_stream>:
 80132f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80132fc:	428b      	cmp	r3, r1
 80132fe:	bf83      	ittte	hi
 8013300:	2328      	movhi	r3, #40	; 0x28
 8013302:	fb03 0101 	mlahi	r1, r3, r1, r0
 8013306:	f101 0018 	addhi.w	r0, r1, #24
 801330a:	2000      	movls	r0, #0
 801330c:	4770      	bx	lr
 801330e:	bf00      	nop

08013310 <uxr_get_input_best_effort_stream>:
 8013310:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8013314:	428b      	cmp	r3, r1
 8013316:	bf86      	itte	hi
 8013318:	3121      	addhi	r1, #33	; 0x21
 801331a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801331e:	2000      	movls	r0, #0
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop

08013324 <uxr_get_input_reliable_stream>:
 8013324:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8013328:	428b      	cmp	r3, r1
 801332a:	bf83      	ittte	hi
 801332c:	2318      	movhi	r3, #24
 801332e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8013332:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8013336:	2000      	movls	r0, #0
 8013338:	4770      	bx	lr
 801333a:	bf00      	nop

0801333c <uxr_output_streams_confirmed>:
 801333c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013340:	b183      	cbz	r3, 8013364 <uxr_output_streams_confirmed+0x28>
 8013342:	b570      	push	{r4, r5, r6, lr}
 8013344:	4606      	mov	r6, r0
 8013346:	f100 0518 	add.w	r5, r0, #24
 801334a:	2400      	movs	r4, #0
 801334c:	e001      	b.n	8013352 <uxr_output_streams_confirmed+0x16>
 801334e:	3528      	adds	r5, #40	; 0x28
 8013350:	b138      	cbz	r0, 8013362 <uxr_output_streams_confirmed+0x26>
 8013352:	4628      	mov	r0, r5
 8013354:	f006 f8d8 	bl	8019508 <uxr_is_output_up_to_date>
 8013358:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801335c:	3401      	adds	r4, #1
 801335e:	42a3      	cmp	r3, r4
 8013360:	d8f5      	bhi.n	801334e <uxr_output_streams_confirmed+0x12>
 8013362:	bd70      	pop	{r4, r5, r6, pc}
 8013364:	2001      	movs	r0, #1
 8013366:	4770      	bx	lr

08013368 <uxr_buffer_submessage_header>:
 8013368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801336a:	4604      	mov	r4, r0
 801336c:	460e      	mov	r6, r1
 801336e:	2104      	movs	r1, #4
 8013370:	4615      	mov	r5, r2
 8013372:	461f      	mov	r7, r3
 8013374:	f7fd fcd6 	bl	8010d24 <ucdr_align_to>
 8013378:	2301      	movs	r3, #1
 801337a:	ea47 0203 	orr.w	r2, r7, r3
 801337e:	4631      	mov	r1, r6
 8013380:	7523      	strb	r3, [r4, #20]
 8013382:	4620      	mov	r0, r4
 8013384:	462b      	mov	r3, r5
 8013386:	f000 fa2b 	bl	80137e0 <uxr_serialize_submessage_header>
 801338a:	4620      	mov	r0, r4
 801338c:	f7fd fce0 	bl	8010d50 <ucdr_buffer_remaining>
 8013390:	42a8      	cmp	r0, r5
 8013392:	bf34      	ite	cc
 8013394:	2000      	movcc	r0, #0
 8013396:	2001      	movcs	r0, #1
 8013398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801339a:	bf00      	nop

0801339c <uxr_read_submessage_header>:
 801339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a0:	4604      	mov	r4, r0
 80133a2:	460d      	mov	r5, r1
 80133a4:	2104      	movs	r1, #4
 80133a6:	4616      	mov	r6, r2
 80133a8:	4698      	mov	r8, r3
 80133aa:	f7fd fcbb 	bl	8010d24 <ucdr_align_to>
 80133ae:	4620      	mov	r0, r4
 80133b0:	f7fd fcce 	bl	8010d50 <ucdr_buffer_remaining>
 80133b4:	2803      	cmp	r0, #3
 80133b6:	bf8c      	ite	hi
 80133b8:	2701      	movhi	r7, #1
 80133ba:	2700      	movls	r7, #0
 80133bc:	d802      	bhi.n	80133c4 <uxr_read_submessage_header+0x28>
 80133be:	4638      	mov	r0, r7
 80133c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133c4:	4633      	mov	r3, r6
 80133c6:	4642      	mov	r2, r8
 80133c8:	4620      	mov	r0, r4
 80133ca:	4629      	mov	r1, r5
 80133cc:	f000 fa1c 	bl	8013808 <uxr_deserialize_submessage_header>
 80133d0:	f898 3000 	ldrb.w	r3, [r8]
 80133d4:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80133d8:	f003 0301 	and.w	r3, r3, #1
 80133dc:	f888 2000 	strb.w	r2, [r8]
 80133e0:	7523      	strb	r3, [r4, #20]
 80133e2:	4638      	mov	r0, r7
 80133e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080133e8 <uxr_submessage_padding>:
 80133e8:	f010 0003 	ands.w	r0, r0, #3
 80133ec:	bf18      	it	ne
 80133ee:	f1c0 0004 	rsbne	r0, r0, #4
 80133f2:	4770      	bx	lr

080133f4 <uxr_millis>:
 80133f4:	b510      	push	{r4, lr}
 80133f6:	b084      	sub	sp, #16
 80133f8:	4669      	mov	r1, sp
 80133fa:	2001      	movs	r0, #1
 80133fc:	f7f0 f85c 	bl	80034b8 <clock_gettime>
 8013400:	e9dd 2400 	ldrd	r2, r4, [sp]
 8013404:	4907      	ldr	r1, [pc, #28]	; (8013424 <uxr_millis+0x30>)
 8013406:	9802      	ldr	r0, [sp, #8]
 8013408:	fba2 2301 	umull	r2, r3, r2, r1
 801340c:	fb01 3304 	mla	r3, r1, r4, r3
 8013410:	4604      	mov	r4, r0
 8013412:	1810      	adds	r0, r2, r0
 8013414:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8013418:	4a03      	ldr	r2, [pc, #12]	; (8013428 <uxr_millis+0x34>)
 801341a:	2300      	movs	r3, #0
 801341c:	f7ed fc4c 	bl	8000cb8 <__aeabi_ldivmod>
 8013420:	b004      	add	sp, #16
 8013422:	bd10      	pop	{r4, pc}
 8013424:	3b9aca00 	.word	0x3b9aca00
 8013428:	000f4240 	.word	0x000f4240

0801342c <uxr_nanos>:
 801342c:	b510      	push	{r4, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	4669      	mov	r1, sp
 8013432:	2001      	movs	r0, #1
 8013434:	f7f0 f840 	bl	80034b8 <clock_gettime>
 8013438:	e9dd 2400 	ldrd	r2, r4, [sp]
 801343c:	4905      	ldr	r1, [pc, #20]	; (8013454 <uxr_nanos+0x28>)
 801343e:	9802      	ldr	r0, [sp, #8]
 8013440:	fba2 2301 	umull	r2, r3, r2, r1
 8013444:	fb01 3304 	mla	r3, r1, r4, r3
 8013448:	4604      	mov	r4, r0
 801344a:	1810      	adds	r0, r2, r0
 801344c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8013450:	b004      	add	sp, #16
 8013452:	bd10      	pop	{r4, pc}
 8013454:	3b9aca00 	.word	0x3b9aca00

08013458 <on_full_output_buffer_fragmented>:
 8013458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801345c:	460c      	mov	r4, r1
 801345e:	b08a      	sub	sp, #40	; 0x28
 8013460:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8013464:	4606      	mov	r6, r0
 8013466:	f104 0008 	add.w	r0, r4, #8
 801346a:	f7ff ff45 	bl	80132f8 <uxr_get_output_reliable_stream>
 801346e:	4605      	mov	r5, r0
 8013470:	f006 f854 	bl	801951c <get_available_free_slots>
 8013474:	b968      	cbnz	r0, 8013492 <on_full_output_buffer_fragmented+0x3a>
 8013476:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801347a:	4620      	mov	r0, r4
 801347c:	4798      	blx	r3
 801347e:	b918      	cbnz	r0, 8013488 <on_full_output_buffer_fragmented+0x30>
 8013480:	2001      	movs	r0, #1
 8013482:	b00a      	add	sp, #40	; 0x28
 8013484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013488:	4628      	mov	r0, r5
 801348a:	f006 f847 	bl	801951c <get_available_free_slots>
 801348e:	2800      	cmp	r0, #0
 8013490:	d0f6      	beq.n	8013480 <on_full_output_buffer_fragmented+0x28>
 8013492:	8928      	ldrh	r0, [r5, #8]
 8013494:	89eb      	ldrh	r3, [r5, #14]
 8013496:	7b2a      	ldrb	r2, [r5, #12]
 8013498:	fbb3 f1f0 	udiv	r1, r3, r0
 801349c:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 80134a0:	fb00 3111 	mls	r1, r0, r1, r3
 80134a4:	b28b      	uxth	r3, r1
 80134a6:	32fc      	adds	r2, #252	; 0xfc
 80134a8:	6869      	ldr	r1, [r5, #4]
 80134aa:	fbb1 f1f0 	udiv	r1, r1, r0
 80134ae:	1f0f      	subs	r7, r1, #4
 80134b0:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 80134b4:	fb01 f103 	mul.w	r1, r1, r3
 80134b8:	443a      	add	r2, r7
 80134ba:	682b      	ldr	r3, [r5, #0]
 80134bc:	fa1f f882 	uxth.w	r8, r2
 80134c0:	3104      	adds	r1, #4
 80134c2:	4419      	add	r1, r3
 80134c4:	eba0 0008 	sub.w	r0, r0, r8
 80134c8:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 80134cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134d0:	9300      	str	r3, [sp, #0]
 80134d2:	463a      	mov	r2, r7
 80134d4:	2300      	movs	r3, #0
 80134d6:	a802      	add	r0, sp, #8
 80134d8:	f7fd fbf8 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 80134dc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80134e0:	f102 0308 	add.w	r3, r2, #8
 80134e4:	42bb      	cmp	r3, r7
 80134e6:	d927      	bls.n	8013538 <on_full_output_buffer_fragmented+0xe0>
 80134e8:	4642      	mov	r2, r8
 80134ea:	2300      	movs	r3, #0
 80134ec:	210d      	movs	r1, #13
 80134ee:	a802      	add	r0, sp, #8
 80134f0:	f7ff ff3a 	bl	8013368 <uxr_buffer_submessage_header>
 80134f4:	8928      	ldrh	r0, [r5, #8]
 80134f6:	89eb      	ldrh	r3, [r5, #14]
 80134f8:	fbb3 f1f0 	udiv	r1, r3, r0
 80134fc:	fb00 3111 	mls	r1, r0, r1, r3
 8013500:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013504:	b289      	uxth	r1, r1
 8013506:	fbb3 f3f0 	udiv	r3, r3, r0
 801350a:	fb03 f301 	mul.w	r3, r3, r1
 801350e:	50d7      	str	r7, [r2, r3]
 8013510:	89e8      	ldrh	r0, [r5, #14]
 8013512:	2101      	movs	r1, #1
 8013514:	f006 f822 	bl	801955c <uxr_seq_num_add>
 8013518:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 801351c:	81e8      	strh	r0, [r5, #14]
 801351e:	1a52      	subs	r2, r2, r1
 8013520:	4630      	mov	r0, r6
 8013522:	f7fd fbe5 	bl	8010cf0 <ucdr_init_buffer>
 8013526:	4630      	mov	r0, r6
 8013528:	490f      	ldr	r1, [pc, #60]	; (8013568 <on_full_output_buffer_fragmented+0x110>)
 801352a:	4622      	mov	r2, r4
 801352c:	f7fd fbb6 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 8013530:	2000      	movs	r0, #0
 8013532:	b00a      	add	sp, #40	; 0x28
 8013534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013538:	b292      	uxth	r2, r2
 801353a:	2302      	movs	r3, #2
 801353c:	210d      	movs	r1, #13
 801353e:	a802      	add	r0, sp, #8
 8013540:	f7ff ff12 	bl	8013368 <uxr_buffer_submessage_header>
 8013544:	8928      	ldrh	r0, [r5, #8]
 8013546:	89eb      	ldrh	r3, [r5, #14]
 8013548:	fbb3 f2f0 	udiv	r2, r3, r0
 801354c:	fb00 3212 	mls	r2, r0, r2, r3
 8013550:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8013554:	686b      	ldr	r3, [r5, #4]
 8013556:	fbb3 f3f0 	udiv	r3, r3, r0
 801355a:	b292      	uxth	r2, r2
 801355c:	6828      	ldr	r0, [r5, #0]
 801355e:	fb03 f302 	mul.w	r3, r3, r2
 8013562:	3108      	adds	r1, #8
 8013564:	50c1      	str	r1, [r0, r3]
 8013566:	e7d3      	b.n	8013510 <on_full_output_buffer_fragmented+0xb8>
 8013568:	08013459 	.word	0x08013459

0801356c <uxr_prepare_output_stream>:
 801356c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801356e:	b087      	sub	sp, #28
 8013570:	2407      	movs	r4, #7
 8013572:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013574:	9202      	str	r2, [sp, #8]
 8013576:	2500      	movs	r5, #0
 8013578:	1d32      	adds	r2, r6, #4
 801357a:	e9cd 4500 	strd	r4, r5, [sp]
 801357e:	9103      	str	r1, [sp, #12]
 8013580:	461c      	mov	r4, r3
 8013582:	4606      	mov	r6, r0
 8013584:	f7fe ffce 	bl	8012524 <uxr_prepare_stream_to_write_submessage>
 8013588:	f080 0201 	eor.w	r2, r0, #1
 801358c:	b2d2      	uxtb	r2, r2
 801358e:	75a2      	strb	r2, [r4, #22]
 8013590:	b112      	cbz	r2, 8013598 <uxr_prepare_output_stream+0x2c>
 8013592:	4628      	mov	r0, r5
 8013594:	b007      	add	sp, #28
 8013596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013598:	aa05      	add	r2, sp, #20
 801359a:	9902      	ldr	r1, [sp, #8]
 801359c:	4630      	mov	r0, r6
 801359e:	f7ff f8fb 	bl	8012798 <uxr_init_base_object_request>
 80135a2:	a905      	add	r1, sp, #20
 80135a4:	4605      	mov	r5, r0
 80135a6:	4620      	mov	r0, r4
 80135a8:	f001 f872 	bl	8014690 <uxr_serialize_WRITE_DATA_Payload_Data>
 80135ac:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80135b0:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 80135b4:	1a52      	subs	r2, r2, r1
 80135b6:	4620      	mov	r0, r4
 80135b8:	f7fd fb9a 	bl	8010cf0 <ucdr_init_buffer>
 80135bc:	4620      	mov	r0, r4
 80135be:	463a      	mov	r2, r7
 80135c0:	4631      	mov	r1, r6
 80135c2:	f7fd fb6b 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 80135c6:	4628      	mov	r0, r5
 80135c8:	b007      	add	sp, #28
 80135ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080135cc <uxr_prepare_output_stream_fragmented>:
 80135cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d0:	b093      	sub	sp, #76	; 0x4c
 80135d2:	4605      	mov	r5, r0
 80135d4:	9107      	str	r1, [sp, #28]
 80135d6:	3008      	adds	r0, #8
 80135d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80135dc:	9303      	str	r3, [sp, #12]
 80135de:	9206      	str	r2, [sp, #24]
 80135e0:	f7ff fe8a 	bl	80132f8 <uxr_get_output_reliable_stream>
 80135e4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80135e8:	2b01      	cmp	r3, #1
 80135ea:	f000 8094 	beq.w	8013716 <uxr_prepare_output_stream_fragmented+0x14a>
 80135ee:	4604      	mov	r4, r0
 80135f0:	2800      	cmp	r0, #0
 80135f2:	f000 8090 	beq.w	8013716 <uxr_prepare_output_stream_fragmented+0x14a>
 80135f6:	f005 ff91 	bl	801951c <get_available_free_slots>
 80135fa:	2800      	cmp	r0, #0
 80135fc:	f000 8086 	beq.w	801370c <uxr_prepare_output_stream_fragmented+0x140>
 8013600:	8922      	ldrh	r2, [r4, #8]
 8013602:	89e7      	ldrh	r7, [r4, #14]
 8013604:	fbb7 f8f2 	udiv	r8, r7, r2
 8013608:	e9d4 3100 	ldrd	r3, r1, [r4]
 801360c:	fb02 7818 	mls	r8, r2, r8, r7
 8013610:	fa1f f888 	uxth.w	r8, r8
 8013614:	fbb1 f2f2 	udiv	r2, r1, r2
 8013618:	fb02 f808 	mul.w	r8, r2, r8
 801361c:	f108 0804 	add.w	r8, r8, #4
 8013620:	4498      	add	r8, r3
 8013622:	7b23      	ldrb	r3, [r4, #12]
 8013624:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8013628:	9204      	str	r2, [sp, #16]
 801362a:	4553      	cmp	r3, sl
 801362c:	f1a2 0b04 	sub.w	fp, r2, #4
 8013630:	d37d      	bcc.n	801372e <uxr_prepare_output_stream_fragmented+0x162>
 8013632:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8013634:	f8cd a000 	str.w	sl, [sp]
 8013638:	f1ab 0904 	sub.w	r9, fp, #4
 801363c:	eba9 0903 	sub.w	r9, r9, r3
 8013640:	3608      	adds	r6, #8
 8013642:	a80a      	add	r0, sp, #40	; 0x28
 8013644:	2300      	movs	r3, #0
 8013646:	465a      	mov	r2, fp
 8013648:	4641      	mov	r1, r8
 801364a:	fa1f f989 	uxth.w	r9, r9
 801364e:	9605      	str	r6, [sp, #20]
 8013650:	f7fd fb3c 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 8013654:	455e      	cmp	r6, fp
 8013656:	bf34      	ite	cc
 8013658:	2302      	movcc	r3, #2
 801365a:	2300      	movcs	r3, #0
 801365c:	464a      	mov	r2, r9
 801365e:	210d      	movs	r1, #13
 8013660:	a80a      	add	r0, sp, #40	; 0x28
 8013662:	f7ff fe81 	bl	8013368 <uxr_buffer_submessage_header>
 8013666:	8920      	ldrh	r0, [r4, #8]
 8013668:	fbb7 f3f0 	udiv	r3, r7, r0
 801366c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013670:	fb00 7313 	mls	r3, r0, r3, r7
 8013674:	b29b      	uxth	r3, r3
 8013676:	fbb1 f1f0 	udiv	r1, r1, r0
 801367a:	fb03 f301 	mul.w	r3, r3, r1
 801367e:	4638      	mov	r0, r7
 8013680:	f842 b003 	str.w	fp, [r2, r3]
 8013684:	2101      	movs	r1, #1
 8013686:	f005 ff69 	bl	801955c <uxr_seq_num_add>
 801368a:	9b04      	ldr	r3, [sp, #16]
 801368c:	9e03      	ldr	r6, [sp, #12]
 801368e:	f1a3 0208 	sub.w	r2, r3, #8
 8013692:	f10a 0104 	add.w	r1, sl, #4
 8013696:	4607      	mov	r7, r0
 8013698:	eba2 020a 	sub.w	r2, r2, sl
 801369c:	4441      	add	r1, r8
 801369e:	4630      	mov	r0, r6
 80136a0:	f7fd fb26 	bl	8010cf0 <ucdr_init_buffer>
 80136a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80136a6:	81e7      	strh	r7, [r4, #14]
 80136a8:	1d1a      	adds	r2, r3, #4
 80136aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80136ae:	bf28      	it	cs
 80136b0:	2200      	movcs	r2, #0
 80136b2:	b292      	uxth	r2, r2
 80136b4:	2300      	movs	r3, #0
 80136b6:	2107      	movs	r1, #7
 80136b8:	4630      	mov	r0, r6
 80136ba:	f7ff fe55 	bl	8013368 <uxr_buffer_submessage_header>
 80136be:	9906      	ldr	r1, [sp, #24]
 80136c0:	aa09      	add	r2, sp, #36	; 0x24
 80136c2:	4628      	mov	r0, r5
 80136c4:	f7ff f868 	bl	8012798 <uxr_init_base_object_request>
 80136c8:	4604      	mov	r4, r0
 80136ca:	b328      	cbz	r0, 8013718 <uxr_prepare_output_stream_fragmented+0x14c>
 80136cc:	9e03      	ldr	r6, [sp, #12]
 80136ce:	a909      	add	r1, sp, #36	; 0x24
 80136d0:	4630      	mov	r0, r6
 80136d2:	f000 ffdd 	bl	8014690 <uxr_serialize_WRITE_DATA_Payload_Data>
 80136d6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80136da:	4630      	mov	r0, r6
 80136dc:	1a52      	subs	r2, r2, r1
 80136de:	f7fd fb07 	bl	8010cf0 <ucdr_init_buffer>
 80136e2:	9a05      	ldr	r2, [sp, #20]
 80136e4:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80136e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80136ea:	9b07      	ldr	r3, [sp, #28]
 80136ec:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 80136f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80136f2:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 80136f6:	4630      	mov	r0, r6
 80136f8:	4919      	ldr	r1, [pc, #100]	; (8013760 <uxr_prepare_output_stream_fragmented+0x194>)
 80136fa:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80136fe:	462a      	mov	r2, r5
 8013700:	f7fd facc 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 8013704:	4620      	mov	r0, r4
 8013706:	b013      	add	sp, #76	; 0x4c
 8013708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801370c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801370e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013710:	4628      	mov	r0, r5
 8013712:	4798      	blx	r3
 8013714:	b920      	cbnz	r0, 8013720 <uxr_prepare_output_stream_fragmented+0x154>
 8013716:	2400      	movs	r4, #0
 8013718:	4620      	mov	r0, r4
 801371a:	b013      	add	sp, #76	; 0x4c
 801371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013720:	4620      	mov	r0, r4
 8013722:	f005 fefb 	bl	801951c <get_available_free_slots>
 8013726:	2800      	cmp	r0, #0
 8013728:	f47f af6a 	bne.w	8013600 <uxr_prepare_output_stream_fragmented+0x34>
 801372c:	e7f3      	b.n	8013716 <uxr_prepare_output_stream_fragmented+0x14a>
 801372e:	4638      	mov	r0, r7
 8013730:	2101      	movs	r1, #1
 8013732:	f005 ff13 	bl	801955c <uxr_seq_num_add>
 8013736:	8922      	ldrh	r2, [r4, #8]
 8013738:	fbb0 f8f2 	udiv	r8, r0, r2
 801373c:	fb02 0818 	mls	r8, r2, r8, r0
 8013740:	fa1f f888 	uxth.w	r8, r8
 8013744:	6863      	ldr	r3, [r4, #4]
 8013746:	fbb3 f3f2 	udiv	r3, r3, r2
 801374a:	6822      	ldr	r2, [r4, #0]
 801374c:	fb08 f803 	mul.w	r8, r8, r3
 8013750:	f108 0804 	add.w	r8, r8, #4
 8013754:	4490      	add	r8, r2
 8013756:	7b23      	ldrb	r3, [r4, #12]
 8013758:	f858 ac04 	ldr.w	sl, [r8, #-4]
 801375c:	4607      	mov	r7, r0
 801375e:	e768      	b.n	8013632 <uxr_prepare_output_stream_fragmented+0x66>
 8013760:	08013459 	.word	0x08013459

08013764 <uxr_serialize_message_header>:
 8013764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013766:	b083      	sub	sp, #12
 8013768:	4616      	mov	r6, r2
 801376a:	4604      	mov	r4, r0
 801376c:	9301      	str	r3, [sp, #4]
 801376e:	460d      	mov	r5, r1
 8013770:	9f08      	ldr	r7, [sp, #32]
 8013772:	f004 fa5d 	bl	8017c30 <ucdr_serialize_uint8_t>
 8013776:	4631      	mov	r1, r6
 8013778:	4620      	mov	r0, r4
 801377a:	f004 fa59 	bl	8017c30 <ucdr_serialize_uint8_t>
 801377e:	9a01      	ldr	r2, [sp, #4]
 8013780:	4620      	mov	r0, r4
 8013782:	2101      	movs	r1, #1
 8013784:	f004 fb00 	bl	8017d88 <ucdr_serialize_endian_uint16_t>
 8013788:	062b      	lsls	r3, r5, #24
 801378a:	d501      	bpl.n	8013790 <uxr_serialize_message_header+0x2c>
 801378c:	b003      	add	sp, #12
 801378e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013790:	4639      	mov	r1, r7
 8013792:	4620      	mov	r0, r4
 8013794:	2204      	movs	r2, #4
 8013796:	b003      	add	sp, #12
 8013798:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801379c:	f004 b950 	b.w	8017a40 <ucdr_serialize_array_uint8_t>

080137a0 <uxr_deserialize_message_header>:
 80137a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137a2:	b083      	sub	sp, #12
 80137a4:	4616      	mov	r6, r2
 80137a6:	4604      	mov	r4, r0
 80137a8:	9301      	str	r3, [sp, #4]
 80137aa:	460d      	mov	r5, r1
 80137ac:	9f08      	ldr	r7, [sp, #32]
 80137ae:	f004 fa55 	bl	8017c5c <ucdr_deserialize_uint8_t>
 80137b2:	4631      	mov	r1, r6
 80137b4:	4620      	mov	r0, r4
 80137b6:	f004 fa51 	bl	8017c5c <ucdr_deserialize_uint8_t>
 80137ba:	9a01      	ldr	r2, [sp, #4]
 80137bc:	4620      	mov	r0, r4
 80137be:	2101      	movs	r1, #1
 80137c0:	f004 fbd6 	bl	8017f70 <ucdr_deserialize_endian_uint16_t>
 80137c4:	f995 3000 	ldrsb.w	r3, [r5]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	da01      	bge.n	80137d0 <uxr_deserialize_message_header+0x30>
 80137cc:	b003      	add	sp, #12
 80137ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137d0:	4639      	mov	r1, r7
 80137d2:	4620      	mov	r0, r4
 80137d4:	2204      	movs	r2, #4
 80137d6:	b003      	add	sp, #12
 80137d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80137dc:	f004 b994 	b.w	8017b08 <ucdr_deserialize_array_uint8_t>

080137e0 <uxr_serialize_submessage_header>:
 80137e0:	b530      	push	{r4, r5, lr}
 80137e2:	b083      	sub	sp, #12
 80137e4:	4615      	mov	r5, r2
 80137e6:	4604      	mov	r4, r0
 80137e8:	9301      	str	r3, [sp, #4]
 80137ea:	f004 fa21 	bl	8017c30 <ucdr_serialize_uint8_t>
 80137ee:	4629      	mov	r1, r5
 80137f0:	4620      	mov	r0, r4
 80137f2:	f004 fa1d 	bl	8017c30 <ucdr_serialize_uint8_t>
 80137f6:	9a01      	ldr	r2, [sp, #4]
 80137f8:	4620      	mov	r0, r4
 80137fa:	2101      	movs	r1, #1
 80137fc:	b003      	add	sp, #12
 80137fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013802:	f004 bac1 	b.w	8017d88 <ucdr_serialize_endian_uint16_t>
 8013806:	bf00      	nop

08013808 <uxr_deserialize_submessage_header>:
 8013808:	b530      	push	{r4, r5, lr}
 801380a:	b083      	sub	sp, #12
 801380c:	4615      	mov	r5, r2
 801380e:	4604      	mov	r4, r0
 8013810:	9301      	str	r3, [sp, #4]
 8013812:	f004 fa23 	bl	8017c5c <ucdr_deserialize_uint8_t>
 8013816:	4629      	mov	r1, r5
 8013818:	4620      	mov	r0, r4
 801381a:	f004 fa1f 	bl	8017c5c <ucdr_deserialize_uint8_t>
 801381e:	9a01      	ldr	r2, [sp, #4]
 8013820:	4620      	mov	r0, r4
 8013822:	2101      	movs	r1, #1
 8013824:	b003      	add	sp, #12
 8013826:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801382a:	f004 bba1 	b.w	8017f70 <ucdr_deserialize_endian_uint16_t>
 801382e:	bf00      	nop

08013830 <uxr_serialize_CLIENT_Representation>:
 8013830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013834:	2204      	movs	r2, #4
 8013836:	460c      	mov	r4, r1
 8013838:	4605      	mov	r5, r0
 801383a:	f004 f901 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 801383e:	1d21      	adds	r1, r4, #4
 8013840:	4607      	mov	r7, r0
 8013842:	2202      	movs	r2, #2
 8013844:	4628      	mov	r0, r5
 8013846:	f004 f8fb 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 801384a:	1da1      	adds	r1, r4, #6
 801384c:	4007      	ands	r7, r0
 801384e:	2202      	movs	r2, #2
 8013850:	4628      	mov	r0, r5
 8013852:	f004 f8f5 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8013856:	fa5f f887 	uxtb.w	r8, r7
 801385a:	2204      	movs	r2, #4
 801385c:	4607      	mov	r7, r0
 801385e:	f104 0108 	add.w	r1, r4, #8
 8013862:	4628      	mov	r0, r5
 8013864:	f004 f8ec 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8013868:	ea08 0707 	and.w	r7, r8, r7
 801386c:	7b21      	ldrb	r1, [r4, #12]
 801386e:	4680      	mov	r8, r0
 8013870:	4628      	mov	r0, r5
 8013872:	f004 f9dd 	bl	8017c30 <ucdr_serialize_uint8_t>
 8013876:	ea08 0807 	and.w	r8, r8, r7
 801387a:	7b61      	ldrb	r1, [r4, #13]
 801387c:	4607      	mov	r7, r0
 801387e:	4628      	mov	r0, r5
 8013880:	f004 f9a6 	bl	8017bd0 <ucdr_serialize_bool>
 8013884:	7b63      	ldrb	r3, [r4, #13]
 8013886:	ea08 0707 	and.w	r7, r8, r7
 801388a:	ea07 0600 	and.w	r6, r7, r0
 801388e:	b933      	cbnz	r3, 801389e <uxr_serialize_CLIENT_Representation+0x6e>
 8013890:	8ba1      	ldrh	r1, [r4, #28]
 8013892:	4628      	mov	r0, r5
 8013894:	f004 f9f8 	bl	8017c88 <ucdr_serialize_uint16_t>
 8013898:	4030      	ands	r0, r6
 801389a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801389e:	6921      	ldr	r1, [r4, #16]
 80138a0:	4628      	mov	r0, r5
 80138a2:	f004 fbdb 	bl	801805c <ucdr_serialize_uint32_t>
 80138a6:	6923      	ldr	r3, [r4, #16]
 80138a8:	b1cb      	cbz	r3, 80138de <uxr_serialize_CLIENT_Representation+0xae>
 80138aa:	b1d0      	cbz	r0, 80138e2 <uxr_serialize_CLIENT_Representation+0xb2>
 80138ac:	46a0      	mov	r8, r4
 80138ae:	f04f 0900 	mov.w	r9, #0
 80138b2:	e002      	b.n	80138ba <uxr_serialize_CLIENT_Representation+0x8a>
 80138b4:	f108 0808 	add.w	r8, r8, #8
 80138b8:	b198      	cbz	r0, 80138e2 <uxr_serialize_CLIENT_Representation+0xb2>
 80138ba:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80138be:	4628      	mov	r0, r5
 80138c0:	f005 f90e 	bl	8018ae0 <ucdr_serialize_string>
 80138c4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80138c8:	4607      	mov	r7, r0
 80138ca:	4628      	mov	r0, r5
 80138cc:	f005 f908 	bl	8018ae0 <ucdr_serialize_string>
 80138d0:	6923      	ldr	r3, [r4, #16]
 80138d2:	f109 0901 	add.w	r9, r9, #1
 80138d6:	4038      	ands	r0, r7
 80138d8:	4599      	cmp	r9, r3
 80138da:	b2c0      	uxtb	r0, r0
 80138dc:	d3ea      	bcc.n	80138b4 <uxr_serialize_CLIENT_Representation+0x84>
 80138de:	4006      	ands	r6, r0
 80138e0:	e7d6      	b.n	8013890 <uxr_serialize_CLIENT_Representation+0x60>
 80138e2:	2600      	movs	r6, #0
 80138e4:	e7d4      	b.n	8013890 <uxr_serialize_CLIENT_Representation+0x60>
 80138e6:	bf00      	nop

080138e8 <uxr_deserialize_CLIENT_Representation>:
 80138e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138ec:	2204      	movs	r2, #4
 80138ee:	460c      	mov	r4, r1
 80138f0:	4605      	mov	r5, r0
 80138f2:	f004 f909 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 80138f6:	1d21      	adds	r1, r4, #4
 80138f8:	4607      	mov	r7, r0
 80138fa:	2202      	movs	r2, #2
 80138fc:	4628      	mov	r0, r5
 80138fe:	f004 f903 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8013902:	1da1      	adds	r1, r4, #6
 8013904:	4007      	ands	r7, r0
 8013906:	2202      	movs	r2, #2
 8013908:	4628      	mov	r0, r5
 801390a:	f004 f8fd 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 801390e:	fa5f f887 	uxtb.w	r8, r7
 8013912:	2204      	movs	r2, #4
 8013914:	4607      	mov	r7, r0
 8013916:	f104 0108 	add.w	r1, r4, #8
 801391a:	4628      	mov	r0, r5
 801391c:	f004 f8f4 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8013920:	ea08 0707 	and.w	r7, r8, r7
 8013924:	f104 010c 	add.w	r1, r4, #12
 8013928:	4680      	mov	r8, r0
 801392a:	4628      	mov	r0, r5
 801392c:	f004 f996 	bl	8017c5c <ucdr_deserialize_uint8_t>
 8013930:	ea08 0807 	and.w	r8, r8, r7
 8013934:	f104 010d 	add.w	r1, r4, #13
 8013938:	4607      	mov	r7, r0
 801393a:	4628      	mov	r0, r5
 801393c:	f004 f95e 	bl	8017bfc <ucdr_deserialize_bool>
 8013940:	7b63      	ldrb	r3, [r4, #13]
 8013942:	ea08 0707 	and.w	r7, r8, r7
 8013946:	ea07 0600 	and.w	r6, r7, r0
 801394a:	b93b      	cbnz	r3, 801395c <uxr_deserialize_CLIENT_Representation+0x74>
 801394c:	f104 011c 	add.w	r1, r4, #28
 8013950:	4628      	mov	r0, r5
 8013952:	f004 fa99 	bl	8017e88 <ucdr_deserialize_uint16_t>
 8013956:	4030      	ands	r0, r6
 8013958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801395c:	f104 0110 	add.w	r1, r4, #16
 8013960:	4628      	mov	r0, r5
 8013962:	f004 fcab 	bl	80182bc <ucdr_deserialize_uint32_t>
 8013966:	6923      	ldr	r3, [r4, #16]
 8013968:	2b01      	cmp	r3, #1
 801396a:	d903      	bls.n	8013974 <uxr_deserialize_CLIENT_Representation+0x8c>
 801396c:	2301      	movs	r3, #1
 801396e:	75ab      	strb	r3, [r5, #22]
 8013970:	2600      	movs	r6, #0
 8013972:	e7eb      	b.n	801394c <uxr_deserialize_CLIENT_Representation+0x64>
 8013974:	b1fb      	cbz	r3, 80139b6 <uxr_deserialize_CLIENT_Representation+0xce>
 8013976:	2800      	cmp	r0, #0
 8013978:	d0fa      	beq.n	8013970 <uxr_deserialize_CLIENT_Representation+0x88>
 801397a:	46a0      	mov	r8, r4
 801397c:	f04f 0900 	mov.w	r9, #0
 8013980:	e003      	b.n	801398a <uxr_deserialize_CLIENT_Representation+0xa2>
 8013982:	f108 0808 	add.w	r8, r8, #8
 8013986:	2800      	cmp	r0, #0
 8013988:	d0f2      	beq.n	8013970 <uxr_deserialize_CLIENT_Representation+0x88>
 801398a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801398e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013992:	4628      	mov	r0, r5
 8013994:	f005 f8b4 	bl	8018b00 <ucdr_deserialize_string>
 8013998:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801399c:	4607      	mov	r7, r0
 801399e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80139a2:	4628      	mov	r0, r5
 80139a4:	f005 f8ac 	bl	8018b00 <ucdr_deserialize_string>
 80139a8:	6923      	ldr	r3, [r4, #16]
 80139aa:	f109 0901 	add.w	r9, r9, #1
 80139ae:	4038      	ands	r0, r7
 80139b0:	4599      	cmp	r9, r3
 80139b2:	b2c0      	uxtb	r0, r0
 80139b4:	d3e5      	bcc.n	8013982 <uxr_deserialize_CLIENT_Representation+0x9a>
 80139b6:	4006      	ands	r6, r0
 80139b8:	e7c8      	b.n	801394c <uxr_deserialize_CLIENT_Representation+0x64>
 80139ba:	bf00      	nop

080139bc <uxr_serialize_AGENT_Representation>:
 80139bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139c0:	2204      	movs	r2, #4
 80139c2:	460c      	mov	r4, r1
 80139c4:	4605      	mov	r5, r0
 80139c6:	f004 f83b 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80139ca:	1d21      	adds	r1, r4, #4
 80139cc:	4606      	mov	r6, r0
 80139ce:	2202      	movs	r2, #2
 80139d0:	4628      	mov	r0, r5
 80139d2:	f004 f835 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80139d6:	1da1      	adds	r1, r4, #6
 80139d8:	4006      	ands	r6, r0
 80139da:	2202      	movs	r2, #2
 80139dc:	4628      	mov	r0, r5
 80139de:	f004 f82f 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80139e2:	b2f6      	uxtb	r6, r6
 80139e4:	4603      	mov	r3, r0
 80139e6:	7a21      	ldrb	r1, [r4, #8]
 80139e8:	4628      	mov	r0, r5
 80139ea:	401e      	ands	r6, r3
 80139ec:	f004 f8f0 	bl	8017bd0 <ucdr_serialize_bool>
 80139f0:	7a23      	ldrb	r3, [r4, #8]
 80139f2:	ea00 0706 	and.w	r7, r0, r6
 80139f6:	b913      	cbnz	r3, 80139fe <uxr_serialize_AGENT_Representation+0x42>
 80139f8:	4638      	mov	r0, r7
 80139fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139fe:	68e1      	ldr	r1, [r4, #12]
 8013a00:	4628      	mov	r0, r5
 8013a02:	f004 fb2b 	bl	801805c <ucdr_serialize_uint32_t>
 8013a06:	68e3      	ldr	r3, [r4, #12]
 8013a08:	b313      	cbz	r3, 8013a50 <uxr_serialize_AGENT_Representation+0x94>
 8013a0a:	b1e8      	cbz	r0, 8013a48 <uxr_serialize_AGENT_Representation+0x8c>
 8013a0c:	46a0      	mov	r8, r4
 8013a0e:	f04f 0900 	mov.w	r9, #0
 8013a12:	e002      	b.n	8013a1a <uxr_serialize_AGENT_Representation+0x5e>
 8013a14:	f108 0808 	add.w	r8, r8, #8
 8013a18:	b1b3      	cbz	r3, 8013a48 <uxr_serialize_AGENT_Representation+0x8c>
 8013a1a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a1e:	4628      	mov	r0, r5
 8013a20:	f005 f85e 	bl	8018ae0 <ucdr_serialize_string>
 8013a24:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013a28:	4606      	mov	r6, r0
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	f005 f858 	bl	8018ae0 <ucdr_serialize_string>
 8013a30:	68e2      	ldr	r2, [r4, #12]
 8013a32:	f109 0901 	add.w	r9, r9, #1
 8013a36:	ea06 0300 	and.w	r3, r6, r0
 8013a3a:	4591      	cmp	r9, r2
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	d3e9      	bcc.n	8013a14 <uxr_serialize_AGENT_Representation+0x58>
 8013a40:	401f      	ands	r7, r3
 8013a42:	4638      	mov	r0, r7
 8013a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a48:	2700      	movs	r7, #0
 8013a4a:	4638      	mov	r0, r7
 8013a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a50:	4007      	ands	r7, r0
 8013a52:	e7d1      	b.n	80139f8 <uxr_serialize_AGENT_Representation+0x3c>

08013a54 <uxr_serialize_ObjectVariant.part.0>:
 8013a54:	b570      	push	{r4, r5, r6, lr}
 8013a56:	780b      	ldrb	r3, [r1, #0]
 8013a58:	3b01      	subs	r3, #1
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	4605      	mov	r5, r0
 8013a5e:	2b0d      	cmp	r3, #13
 8013a60:	d869      	bhi.n	8013b36 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013a62:	e8df f003 	tbb	[pc, r3]
 8013a66:	074a      	.short	0x074a
 8013a68:	07073030 	.word	0x07073030
 8013a6c:	21680707 	.word	0x21680707
 8013a70:	45632121 	.word	0x45632121
 8013a74:	7909      	ldrb	r1, [r1, #4]
 8013a76:	f004 f8db 	bl	8017c30 <ucdr_serialize_uint8_t>
 8013a7a:	4606      	mov	r6, r0
 8013a7c:	b158      	cbz	r0, 8013a96 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013a7e:	7923      	ldrb	r3, [r4, #4]
 8013a80:	2b02      	cmp	r3, #2
 8013a82:	d003      	beq.n	8013a8c <uxr_serialize_ObjectVariant.part.0+0x38>
 8013a84:	2b03      	cmp	r3, #3
 8013a86:	d029      	beq.n	8013adc <uxr_serialize_ObjectVariant.part.0+0x88>
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d104      	bne.n	8013a96 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013a8c:	68a1      	ldr	r1, [r4, #8]
 8013a8e:	4628      	mov	r0, r5
 8013a90:	f005 f826 	bl	8018ae0 <ucdr_serialize_string>
 8013a94:	4606      	mov	r6, r0
 8013a96:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013a9a:	4628      	mov	r0, r5
 8013a9c:	2202      	movs	r2, #2
 8013a9e:	f003 ffcf 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8013aa2:	4030      	ands	r0, r6
 8013aa4:	b2c0      	uxtb	r0, r0
 8013aa6:	bd70      	pop	{r4, r5, r6, pc}
 8013aa8:	7909      	ldrb	r1, [r1, #4]
 8013aaa:	f004 f8c1 	bl	8017c30 <ucdr_serialize_uint8_t>
 8013aae:	b1e8      	cbz	r0, 8013aec <uxr_serialize_ObjectVariant.part.0+0x98>
 8013ab0:	7923      	ldrb	r3, [r4, #4]
 8013ab2:	2b01      	cmp	r3, #1
 8013ab4:	d001      	beq.n	8013aba <uxr_serialize_ObjectVariant.part.0+0x66>
 8013ab6:	2b02      	cmp	r3, #2
 8013ab8:	d13d      	bne.n	8013b36 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013aba:	68a1      	ldr	r1, [r4, #8]
 8013abc:	4628      	mov	r0, r5
 8013abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ac2:	f005 b80d 	b.w	8018ae0 <ucdr_serialize_string>
 8013ac6:	7909      	ldrb	r1, [r1, #4]
 8013ac8:	f004 f8b2 	bl	8017c30 <ucdr_serialize_uint8_t>
 8013acc:	4606      	mov	r6, r0
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	d0e1      	beq.n	8013a96 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013ad2:	7923      	ldrb	r3, [r4, #4]
 8013ad4:	2b02      	cmp	r3, #2
 8013ad6:	d0d9      	beq.n	8013a8c <uxr_serialize_ObjectVariant.part.0+0x38>
 8013ad8:	2b03      	cmp	r3, #3
 8013ada:	d1dc      	bne.n	8013a96 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013adc:	68a2      	ldr	r2, [r4, #8]
 8013ade:	f104 010c 	add.w	r1, r4, #12
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	f7fd f9a0 	bl	8010e28 <ucdr_serialize_sequence_uint8_t>
 8013ae8:	4606      	mov	r6, r0
 8013aea:	e7d4      	b.n	8013a96 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013aec:	2000      	movs	r0, #0
 8013aee:	bd70      	pop	{r4, r5, r6, pc}
 8013af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013af4:	3104      	adds	r1, #4
 8013af6:	f7ff be9b 	b.w	8013830 <uxr_serialize_CLIENT_Representation>
 8013afa:	7909      	ldrb	r1, [r1, #4]
 8013afc:	f004 f898 	bl	8017c30 <ucdr_serialize_uint8_t>
 8013b00:	4606      	mov	r6, r0
 8013b02:	b158      	cbz	r0, 8013b1c <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013b04:	7923      	ldrb	r3, [r4, #4]
 8013b06:	2b02      	cmp	r3, #2
 8013b08:	d003      	beq.n	8013b12 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8013b0a:	2b03      	cmp	r3, #3
 8013b0c:	d015      	beq.n	8013b3a <uxr_serialize_ObjectVariant.part.0+0xe6>
 8013b0e:	2b01      	cmp	r3, #1
 8013b10:	d104      	bne.n	8013b1c <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013b12:	68a1      	ldr	r1, [r4, #8]
 8013b14:	4628      	mov	r0, r5
 8013b16:	f004 ffe3 	bl	8018ae0 <ucdr_serialize_string>
 8013b1a:	4606      	mov	r6, r0
 8013b1c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013b20:	4628      	mov	r0, r5
 8013b22:	f004 fdc1 	bl	80186a8 <ucdr_serialize_int16_t>
 8013b26:	4030      	ands	r0, r6
 8013b28:	b2c0      	uxtb	r0, r0
 8013b2a:	bd70      	pop	{r4, r5, r6, pc}
 8013b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b30:	3104      	adds	r1, #4
 8013b32:	f7ff bf43 	b.w	80139bc <uxr_serialize_AGENT_Representation>
 8013b36:	2001      	movs	r0, #1
 8013b38:	bd70      	pop	{r4, r5, r6, pc}
 8013b3a:	68a2      	ldr	r2, [r4, #8]
 8013b3c:	f104 010c 	add.w	r1, r4, #12
 8013b40:	4628      	mov	r0, r5
 8013b42:	f7fd f971 	bl	8010e28 <ucdr_serialize_sequence_uint8_t>
 8013b46:	4606      	mov	r6, r0
 8013b48:	e7e8      	b.n	8013b1c <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013b4a:	bf00      	nop

08013b4c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013b4c:	b570      	push	{r4, r5, r6, lr}
 8013b4e:	460d      	mov	r5, r1
 8013b50:	7809      	ldrb	r1, [r1, #0]
 8013b52:	4606      	mov	r6, r0
 8013b54:	f004 f83c 	bl	8017bd0 <ucdr_serialize_bool>
 8013b58:	782b      	ldrb	r3, [r5, #0]
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	b94b      	cbnz	r3, 8013b72 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013b5e:	7a29      	ldrb	r1, [r5, #8]
 8013b60:	4630      	mov	r0, r6
 8013b62:	f004 f835 	bl	8017bd0 <ucdr_serialize_bool>
 8013b66:	7a2b      	ldrb	r3, [r5, #8]
 8013b68:	4004      	ands	r4, r0
 8013b6a:	b2e4      	uxtb	r4, r4
 8013b6c:	b943      	cbnz	r3, 8013b80 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013b6e:	4620      	mov	r0, r4
 8013b70:	bd70      	pop	{r4, r5, r6, pc}
 8013b72:	6869      	ldr	r1, [r5, #4]
 8013b74:	4630      	mov	r0, r6
 8013b76:	f004 ffb3 	bl	8018ae0 <ucdr_serialize_string>
 8013b7a:	4004      	ands	r4, r0
 8013b7c:	b2e4      	uxtb	r4, r4
 8013b7e:	e7ee      	b.n	8013b5e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013b80:	68e9      	ldr	r1, [r5, #12]
 8013b82:	4630      	mov	r0, r6
 8013b84:	f004 ffac 	bl	8018ae0 <ucdr_serialize_string>
 8013b88:	4004      	ands	r4, r0
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	bd70      	pop	{r4, r5, r6, pc}
 8013b8e:	bf00      	nop

08013b90 <uxr_serialize_OBJK_Topic_Binary>:
 8013b90:	b570      	push	{r4, r5, r6, lr}
 8013b92:	460d      	mov	r5, r1
 8013b94:	6809      	ldr	r1, [r1, #0]
 8013b96:	4606      	mov	r6, r0
 8013b98:	f004 ffa2 	bl	8018ae0 <ucdr_serialize_string>
 8013b9c:	7929      	ldrb	r1, [r5, #4]
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	4630      	mov	r0, r6
 8013ba2:	f004 f815 	bl	8017bd0 <ucdr_serialize_bool>
 8013ba6:	792b      	ldrb	r3, [r5, #4]
 8013ba8:	4004      	ands	r4, r0
 8013baa:	b2e4      	uxtb	r4, r4
 8013bac:	b943      	cbnz	r3, 8013bc0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013bae:	7b29      	ldrb	r1, [r5, #12]
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	f004 f80d 	bl	8017bd0 <ucdr_serialize_bool>
 8013bb6:	7b2b      	ldrb	r3, [r5, #12]
 8013bb8:	4004      	ands	r4, r0
 8013bba:	b93b      	cbnz	r3, 8013bcc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	bd70      	pop	{r4, r5, r6, pc}
 8013bc0:	68a9      	ldr	r1, [r5, #8]
 8013bc2:	4630      	mov	r0, r6
 8013bc4:	f004 ff8c 	bl	8018ae0 <ucdr_serialize_string>
 8013bc8:	4004      	ands	r4, r0
 8013bca:	e7f0      	b.n	8013bae <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013bcc:	6929      	ldr	r1, [r5, #16]
 8013bce:	4630      	mov	r0, r6
 8013bd0:	f004 ff86 	bl	8018ae0 <ucdr_serialize_string>
 8013bd4:	4004      	ands	r4, r0
 8013bd6:	b2e4      	uxtb	r4, r4
 8013bd8:	4620      	mov	r0, r4
 8013bda:	bd70      	pop	{r4, r5, r6, pc}

08013bdc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be0:	460c      	mov	r4, r1
 8013be2:	7809      	ldrb	r1, [r1, #0]
 8013be4:	4606      	mov	r6, r0
 8013be6:	f003 fff3 	bl	8017bd0 <ucdr_serialize_bool>
 8013bea:	7823      	ldrb	r3, [r4, #0]
 8013bec:	4605      	mov	r5, r0
 8013bee:	b96b      	cbnz	r3, 8013c0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013bf0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	f003 ffeb 	bl	8017bd0 <ucdr_serialize_bool>
 8013bfa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013bfe:	4005      	ands	r5, r0
 8013c00:	b2ed      	uxtb	r5, r5
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d169      	bne.n	8013cda <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013c06:	4628      	mov	r0, r5
 8013c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c0c:	6861      	ldr	r1, [r4, #4]
 8013c0e:	4630      	mov	r0, r6
 8013c10:	f004 fa24 	bl	801805c <ucdr_serialize_uint32_t>
 8013c14:	6863      	ldr	r3, [r4, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d06b      	beq.n	8013cf2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013c1a:	2800      	cmp	r0, #0
 8013c1c:	d067      	beq.n	8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c1e:	68a1      	ldr	r1, [r4, #8]
 8013c20:	4630      	mov	r0, r6
 8013c22:	f004 ff5d 	bl	8018ae0 <ucdr_serialize_string>
 8013c26:	6863      	ldr	r3, [r4, #4]
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	d953      	bls.n	8013cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c2c:	2800      	cmp	r0, #0
 8013c2e:	d05e      	beq.n	8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c30:	68e1      	ldr	r1, [r4, #12]
 8013c32:	4630      	mov	r0, r6
 8013c34:	f004 ff54 	bl	8018ae0 <ucdr_serialize_string>
 8013c38:	6863      	ldr	r3, [r4, #4]
 8013c3a:	2b02      	cmp	r3, #2
 8013c3c:	d94a      	bls.n	8013cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c3e:	2800      	cmp	r0, #0
 8013c40:	d055      	beq.n	8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c42:	6921      	ldr	r1, [r4, #16]
 8013c44:	4630      	mov	r0, r6
 8013c46:	f004 ff4b 	bl	8018ae0 <ucdr_serialize_string>
 8013c4a:	6863      	ldr	r3, [r4, #4]
 8013c4c:	2b03      	cmp	r3, #3
 8013c4e:	d941      	bls.n	8013cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c50:	2800      	cmp	r0, #0
 8013c52:	d04c      	beq.n	8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c54:	6961      	ldr	r1, [r4, #20]
 8013c56:	4630      	mov	r0, r6
 8013c58:	f004 ff42 	bl	8018ae0 <ucdr_serialize_string>
 8013c5c:	6863      	ldr	r3, [r4, #4]
 8013c5e:	2b04      	cmp	r3, #4
 8013c60:	d938      	bls.n	8013cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d043      	beq.n	8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c66:	69a1      	ldr	r1, [r4, #24]
 8013c68:	4630      	mov	r0, r6
 8013c6a:	f004 ff39 	bl	8018ae0 <ucdr_serialize_string>
 8013c6e:	6863      	ldr	r3, [r4, #4]
 8013c70:	2b05      	cmp	r3, #5
 8013c72:	d92f      	bls.n	8013cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	d03a      	beq.n	8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c78:	69e1      	ldr	r1, [r4, #28]
 8013c7a:	4630      	mov	r0, r6
 8013c7c:	f004 ff30 	bl	8018ae0 <ucdr_serialize_string>
 8013c80:	6863      	ldr	r3, [r4, #4]
 8013c82:	2b06      	cmp	r3, #6
 8013c84:	d926      	bls.n	8013cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c86:	b390      	cbz	r0, 8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c88:	6a21      	ldr	r1, [r4, #32]
 8013c8a:	4630      	mov	r0, r6
 8013c8c:	f004 ff28 	bl	8018ae0 <ucdr_serialize_string>
 8013c90:	6863      	ldr	r3, [r4, #4]
 8013c92:	2b07      	cmp	r3, #7
 8013c94:	d91e      	bls.n	8013cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c96:	b350      	cbz	r0, 8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	f004 ff20 	bl	8018ae0 <ucdr_serialize_string>
 8013ca0:	6863      	ldr	r3, [r4, #4]
 8013ca2:	2b08      	cmp	r3, #8
 8013ca4:	d916      	bls.n	8013cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ca6:	b310      	cbz	r0, 8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ca8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013caa:	4630      	mov	r0, r6
 8013cac:	f004 ff18 	bl	8018ae0 <ucdr_serialize_string>
 8013cb0:	6863      	ldr	r3, [r4, #4]
 8013cb2:	2b09      	cmp	r3, #9
 8013cb4:	d90e      	bls.n	8013cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cb6:	b1d0      	cbz	r0, 8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cb8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013cbc:	2709      	movs	r7, #9
 8013cbe:	e000      	b.n	8013cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013cc0:	b1a8      	cbz	r0, 8013cee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cc2:	f858 1b04 	ldr.w	r1, [r8], #4
 8013cc6:	4630      	mov	r0, r6
 8013cc8:	f004 ff0a 	bl	8018ae0 <ucdr_serialize_string>
 8013ccc:	6862      	ldr	r2, [r4, #4]
 8013cce:	3701      	adds	r7, #1
 8013cd0:	4297      	cmp	r7, r2
 8013cd2:	d3f5      	bcc.n	8013cc0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013cd4:	4005      	ands	r5, r0
 8013cd6:	b2ed      	uxtb	r5, r5
 8013cd8:	e78a      	b.n	8013bf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013cda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013cdc:	4630      	mov	r0, r6
 8013cde:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013ce2:	f7fd f8a1 	bl	8010e28 <ucdr_serialize_sequence_uint8_t>
 8013ce6:	4005      	ands	r5, r0
 8013ce8:	4628      	mov	r0, r5
 8013cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cee:	2500      	movs	r5, #0
 8013cf0:	e77e      	b.n	8013bf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013cf2:	4028      	ands	r0, r5
 8013cf4:	b2c5      	uxtb	r5, r0
 8013cf6:	e77b      	b.n	8013bf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013cf8 <uxr_serialize_OBJK_Publisher_Binary>:
 8013cf8:	b570      	push	{r4, r5, r6, lr}
 8013cfa:	460d      	mov	r5, r1
 8013cfc:	7809      	ldrb	r1, [r1, #0]
 8013cfe:	4606      	mov	r6, r0
 8013d00:	f003 ff66 	bl	8017bd0 <ucdr_serialize_bool>
 8013d04:	782b      	ldrb	r3, [r5, #0]
 8013d06:	4604      	mov	r4, r0
 8013d08:	b94b      	cbnz	r3, 8013d1e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013d0a:	7a29      	ldrb	r1, [r5, #8]
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	f003 ff5f 	bl	8017bd0 <ucdr_serialize_bool>
 8013d12:	7a2b      	ldrb	r3, [r5, #8]
 8013d14:	4004      	ands	r4, r0
 8013d16:	b2e4      	uxtb	r4, r4
 8013d18:	b943      	cbnz	r3, 8013d2c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	bd70      	pop	{r4, r5, r6, pc}
 8013d1e:	6869      	ldr	r1, [r5, #4]
 8013d20:	4630      	mov	r0, r6
 8013d22:	f004 fedd 	bl	8018ae0 <ucdr_serialize_string>
 8013d26:	4004      	ands	r4, r0
 8013d28:	b2e4      	uxtb	r4, r4
 8013d2a:	e7ee      	b.n	8013d0a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013d2c:	f105 010c 	add.w	r1, r5, #12
 8013d30:	4630      	mov	r0, r6
 8013d32:	f7ff ff53 	bl	8013bdc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013d36:	4004      	ands	r4, r0
 8013d38:	4620      	mov	r0, r4
 8013d3a:	bd70      	pop	{r4, r5, r6, pc}

08013d3c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d40:	460c      	mov	r4, r1
 8013d42:	7809      	ldrb	r1, [r1, #0]
 8013d44:	4606      	mov	r6, r0
 8013d46:	f003 ff43 	bl	8017bd0 <ucdr_serialize_bool>
 8013d4a:	7823      	ldrb	r3, [r4, #0]
 8013d4c:	4605      	mov	r5, r0
 8013d4e:	b96b      	cbnz	r3, 8013d6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013d50:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013d54:	4630      	mov	r0, r6
 8013d56:	f003 ff3b 	bl	8017bd0 <ucdr_serialize_bool>
 8013d5a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013d5e:	4005      	ands	r5, r0
 8013d60:	b2ed      	uxtb	r5, r5
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d169      	bne.n	8013e3a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013d66:	4628      	mov	r0, r5
 8013d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d6c:	6861      	ldr	r1, [r4, #4]
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f004 f974 	bl	801805c <ucdr_serialize_uint32_t>
 8013d74:	6863      	ldr	r3, [r4, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d06b      	beq.n	8013e52 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	d067      	beq.n	8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d7e:	68a1      	ldr	r1, [r4, #8]
 8013d80:	4630      	mov	r0, r6
 8013d82:	f004 fead 	bl	8018ae0 <ucdr_serialize_string>
 8013d86:	6863      	ldr	r3, [r4, #4]
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	d953      	bls.n	8013e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	d05e      	beq.n	8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013d90:	68e1      	ldr	r1, [r4, #12]
 8013d92:	4630      	mov	r0, r6
 8013d94:	f004 fea4 	bl	8018ae0 <ucdr_serialize_string>
 8013d98:	6863      	ldr	r3, [r4, #4]
 8013d9a:	2b02      	cmp	r3, #2
 8013d9c:	d94a      	bls.n	8013e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	d055      	beq.n	8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013da2:	6921      	ldr	r1, [r4, #16]
 8013da4:	4630      	mov	r0, r6
 8013da6:	f004 fe9b 	bl	8018ae0 <ucdr_serialize_string>
 8013daa:	6863      	ldr	r3, [r4, #4]
 8013dac:	2b03      	cmp	r3, #3
 8013dae:	d941      	bls.n	8013e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013db0:	2800      	cmp	r0, #0
 8013db2:	d04c      	beq.n	8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013db4:	6961      	ldr	r1, [r4, #20]
 8013db6:	4630      	mov	r0, r6
 8013db8:	f004 fe92 	bl	8018ae0 <ucdr_serialize_string>
 8013dbc:	6863      	ldr	r3, [r4, #4]
 8013dbe:	2b04      	cmp	r3, #4
 8013dc0:	d938      	bls.n	8013e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	d043      	beq.n	8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dc6:	69a1      	ldr	r1, [r4, #24]
 8013dc8:	4630      	mov	r0, r6
 8013dca:	f004 fe89 	bl	8018ae0 <ucdr_serialize_string>
 8013dce:	6863      	ldr	r3, [r4, #4]
 8013dd0:	2b05      	cmp	r3, #5
 8013dd2:	d92f      	bls.n	8013e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d03a      	beq.n	8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dd8:	69e1      	ldr	r1, [r4, #28]
 8013dda:	4630      	mov	r0, r6
 8013ddc:	f004 fe80 	bl	8018ae0 <ucdr_serialize_string>
 8013de0:	6863      	ldr	r3, [r4, #4]
 8013de2:	2b06      	cmp	r3, #6
 8013de4:	d926      	bls.n	8013e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013de6:	b390      	cbz	r0, 8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013de8:	6a21      	ldr	r1, [r4, #32]
 8013dea:	4630      	mov	r0, r6
 8013dec:	f004 fe78 	bl	8018ae0 <ucdr_serialize_string>
 8013df0:	6863      	ldr	r3, [r4, #4]
 8013df2:	2b07      	cmp	r3, #7
 8013df4:	d91e      	bls.n	8013e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013df6:	b350      	cbz	r0, 8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013df8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013dfa:	4630      	mov	r0, r6
 8013dfc:	f004 fe70 	bl	8018ae0 <ucdr_serialize_string>
 8013e00:	6863      	ldr	r3, [r4, #4]
 8013e02:	2b08      	cmp	r3, #8
 8013e04:	d916      	bls.n	8013e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e06:	b310      	cbz	r0, 8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013e0a:	4630      	mov	r0, r6
 8013e0c:	f004 fe68 	bl	8018ae0 <ucdr_serialize_string>
 8013e10:	6863      	ldr	r3, [r4, #4]
 8013e12:	2b09      	cmp	r3, #9
 8013e14:	d90e      	bls.n	8013e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e16:	b1d0      	cbz	r0, 8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e18:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013e1c:	2709      	movs	r7, #9
 8013e1e:	e000      	b.n	8013e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013e20:	b1a8      	cbz	r0, 8013e4e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e22:	f858 1b04 	ldr.w	r1, [r8], #4
 8013e26:	4630      	mov	r0, r6
 8013e28:	f004 fe5a 	bl	8018ae0 <ucdr_serialize_string>
 8013e2c:	6862      	ldr	r2, [r4, #4]
 8013e2e:	3701      	adds	r7, #1
 8013e30:	4297      	cmp	r7, r2
 8013e32:	d3f5      	bcc.n	8013e20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013e34:	4005      	ands	r5, r0
 8013e36:	b2ed      	uxtb	r5, r5
 8013e38:	e78a      	b.n	8013d50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013e3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013e3c:	4630      	mov	r0, r6
 8013e3e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013e42:	f7fc fff1 	bl	8010e28 <ucdr_serialize_sequence_uint8_t>
 8013e46:	4005      	ands	r5, r0
 8013e48:	4628      	mov	r0, r5
 8013e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e4e:	2500      	movs	r5, #0
 8013e50:	e77e      	b.n	8013d50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013e52:	4028      	ands	r0, r5
 8013e54:	b2c5      	uxtb	r5, r0
 8013e56:	e77b      	b.n	8013d50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013e58 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013e58:	b570      	push	{r4, r5, r6, lr}
 8013e5a:	460d      	mov	r5, r1
 8013e5c:	7809      	ldrb	r1, [r1, #0]
 8013e5e:	4606      	mov	r6, r0
 8013e60:	f003 feb6 	bl	8017bd0 <ucdr_serialize_bool>
 8013e64:	782b      	ldrb	r3, [r5, #0]
 8013e66:	4604      	mov	r4, r0
 8013e68:	b94b      	cbnz	r3, 8013e7e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013e6a:	7a29      	ldrb	r1, [r5, #8]
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	f003 feaf 	bl	8017bd0 <ucdr_serialize_bool>
 8013e72:	7a2b      	ldrb	r3, [r5, #8]
 8013e74:	4004      	ands	r4, r0
 8013e76:	b2e4      	uxtb	r4, r4
 8013e78:	b943      	cbnz	r3, 8013e8c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013e7a:	4620      	mov	r0, r4
 8013e7c:	bd70      	pop	{r4, r5, r6, pc}
 8013e7e:	6869      	ldr	r1, [r5, #4]
 8013e80:	4630      	mov	r0, r6
 8013e82:	f004 fe2d 	bl	8018ae0 <ucdr_serialize_string>
 8013e86:	4004      	ands	r4, r0
 8013e88:	b2e4      	uxtb	r4, r4
 8013e8a:	e7ee      	b.n	8013e6a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013e8c:	f105 010c 	add.w	r1, r5, #12
 8013e90:	4630      	mov	r0, r6
 8013e92:	f7ff ff53 	bl	8013d3c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013e96:	4004      	ands	r4, r0
 8013e98:	4620      	mov	r0, r4
 8013e9a:	bd70      	pop	{r4, r5, r6, pc}

08013e9c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013e9c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013ea0:	4688      	mov	r8, r1
 8013ea2:	8809      	ldrh	r1, [r1, #0]
 8013ea4:	4681      	mov	r9, r0
 8013ea6:	f003 feef 	bl	8017c88 <ucdr_serialize_uint16_t>
 8013eaa:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013eae:	4606      	mov	r6, r0
 8013eb0:	4648      	mov	r0, r9
 8013eb2:	f003 fe8d 	bl	8017bd0 <ucdr_serialize_bool>
 8013eb6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013eba:	4030      	ands	r0, r6
 8013ebc:	b2c5      	uxtb	r5, r0
 8013ebe:	b9eb      	cbnz	r3, 8013efc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013ec0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013ec4:	4648      	mov	r0, r9
 8013ec6:	f003 fe83 	bl	8017bd0 <ucdr_serialize_bool>
 8013eca:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013ece:	4005      	ands	r5, r0
 8013ed0:	bb7b      	cbnz	r3, 8013f32 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013ed2:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013ed6:	4648      	mov	r0, r9
 8013ed8:	f003 fe7a 	bl	8017bd0 <ucdr_serialize_bool>
 8013edc:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013ee0:	4005      	ands	r5, r0
 8013ee2:	b9f3      	cbnz	r3, 8013f22 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013ee4:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013ee8:	4648      	mov	r0, r9
 8013eea:	f003 fe71 	bl	8017bd0 <ucdr_serialize_bool>
 8013eee:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013ef2:	4005      	ands	r5, r0
 8013ef4:	b94b      	cbnz	r3, 8013f0a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013efc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013f00:	4648      	mov	r0, r9
 8013f02:	f003 fec1 	bl	8017c88 <ucdr_serialize_uint16_t>
 8013f06:	4005      	ands	r5, r0
 8013f08:	e7da      	b.n	8013ec0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013f0a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013f0e:	4648      	mov	r0, r9
 8013f10:	f108 011c 	add.w	r1, r8, #28
 8013f14:	f7fc ff88 	bl	8010e28 <ucdr_serialize_sequence_uint8_t>
 8013f18:	4028      	ands	r0, r5
 8013f1a:	b2c5      	uxtb	r5, r0
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013f22:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013f26:	4648      	mov	r0, r9
 8013f28:	f004 f898 	bl	801805c <ucdr_serialize_uint32_t>
 8013f2c:	4028      	ands	r0, r5
 8013f2e:	b2c5      	uxtb	r5, r0
 8013f30:	e7d8      	b.n	8013ee4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013f32:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013f36:	4648      	mov	r0, r9
 8013f38:	f004 f890 	bl	801805c <ucdr_serialize_uint32_t>
 8013f3c:	4028      	ands	r0, r5
 8013f3e:	b2c5      	uxtb	r5, r0
 8013f40:	e7c7      	b.n	8013ed2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013f42:	bf00      	nop

08013f44 <uxr_serialize_OBJK_DataReader_Binary>:
 8013f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f46:	2202      	movs	r2, #2
 8013f48:	460c      	mov	r4, r1
 8013f4a:	4606      	mov	r6, r0
 8013f4c:	f003 fd78 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8013f50:	78a1      	ldrb	r1, [r4, #2]
 8013f52:	4605      	mov	r5, r0
 8013f54:	4630      	mov	r0, r6
 8013f56:	f003 fe3b 	bl	8017bd0 <ucdr_serialize_bool>
 8013f5a:	78a3      	ldrb	r3, [r4, #2]
 8013f5c:	4005      	ands	r5, r0
 8013f5e:	b2ed      	uxtb	r5, r5
 8013f60:	b90b      	cbnz	r3, 8013f66 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013f62:	4628      	mov	r0, r5
 8013f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f66:	f104 0108 	add.w	r1, r4, #8
 8013f6a:	4630      	mov	r0, r6
 8013f6c:	f7ff ff96 	bl	8013e9c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013f70:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013f74:	4607      	mov	r7, r0
 8013f76:	4630      	mov	r0, r6
 8013f78:	f003 fe2a 	bl	8017bd0 <ucdr_serialize_bool>
 8013f7c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013f80:	4038      	ands	r0, r7
 8013f82:	b2c7      	uxtb	r7, r0
 8013f84:	b95b      	cbnz	r3, 8013f9e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8013f86:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8013f8a:	4630      	mov	r0, r6
 8013f8c:	f003 fe20 	bl	8017bd0 <ucdr_serialize_bool>
 8013f90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013f94:	4007      	ands	r7, r0
 8013f96:	b94b      	cbnz	r3, 8013fac <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013f98:	403d      	ands	r5, r7
 8013f9a:	4628      	mov	r0, r5
 8013f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f9e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8013fa2:	4630      	mov	r0, r6
 8013fa4:	f004 fab0 	bl	8018508 <ucdr_serialize_uint64_t>
 8013fa8:	4007      	ands	r7, r0
 8013faa:	e7ec      	b.n	8013f86 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8013fac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013fae:	4630      	mov	r0, r6
 8013fb0:	f004 fd96 	bl	8018ae0 <ucdr_serialize_string>
 8013fb4:	4007      	ands	r7, r0
 8013fb6:	b2ff      	uxtb	r7, r7
 8013fb8:	e7ee      	b.n	8013f98 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8013fba:	bf00      	nop

08013fbc <uxr_serialize_OBJK_DataWriter_Binary>:
 8013fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fbe:	2202      	movs	r2, #2
 8013fc0:	460d      	mov	r5, r1
 8013fc2:	4606      	mov	r6, r0
 8013fc4:	f003 fd3c 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8013fc8:	78a9      	ldrb	r1, [r5, #2]
 8013fca:	4604      	mov	r4, r0
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f003 fdff 	bl	8017bd0 <ucdr_serialize_bool>
 8013fd2:	78ab      	ldrb	r3, [r5, #2]
 8013fd4:	4004      	ands	r4, r0
 8013fd6:	b2e4      	uxtb	r4, r4
 8013fd8:	b90b      	cbnz	r3, 8013fde <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fde:	f105 0108 	add.w	r1, r5, #8
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	f7ff ff5a 	bl	8013e9c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013fe8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8013fec:	4607      	mov	r7, r0
 8013fee:	4630      	mov	r0, r6
 8013ff0:	f003 fdee 	bl	8017bd0 <ucdr_serialize_bool>
 8013ff4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8013ff8:	4007      	ands	r7, r0
 8013ffa:	b2ff      	uxtb	r7, r7
 8013ffc:	b913      	cbnz	r3, 8014004 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013ffe:	403c      	ands	r4, r7
 8014000:	4620      	mov	r0, r4
 8014002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014004:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8014008:	4630      	mov	r0, r6
 801400a:	f004 fa7d 	bl	8018508 <ucdr_serialize_uint64_t>
 801400e:	4007      	ands	r7, r0
 8014010:	e7f5      	b.n	8013ffe <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014012:	bf00      	nop

08014014 <uxr_deserialize_ObjectVariant>:
 8014014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014016:	4605      	mov	r5, r0
 8014018:	460e      	mov	r6, r1
 801401a:	f003 fe1f 	bl	8017c5c <ucdr_deserialize_uint8_t>
 801401e:	b320      	cbz	r0, 801406a <uxr_deserialize_ObjectVariant+0x56>
 8014020:	7833      	ldrb	r3, [r6, #0]
 8014022:	3b01      	subs	r3, #1
 8014024:	4604      	mov	r4, r0
 8014026:	2b0d      	cmp	r3, #13
 8014028:	d81d      	bhi.n	8014066 <uxr_deserialize_ObjectVariant+0x52>
 801402a:	e8df f003 	tbb	[pc, r3]
 801402e:	2107      	.short	0x2107
 8014030:	21214b4b 	.word	0x21214b4b
 8014034:	381c2121 	.word	0x381c2121
 8014038:	876a3838 	.word	0x876a3838
 801403c:	1d31      	adds	r1, r6, #4
 801403e:	4628      	mov	r0, r5
 8014040:	f003 fe0c 	bl	8017c5c <ucdr_deserialize_uint8_t>
 8014044:	4607      	mov	r7, r0
 8014046:	b138      	cbz	r0, 8014058 <uxr_deserialize_ObjectVariant+0x44>
 8014048:	7933      	ldrb	r3, [r6, #4]
 801404a:	2b02      	cmp	r3, #2
 801404c:	d07c      	beq.n	8014148 <uxr_deserialize_ObjectVariant+0x134>
 801404e:	2b03      	cmp	r3, #3
 8014050:	f000 8082 	beq.w	8014158 <uxr_deserialize_ObjectVariant+0x144>
 8014054:	2b01      	cmp	r3, #1
 8014056:	d077      	beq.n	8014148 <uxr_deserialize_ObjectVariant+0x134>
 8014058:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801405c:	4628      	mov	r0, r5
 801405e:	f004 fba3 	bl	80187a8 <ucdr_deserialize_int16_t>
 8014062:	4038      	ands	r0, r7
 8014064:	b2c4      	uxtb	r4, r0
 8014066:	4620      	mov	r0, r4
 8014068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801406a:	2400      	movs	r4, #0
 801406c:	4620      	mov	r0, r4
 801406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014070:	1d31      	adds	r1, r6, #4
 8014072:	4628      	mov	r0, r5
 8014074:	f003 fdf2 	bl	8017c5c <ucdr_deserialize_uint8_t>
 8014078:	4607      	mov	r7, r0
 801407a:	b130      	cbz	r0, 801408a <uxr_deserialize_ObjectVariant+0x76>
 801407c:	7933      	ldrb	r3, [r6, #4]
 801407e:	2b02      	cmp	r3, #2
 8014080:	d037      	beq.n	80140f2 <uxr_deserialize_ObjectVariant+0xde>
 8014082:	2b03      	cmp	r3, #3
 8014084:	d02a      	beq.n	80140dc <uxr_deserialize_ObjectVariant+0xc8>
 8014086:	2b01      	cmp	r3, #1
 8014088:	d033      	beq.n	80140f2 <uxr_deserialize_ObjectVariant+0xde>
 801408a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801408e:	4628      	mov	r0, r5
 8014090:	2202      	movs	r2, #2
 8014092:	f003 fd39 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014096:	4038      	ands	r0, r7
 8014098:	b2c4      	uxtb	r4, r0
 801409a:	4620      	mov	r0, r4
 801409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801409e:	1d31      	adds	r1, r6, #4
 80140a0:	4628      	mov	r0, r5
 80140a2:	f003 fddb 	bl	8017c5c <ucdr_deserialize_uint8_t>
 80140a6:	2800      	cmp	r0, #0
 80140a8:	d0df      	beq.n	801406a <uxr_deserialize_ObjectVariant+0x56>
 80140aa:	7933      	ldrb	r3, [r6, #4]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d001      	beq.n	80140b4 <uxr_deserialize_ObjectVariant+0xa0>
 80140b0:	2b02      	cmp	r3, #2
 80140b2:	d1d8      	bne.n	8014066 <uxr_deserialize_ObjectVariant+0x52>
 80140b4:	68b1      	ldr	r1, [r6, #8]
 80140b6:	4628      	mov	r0, r5
 80140b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80140bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80140c0:	f004 bd1e 	b.w	8018b00 <ucdr_deserialize_string>
 80140c4:	1d31      	adds	r1, r6, #4
 80140c6:	4628      	mov	r0, r5
 80140c8:	f003 fdc8 	bl	8017c5c <ucdr_deserialize_uint8_t>
 80140cc:	4607      	mov	r7, r0
 80140ce:	2800      	cmp	r0, #0
 80140d0:	d0db      	beq.n	801408a <uxr_deserialize_ObjectVariant+0x76>
 80140d2:	7933      	ldrb	r3, [r6, #4]
 80140d4:	2b02      	cmp	r3, #2
 80140d6:	d00c      	beq.n	80140f2 <uxr_deserialize_ObjectVariant+0xde>
 80140d8:	2b03      	cmp	r3, #3
 80140da:	d1d6      	bne.n	801408a <uxr_deserialize_ObjectVariant+0x76>
 80140dc:	f106 0308 	add.w	r3, r6, #8
 80140e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80140e4:	f106 010c 	add.w	r1, r6, #12
 80140e8:	4628      	mov	r0, r5
 80140ea:	f7fc feaf 	bl	8010e4c <ucdr_deserialize_sequence_uint8_t>
 80140ee:	4607      	mov	r7, r0
 80140f0:	e7cb      	b.n	801408a <uxr_deserialize_ObjectVariant+0x76>
 80140f2:	68b1      	ldr	r1, [r6, #8]
 80140f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80140f8:	4628      	mov	r0, r5
 80140fa:	f004 fd01 	bl	8018b00 <ucdr_deserialize_string>
 80140fe:	4607      	mov	r7, r0
 8014100:	e7c3      	b.n	801408a <uxr_deserialize_ObjectVariant+0x76>
 8014102:	2204      	movs	r2, #4
 8014104:	18b1      	adds	r1, r6, r2
 8014106:	4628      	mov	r0, r5
 8014108:	f003 fcfe 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 801410c:	2202      	movs	r2, #2
 801410e:	4604      	mov	r4, r0
 8014110:	f106 0108 	add.w	r1, r6, #8
 8014114:	4628      	mov	r0, r5
 8014116:	f003 fcf7 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 801411a:	2202      	movs	r2, #2
 801411c:	4004      	ands	r4, r0
 801411e:	f106 010a 	add.w	r1, r6, #10
 8014122:	4628      	mov	r0, r5
 8014124:	f003 fcf0 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014128:	b2e4      	uxtb	r4, r4
 801412a:	4603      	mov	r3, r0
 801412c:	f106 010c 	add.w	r1, r6, #12
 8014130:	4628      	mov	r0, r5
 8014132:	401c      	ands	r4, r3
 8014134:	f003 fd62 	bl	8017bfc <ucdr_deserialize_bool>
 8014138:	4004      	ands	r4, r0
 801413a:	e794      	b.n	8014066 <uxr_deserialize_ObjectVariant+0x52>
 801413c:	1d31      	adds	r1, r6, #4
 801413e:	4628      	mov	r0, r5
 8014140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014144:	f7ff bbd0 	b.w	80138e8 <uxr_deserialize_CLIENT_Representation>
 8014148:	68b1      	ldr	r1, [r6, #8]
 801414a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801414e:	4628      	mov	r0, r5
 8014150:	f004 fcd6 	bl	8018b00 <ucdr_deserialize_string>
 8014154:	4607      	mov	r7, r0
 8014156:	e77f      	b.n	8014058 <uxr_deserialize_ObjectVariant+0x44>
 8014158:	f106 0308 	add.w	r3, r6, #8
 801415c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014160:	f106 010c 	add.w	r1, r6, #12
 8014164:	4628      	mov	r0, r5
 8014166:	f7fc fe71 	bl	8010e4c <ucdr_deserialize_sequence_uint8_t>
 801416a:	4607      	mov	r7, r0
 801416c:	e774      	b.n	8014058 <uxr_deserialize_ObjectVariant+0x44>
 801416e:	bf00      	nop

08014170 <uxr_deserialize_BaseObjectRequest>:
 8014170:	b570      	push	{r4, r5, r6, lr}
 8014172:	2202      	movs	r2, #2
 8014174:	4605      	mov	r5, r0
 8014176:	460e      	mov	r6, r1
 8014178:	f003 fcc6 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 801417c:	1cb1      	adds	r1, r6, #2
 801417e:	4604      	mov	r4, r0
 8014180:	2202      	movs	r2, #2
 8014182:	4628      	mov	r0, r5
 8014184:	f003 fcc0 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014188:	4020      	ands	r0, r4
 801418a:	b2c0      	uxtb	r0, r0
 801418c:	bd70      	pop	{r4, r5, r6, pc}
 801418e:	bf00      	nop

08014190 <uxr_serialize_AGENT_ActivityInfo>:
 8014190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014194:	460e      	mov	r6, r1
 8014196:	f9b1 1000 	ldrsh.w	r1, [r1]
 801419a:	4607      	mov	r7, r0
 801419c:	f004 fa84 	bl	80186a8 <ucdr_serialize_int16_t>
 80141a0:	6871      	ldr	r1, [r6, #4]
 80141a2:	4680      	mov	r8, r0
 80141a4:	4638      	mov	r0, r7
 80141a6:	f003 ff59 	bl	801805c <ucdr_serialize_uint32_t>
 80141aa:	6873      	ldr	r3, [r6, #4]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d06a      	beq.n	8014286 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 80141b0:	b318      	cbz	r0, 80141fa <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80141b2:	f106 0904 	add.w	r9, r6, #4
 80141b6:	2500      	movs	r5, #0
 80141b8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80141bc:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 80141c0:	7a21      	ldrb	r1, [r4, #8]
 80141c2:	4638      	mov	r0, r7
 80141c4:	f003 fd34 	bl	8017c30 <ucdr_serialize_uint8_t>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d051      	beq.n	8014270 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 80141cc:	7a23      	ldrb	r3, [r4, #8]
 80141ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80141d2:	00c9      	lsls	r1, r1, #3
 80141d4:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80141d8:	2b03      	cmp	r3, #3
 80141da:	d859      	bhi.n	8014290 <uxr_serialize_AGENT_ActivityInfo+0x100>
 80141dc:	e8df f003 	tbb	[pc, r3]
 80141e0:	02122436 	.word	0x02122436
 80141e4:	4449      	add	r1, r9
 80141e6:	4638      	mov	r0, r7
 80141e8:	6889      	ldr	r1, [r1, #8]
 80141ea:	f004 fc79 	bl	8018ae0 <ucdr_serialize_string>
 80141ee:	6873      	ldr	r3, [r6, #4]
 80141f0:	3501      	adds	r5, #1
 80141f2:	429d      	cmp	r5, r3
 80141f4:	d240      	bcs.n	8014278 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 80141f6:	2800      	cmp	r0, #0
 80141f8:	d1de      	bne.n	80141b8 <uxr_serialize_AGENT_ActivityInfo+0x28>
 80141fa:	f04f 0800 	mov.w	r8, #0
 80141fe:	4640      	mov	r0, r8
 8014200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014204:	3108      	adds	r1, #8
 8014206:	4449      	add	r1, r9
 8014208:	2210      	movs	r2, #16
 801420a:	4638      	mov	r0, r7
 801420c:	f003 fc18 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8014210:	44aa      	add	sl, r5
 8014212:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014216:	4604      	mov	r4, r0
 8014218:	f8da 101c 	ldr.w	r1, [sl, #28]
 801421c:	4638      	mov	r0, r7
 801421e:	f003 ff1d 	bl	801805c <ucdr_serialize_uint32_t>
 8014222:	4020      	ands	r0, r4
 8014224:	b2c0      	uxtb	r0, r0
 8014226:	e7e2      	b.n	80141ee <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8014228:	3108      	adds	r1, #8
 801422a:	4449      	add	r1, r9
 801422c:	2204      	movs	r2, #4
 801422e:	4638      	mov	r0, r7
 8014230:	f003 fc06 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8014234:	44aa      	add	sl, r5
 8014236:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801423a:	4604      	mov	r4, r0
 801423c:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8014240:	4638      	mov	r0, r7
 8014242:	f003 fd21 	bl	8017c88 <ucdr_serialize_uint16_t>
 8014246:	4020      	ands	r0, r4
 8014248:	b2c0      	uxtb	r0, r0
 801424a:	e7d0      	b.n	80141ee <uxr_serialize_AGENT_ActivityInfo+0x5e>
 801424c:	3108      	adds	r1, #8
 801424e:	4449      	add	r1, r9
 8014250:	2202      	movs	r2, #2
 8014252:	4638      	mov	r0, r7
 8014254:	f003 fbf4 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8014258:	44aa      	add	sl, r5
 801425a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801425e:	4604      	mov	r4, r0
 8014260:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8014264:	4638      	mov	r0, r7
 8014266:	f003 fce3 	bl	8017c30 <ucdr_serialize_uint8_t>
 801426a:	4020      	ands	r0, r4
 801426c:	b2c0      	uxtb	r0, r0
 801426e:	e7be      	b.n	80141ee <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8014270:	6873      	ldr	r3, [r6, #4]
 8014272:	3501      	adds	r5, #1
 8014274:	429d      	cmp	r5, r3
 8014276:	d3c0      	bcc.n	80141fa <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8014278:	ea08 0000 	and.w	r0, r8, r0
 801427c:	fa5f f880 	uxtb.w	r8, r0
 8014280:	4640      	mov	r0, r8
 8014282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014286:	ea08 0800 	and.w	r8, r8, r0
 801428a:	fa5f f888 	uxtb.w	r8, r8
 801428e:	e7b6      	b.n	80141fe <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8014290:	6873      	ldr	r3, [r6, #4]
 8014292:	3501      	adds	r5, #1
 8014294:	42ab      	cmp	r3, r5
 8014296:	f104 0418 	add.w	r4, r4, #24
 801429a:	d891      	bhi.n	80141c0 <uxr_serialize_AGENT_ActivityInfo+0x30>
 801429c:	e7af      	b.n	80141fe <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801429e:	bf00      	nop

080142a0 <uxr_serialize_ActivityInfoVariant>:
 80142a0:	b570      	push	{r4, r5, r6, lr}
 80142a2:	460d      	mov	r5, r1
 80142a4:	7809      	ldrb	r1, [r1, #0]
 80142a6:	4606      	mov	r6, r0
 80142a8:	f003 fcc2 	bl	8017c30 <ucdr_serialize_uint8_t>
 80142ac:	b130      	cbz	r0, 80142bc <uxr_serialize_ActivityInfoVariant+0x1c>
 80142ae:	782b      	ldrb	r3, [r5, #0]
 80142b0:	2b06      	cmp	r3, #6
 80142b2:	d019      	beq.n	80142e8 <uxr_serialize_ActivityInfoVariant+0x48>
 80142b4:	2b0d      	cmp	r3, #13
 80142b6:	d010      	beq.n	80142da <uxr_serialize_ActivityInfoVariant+0x3a>
 80142b8:	2b05      	cmp	r3, #5
 80142ba:	d000      	beq.n	80142be <uxr_serialize_ActivityInfoVariant+0x1e>
 80142bc:	bd70      	pop	{r4, r5, r6, pc}
 80142be:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80142c2:	4630      	mov	r0, r6
 80142c4:	f004 f9f0 	bl	80186a8 <ucdr_serialize_int16_t>
 80142c8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80142cc:	4604      	mov	r4, r0
 80142ce:	4630      	mov	r0, r6
 80142d0:	f004 f91a 	bl	8018508 <ucdr_serialize_uint64_t>
 80142d4:	4020      	ands	r0, r4
 80142d6:	b2c0      	uxtb	r0, r0
 80142d8:	bd70      	pop	{r4, r5, r6, pc}
 80142da:	f105 0108 	add.w	r1, r5, #8
 80142de:	4630      	mov	r0, r6
 80142e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142e4:	f7ff bf54 	b.w	8014190 <uxr_serialize_AGENT_ActivityInfo>
 80142e8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80142ec:	4630      	mov	r0, r6
 80142ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142f2:	f004 b9d9 	b.w	80186a8 <ucdr_serialize_int16_t>
 80142f6:	bf00      	nop

080142f8 <uxr_deserialize_BaseObjectReply>:
 80142f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142fc:	2202      	movs	r2, #2
 80142fe:	4606      	mov	r6, r0
 8014300:	460f      	mov	r7, r1
 8014302:	f003 fc01 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014306:	2202      	movs	r2, #2
 8014308:	1cb9      	adds	r1, r7, #2
 801430a:	4605      	mov	r5, r0
 801430c:	4630      	mov	r0, r6
 801430e:	f003 fbfb 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014312:	1d39      	adds	r1, r7, #4
 8014314:	4680      	mov	r8, r0
 8014316:	4630      	mov	r0, r6
 8014318:	f003 fca0 	bl	8017c5c <ucdr_deserialize_uint8_t>
 801431c:	1d79      	adds	r1, r7, #5
 801431e:	4604      	mov	r4, r0
 8014320:	4630      	mov	r0, r6
 8014322:	f003 fc9b 	bl	8017c5c <ucdr_deserialize_uint8_t>
 8014326:	ea05 0508 	and.w	r5, r5, r8
 801432a:	402c      	ands	r4, r5
 801432c:	4020      	ands	r0, r4
 801432e:	b2c0      	uxtb	r0, r0
 8014330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014334 <uxr_serialize_ReadSpecification>:
 8014334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014338:	460e      	mov	r6, r1
 801433a:	7809      	ldrb	r1, [r1, #0]
 801433c:	4607      	mov	r7, r0
 801433e:	f003 fc77 	bl	8017c30 <ucdr_serialize_uint8_t>
 8014342:	7871      	ldrb	r1, [r6, #1]
 8014344:	4604      	mov	r4, r0
 8014346:	4638      	mov	r0, r7
 8014348:	f003 fc72 	bl	8017c30 <ucdr_serialize_uint8_t>
 801434c:	78b1      	ldrb	r1, [r6, #2]
 801434e:	4004      	ands	r4, r0
 8014350:	4638      	mov	r0, r7
 8014352:	f003 fc3d 	bl	8017bd0 <ucdr_serialize_bool>
 8014356:	78b3      	ldrb	r3, [r6, #2]
 8014358:	b2e4      	uxtb	r4, r4
 801435a:	4004      	ands	r4, r0
 801435c:	b94b      	cbnz	r3, 8014372 <uxr_serialize_ReadSpecification+0x3e>
 801435e:	7a31      	ldrb	r1, [r6, #8]
 8014360:	4638      	mov	r0, r7
 8014362:	f003 fc35 	bl	8017bd0 <ucdr_serialize_bool>
 8014366:	7a33      	ldrb	r3, [r6, #8]
 8014368:	4004      	ands	r4, r0
 801436a:	b943      	cbnz	r3, 801437e <uxr_serialize_ReadSpecification+0x4a>
 801436c:	4620      	mov	r0, r4
 801436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014372:	6871      	ldr	r1, [r6, #4]
 8014374:	4638      	mov	r0, r7
 8014376:	f004 fbb3 	bl	8018ae0 <ucdr_serialize_string>
 801437a:	4004      	ands	r4, r0
 801437c:	e7ef      	b.n	801435e <uxr_serialize_ReadSpecification+0x2a>
 801437e:	8971      	ldrh	r1, [r6, #10]
 8014380:	4638      	mov	r0, r7
 8014382:	f003 fc81 	bl	8017c88 <ucdr_serialize_uint16_t>
 8014386:	89b1      	ldrh	r1, [r6, #12]
 8014388:	4605      	mov	r5, r0
 801438a:	4638      	mov	r0, r7
 801438c:	f003 fc7c 	bl	8017c88 <ucdr_serialize_uint16_t>
 8014390:	89f1      	ldrh	r1, [r6, #14]
 8014392:	4005      	ands	r5, r0
 8014394:	4638      	mov	r0, r7
 8014396:	f003 fc77 	bl	8017c88 <ucdr_serialize_uint16_t>
 801439a:	8a31      	ldrh	r1, [r6, #16]
 801439c:	4680      	mov	r8, r0
 801439e:	4638      	mov	r0, r7
 80143a0:	f003 fc72 	bl	8017c88 <ucdr_serialize_uint16_t>
 80143a4:	b2ed      	uxtb	r5, r5
 80143a6:	4025      	ands	r5, r4
 80143a8:	ea08 0505 	and.w	r5, r8, r5
 80143ac:	ea00 0405 	and.w	r4, r0, r5
 80143b0:	4620      	mov	r0, r4
 80143b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143b6:	bf00      	nop

080143b8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80143b8:	f7ff ba3a 	b.w	8013830 <uxr_serialize_CLIENT_Representation>

080143bc <uxr_serialize_CREATE_Payload>:
 80143bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143be:	2202      	movs	r2, #2
 80143c0:	4606      	mov	r6, r0
 80143c2:	460d      	mov	r5, r1
 80143c4:	f003 fb3c 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80143c8:	1ca9      	adds	r1, r5, #2
 80143ca:	4604      	mov	r4, r0
 80143cc:	2202      	movs	r2, #2
 80143ce:	4630      	mov	r0, r6
 80143d0:	f003 fb36 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80143d4:	7929      	ldrb	r1, [r5, #4]
 80143d6:	4607      	mov	r7, r0
 80143d8:	4630      	mov	r0, r6
 80143da:	f003 fc29 	bl	8017c30 <ucdr_serialize_uint8_t>
 80143de:	b328      	cbz	r0, 801442c <uxr_serialize_CREATE_Payload+0x70>
 80143e0:	792b      	ldrb	r3, [r5, #4]
 80143e2:	403c      	ands	r4, r7
 80143e4:	3b01      	subs	r3, #1
 80143e6:	b2e4      	uxtb	r4, r4
 80143e8:	2b0d      	cmp	r3, #13
 80143ea:	d81d      	bhi.n	8014428 <uxr_serialize_CREATE_Payload+0x6c>
 80143ec:	e8df f003 	tbb	[pc, r3]
 80143f0:	32320753 	.word	0x32320753
 80143f4:	07070707 	.word	0x07070707
 80143f8:	2121211c 	.word	0x2121211c
 80143fc:	684c      	.short	0x684c
 80143fe:	7a29      	ldrb	r1, [r5, #8]
 8014400:	4630      	mov	r0, r6
 8014402:	f003 fc15 	bl	8017c30 <ucdr_serialize_uint8_t>
 8014406:	4607      	mov	r7, r0
 8014408:	b130      	cbz	r0, 8014418 <uxr_serialize_CREATE_Payload+0x5c>
 801440a:	7a2b      	ldrb	r3, [r5, #8]
 801440c:	2b02      	cmp	r3, #2
 801440e:	d035      	beq.n	801447c <uxr_serialize_CREATE_Payload+0xc0>
 8014410:	2b03      	cmp	r3, #3
 8014412:	d02b      	beq.n	801446c <uxr_serialize_CREATE_Payload+0xb0>
 8014414:	2b01      	cmp	r3, #1
 8014416:	d031      	beq.n	801447c <uxr_serialize_CREATE_Payload+0xc0>
 8014418:	f505 7104 	add.w	r1, r5, #528	; 0x210
 801441c:	4630      	mov	r0, r6
 801441e:	2202      	movs	r2, #2
 8014420:	f003 fb0e 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8014424:	4038      	ands	r0, r7
 8014426:	4004      	ands	r4, r0
 8014428:	4620      	mov	r0, r4
 801442a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801442c:	2400      	movs	r4, #0
 801442e:	4620      	mov	r0, r4
 8014430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014432:	7a29      	ldrb	r1, [r5, #8]
 8014434:	4630      	mov	r0, r6
 8014436:	f003 fbfb 	bl	8017c30 <ucdr_serialize_uint8_t>
 801443a:	2800      	cmp	r0, #0
 801443c:	d0f6      	beq.n	801442c <uxr_serialize_CREATE_Payload+0x70>
 801443e:	7a2b      	ldrb	r3, [r5, #8]
 8014440:	2b01      	cmp	r3, #1
 8014442:	d001      	beq.n	8014448 <uxr_serialize_CREATE_Payload+0x8c>
 8014444:	2b02      	cmp	r3, #2
 8014446:	d1ef      	bne.n	8014428 <uxr_serialize_CREATE_Payload+0x6c>
 8014448:	68e9      	ldr	r1, [r5, #12]
 801444a:	4630      	mov	r0, r6
 801444c:	f004 fb48 	bl	8018ae0 <ucdr_serialize_string>
 8014450:	4004      	ands	r4, r0
 8014452:	e7e9      	b.n	8014428 <uxr_serialize_CREATE_Payload+0x6c>
 8014454:	7a29      	ldrb	r1, [r5, #8]
 8014456:	4630      	mov	r0, r6
 8014458:	f003 fbea 	bl	8017c30 <ucdr_serialize_uint8_t>
 801445c:	4607      	mov	r7, r0
 801445e:	2800      	cmp	r0, #0
 8014460:	d0da      	beq.n	8014418 <uxr_serialize_CREATE_Payload+0x5c>
 8014462:	7a2b      	ldrb	r3, [r5, #8]
 8014464:	2b02      	cmp	r3, #2
 8014466:	d009      	beq.n	801447c <uxr_serialize_CREATE_Payload+0xc0>
 8014468:	2b03      	cmp	r3, #3
 801446a:	d1d5      	bne.n	8014418 <uxr_serialize_CREATE_Payload+0x5c>
 801446c:	68ea      	ldr	r2, [r5, #12]
 801446e:	f105 0110 	add.w	r1, r5, #16
 8014472:	4630      	mov	r0, r6
 8014474:	f7fc fcd8 	bl	8010e28 <ucdr_serialize_sequence_uint8_t>
 8014478:	4607      	mov	r7, r0
 801447a:	e7cd      	b.n	8014418 <uxr_serialize_CREATE_Payload+0x5c>
 801447c:	68e9      	ldr	r1, [r5, #12]
 801447e:	4630      	mov	r0, r6
 8014480:	f004 fb2e 	bl	8018ae0 <ucdr_serialize_string>
 8014484:	4607      	mov	r7, r0
 8014486:	e7c7      	b.n	8014418 <uxr_serialize_CREATE_Payload+0x5c>
 8014488:	f105 0108 	add.w	r1, r5, #8
 801448c:	4630      	mov	r0, r6
 801448e:	f7ff fa95 	bl	80139bc <uxr_serialize_AGENT_Representation>
 8014492:	4004      	ands	r4, r0
 8014494:	e7c8      	b.n	8014428 <uxr_serialize_CREATE_Payload+0x6c>
 8014496:	7a29      	ldrb	r1, [r5, #8]
 8014498:	4630      	mov	r0, r6
 801449a:	f003 fbc9 	bl	8017c30 <ucdr_serialize_uint8_t>
 801449e:	4607      	mov	r7, r0
 80144a0:	b130      	cbz	r0, 80144b0 <uxr_serialize_CREATE_Payload+0xf4>
 80144a2:	7a2b      	ldrb	r3, [r5, #8]
 80144a4:	2b02      	cmp	r3, #2
 80144a6:	d012      	beq.n	80144ce <uxr_serialize_CREATE_Payload+0x112>
 80144a8:	2b03      	cmp	r3, #3
 80144aa:	d016      	beq.n	80144da <uxr_serialize_CREATE_Payload+0x11e>
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d00e      	beq.n	80144ce <uxr_serialize_CREATE_Payload+0x112>
 80144b0:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 80144b4:	4630      	mov	r0, r6
 80144b6:	f004 f8f7 	bl	80186a8 <ucdr_serialize_int16_t>
 80144ba:	4038      	ands	r0, r7
 80144bc:	4004      	ands	r4, r0
 80144be:	e7b3      	b.n	8014428 <uxr_serialize_CREATE_Payload+0x6c>
 80144c0:	f105 0108 	add.w	r1, r5, #8
 80144c4:	4630      	mov	r0, r6
 80144c6:	f7ff f9b3 	bl	8013830 <uxr_serialize_CLIENT_Representation>
 80144ca:	4004      	ands	r4, r0
 80144cc:	e7ac      	b.n	8014428 <uxr_serialize_CREATE_Payload+0x6c>
 80144ce:	68e9      	ldr	r1, [r5, #12]
 80144d0:	4630      	mov	r0, r6
 80144d2:	f004 fb05 	bl	8018ae0 <ucdr_serialize_string>
 80144d6:	4607      	mov	r7, r0
 80144d8:	e7ea      	b.n	80144b0 <uxr_serialize_CREATE_Payload+0xf4>
 80144da:	68ea      	ldr	r2, [r5, #12]
 80144dc:	f105 0110 	add.w	r1, r5, #16
 80144e0:	4630      	mov	r0, r6
 80144e2:	f7fc fca1 	bl	8010e28 <ucdr_serialize_sequence_uint8_t>
 80144e6:	4607      	mov	r7, r0
 80144e8:	e7e2      	b.n	80144b0 <uxr_serialize_CREATE_Payload+0xf4>
 80144ea:	bf00      	nop

080144ec <uxr_deserialize_GET_INFO_Payload>:
 80144ec:	b570      	push	{r4, r5, r6, lr}
 80144ee:	2202      	movs	r2, #2
 80144f0:	4605      	mov	r5, r0
 80144f2:	460e      	mov	r6, r1
 80144f4:	f003 fb08 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 80144f8:	1cb1      	adds	r1, r6, #2
 80144fa:	2202      	movs	r2, #2
 80144fc:	4604      	mov	r4, r0
 80144fe:	4628      	mov	r0, r5
 8014500:	f003 fb02 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014504:	1d31      	adds	r1, r6, #4
 8014506:	4004      	ands	r4, r0
 8014508:	4628      	mov	r0, r5
 801450a:	f003 fed7 	bl	80182bc <ucdr_deserialize_uint32_t>
 801450e:	b2e4      	uxtb	r4, r4
 8014510:	4020      	ands	r0, r4
 8014512:	bd70      	pop	{r4, r5, r6, pc}

08014514 <uxr_serialize_DELETE_Payload>:
 8014514:	b570      	push	{r4, r5, r6, lr}
 8014516:	2202      	movs	r2, #2
 8014518:	4605      	mov	r5, r0
 801451a:	460e      	mov	r6, r1
 801451c:	f003 fa90 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8014520:	1cb1      	adds	r1, r6, #2
 8014522:	4604      	mov	r4, r0
 8014524:	2202      	movs	r2, #2
 8014526:	4628      	mov	r0, r5
 8014528:	f003 fa8a 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 801452c:	4020      	ands	r0, r4
 801452e:	b2c0      	uxtb	r0, r0
 8014530:	bd70      	pop	{r4, r5, r6, pc}
 8014532:	bf00      	nop

08014534 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014538:	4606      	mov	r6, r0
 801453a:	460f      	mov	r7, r1
 801453c:	f003 fb8e 	bl	8017c5c <ucdr_deserialize_uint8_t>
 8014540:	1c79      	adds	r1, r7, #1
 8014542:	4605      	mov	r5, r0
 8014544:	4630      	mov	r0, r6
 8014546:	f003 fb89 	bl	8017c5c <ucdr_deserialize_uint8_t>
 801454a:	1d39      	adds	r1, r7, #4
 801454c:	4681      	mov	r9, r0
 801454e:	2204      	movs	r2, #4
 8014550:	4630      	mov	r0, r6
 8014552:	f003 fad9 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014556:	f107 0108 	add.w	r1, r7, #8
 801455a:	4604      	mov	r4, r0
 801455c:	2202      	movs	r2, #2
 801455e:	4630      	mov	r0, r6
 8014560:	f003 fad2 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014564:	f107 010a 	add.w	r1, r7, #10
 8014568:	4680      	mov	r8, r0
 801456a:	2202      	movs	r2, #2
 801456c:	4630      	mov	r0, r6
 801456e:	f003 facb 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014572:	ea05 0509 	and.w	r5, r5, r9
 8014576:	b2ed      	uxtb	r5, r5
 8014578:	402c      	ands	r4, r5
 801457a:	f107 010c 	add.w	r1, r7, #12
 801457e:	4605      	mov	r5, r0
 8014580:	4630      	mov	r0, r6
 8014582:	f003 fb3b 	bl	8017bfc <ucdr_deserialize_bool>
 8014586:	ea08 0404 	and.w	r4, r8, r4
 801458a:	4025      	ands	r5, r4
 801458c:	4028      	ands	r0, r5
 801458e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014592:	bf00      	nop

08014594 <uxr_deserialize_STATUS_Payload>:
 8014594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014598:	2202      	movs	r2, #2
 801459a:	4606      	mov	r6, r0
 801459c:	460f      	mov	r7, r1
 801459e:	f003 fab3 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 80145a2:	2202      	movs	r2, #2
 80145a4:	1cb9      	adds	r1, r7, #2
 80145a6:	4605      	mov	r5, r0
 80145a8:	4630      	mov	r0, r6
 80145aa:	f003 faad 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 80145ae:	1d39      	adds	r1, r7, #4
 80145b0:	4680      	mov	r8, r0
 80145b2:	4630      	mov	r0, r6
 80145b4:	f003 fb52 	bl	8017c5c <ucdr_deserialize_uint8_t>
 80145b8:	1d79      	adds	r1, r7, #5
 80145ba:	4604      	mov	r4, r0
 80145bc:	4630      	mov	r0, r6
 80145be:	f003 fb4d 	bl	8017c5c <ucdr_deserialize_uint8_t>
 80145c2:	ea05 0508 	and.w	r5, r5, r8
 80145c6:	402c      	ands	r4, r5
 80145c8:	4020      	ands	r0, r4
 80145ca:	b2c0      	uxtb	r0, r0
 80145cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080145d0 <uxr_serialize_INFO_Payload>:
 80145d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145d4:	2202      	movs	r2, #2
 80145d6:	460c      	mov	r4, r1
 80145d8:	4605      	mov	r5, r0
 80145da:	f003 fa31 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80145de:	2202      	movs	r2, #2
 80145e0:	4680      	mov	r8, r0
 80145e2:	1ca1      	adds	r1, r4, #2
 80145e4:	4628      	mov	r0, r5
 80145e6:	f003 fa2b 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80145ea:	7921      	ldrb	r1, [r4, #4]
 80145ec:	4607      	mov	r7, r0
 80145ee:	4628      	mov	r0, r5
 80145f0:	f003 fb1e 	bl	8017c30 <ucdr_serialize_uint8_t>
 80145f4:	7961      	ldrb	r1, [r4, #5]
 80145f6:	4606      	mov	r6, r0
 80145f8:	4628      	mov	r0, r5
 80145fa:	f003 fb19 	bl	8017c30 <ucdr_serialize_uint8_t>
 80145fe:	ea08 0807 	and.w	r8, r8, r7
 8014602:	ea06 0608 	and.w	r6, r6, r8
 8014606:	4006      	ands	r6, r0
 8014608:	7a21      	ldrb	r1, [r4, #8]
 801460a:	4628      	mov	r0, r5
 801460c:	f003 fae0 	bl	8017bd0 <ucdr_serialize_bool>
 8014610:	7a23      	ldrb	r3, [r4, #8]
 8014612:	b2f7      	uxtb	r7, r6
 8014614:	4606      	mov	r6, r0
 8014616:	b96b      	cbnz	r3, 8014634 <uxr_serialize_INFO_Payload+0x64>
 8014618:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801461c:	4628      	mov	r0, r5
 801461e:	f003 fad7 	bl	8017bd0 <ucdr_serialize_bool>
 8014622:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8014626:	4030      	ands	r0, r6
 8014628:	b2c6      	uxtb	r6, r0
 801462a:	b983      	cbnz	r3, 801464e <uxr_serialize_INFO_Payload+0x7e>
 801462c:	ea06 0007 	and.w	r0, r6, r7
 8014630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014634:	7b21      	ldrb	r1, [r4, #12]
 8014636:	4628      	mov	r0, r5
 8014638:	f003 fafa 	bl	8017c30 <ucdr_serialize_uint8_t>
 801463c:	b188      	cbz	r0, 8014662 <uxr_serialize_INFO_Payload+0x92>
 801463e:	f104 010c 	add.w	r1, r4, #12
 8014642:	4628      	mov	r0, r5
 8014644:	f7ff fa06 	bl	8013a54 <uxr_serialize_ObjectVariant.part.0>
 8014648:	4030      	ands	r0, r6
 801464a:	b2c6      	uxtb	r6, r0
 801464c:	e7e4      	b.n	8014618 <uxr_serialize_INFO_Payload+0x48>
 801464e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8014652:	4628      	mov	r0, r5
 8014654:	f7ff fe24 	bl	80142a0 <uxr_serialize_ActivityInfoVariant>
 8014658:	4006      	ands	r6, r0
 801465a:	ea06 0007 	and.w	r0, r6, r7
 801465e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014662:	4606      	mov	r6, r0
 8014664:	e7d8      	b.n	8014618 <uxr_serialize_INFO_Payload+0x48>
 8014666:	bf00      	nop

08014668 <uxr_serialize_READ_DATA_Payload>:
 8014668:	b570      	push	{r4, r5, r6, lr}
 801466a:	2202      	movs	r2, #2
 801466c:	4605      	mov	r5, r0
 801466e:	460e      	mov	r6, r1
 8014670:	f003 f9e6 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8014674:	1cb1      	adds	r1, r6, #2
 8014676:	2202      	movs	r2, #2
 8014678:	4604      	mov	r4, r0
 801467a:	4628      	mov	r0, r5
 801467c:	f003 f9e0 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 8014680:	1d31      	adds	r1, r6, #4
 8014682:	4004      	ands	r4, r0
 8014684:	4628      	mov	r0, r5
 8014686:	f7ff fe55 	bl	8014334 <uxr_serialize_ReadSpecification>
 801468a:	b2e4      	uxtb	r4, r4
 801468c:	4020      	ands	r0, r4
 801468e:	bd70      	pop	{r4, r5, r6, pc}

08014690 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014690:	b570      	push	{r4, r5, r6, lr}
 8014692:	2202      	movs	r2, #2
 8014694:	4605      	mov	r5, r0
 8014696:	460e      	mov	r6, r1
 8014698:	f003 f9d2 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 801469c:	1cb1      	adds	r1, r6, #2
 801469e:	4604      	mov	r4, r0
 80146a0:	2202      	movs	r2, #2
 80146a2:	4628      	mov	r0, r5
 80146a4:	f003 f9cc 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80146a8:	4020      	ands	r0, r4
 80146aa:	b2c0      	uxtb	r0, r0
 80146ac:	bd70      	pop	{r4, r5, r6, pc}
 80146ae:	bf00      	nop

080146b0 <uxr_serialize_ACKNACK_Payload>:
 80146b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146b2:	460f      	mov	r7, r1
 80146b4:	460e      	mov	r6, r1
 80146b6:	f837 1b02 	ldrh.w	r1, [r7], #2
 80146ba:	4605      	mov	r5, r0
 80146bc:	f003 fae4 	bl	8017c88 <ucdr_serialize_uint16_t>
 80146c0:	4639      	mov	r1, r7
 80146c2:	2202      	movs	r2, #2
 80146c4:	4604      	mov	r4, r0
 80146c6:	4628      	mov	r0, r5
 80146c8:	f003 f9ba 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80146cc:	7931      	ldrb	r1, [r6, #4]
 80146ce:	4004      	ands	r4, r0
 80146d0:	4628      	mov	r0, r5
 80146d2:	f003 faad 	bl	8017c30 <ucdr_serialize_uint8_t>
 80146d6:	b2e4      	uxtb	r4, r4
 80146d8:	4020      	ands	r0, r4
 80146da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080146dc <uxr_deserialize_ACKNACK_Payload>:
 80146dc:	b570      	push	{r4, r5, r6, lr}
 80146de:	4605      	mov	r5, r0
 80146e0:	460e      	mov	r6, r1
 80146e2:	f003 fbd1 	bl	8017e88 <ucdr_deserialize_uint16_t>
 80146e6:	1cb1      	adds	r1, r6, #2
 80146e8:	2202      	movs	r2, #2
 80146ea:	4604      	mov	r4, r0
 80146ec:	4628      	mov	r0, r5
 80146ee:	f003 fa0b 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 80146f2:	1d31      	adds	r1, r6, #4
 80146f4:	4004      	ands	r4, r0
 80146f6:	4628      	mov	r0, r5
 80146f8:	f003 fab0 	bl	8017c5c <ucdr_deserialize_uint8_t>
 80146fc:	b2e4      	uxtb	r4, r4
 80146fe:	4020      	ands	r0, r4
 8014700:	bd70      	pop	{r4, r5, r6, pc}
 8014702:	bf00      	nop

08014704 <uxr_serialize_HEARTBEAT_Payload>:
 8014704:	b570      	push	{r4, r5, r6, lr}
 8014706:	460d      	mov	r5, r1
 8014708:	8809      	ldrh	r1, [r1, #0]
 801470a:	4606      	mov	r6, r0
 801470c:	f003 fabc 	bl	8017c88 <ucdr_serialize_uint16_t>
 8014710:	8869      	ldrh	r1, [r5, #2]
 8014712:	4604      	mov	r4, r0
 8014714:	4630      	mov	r0, r6
 8014716:	f003 fab7 	bl	8017c88 <ucdr_serialize_uint16_t>
 801471a:	7929      	ldrb	r1, [r5, #4]
 801471c:	4004      	ands	r4, r0
 801471e:	4630      	mov	r0, r6
 8014720:	f003 fa86 	bl	8017c30 <ucdr_serialize_uint8_t>
 8014724:	b2e4      	uxtb	r4, r4
 8014726:	4020      	ands	r0, r4
 8014728:	bd70      	pop	{r4, r5, r6, pc}
 801472a:	bf00      	nop

0801472c <uxr_deserialize_HEARTBEAT_Payload>:
 801472c:	b570      	push	{r4, r5, r6, lr}
 801472e:	4605      	mov	r5, r0
 8014730:	460e      	mov	r6, r1
 8014732:	f003 fba9 	bl	8017e88 <ucdr_deserialize_uint16_t>
 8014736:	1cb1      	adds	r1, r6, #2
 8014738:	4604      	mov	r4, r0
 801473a:	4628      	mov	r0, r5
 801473c:	f003 fba4 	bl	8017e88 <ucdr_deserialize_uint16_t>
 8014740:	1d31      	adds	r1, r6, #4
 8014742:	4004      	ands	r4, r0
 8014744:	4628      	mov	r0, r5
 8014746:	f003 fa89 	bl	8017c5c <ucdr_deserialize_uint8_t>
 801474a:	b2e4      	uxtb	r4, r4
 801474c:	4020      	ands	r0, r4
 801474e:	bd70      	pop	{r4, r5, r6, pc}

08014750 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014754:	4605      	mov	r5, r0
 8014756:	460e      	mov	r6, r1
 8014758:	f004 f932 	bl	80189c0 <ucdr_deserialize_int32_t>
 801475c:	1d31      	adds	r1, r6, #4
 801475e:	4607      	mov	r7, r0
 8014760:	4628      	mov	r0, r5
 8014762:	f003 fdab 	bl	80182bc <ucdr_deserialize_uint32_t>
 8014766:	f106 0108 	add.w	r1, r6, #8
 801476a:	4680      	mov	r8, r0
 801476c:	4628      	mov	r0, r5
 801476e:	f004 f927 	bl	80189c0 <ucdr_deserialize_int32_t>
 8014772:	f106 010c 	add.w	r1, r6, #12
 8014776:	4604      	mov	r4, r0
 8014778:	4628      	mov	r0, r5
 801477a:	f003 fd9f 	bl	80182bc <ucdr_deserialize_uint32_t>
 801477e:	ea07 0708 	and.w	r7, r7, r8
 8014782:	403c      	ands	r4, r7
 8014784:	f106 0110 	add.w	r1, r6, #16
 8014788:	4004      	ands	r4, r0
 801478a:	4628      	mov	r0, r5
 801478c:	f004 f918 	bl	80189c0 <ucdr_deserialize_int32_t>
 8014790:	f106 0114 	add.w	r1, r6, #20
 8014794:	4603      	mov	r3, r0
 8014796:	4628      	mov	r0, r5
 8014798:	461d      	mov	r5, r3
 801479a:	f003 fd8f 	bl	80182bc <ucdr_deserialize_uint32_t>
 801479e:	b2e4      	uxtb	r4, r4
 80147a0:	402c      	ands	r4, r5
 80147a2:	4020      	ands	r0, r4
 80147a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080147a8 <uxr_serialize_SampleIdentity>:
 80147a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147ac:	220c      	movs	r2, #12
 80147ae:	4604      	mov	r4, r0
 80147b0:	460d      	mov	r5, r1
 80147b2:	f003 f945 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80147b6:	2203      	movs	r2, #3
 80147b8:	f105 010c 	add.w	r1, r5, #12
 80147bc:	4607      	mov	r7, r0
 80147be:	4620      	mov	r0, r4
 80147c0:	f003 f93e 	bl	8017a40 <ucdr_serialize_array_uint8_t>
 80147c4:	7be9      	ldrb	r1, [r5, #15]
 80147c6:	4680      	mov	r8, r0
 80147c8:	4620      	mov	r0, r4
 80147ca:	f003 fa31 	bl	8017c30 <ucdr_serialize_uint8_t>
 80147ce:	6929      	ldr	r1, [r5, #16]
 80147d0:	4606      	mov	r6, r0
 80147d2:	4620      	mov	r0, r4
 80147d4:	f004 f85c 	bl	8018890 <ucdr_serialize_int32_t>
 80147d8:	6969      	ldr	r1, [r5, #20]
 80147da:	4603      	mov	r3, r0
 80147dc:	4620      	mov	r0, r4
 80147de:	ea07 0708 	and.w	r7, r7, r8
 80147e2:	461c      	mov	r4, r3
 80147e4:	f003 fc3a 	bl	801805c <ucdr_serialize_uint32_t>
 80147e8:	403e      	ands	r6, r7
 80147ea:	4034      	ands	r4, r6
 80147ec:	4020      	ands	r0, r4
 80147ee:	b2c0      	uxtb	r0, r0
 80147f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080147f4 <uxr_deserialize_SampleIdentity>:
 80147f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f8:	220c      	movs	r2, #12
 80147fa:	4604      	mov	r4, r0
 80147fc:	460d      	mov	r5, r1
 80147fe:	f003 f983 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014802:	2203      	movs	r2, #3
 8014804:	f105 010c 	add.w	r1, r5, #12
 8014808:	4607      	mov	r7, r0
 801480a:	4620      	mov	r0, r4
 801480c:	f003 f97c 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8014810:	f105 010f 	add.w	r1, r5, #15
 8014814:	4680      	mov	r8, r0
 8014816:	4620      	mov	r0, r4
 8014818:	f003 fa20 	bl	8017c5c <ucdr_deserialize_uint8_t>
 801481c:	f105 0110 	add.w	r1, r5, #16
 8014820:	4606      	mov	r6, r0
 8014822:	4620      	mov	r0, r4
 8014824:	f004 f8cc 	bl	80189c0 <ucdr_deserialize_int32_t>
 8014828:	f105 0114 	add.w	r1, r5, #20
 801482c:	4603      	mov	r3, r0
 801482e:	4620      	mov	r0, r4
 8014830:	ea07 0708 	and.w	r7, r7, r8
 8014834:	461c      	mov	r4, r3
 8014836:	f003 fd41 	bl	80182bc <ucdr_deserialize_uint32_t>
 801483a:	403e      	ands	r6, r7
 801483c:	4034      	ands	r4, r6
 801483e:	4020      	ands	r0, r4
 8014840:	b2c0      	uxtb	r0, r0
 8014842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014846:	bf00      	nop

08014848 <rcl_client_get_rmw_handle>:
 8014848:	b110      	cbz	r0, 8014850 <rcl_client_get_rmw_handle+0x8>
 801484a:	6800      	ldr	r0, [r0, #0]
 801484c:	b100      	cbz	r0, 8014850 <rcl_client_get_rmw_handle+0x8>
 801484e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014850:	4770      	bx	lr
 8014852:	bf00      	nop

08014854 <rcl_take_response>:
 8014854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014856:	460e      	mov	r6, r1
 8014858:	460c      	mov	r4, r1
 801485a:	4607      	mov	r7, r0
 801485c:	4694      	mov	ip, r2
 801485e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014860:	b08d      	sub	sp, #52	; 0x34
 8014862:	ad06      	add	r5, sp, #24
 8014864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014866:	e896 0003 	ldmia.w	r6, {r0, r1}
 801486a:	e885 0003 	stmia.w	r5, {r0, r1}
 801486e:	b337      	cbz	r7, 80148be <rcl_take_response+0x6a>
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	b323      	cbz	r3, 80148be <rcl_take_response+0x6a>
 8014874:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8014876:	b310      	cbz	r0, 80148be <rcl_take_response+0x6a>
 8014878:	4662      	mov	r2, ip
 801487a:	b31a      	cbz	r2, 80148c4 <rcl_take_response+0x70>
 801487c:	2300      	movs	r3, #0
 801487e:	2600      	movs	r6, #0
 8014880:	2700      	movs	r7, #0
 8014882:	f88d 3007 	strb.w	r3, [sp, #7]
 8014886:	a902      	add	r1, sp, #8
 8014888:	f10d 0307 	add.w	r3, sp, #7
 801488c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014890:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014894:	f002 fe24 	bl	80174e0 <rmw_take_response>
 8014898:	4606      	mov	r6, r0
 801489a:	b9a8      	cbnz	r0, 80148c8 <rcl_take_response+0x74>
 801489c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80148a0:	f240 13f5 	movw	r3, #501	; 0x1f5
 80148a4:	2a00      	cmp	r2, #0
 80148a6:	bf08      	it	eq
 80148a8:	461e      	moveq	r6, r3
 80148aa:	ad06      	add	r5, sp, #24
 80148ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80148ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80148b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80148b8:	4630      	mov	r0, r6
 80148ba:	b00d      	add	sp, #52	; 0x34
 80148bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148be:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 80148c2:	e7f2      	b.n	80148aa <rcl_take_response+0x56>
 80148c4:	260b      	movs	r6, #11
 80148c6:	e7f0      	b.n	80148aa <rcl_take_response+0x56>
 80148c8:	2601      	movs	r6, #1
 80148ca:	e7ee      	b.n	80148aa <rcl_take_response+0x56>

080148cc <rcl_convert_rmw_ret_to_rcl_ret>:
 80148cc:	280b      	cmp	r0, #11
 80148ce:	dc0d      	bgt.n	80148ec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80148d0:	2800      	cmp	r0, #0
 80148d2:	db09      	blt.n	80148e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80148d4:	280b      	cmp	r0, #11
 80148d6:	d807      	bhi.n	80148e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80148d8:	e8df f000 	tbb	[pc, r0]
 80148dc:	07060607 	.word	0x07060607
 80148e0:	06060606 	.word	0x06060606
 80148e4:	07070606 	.word	0x07070606
 80148e8:	2001      	movs	r0, #1
 80148ea:	4770      	bx	lr
 80148ec:	28cb      	cmp	r0, #203	; 0xcb
 80148ee:	bf18      	it	ne
 80148f0:	2001      	movne	r0, #1
 80148f2:	4770      	bx	lr

080148f4 <rcl_get_zero_initialized_context>:
 80148f4:	4a03      	ldr	r2, [pc, #12]	; (8014904 <rcl_get_zero_initialized_context+0x10>)
 80148f6:	4603      	mov	r3, r0
 80148f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8014900:	4618      	mov	r0, r3
 8014902:	4770      	bx	lr
 8014904:	0801edf0 	.word	0x0801edf0

08014908 <rcl_context_is_valid>:
 8014908:	b118      	cbz	r0, 8014912 <rcl_context_is_valid+0xa>
 801490a:	6840      	ldr	r0, [r0, #4]
 801490c:	3800      	subs	r0, #0
 801490e:	bf18      	it	ne
 8014910:	2001      	movne	r0, #1
 8014912:	4770      	bx	lr

08014914 <__cleanup_context>:
 8014914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014918:	4606      	mov	r6, r0
 801491a:	6800      	ldr	r0, [r0, #0]
 801491c:	2300      	movs	r3, #0
 801491e:	6073      	str	r3, [r6, #4]
 8014920:	2800      	cmp	r0, #0
 8014922:	d04d      	beq.n	80149c0 <__cleanup_context+0xac>
 8014924:	6947      	ldr	r7, [r0, #20]
 8014926:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801492a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801492e:	b137      	cbz	r7, 801493e <__cleanup_context+0x2a>
 8014930:	3014      	adds	r0, #20
 8014932:	f7f9 fe37 	bl	800e5a4 <rcl_init_options_fini>
 8014936:	4607      	mov	r7, r0
 8014938:	2800      	cmp	r0, #0
 801493a:	d148      	bne.n	80149ce <__cleanup_context+0xba>
 801493c:	6830      	ldr	r0, [r6, #0]
 801493e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014940:	b143      	cbz	r3, 8014954 <__cleanup_context+0x40>
 8014942:	3028      	adds	r0, #40	; 0x28
 8014944:	f7fb f972 	bl	800fc2c <rmw_context_fini>
 8014948:	b118      	cbz	r0, 8014952 <__cleanup_context+0x3e>
 801494a:	2f00      	cmp	r7, #0
 801494c:	d042      	beq.n	80149d4 <__cleanup_context+0xc0>
 801494e:	f7fa fd11 	bl	800f374 <rcutils_reset_error>
 8014952:	6830      	ldr	r0, [r6, #0]
 8014954:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8014958:	f1bc 0f00 	cmp.w	ip, #0
 801495c:	d01c      	beq.n	8014998 <__cleanup_context+0x84>
 801495e:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014962:	2a01      	cmp	r2, #1
 8014964:	f173 0100 	sbcs.w	r1, r3, #0
 8014968:	db12      	blt.n	8014990 <__cleanup_context+0x7c>
 801496a:	2400      	movs	r4, #0
 801496c:	2500      	movs	r5, #0
 801496e:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8014972:	4649      	mov	r1, r9
 8014974:	b1c0      	cbz	r0, 80149a8 <__cleanup_context+0x94>
 8014976:	47c0      	blx	r8
 8014978:	6831      	ldr	r1, [r6, #0]
 801497a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 801497e:	3401      	adds	r4, #1
 8014980:	f145 0500 	adc.w	r5, r5, #0
 8014984:	4294      	cmp	r4, r2
 8014986:	f8d1 c020 	ldr.w	ip, [r1, #32]
 801498a:	eb75 0103 	sbcs.w	r1, r5, r3
 801498e:	dbee      	blt.n	801496e <__cleanup_context+0x5a>
 8014990:	4660      	mov	r0, ip
 8014992:	4649      	mov	r1, r9
 8014994:	47c0      	blx	r8
 8014996:	6830      	ldr	r0, [r6, #0]
 8014998:	4649      	mov	r1, r9
 801499a:	47c0      	blx	r8
 801499c:	2300      	movs	r3, #0
 801499e:	e9c6 3300 	strd	r3, r3, [r6]
 80149a2:	4638      	mov	r0, r7
 80149a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149a8:	3401      	adds	r4, #1
 80149aa:	f145 0500 	adc.w	r5, r5, #0
 80149ae:	4294      	cmp	r4, r2
 80149b0:	eb75 0103 	sbcs.w	r1, r5, r3
 80149b4:	dbdb      	blt.n	801496e <__cleanup_context+0x5a>
 80149b6:	4660      	mov	r0, ip
 80149b8:	4649      	mov	r1, r9
 80149ba:	47c0      	blx	r8
 80149bc:	6830      	ldr	r0, [r6, #0]
 80149be:	e7eb      	b.n	8014998 <__cleanup_context+0x84>
 80149c0:	4607      	mov	r7, r0
 80149c2:	2300      	movs	r3, #0
 80149c4:	e9c6 3300 	strd	r3, r3, [r6]
 80149c8:	4638      	mov	r0, r7
 80149ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ce:	f7fa fcd1 	bl	800f374 <rcutils_reset_error>
 80149d2:	e7b3      	b.n	801493c <__cleanup_context+0x28>
 80149d4:	f7ff ff7a 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 80149d8:	4607      	mov	r7, r0
 80149da:	e7b8      	b.n	801494e <__cleanup_context+0x3a>

080149dc <rcl_expand_topic_name>:
 80149dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e0:	b08b      	sub	sp, #44	; 0x2c
 80149e2:	9306      	str	r3, [sp, #24]
 80149e4:	2800      	cmp	r0, #0
 80149e6:	f000 80d2 	beq.w	8014b8e <rcl_expand_topic_name+0x1b2>
 80149ea:	460e      	mov	r6, r1
 80149ec:	2900      	cmp	r1, #0
 80149ee:	f000 80ce 	beq.w	8014b8e <rcl_expand_topic_name+0x1b2>
 80149f2:	4617      	mov	r7, r2
 80149f4:	2a00      	cmp	r2, #0
 80149f6:	f000 80ca 	beq.w	8014b8e <rcl_expand_topic_name+0x1b2>
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	f000 80c7 	beq.w	8014b8e <rcl_expand_topic_name+0x1b2>
 8014a00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	f000 80c3 	beq.w	8014b8e <rcl_expand_topic_name+0x1b2>
 8014a08:	a909      	add	r1, sp, #36	; 0x24
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	4680      	mov	r8, r0
 8014a0e:	f001 f8f5 	bl	8015bfc <rcl_validate_topic_name>
 8014a12:	4604      	mov	r4, r0
 8014a14:	2800      	cmp	r0, #0
 8014a16:	f040 80b6 	bne.w	8014b86 <rcl_expand_topic_name+0x1aa>
 8014a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	f040 80bf 	bne.w	8014ba0 <rcl_expand_topic_name+0x1c4>
 8014a22:	4602      	mov	r2, r0
 8014a24:	a909      	add	r1, sp, #36	; 0x24
 8014a26:	4630      	mov	r0, r6
 8014a28:	f002 fa6a 	bl	8016f00 <rmw_validate_node_name>
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	f040 80b3 	bne.w	8014b98 <rcl_expand_topic_name+0x1bc>
 8014a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a34:	2a00      	cmp	r2, #0
 8014a36:	f040 80b8 	bne.w	8014baa <rcl_expand_topic_name+0x1ce>
 8014a3a:	a909      	add	r1, sp, #36	; 0x24
 8014a3c:	4638      	mov	r0, r7
 8014a3e:	f002 fa41 	bl	8016ec4 <rmw_validate_namespace>
 8014a42:	2800      	cmp	r0, #0
 8014a44:	f040 80a8 	bne.w	8014b98 <rcl_expand_topic_name+0x1bc>
 8014a48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014a4a:	2c00      	cmp	r4, #0
 8014a4c:	f040 80f6 	bne.w	8014c3c <rcl_expand_topic_name+0x260>
 8014a50:	217b      	movs	r1, #123	; 0x7b
 8014a52:	4640      	mov	r0, r8
 8014a54:	f006 f9e7 	bl	801ae26 <strchr>
 8014a58:	f898 3000 	ldrb.w	r3, [r8]
 8014a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8014a5e:	4605      	mov	r5, r0
 8014a60:	f000 80c4 	beq.w	8014bec <rcl_expand_topic_name+0x210>
 8014a64:	2b7e      	cmp	r3, #126	; 0x7e
 8014a66:	d16f      	bne.n	8014b48 <rcl_expand_topic_name+0x16c>
 8014a68:	4638      	mov	r0, r7
 8014a6a:	f7eb fbc3 	bl	80001f4 <strlen>
 8014a6e:	4b87      	ldr	r3, [pc, #540]	; (8014c8c <rcl_expand_topic_name+0x2b0>)
 8014a70:	4987      	ldr	r1, [pc, #540]	; (8014c90 <rcl_expand_topic_name+0x2b4>)
 8014a72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a74:	9604      	str	r6, [sp, #16]
 8014a76:	2801      	cmp	r0, #1
 8014a78:	bf0c      	ite	eq
 8014a7a:	4618      	moveq	r0, r3
 8014a7c:	4608      	movne	r0, r1
 8014a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a82:	e9cd 2300 	strd	r2, r3, [sp]
 8014a86:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014a8a:	f108 0101 	add.w	r1, r8, #1
 8014a8e:	9105      	str	r1, [sp, #20]
 8014a90:	ab14      	add	r3, sp, #80	; 0x50
 8014a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a94:	f002 f842 	bl	8016b1c <rcutils_format_string_limit>
 8014a98:	4682      	mov	sl, r0
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	f000 80d0 	beq.w	8014c40 <rcl_expand_topic_name+0x264>
 8014aa0:	2d00      	cmp	r5, #0
 8014aa2:	f000 80aa 	beq.w	8014bfa <rcl_expand_topic_name+0x21e>
 8014aa6:	217b      	movs	r1, #123	; 0x7b
 8014aa8:	f006 f9bd 	bl	801ae26 <strchr>
 8014aac:	46d1      	mov	r9, sl
 8014aae:	4605      	mov	r5, r0
 8014ab0:	9407      	str	r4, [sp, #28]
 8014ab2:	46d3      	mov	fp, sl
 8014ab4:	464c      	mov	r4, r9
 8014ab6:	2d00      	cmp	r5, #0
 8014ab8:	f000 80c7 	beq.w	8014c4a <rcl_expand_topic_name+0x26e>
 8014abc:	217d      	movs	r1, #125	; 0x7d
 8014abe:	4620      	mov	r0, r4
 8014ac0:	f006 f9b1 	bl	801ae26 <strchr>
 8014ac4:	eba0 0905 	sub.w	r9, r0, r5
 8014ac8:	f109 0a01 	add.w	sl, r9, #1
 8014acc:	4871      	ldr	r0, [pc, #452]	; (8014c94 <rcl_expand_topic_name+0x2b8>)
 8014ace:	4652      	mov	r2, sl
 8014ad0:	4629      	mov	r1, r5
 8014ad2:	f006 f9bd 	bl	801ae50 <strncmp>
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	f000 808d 	beq.w	8014bf6 <rcl_expand_topic_name+0x21a>
 8014adc:	486e      	ldr	r0, [pc, #440]	; (8014c98 <rcl_expand_topic_name+0x2bc>)
 8014ade:	4652      	mov	r2, sl
 8014ae0:	4629      	mov	r1, r5
 8014ae2:	f006 f9b5 	bl	801ae50 <strncmp>
 8014ae6:	b130      	cbz	r0, 8014af6 <rcl_expand_topic_name+0x11a>
 8014ae8:	486c      	ldr	r0, [pc, #432]	; (8014c9c <rcl_expand_topic_name+0x2c0>)
 8014aea:	4652      	mov	r2, sl
 8014aec:	4629      	mov	r1, r5
 8014aee:	f006 f9af 	bl	801ae50 <strncmp>
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d15b      	bne.n	8014bae <rcl_expand_topic_name+0x1d2>
 8014af6:	46b9      	mov	r9, r7
 8014af8:	ab16      	add	r3, sp, #88	; 0x58
 8014afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014afe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b02:	ab14      	add	r3, sp, #80	; 0x50
 8014b04:	4628      	mov	r0, r5
 8014b06:	cb0c      	ldmia	r3, {r2, r3}
 8014b08:	4651      	mov	r1, sl
 8014b0a:	f002 f953 	bl	8016db4 <rcutils_strndup>
 8014b0e:	4605      	mov	r5, r0
 8014b10:	2800      	cmp	r0, #0
 8014b12:	f000 80a4 	beq.w	8014c5e <rcl_expand_topic_name+0x282>
 8014b16:	464a      	mov	r2, r9
 8014b18:	4620      	mov	r0, r4
 8014b1a:	ab14      	add	r3, sp, #80	; 0x50
 8014b1c:	4629      	mov	r1, r5
 8014b1e:	f002 f84f 	bl	8016bc0 <rcutils_repl_str>
 8014b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b26:	4604      	mov	r4, r0
 8014b28:	4628      	mov	r0, r5
 8014b2a:	4798      	blx	r3
 8014b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b30:	4658      	mov	r0, fp
 8014b32:	4798      	blx	r3
 8014b34:	2c00      	cmp	r4, #0
 8014b36:	f000 8083 	beq.w	8014c40 <rcl_expand_topic_name+0x264>
 8014b3a:	217b      	movs	r1, #123	; 0x7b
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f006 f972 	bl	801ae26 <strchr>
 8014b42:	46a3      	mov	fp, r4
 8014b44:	4605      	mov	r5, r0
 8014b46:	e7b6      	b.n	8014ab6 <rcl_expand_topic_name+0xda>
 8014b48:	2800      	cmp	r0, #0
 8014b4a:	d151      	bne.n	8014bf0 <rcl_expand_topic_name+0x214>
 8014b4c:	4638      	mov	r0, r7
 8014b4e:	f7eb fb51 	bl	80001f4 <strlen>
 8014b52:	4b53      	ldr	r3, [pc, #332]	; (8014ca0 <rcl_expand_topic_name+0x2c4>)
 8014b54:	4a53      	ldr	r2, [pc, #332]	; (8014ca4 <rcl_expand_topic_name+0x2c8>)
 8014b56:	f8cd 8010 	str.w	r8, [sp, #16]
 8014b5a:	2801      	cmp	r0, #1
 8014b5c:	bf0c      	ite	eq
 8014b5e:	4618      	moveq	r0, r3
 8014b60:	4610      	movne	r0, r2
 8014b62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b68:	e9cd 3200 	strd	r3, r2, [sp]
 8014b6c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014b70:	ab14      	add	r3, sp, #80	; 0x50
 8014b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014b74:	f001 ffd2 	bl	8016b1c <rcutils_format_string_limit>
 8014b78:	4682      	mov	sl, r0
 8014b7a:	4653      	mov	r3, sl
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d05f      	beq.n	8014c40 <rcl_expand_topic_name+0x264>
 8014b80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014b82:	f8c3 a000 	str.w	sl, [r3]
 8014b86:	4620      	mov	r0, r4
 8014b88:	b00b      	add	sp, #44	; 0x2c
 8014b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b8e:	240b      	movs	r4, #11
 8014b90:	4620      	mov	r0, r4
 8014b92:	b00b      	add	sp, #44	; 0x2c
 8014b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b98:	f7ff fe98 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 8014b9c:	4604      	mov	r4, r0
 8014b9e:	e7f2      	b.n	8014b86 <rcl_expand_topic_name+0x1aa>
 8014ba0:	2467      	movs	r4, #103	; 0x67
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	b00b      	add	sp, #44	; 0x2c
 8014ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014baa:	24c9      	movs	r4, #201	; 0xc9
 8014bac:	e7eb      	b.n	8014b86 <rcl_expand_topic_name+0x1aa>
 8014bae:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014bb2:	9806      	ldr	r0, [sp, #24]
 8014bb4:	1c69      	adds	r1, r5, #1
 8014bb6:	f7fa fcf3 	bl	800f5a0 <rcutils_string_map_getn>
 8014bba:	4681      	mov	r9, r0
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	d19b      	bne.n	8014af8 <rcl_expand_topic_name+0x11c>
 8014bc0:	aa16      	add	r2, sp, #88	; 0x58
 8014bc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8014bc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014bc6:	f8c3 9000 	str.w	r9, [r3]
 8014bca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014bce:	ab14      	add	r3, sp, #80	; 0x50
 8014bd0:	cb0c      	ldmia	r3, {r2, r3}
 8014bd2:	4651      	mov	r1, sl
 8014bd4:	4628      	mov	r0, r5
 8014bd6:	f002 f8ed 	bl	8016db4 <rcutils_strndup>
 8014bda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014bde:	4798      	blx	r3
 8014be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014be2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014be4:	4658      	mov	r0, fp
 8014be6:	4798      	blx	r3
 8014be8:	2469      	movs	r4, #105	; 0x69
 8014bea:	e7cc      	b.n	8014b86 <rcl_expand_topic_name+0x1aa>
 8014bec:	2800      	cmp	r0, #0
 8014bee:	d03e      	beq.n	8014c6e <rcl_expand_topic_name+0x292>
 8014bf0:	46c1      	mov	r9, r8
 8014bf2:	46a2      	mov	sl, r4
 8014bf4:	e75c      	b.n	8014ab0 <rcl_expand_topic_name+0xd4>
 8014bf6:	46b1      	mov	r9, r6
 8014bf8:	e77e      	b.n	8014af8 <rcl_expand_topic_name+0x11c>
 8014bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8014bfe:	2b2f      	cmp	r3, #47	; 0x2f
 8014c00:	d0be      	beq.n	8014b80 <rcl_expand_topic_name+0x1a4>
 8014c02:	4638      	mov	r0, r7
 8014c04:	f7eb faf6 	bl	80001f4 <strlen>
 8014c08:	4b25      	ldr	r3, [pc, #148]	; (8014ca0 <rcl_expand_topic_name+0x2c4>)
 8014c0a:	4926      	ldr	r1, [pc, #152]	; (8014ca4 <rcl_expand_topic_name+0x2c8>)
 8014c0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014c0e:	f8cd a010 	str.w	sl, [sp, #16]
 8014c12:	2801      	cmp	r0, #1
 8014c14:	bf0c      	ite	eq
 8014c16:	4618      	moveq	r0, r3
 8014c18:	4608      	movne	r0, r1
 8014c1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c1e:	e9cd 2300 	strd	r2, r3, [sp]
 8014c22:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014c26:	ab14      	add	r3, sp, #80	; 0x50
 8014c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c2a:	f001 ff77 	bl	8016b1c <rcutils_format_string_limit>
 8014c2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014c30:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c32:	4603      	mov	r3, r0
 8014c34:	4650      	mov	r0, sl
 8014c36:	469a      	mov	sl, r3
 8014c38:	4790      	blx	r2
 8014c3a:	e79e      	b.n	8014b7a <rcl_expand_topic_name+0x19e>
 8014c3c:	24ca      	movs	r4, #202	; 0xca
 8014c3e:	e7a2      	b.n	8014b86 <rcl_expand_topic_name+0x1aa>
 8014c40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014c42:	2300      	movs	r3, #0
 8014c44:	6013      	str	r3, [r2, #0]
 8014c46:	240a      	movs	r4, #10
 8014c48:	e79d      	b.n	8014b86 <rcl_expand_topic_name+0x1aa>
 8014c4a:	465b      	mov	r3, fp
 8014c4c:	9c07      	ldr	r4, [sp, #28]
 8014c4e:	46da      	mov	sl, fp
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d1d2      	bne.n	8014bfa <rcl_expand_topic_name+0x21e>
 8014c54:	f898 3000 	ldrb.w	r3, [r8]
 8014c58:	2b2f      	cmp	r3, #47	; 0x2f
 8014c5a:	d091      	beq.n	8014b80 <rcl_expand_topic_name+0x1a4>
 8014c5c:	e776      	b.n	8014b4c <rcl_expand_topic_name+0x170>
 8014c5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c60:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c62:	601d      	str	r5, [r3, #0]
 8014c64:	4658      	mov	r0, fp
 8014c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c68:	4798      	blx	r3
 8014c6a:	240a      	movs	r4, #10
 8014c6c:	e78b      	b.n	8014b86 <rcl_expand_topic_name+0x1aa>
 8014c6e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8014c72:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014c76:	ab14      	add	r3, sp, #80	; 0x50
 8014c78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014c7a:	4640      	mov	r0, r8
 8014c7c:	f002 f878 	bl	8016d70 <rcutils_strdup>
 8014c80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c82:	2800      	cmp	r0, #0
 8014c84:	bf08      	it	eq
 8014c86:	240a      	moveq	r4, #10
 8014c88:	6018      	str	r0, [r3, #0]
 8014c8a:	e77c      	b.n	8014b86 <rcl_expand_topic_name+0x1aa>
 8014c8c:	0801ebbc 	.word	0x0801ebbc
 8014c90:	0801edf8 	.word	0x0801edf8
 8014c94:	0801ee00 	.word	0x0801ee00
 8014c98:	0801ee08 	.word	0x0801ee08
 8014c9c:	0801ee10 	.word	0x0801ee10
 8014ca0:	0801ebcc 	.word	0x0801ebcc
 8014ca4:	0801eb84 	.word	0x0801eb84

08014ca8 <rcl_get_default_topic_name_substitutions>:
 8014ca8:	2800      	cmp	r0, #0
 8014caa:	bf0c      	ite	eq
 8014cac:	200b      	moveq	r0, #11
 8014cae:	2000      	movne	r0, #0
 8014cb0:	4770      	bx	lr
 8014cb2:	bf00      	nop

08014cb4 <rcl_init>:
 8014cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb8:	1e07      	subs	r7, r0, #0
 8014cba:	b09f      	sub	sp, #124	; 0x7c
 8014cbc:	4688      	mov	r8, r1
 8014cbe:	4692      	mov	sl, r2
 8014cc0:	4699      	mov	r9, r3
 8014cc2:	f340 8097 	ble.w	8014df4 <rcl_init+0x140>
 8014cc6:	2900      	cmp	r1, #0
 8014cc8:	f000 8097 	beq.w	8014dfa <rcl_init+0x146>
 8014ccc:	1f0d      	subs	r5, r1, #4
 8014cce:	2400      	movs	r4, #0
 8014cd0:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8014cd4:	3401      	adds	r4, #1
 8014cd6:	2e00      	cmp	r6, #0
 8014cd8:	f000 808f 	beq.w	8014dfa <rcl_init+0x146>
 8014cdc:	42a7      	cmp	r7, r4
 8014cde:	d1f7      	bne.n	8014cd0 <rcl_init+0x1c>
 8014ce0:	f1ba 0f00 	cmp.w	sl, #0
 8014ce4:	f000 8089 	beq.w	8014dfa <rcl_init+0x146>
 8014ce8:	f8da 4000 	ldr.w	r4, [sl]
 8014cec:	2c00      	cmp	r4, #0
 8014cee:	f000 8084 	beq.w	8014dfa <rcl_init+0x146>
 8014cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cf4:	ad19      	add	r5, sp, #100	; 0x64
 8014cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014cf8:	6823      	ldr	r3, [r4, #0]
 8014cfa:	602b      	str	r3, [r5, #0]
 8014cfc:	a819      	add	r0, sp, #100	; 0x64
 8014cfe:	f7fa fb15 	bl	800f32c <rcutils_allocator_is_valid>
 8014d02:	2800      	cmp	r0, #0
 8014d04:	d079      	beq.n	8014dfa <rcl_init+0x146>
 8014d06:	f1b9 0f00 	cmp.w	r9, #0
 8014d0a:	d076      	beq.n	8014dfa <rcl_init+0x146>
 8014d0c:	f8d9 3000 	ldr.w	r3, [r9]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d177      	bne.n	8014e04 <rcl_init+0x150>
 8014d14:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014d18:	2178      	movs	r1, #120	; 0x78
 8014d1a:	2001      	movs	r0, #1
 8014d1c:	4798      	blx	r3
 8014d1e:	4604      	mov	r4, r0
 8014d20:	f8c9 0000 	str.w	r0, [r9]
 8014d24:	2800      	cmp	r0, #0
 8014d26:	f000 80ba 	beq.w	8014e9e <rcl_init+0x1ea>
 8014d2a:	a802      	add	r0, sp, #8
 8014d2c:	f002 f85e 	bl	8016dec <rmw_get_zero_initialized_context>
 8014d30:	a902      	add	r1, sp, #8
 8014d32:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014d36:	2250      	movs	r2, #80	; 0x50
 8014d38:	ac19      	add	r4, sp, #100	; 0x64
 8014d3a:	f004 febb 	bl	8019ab4 <memcpy>
 8014d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d40:	f8d9 5000 	ldr.w	r5, [r9]
 8014d44:	6826      	ldr	r6, [r4, #0]
 8014d46:	462c      	mov	r4, r5
 8014d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d4a:	f105 0114 	add.w	r1, r5, #20
 8014d4e:	6026      	str	r6, [r4, #0]
 8014d50:	4650      	mov	r0, sl
 8014d52:	f7f9 fc4b 	bl	800e5ec <rcl_init_options_copy>
 8014d56:	4606      	mov	r6, r0
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	d144      	bne.n	8014de6 <rcl_init+0x132>
 8014d5c:	f8d9 a000 	ldr.w	sl, [r9]
 8014d60:	463c      	mov	r4, r7
 8014d62:	17fd      	asrs	r5, r7, #31
 8014d64:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8014d68:	f8ca 0020 	str.w	r0, [sl, #32]
 8014d6c:	2f00      	cmp	r7, #0
 8014d6e:	d050      	beq.n	8014e12 <rcl_init+0x15e>
 8014d70:	f1b8 0f00 	cmp.w	r8, #0
 8014d74:	d04d      	beq.n	8014e12 <rcl_init+0x15e>
 8014d76:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014d7a:	4638      	mov	r0, r7
 8014d7c:	2104      	movs	r1, #4
 8014d7e:	4798      	blx	r3
 8014d80:	f8ca 0020 	str.w	r0, [sl, #32]
 8014d84:	f8d9 a000 	ldr.w	sl, [r9]
 8014d88:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014d8c:	46d3      	mov	fp, sl
 8014d8e:	b34b      	cbz	r3, 8014de4 <rcl_init+0x130>
 8014d90:	2f01      	cmp	r7, #1
 8014d92:	f175 0300 	sbcs.w	r3, r5, #0
 8014d96:	db3c      	blt.n	8014e12 <rcl_init+0x15e>
 8014d98:	f1a8 0804 	sub.w	r8, r8, #4
 8014d9c:	2600      	movs	r6, #0
 8014d9e:	2700      	movs	r7, #0
 8014da0:	e00c      	b.n	8014dbc <rcl_init+0x108>
 8014da2:	f8d8 1000 	ldr.w	r1, [r8]
 8014da6:	f004 fe85 	bl	8019ab4 <memcpy>
 8014daa:	3601      	adds	r6, #1
 8014dac:	f147 0700 	adc.w	r7, r7, #0
 8014db0:	42bd      	cmp	r5, r7
 8014db2:	bf08      	it	eq
 8014db4:	42b4      	cmpeq	r4, r6
 8014db6:	d02a      	beq.n	8014e0e <rcl_init+0x15a>
 8014db8:	f8d9 b000 	ldr.w	fp, [r9]
 8014dbc:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8014dc0:	f7eb fa18 	bl	80001f4 <strlen>
 8014dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014dc6:	991d      	ldr	r1, [sp, #116]	; 0x74
 8014dc8:	f8db a020 	ldr.w	sl, [fp, #32]
 8014dcc:	9001      	str	r0, [sp, #4]
 8014dce:	4798      	blx	r3
 8014dd0:	f8d9 1000 	ldr.w	r1, [r9]
 8014dd4:	9a01      	ldr	r2, [sp, #4]
 8014dd6:	6a09      	ldr	r1, [r1, #32]
 8014dd8:	00b3      	lsls	r3, r6, #2
 8014dda:	f84a 0003 	str.w	r0, [sl, r3]
 8014dde:	58c8      	ldr	r0, [r1, r3]
 8014de0:	2800      	cmp	r0, #0
 8014de2:	d1de      	bne.n	8014da2 <rcl_init+0xee>
 8014de4:	260a      	movs	r6, #10
 8014de6:	4648      	mov	r0, r9
 8014de8:	f7ff fd94 	bl	8014914 <__cleanup_context>
 8014dec:	4630      	mov	r0, r6
 8014dee:	b01f      	add	sp, #124	; 0x7c
 8014df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df4:	2900      	cmp	r1, #0
 8014df6:	f43f af73 	beq.w	8014ce0 <rcl_init+0x2c>
 8014dfa:	260b      	movs	r6, #11
 8014dfc:	4630      	mov	r0, r6
 8014dfe:	b01f      	add	sp, #124	; 0x7c
 8014e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e04:	2664      	movs	r6, #100	; 0x64
 8014e06:	4630      	mov	r0, r6
 8014e08:	b01f      	add	sp, #124	; 0x7c
 8014e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e0e:	f8d9 a000 	ldr.w	sl, [r9]
 8014e12:	4a2c      	ldr	r2, [pc, #176]	; (8014ec4 <rcl_init+0x210>)
 8014e14:	6813      	ldr	r3, [r2, #0]
 8014e16:	3301      	adds	r3, #1
 8014e18:	d03b      	beq.n	8014e92 <rcl_init+0x1de>
 8014e1a:	6013      	str	r3, [r2, #0]
 8014e1c:	4619      	mov	r1, r3
 8014e1e:	2000      	movs	r0, #0
 8014e20:	f8da 4014 	ldr.w	r4, [sl, #20]
 8014e24:	f8c9 3004 	str.w	r3, [r9, #4]
 8014e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8014e30:	d039      	beq.n	8014ea6 <rcl_init+0x1f2>
 8014e32:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014e36:	b94b      	cbnz	r3, 8014e4c <rcl_init+0x198>
 8014e38:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8014e3c:	f000 f844 	bl	8014ec8 <rcl_get_localhost_only>
 8014e40:	4606      	mov	r6, r0
 8014e42:	2800      	cmp	r0, #0
 8014e44:	d1cf      	bne.n	8014de6 <rcl_init+0x132>
 8014e46:	f8d9 3000 	ldr.w	r3, [r9]
 8014e4a:	695c      	ldr	r4, [r3, #20]
 8014e4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014e4e:	aa18      	add	r2, sp, #96	; 0x60
 8014e50:	a917      	add	r1, sp, #92	; 0x5c
 8014e52:	f000 fec1 	bl	8015bd8 <rcl_validate_enclave_name>
 8014e56:	4606      	mov	r6, r0
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	d1c4      	bne.n	8014de6 <rcl_init+0x132>
 8014e5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e5e:	bb03      	cbnz	r3, 8014ea2 <rcl_init+0x1ee>
 8014e60:	f8d9 1000 	ldr.w	r1, [r9]
 8014e64:	694b      	ldr	r3, [r1, #20]
 8014e66:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014e68:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014e6c:	f000 fa9a 	bl	80153a4 <rcl_get_security_options_from_environment>
 8014e70:	4606      	mov	r6, r0
 8014e72:	2800      	cmp	r0, #0
 8014e74:	d1b7      	bne.n	8014de6 <rcl_init+0x132>
 8014e76:	f8d9 1000 	ldr.w	r1, [r9]
 8014e7a:	6948      	ldr	r0, [r1, #20]
 8014e7c:	3128      	adds	r1, #40	; 0x28
 8014e7e:	3018      	adds	r0, #24
 8014e80:	f7fa fd9c 	bl	800f9bc <rmw_init>
 8014e84:	4606      	mov	r6, r0
 8014e86:	2800      	cmp	r0, #0
 8014e88:	d0b8      	beq.n	8014dfc <rcl_init+0x148>
 8014e8a:	f7ff fd1f 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 8014e8e:	4606      	mov	r6, r0
 8014e90:	e7a9      	b.n	8014de6 <rcl_init+0x132>
 8014e92:	2401      	movs	r4, #1
 8014e94:	4618      	mov	r0, r3
 8014e96:	4621      	mov	r1, r4
 8014e98:	6014      	str	r4, [r2, #0]
 8014e9a:	4623      	mov	r3, r4
 8014e9c:	e7c0      	b.n	8014e20 <rcl_init+0x16c>
 8014e9e:	260a      	movs	r6, #10
 8014ea0:	e7ac      	b.n	8014dfc <rcl_init+0x148>
 8014ea2:	2601      	movs	r6, #1
 8014ea4:	e79f      	b.n	8014de6 <rcl_init+0x132>
 8014ea6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014eaa:	f004 fb77 	bl	801959c <rcl_get_default_domain_id>
 8014eae:	4606      	mov	r6, r0
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	d198      	bne.n	8014de6 <rcl_init+0x132>
 8014eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014eb6:	3301      	adds	r3, #1
 8014eb8:	f8d9 3000 	ldr.w	r3, [r9]
 8014ebc:	bf08      	it	eq
 8014ebe:	6260      	streq	r0, [r4, #36]	; 0x24
 8014ec0:	695c      	ldr	r4, [r3, #20]
 8014ec2:	e7b6      	b.n	8014e32 <rcl_init+0x17e>
 8014ec4:	20009e38 	.word	0x20009e38

08014ec8 <rcl_get_localhost_only>:
 8014ec8:	b510      	push	{r4, lr}
 8014eca:	b082      	sub	sp, #8
 8014ecc:	2300      	movs	r3, #0
 8014ece:	9301      	str	r3, [sp, #4]
 8014ed0:	b1b8      	cbz	r0, 8014f02 <rcl_get_localhost_only+0x3a>
 8014ed2:	4604      	mov	r4, r0
 8014ed4:	a901      	add	r1, sp, #4
 8014ed6:	480c      	ldr	r0, [pc, #48]	; (8014f08 <rcl_get_localhost_only+0x40>)
 8014ed8:	f001 fe5a 	bl	8016b90 <rcutils_get_env>
 8014edc:	b110      	cbz	r0, 8014ee4 <rcl_get_localhost_only+0x1c>
 8014ede:	2001      	movs	r0, #1
 8014ee0:	b002      	add	sp, #8
 8014ee2:	bd10      	pop	{r4, pc}
 8014ee4:	9b01      	ldr	r3, [sp, #4]
 8014ee6:	b113      	cbz	r3, 8014eee <rcl_get_localhost_only+0x26>
 8014ee8:	781a      	ldrb	r2, [r3, #0]
 8014eea:	2a31      	cmp	r2, #49	; 0x31
 8014eec:	d004      	beq.n	8014ef8 <rcl_get_localhost_only+0x30>
 8014eee:	2302      	movs	r3, #2
 8014ef0:	2000      	movs	r0, #0
 8014ef2:	7023      	strb	r3, [r4, #0]
 8014ef4:	b002      	add	sp, #8
 8014ef6:	bd10      	pop	{r4, pc}
 8014ef8:	785b      	ldrb	r3, [r3, #1]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d1f7      	bne.n	8014eee <rcl_get_localhost_only+0x26>
 8014efe:	2301      	movs	r3, #1
 8014f00:	e7f6      	b.n	8014ef0 <rcl_get_localhost_only+0x28>
 8014f02:	200b      	movs	r0, #11
 8014f04:	b002      	add	sp, #8
 8014f06:	bd10      	pop	{r4, pc}
 8014f08:	0801ee1c 	.word	0x0801ee1c

08014f0c <rcl_get_zero_initialized_node>:
 8014f0c:	4a03      	ldr	r2, [pc, #12]	; (8014f1c <rcl_get_zero_initialized_node+0x10>)
 8014f0e:	4603      	mov	r3, r0
 8014f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f14:	e883 0003 	stmia.w	r3, {r0, r1}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	4770      	bx	lr
 8014f1c:	0801ee38 	.word	0x0801ee38

08014f20 <rcl_node_init>:
 8014f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f24:	b09b      	sub	sp, #108	; 0x6c
 8014f26:	4604      	mov	r4, r0
 8014f28:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8014f2c:	f04f 0c00 	mov.w	ip, #0
 8014f30:	a815      	add	r0, sp, #84	; 0x54
 8014f32:	460e      	mov	r6, r1
 8014f34:	4615      	mov	r5, r2
 8014f36:	461f      	mov	r7, r3
 8014f38:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8014f3c:	f004 fbea 	bl	8019714 <rcl_guard_condition_get_default_options>
 8014f40:	f1b8 0f00 	cmp.w	r8, #0
 8014f44:	f000 80fd 	beq.w	8015142 <rcl_node_init+0x222>
 8014f48:	f108 0b04 	add.w	fp, r8, #4
 8014f4c:	4658      	mov	r0, fp
 8014f4e:	f7fa f9ed 	bl	800f32c <rcutils_allocator_is_valid>
 8014f52:	2800      	cmp	r0, #0
 8014f54:	f000 80f5 	beq.w	8015142 <rcl_node_init+0x222>
 8014f58:	2e00      	cmp	r6, #0
 8014f5a:	f000 80f2 	beq.w	8015142 <rcl_node_init+0x222>
 8014f5e:	2d00      	cmp	r5, #0
 8014f60:	f000 80ef 	beq.w	8015142 <rcl_node_init+0x222>
 8014f64:	2c00      	cmp	r4, #0
 8014f66:	f000 80ec 	beq.w	8015142 <rcl_node_init+0x222>
 8014f6a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014f6e:	f1b9 0f00 	cmp.w	r9, #0
 8014f72:	f040 8112 	bne.w	801519a <rcl_node_init+0x27a>
 8014f76:	2f00      	cmp	r7, #0
 8014f78:	f000 80e3 	beq.w	8015142 <rcl_node_init+0x222>
 8014f7c:	4638      	mov	r0, r7
 8014f7e:	f7ff fcc3 	bl	8014908 <rcl_context_is_valid>
 8014f82:	4682      	mov	sl, r0
 8014f84:	2800      	cmp	r0, #0
 8014f86:	f000 80e2 	beq.w	801514e <rcl_node_init+0x22e>
 8014f8a:	464a      	mov	r2, r9
 8014f8c:	a914      	add	r1, sp, #80	; 0x50
 8014f8e:	4630      	mov	r0, r6
 8014f90:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8014f94:	f001 ffb4 	bl	8016f00 <rmw_validate_node_name>
 8014f98:	4681      	mov	r9, r0
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	f040 80d3 	bne.w	8015146 <rcl_node_init+0x226>
 8014fa0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014fa2:	2800      	cmp	r0, #0
 8014fa4:	f040 8105 	bne.w	80151b2 <rcl_node_init+0x292>
 8014fa8:	4628      	mov	r0, r5
 8014faa:	f7eb f923 	bl	80001f4 <strlen>
 8014fae:	2800      	cmp	r0, #0
 8014fb0:	f040 80d0 	bne.w	8015154 <rcl_node_init+0x234>
 8014fb4:	4d8e      	ldr	r5, [pc, #568]	; (80151f0 <rcl_node_init+0x2d0>)
 8014fb6:	a914      	add	r1, sp, #80	; 0x50
 8014fb8:	2200      	movs	r2, #0
 8014fba:	4628      	mov	r0, r5
 8014fbc:	f001 ff82 	bl	8016ec4 <rmw_validate_namespace>
 8014fc0:	4681      	mov	r9, r0
 8014fc2:	2800      	cmp	r0, #0
 8014fc4:	f040 80bf 	bne.w	8015146 <rcl_node_init+0x226>
 8014fc8:	4682      	mov	sl, r0
 8014fca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	f040 80f5 	bne.w	80151bc <rcl_node_init+0x29c>
 8014fd2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8014fd6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014fda:	9307      	str	r3, [sp, #28]
 8014fdc:	2030      	movs	r0, #48	; 0x30
 8014fde:	4790      	blx	r2
 8014fe0:	4681      	mov	r9, r0
 8014fe2:	6060      	str	r0, [r4, #4]
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	f000 80de 	beq.w	80151a6 <rcl_node_init+0x286>
 8014fea:	9b07      	ldr	r3, [sp, #28]
 8014fec:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8014ff0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8014ff4:	a80a      	add	r0, sp, #40	; 0x28
 8014ff6:	f7f9 fba7 	bl	800e748 <rcl_node_get_default_options>
 8014ffa:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8014ffe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015002:	46cc      	mov	ip, r9
 8015004:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015008:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801500c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8015010:	6861      	ldr	r1, [r4, #4]
 8015012:	6027      	str	r7, [r4, #0]
 8015014:	4640      	mov	r0, r8
 8015016:	f7f9 fbb3 	bl	800e780 <rcl_node_options_copy>
 801501a:	2800      	cmp	r0, #0
 801501c:	d167      	bne.n	80150ee <rcl_node_init+0x1ce>
 801501e:	4628      	mov	r0, r5
 8015020:	f7eb f8e8 	bl	80001f4 <strlen>
 8015024:	4428      	add	r0, r5
 8015026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801502a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801502e:	2b2f      	cmp	r3, #47	; 0x2f
 8015030:	bf08      	it	eq
 8015032:	4970      	ldreq	r1, [pc, #448]	; (80151f4 <rcl_node_init+0x2d4>)
 8015034:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015038:	bf18      	it	ne
 801503a:	496f      	ldrne	r1, [pc, #444]	; (80151f8 <rcl_node_init+0x2d8>)
 801503c:	9604      	str	r6, [sp, #16]
 801503e:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8015042:	e9cd 3200 	strd	r3, r2, [sp]
 8015046:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801504a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801504e:	f001 fd65 	bl	8016b1c <rcutils_format_string_limit>
 8015052:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8015056:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801505a:	f8d9 3000 	ldr.w	r3, [r9]
 801505e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015060:	1c59      	adds	r1, r3, #1
 8015062:	f000 80b7 	beq.w	80151d4 <rcl_node_init+0x2b4>
 8015066:	683a      	ldr	r2, [r7, #0]
 8015068:	f8c9 301c 	str.w	r3, [r9, #28]
 801506c:	6952      	ldr	r2, [r2, #20]
 801506e:	6821      	ldr	r1, [r4, #0]
 8015070:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8015074:	6808      	ldr	r0, [r1, #0]
 8015076:	f1a2 0201 	sub.w	r2, r2, #1
 801507a:	fab2 f282 	clz	r2, r2
 801507e:	0952      	lsrs	r2, r2, #5
 8015080:	9200      	str	r2, [sp, #0]
 8015082:	4631      	mov	r1, r6
 8015084:	3028      	adds	r0, #40	; 0x28
 8015086:	462a      	mov	r2, r5
 8015088:	f7fa fe7c 	bl	800fd84 <rmw_create_node>
 801508c:	6863      	ldr	r3, [r4, #4]
 801508e:	f8c9 0020 	str.w	r0, [r9, #32]
 8015092:	6a18      	ldr	r0, [r3, #32]
 8015094:	b368      	cbz	r0, 80150f2 <rcl_node_init+0x1d2>
 8015096:	f7fa ff07 	bl	800fea8 <rmw_node_get_graph_guard_condition>
 801509a:	4681      	mov	r9, r0
 801509c:	b338      	cbz	r0, 80150ee <rcl_node_init+0x1ce>
 801509e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80150a2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80150a6:	6866      	ldr	r6, [r4, #4]
 80150a8:	2008      	movs	r0, #8
 80150aa:	4798      	blx	r3
 80150ac:	6863      	ldr	r3, [r4, #4]
 80150ae:	6270      	str	r0, [r6, #36]	; 0x24
 80150b0:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80150b2:	b1f6      	cbz	r6, 80150f2 <rcl_node_init+0x1d2>
 80150b4:	a808      	add	r0, sp, #32
 80150b6:	f004 faa5 	bl	8019604 <rcl_get_zero_initialized_guard_condition>
 80150ba:	a808      	add	r0, sp, #32
 80150bc:	c803      	ldmia	r0, {r0, r1}
 80150be:	e886 0003 	stmia.w	r6, {r0, r1}
 80150c2:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80150c6:	ae15      	add	r6, sp, #84	; 0x54
 80150c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150ca:	f8db 3000 	ldr.w	r3, [fp]
 80150ce:	6033      	str	r3, [r6, #0]
 80150d0:	ab1a      	add	r3, sp, #104	; 0x68
 80150d2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80150d6:	6866      	ldr	r6, [r4, #4]
 80150d8:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80150da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80150de:	4649      	mov	r1, r9
 80150e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150e2:	4630      	mov	r0, r6
 80150e4:	463a      	mov	r2, r7
 80150e6:	f004 fa97 	bl	8019618 <rcl_guard_condition_init_from_rmw>
 80150ea:	4681      	mov	r9, r0
 80150ec:	b328      	cbz	r0, 801513a <rcl_node_init+0x21a>
 80150ee:	6863      	ldr	r3, [r4, #4]
 80150f0:	b1f3      	cbz	r3, 8015130 <rcl_node_init+0x210>
 80150f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80150f4:	b128      	cbz	r0, 8015102 <rcl_node_init+0x1e2>
 80150f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80150fa:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80150fe:	4798      	blx	r3
 8015100:	6863      	ldr	r3, [r4, #4]
 8015102:	6a18      	ldr	r0, [r3, #32]
 8015104:	b110      	cbz	r0, 801510c <rcl_node_init+0x1ec>
 8015106:	f7fa fe55 	bl	800fdb4 <rmw_destroy_node>
 801510a:	6863      	ldr	r3, [r4, #4]
 801510c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801510e:	b148      	cbz	r0, 8015124 <rcl_node_init+0x204>
 8015110:	f004 fada 	bl	80196c8 <rcl_guard_condition_fini>
 8015114:	6862      	ldr	r2, [r4, #4]
 8015116:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801511a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 801511c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015120:	4798      	blx	r3
 8015122:	6863      	ldr	r3, [r4, #4]
 8015124:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015128:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801512c:	4618      	mov	r0, r3
 801512e:	4790      	blx	r2
 8015130:	2300      	movs	r3, #0
 8015132:	e9c4 3300 	strd	r3, r3, [r4]
 8015136:	f04f 0901 	mov.w	r9, #1
 801513a:	f1ba 0f00 	cmp.w	sl, #0
 801513e:	d125      	bne.n	801518c <rcl_node_init+0x26c>
 8015140:	e001      	b.n	8015146 <rcl_node_init+0x226>
 8015142:	f04f 090b 	mov.w	r9, #11
 8015146:	4648      	mov	r0, r9
 8015148:	b01b      	add	sp, #108	; 0x6c
 801514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801514e:	f04f 0965 	mov.w	r9, #101	; 0x65
 8015152:	e7f8      	b.n	8015146 <rcl_node_init+0x226>
 8015154:	782b      	ldrb	r3, [r5, #0]
 8015156:	2b2f      	cmp	r3, #47	; 0x2f
 8015158:	f43f af2d 	beq.w	8014fb6 <rcl_node_init+0x96>
 801515c:	4927      	ldr	r1, [pc, #156]	; (80151fc <rcl_node_init+0x2dc>)
 801515e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015162:	9300      	str	r3, [sp, #0]
 8015164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015168:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801516c:	9503      	str	r5, [sp, #12]
 801516e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015172:	f001 fcd3 	bl	8016b1c <rcutils_format_string_limit>
 8015176:	4605      	mov	r5, r0
 8015178:	b348      	cbz	r0, 80151ce <rcl_node_init+0x2ae>
 801517a:	2200      	movs	r2, #0
 801517c:	a914      	add	r1, sp, #80	; 0x50
 801517e:	9214      	str	r2, [sp, #80]	; 0x50
 8015180:	f001 fea0 	bl	8016ec4 <rmw_validate_namespace>
 8015184:	4681      	mov	r9, r0
 8015186:	2800      	cmp	r0, #0
 8015188:	f43f af1f 	beq.w	8014fca <rcl_node_init+0xaa>
 801518c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015190:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015194:	4628      	mov	r0, r5
 8015196:	4798      	blx	r3
 8015198:	e7d5      	b.n	8015146 <rcl_node_init+0x226>
 801519a:	f04f 0964 	mov.w	r9, #100	; 0x64
 801519e:	4648      	mov	r0, r9
 80151a0:	b01b      	add	sp, #108	; 0x6c
 80151a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151a6:	f04f 090a 	mov.w	r9, #10
 80151aa:	f1ba 0f00 	cmp.w	sl, #0
 80151ae:	d1ed      	bne.n	801518c <rcl_node_init+0x26c>
 80151b0:	e7c9      	b.n	8015146 <rcl_node_init+0x226>
 80151b2:	f001 fef7 	bl	8016fa4 <rmw_node_name_validation_result_string>
 80151b6:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 80151ba:	e7c4      	b.n	8015146 <rcl_node_init+0x226>
 80151bc:	4618      	mov	r0, r3
 80151be:	f001 fe93 	bl	8016ee8 <rmw_namespace_validation_result_string>
 80151c2:	f04f 09ca 	mov.w	r9, #202	; 0xca
 80151c6:	f1ba 0f00 	cmp.w	sl, #0
 80151ca:	d1df      	bne.n	801518c <rcl_node_init+0x26c>
 80151cc:	e7bb      	b.n	8015146 <rcl_node_init+0x226>
 80151ce:	f04f 090a 	mov.w	r9, #10
 80151d2:	e7b8      	b.n	8015146 <rcl_node_init+0x226>
 80151d4:	a813      	add	r0, sp, #76	; 0x4c
 80151d6:	f004 f9e1 	bl	801959c <rcl_get_default_domain_id>
 80151da:	2800      	cmp	r0, #0
 80151dc:	d187      	bne.n	80150ee <rcl_node_init+0x1ce>
 80151de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80151e0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80151e4:	1c5a      	adds	r2, r3, #1
 80151e6:	bf04      	itt	eq
 80151e8:	9013      	streq	r0, [sp, #76]	; 0x4c
 80151ea:	4603      	moveq	r3, r0
 80151ec:	e73b      	b.n	8015066 <rcl_node_init+0x146>
 80151ee:	bf00      	nop
 80151f0:	0801eb80 	.word	0x0801eb80
 80151f4:	0801ebcc 	.word	0x0801ebcc
 80151f8:	0801eb84 	.word	0x0801eb84
 80151fc:	0801ee34 	.word	0x0801ee34

08015200 <rcl_node_is_valid>:
 8015200:	b130      	cbz	r0, 8015210 <rcl_node_is_valid+0x10>
 8015202:	6843      	ldr	r3, [r0, #4]
 8015204:	b123      	cbz	r3, 8015210 <rcl_node_is_valid+0x10>
 8015206:	6a1b      	ldr	r3, [r3, #32]
 8015208:	b113      	cbz	r3, 8015210 <rcl_node_is_valid+0x10>
 801520a:	6800      	ldr	r0, [r0, #0]
 801520c:	f7ff bb7c 	b.w	8014908 <rcl_context_is_valid>
 8015210:	2000      	movs	r0, #0
 8015212:	4770      	bx	lr

08015214 <rcl_node_get_name>:
 8015214:	b120      	cbz	r0, 8015220 <rcl_node_get_name+0xc>
 8015216:	6840      	ldr	r0, [r0, #4]
 8015218:	b110      	cbz	r0, 8015220 <rcl_node_get_name+0xc>
 801521a:	6a00      	ldr	r0, [r0, #32]
 801521c:	b100      	cbz	r0, 8015220 <rcl_node_get_name+0xc>
 801521e:	6880      	ldr	r0, [r0, #8]
 8015220:	4770      	bx	lr
 8015222:	bf00      	nop

08015224 <rcl_node_get_namespace>:
 8015224:	b120      	cbz	r0, 8015230 <rcl_node_get_namespace+0xc>
 8015226:	6840      	ldr	r0, [r0, #4]
 8015228:	b110      	cbz	r0, 8015230 <rcl_node_get_namespace+0xc>
 801522a:	6a00      	ldr	r0, [r0, #32]
 801522c:	b100      	cbz	r0, 8015230 <rcl_node_get_namespace+0xc>
 801522e:	68c0      	ldr	r0, [r0, #12]
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop

08015234 <rcl_node_get_options>:
 8015234:	b128      	cbz	r0, 8015242 <rcl_node_get_options+0xe>
 8015236:	6840      	ldr	r0, [r0, #4]
 8015238:	b118      	cbz	r0, 8015242 <rcl_node_get_options+0xe>
 801523a:	6a03      	ldr	r3, [r0, #32]
 801523c:	2b00      	cmp	r3, #0
 801523e:	bf08      	it	eq
 8015240:	2000      	moveq	r0, #0
 8015242:	4770      	bx	lr

08015244 <rcl_node_get_rmw_handle>:
 8015244:	b110      	cbz	r0, 801524c <rcl_node_get_rmw_handle+0x8>
 8015246:	6840      	ldr	r0, [r0, #4]
 8015248:	b100      	cbz	r0, 801524c <rcl_node_get_rmw_handle+0x8>
 801524a:	6a00      	ldr	r0, [r0, #32]
 801524c:	4770      	bx	lr
 801524e:	bf00      	nop

08015250 <exact_match_lookup>:
 8015250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015252:	f102 0708 	add.w	r7, r2, #8
 8015256:	460b      	mov	r3, r1
 8015258:	4614      	mov	r4, r2
 801525a:	4606      	mov	r6, r0
 801525c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015260:	b085      	sub	sp, #20
 8015262:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015266:	4618      	mov	r0, r3
 8015268:	4918      	ldr	r1, [pc, #96]	; (80152cc <exact_match_lookup+0x7c>)
 801526a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801526e:	f001 fc47 	bl	8016b00 <rcutils_join_path>
 8015272:	7833      	ldrb	r3, [r6, #0]
 8015274:	2b2f      	cmp	r3, #47	; 0x2f
 8015276:	4605      	mov	r5, r0
 8015278:	d021      	beq.n	80152be <exact_match_lookup+0x6e>
 801527a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801527e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015282:	1c70      	adds	r0, r6, #1
 8015284:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015288:	f001 fc40 	bl	8016b0c <rcutils_to_native_path>
 801528c:	4606      	mov	r6, r0
 801528e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015292:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015296:	4631      	mov	r1, r6
 8015298:	e894 000c 	ldmia.w	r4, {r2, r3}
 801529c:	4628      	mov	r0, r5
 801529e:	f001 fc2f 	bl	8016b00 <rcutils_join_path>
 80152a2:	6862      	ldr	r2, [r4, #4]
 80152a4:	6921      	ldr	r1, [r4, #16]
 80152a6:	4603      	mov	r3, r0
 80152a8:	4630      	mov	r0, r6
 80152aa:	461e      	mov	r6, r3
 80152ac:	4790      	blx	r2
 80152ae:	4628      	mov	r0, r5
 80152b0:	6863      	ldr	r3, [r4, #4]
 80152b2:	6921      	ldr	r1, [r4, #16]
 80152b4:	4798      	blx	r3
 80152b6:	4635      	mov	r5, r6
 80152b8:	4628      	mov	r0, r5
 80152ba:	b005      	add	sp, #20
 80152bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152be:	7873      	ldrb	r3, [r6, #1]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d1da      	bne.n	801527a <exact_match_lookup+0x2a>
 80152c4:	4628      	mov	r0, r5
 80152c6:	b005      	add	sp, #20
 80152c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152ca:	bf00      	nop
 80152cc:	0801ee7c 	.word	0x0801ee7c

080152d0 <rcl_get_secure_root>:
 80152d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152d4:	b085      	sub	sp, #20
 80152d6:	b168      	cbz	r0, 80152f4 <rcl_get_secure_root+0x24>
 80152d8:	4607      	mov	r7, r0
 80152da:	4608      	mov	r0, r1
 80152dc:	460c      	mov	r4, r1
 80152de:	f7fa f825 	bl	800f32c <rcutils_allocator_is_valid>
 80152e2:	b138      	cbz	r0, 80152f4 <rcl_get_secure_root+0x24>
 80152e4:	2300      	movs	r3, #0
 80152e6:	482d      	ldr	r0, [pc, #180]	; (801539c <rcl_get_secure_root+0xcc>)
 80152e8:	9303      	str	r3, [sp, #12]
 80152ea:	a903      	add	r1, sp, #12
 80152ec:	f001 fc50 	bl	8016b90 <rcutils_get_env>
 80152f0:	4605      	mov	r5, r0
 80152f2:	b120      	cbz	r0, 80152fe <rcl_get_secure_root+0x2e>
 80152f4:	2500      	movs	r5, #0
 80152f6:	4628      	mov	r0, r5
 80152f8:	b005      	add	sp, #20
 80152fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152fe:	9b03      	ldr	r3, [sp, #12]
 8015300:	781a      	ldrb	r2, [r3, #0]
 8015302:	2a00      	cmp	r2, #0
 8015304:	d0f6      	beq.n	80152f4 <rcl_get_secure_root+0x24>
 8015306:	f104 090c 	add.w	r9, r4, #12
 801530a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801530e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015312:	4618      	mov	r0, r3
 8015314:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015318:	f001 fd2a 	bl	8016d70 <rcutils_strdup>
 801531c:	4680      	mov	r8, r0
 801531e:	2800      	cmp	r0, #0
 8015320:	d0e8      	beq.n	80152f4 <rcl_get_secure_root+0x24>
 8015322:	481f      	ldr	r0, [pc, #124]	; (80153a0 <rcl_get_secure_root+0xd0>)
 8015324:	9503      	str	r5, [sp, #12]
 8015326:	a903      	add	r1, sp, #12
 8015328:	f001 fc32 	bl	8016b90 <rcutils_get_env>
 801532c:	b160      	cbz	r0, 8015348 <rcl_get_secure_root+0x78>
 801532e:	2600      	movs	r6, #0
 8015330:	6863      	ldr	r3, [r4, #4]
 8015332:	6921      	ldr	r1, [r4, #16]
 8015334:	4630      	mov	r0, r6
 8015336:	4798      	blx	r3
 8015338:	4640      	mov	r0, r8
 801533a:	6863      	ldr	r3, [r4, #4]
 801533c:	6921      	ldr	r1, [r4, #16]
 801533e:	4798      	blx	r3
 8015340:	4628      	mov	r0, r5
 8015342:	b005      	add	sp, #20
 8015344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015348:	9b03      	ldr	r3, [sp, #12]
 801534a:	781e      	ldrb	r6, [r3, #0]
 801534c:	b1f6      	cbz	r6, 801538c <rcl_get_secure_root+0xbc>
 801534e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015352:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015356:	4618      	mov	r0, r3
 8015358:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801535c:	f001 fd08 	bl	8016d70 <rcutils_strdup>
 8015360:	4606      	mov	r6, r0
 8015362:	2800      	cmp	r0, #0
 8015364:	d0e3      	beq.n	801532e <rcl_get_secure_root+0x5e>
 8015366:	4622      	mov	r2, r4
 8015368:	4641      	mov	r1, r8
 801536a:	f7ff ff71 	bl	8015250 <exact_match_lookup>
 801536e:	4605      	mov	r5, r0
 8015370:	2d00      	cmp	r5, #0
 8015372:	d0dd      	beq.n	8015330 <rcl_get_secure_root+0x60>
 8015374:	4628      	mov	r0, r5
 8015376:	f001 fbc1 	bl	8016afc <rcutils_is_directory>
 801537a:	4607      	mov	r7, r0
 801537c:	2800      	cmp	r0, #0
 801537e:	d1d7      	bne.n	8015330 <rcl_get_secure_root+0x60>
 8015380:	4628      	mov	r0, r5
 8015382:	6863      	ldr	r3, [r4, #4]
 8015384:	6921      	ldr	r1, [r4, #16]
 8015386:	4798      	blx	r3
 8015388:	463d      	mov	r5, r7
 801538a:	e7d1      	b.n	8015330 <rcl_get_secure_root+0x60>
 801538c:	4638      	mov	r0, r7
 801538e:	4622      	mov	r2, r4
 8015390:	4641      	mov	r1, r8
 8015392:	f7ff ff5d 	bl	8015250 <exact_match_lookup>
 8015396:	4605      	mov	r5, r0
 8015398:	e7ea      	b.n	8015370 <rcl_get_secure_root+0xa0>
 801539a:	bf00      	nop
 801539c:	0801ee88 	.word	0x0801ee88
 80153a0:	0801eea0 	.word	0x0801eea0

080153a4 <rcl_get_security_options_from_environment>:
 80153a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a8:	b082      	sub	sp, #8
 80153aa:	4607      	mov	r7, r0
 80153ac:	4688      	mov	r8, r1
 80153ae:	2400      	movs	r4, #0
 80153b0:	481d      	ldr	r0, [pc, #116]	; (8015428 <rcl_get_security_options_from_environment+0x84>)
 80153b2:	9401      	str	r4, [sp, #4]
 80153b4:	a901      	add	r1, sp, #4
 80153b6:	4616      	mov	r6, r2
 80153b8:	f001 fbea 	bl	8016b90 <rcutils_get_env>
 80153bc:	b120      	cbz	r0, 80153c8 <rcl_get_security_options_from_environment+0x24>
 80153be:	2501      	movs	r5, #1
 80153c0:	4628      	mov	r0, r5
 80153c2:	b002      	add	sp, #8
 80153c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153c8:	4918      	ldr	r1, [pc, #96]	; (801542c <rcl_get_security_options_from_environment+0x88>)
 80153ca:	4604      	mov	r4, r0
 80153cc:	9801      	ldr	r0, [sp, #4]
 80153ce:	f7ea ff07 	bl	80001e0 <strcmp>
 80153d2:	4605      	mov	r5, r0
 80153d4:	b9c8      	cbnz	r0, 801540a <rcl_get_security_options_from_environment+0x66>
 80153d6:	9001      	str	r0, [sp, #4]
 80153d8:	b1ee      	cbz	r6, 8015416 <rcl_get_security_options_from_environment+0x72>
 80153da:	4815      	ldr	r0, [pc, #84]	; (8015430 <rcl_get_security_options_from_environment+0x8c>)
 80153dc:	a901      	add	r1, sp, #4
 80153de:	f001 fbd7 	bl	8016b90 <rcutils_get_env>
 80153e2:	2800      	cmp	r0, #0
 80153e4:	d1eb      	bne.n	80153be <rcl_get_security_options_from_environment+0x1a>
 80153e6:	4913      	ldr	r1, [pc, #76]	; (8015434 <rcl_get_security_options_from_environment+0x90>)
 80153e8:	9801      	ldr	r0, [sp, #4]
 80153ea:	f7ea fef9 	bl	80001e0 <strcmp>
 80153ee:	fab0 f080 	clz	r0, r0
 80153f2:	0940      	lsrs	r0, r0, #5
 80153f4:	7030      	strb	r0, [r6, #0]
 80153f6:	4641      	mov	r1, r8
 80153f8:	4638      	mov	r0, r7
 80153fa:	f7ff ff69 	bl	80152d0 <rcl_get_secure_root>
 80153fe:	b160      	cbz	r0, 801541a <rcl_get_security_options_from_environment+0x76>
 8015400:	6070      	str	r0, [r6, #4]
 8015402:	4628      	mov	r0, r5
 8015404:	b002      	add	sp, #8
 8015406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801540a:	4625      	mov	r5, r4
 801540c:	4628      	mov	r0, r5
 801540e:	7034      	strb	r4, [r6, #0]
 8015410:	b002      	add	sp, #8
 8015412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015416:	250b      	movs	r5, #11
 8015418:	e7d2      	b.n	80153c0 <rcl_get_security_options_from_environment+0x1c>
 801541a:	7835      	ldrb	r5, [r6, #0]
 801541c:	f1a5 0501 	sub.w	r5, r5, #1
 8015420:	fab5 f585 	clz	r5, r5
 8015424:	096d      	lsrs	r5, r5, #5
 8015426:	e7cb      	b.n	80153c0 <rcl_get_security_options_from_environment+0x1c>
 8015428:	0801ee40 	.word	0x0801ee40
 801542c:	0801ee54 	.word	0x0801ee54
 8015430:	0801ee5c 	.word	0x0801ee5c
 8015434:	0801ee74 	.word	0x0801ee74

08015438 <rcl_service_get_rmw_handle>:
 8015438:	b110      	cbz	r0, 8015440 <rcl_service_get_rmw_handle+0x8>
 801543a:	6800      	ldr	r0, [r0, #0]
 801543c:	b100      	cbz	r0, 8015440 <rcl_service_get_rmw_handle+0x8>
 801543e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015440:	4770      	bx	lr
 8015442:	bf00      	nop

08015444 <rcl_take_request>:
 8015444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015446:	460e      	mov	r6, r1
 8015448:	460c      	mov	r4, r1
 801544a:	4607      	mov	r7, r0
 801544c:	4694      	mov	ip, r2
 801544e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015450:	b08d      	sub	sp, #52	; 0x34
 8015452:	ad06      	add	r5, sp, #24
 8015454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015456:	e896 0003 	ldmia.w	r6, {r0, r1}
 801545a:	e885 0003 	stmia.w	r5, {r0, r1}
 801545e:	b1e7      	cbz	r7, 801549a <rcl_take_request+0x56>
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	b1d3      	cbz	r3, 801549a <rcl_take_request+0x56>
 8015464:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8015466:	b1c0      	cbz	r0, 801549a <rcl_take_request+0x56>
 8015468:	4662      	mov	r2, ip
 801546a:	b30a      	cbz	r2, 80154b0 <rcl_take_request+0x6c>
 801546c:	2500      	movs	r5, #0
 801546e:	f10d 0307 	add.w	r3, sp, #7
 8015472:	a902      	add	r1, sp, #8
 8015474:	f88d 5007 	strb.w	r5, [sp, #7]
 8015478:	f001 ff76 	bl	8017368 <rmw_take_request>
 801547c:	4606      	mov	r6, r0
 801547e:	b178      	cbz	r0, 80154a0 <rcl_take_request+0x5c>
 8015480:	280a      	cmp	r0, #10
 8015482:	bf18      	it	ne
 8015484:	2601      	movne	r6, #1
 8015486:	ad06      	add	r5, sp, #24
 8015488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801548a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801548c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015490:	e884 0003 	stmia.w	r4, {r0, r1}
 8015494:	4630      	mov	r0, r6
 8015496:	b00d      	add	sp, #52	; 0x34
 8015498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801549a:	f44f 7616 	mov.w	r6, #600	; 0x258
 801549e:	e7f2      	b.n	8015486 <rcl_take_request+0x42>
 80154a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80154a4:	f240 2359 	movw	r3, #601	; 0x259
 80154a8:	2a00      	cmp	r2, #0
 80154aa:	bf08      	it	eq
 80154ac:	461e      	moveq	r6, r3
 80154ae:	e7ea      	b.n	8015486 <rcl_take_request+0x42>
 80154b0:	260b      	movs	r6, #11
 80154b2:	e7e8      	b.n	8015486 <rcl_take_request+0x42>

080154b4 <rcl_send_response>:
 80154b4:	b160      	cbz	r0, 80154d0 <rcl_send_response+0x1c>
 80154b6:	6800      	ldr	r0, [r0, #0]
 80154b8:	b150      	cbz	r0, 80154d0 <rcl_send_response+0x1c>
 80154ba:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80154bc:	b140      	cbz	r0, 80154d0 <rcl_send_response+0x1c>
 80154be:	b151      	cbz	r1, 80154d6 <rcl_send_response+0x22>
 80154c0:	b510      	push	{r4, lr}
 80154c2:	b152      	cbz	r2, 80154da <rcl_send_response+0x26>
 80154c4:	f001 ffae 	bl	8017424 <rmw_send_response>
 80154c8:	3800      	subs	r0, #0
 80154ca:	bf18      	it	ne
 80154cc:	2001      	movne	r0, #1
 80154ce:	bd10      	pop	{r4, pc}
 80154d0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80154d4:	4770      	bx	lr
 80154d6:	200b      	movs	r0, #11
 80154d8:	4770      	bx	lr
 80154da:	200b      	movs	r0, #11
 80154dc:	bd10      	pop	{r4, pc}
 80154de:	bf00      	nop

080154e0 <rcl_get_zero_initialized_subscription>:
 80154e0:	4b01      	ldr	r3, [pc, #4]	; (80154e8 <rcl_get_zero_initialized_subscription+0x8>)
 80154e2:	6818      	ldr	r0, [r3, #0]
 80154e4:	4770      	bx	lr
 80154e6:	bf00      	nop
 80154e8:	0801eec0 	.word	0x0801eec0

080154ec <rcl_subscription_init>:
 80154ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154f0:	b091      	sub	sp, #68	; 0x44
 80154f2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80154f4:	b1d7      	cbz	r7, 801552c <rcl_subscription_init+0x40>
 80154f6:	f107 0950 	add.w	r9, r7, #80	; 0x50
 80154fa:	4604      	mov	r4, r0
 80154fc:	4648      	mov	r0, r9
 80154fe:	4688      	mov	r8, r1
 8015500:	4616      	mov	r6, r2
 8015502:	461d      	mov	r5, r3
 8015504:	f7f9 ff12 	bl	800f32c <rcutils_allocator_is_valid>
 8015508:	b180      	cbz	r0, 801552c <rcl_subscription_init+0x40>
 801550a:	b17c      	cbz	r4, 801552c <rcl_subscription_init+0x40>
 801550c:	4640      	mov	r0, r8
 801550e:	f7ff fe77 	bl	8015200 <rcl_node_is_valid>
 8015512:	b380      	cbz	r0, 8015576 <rcl_subscription_init+0x8a>
 8015514:	b156      	cbz	r6, 801552c <rcl_subscription_init+0x40>
 8015516:	b14d      	cbz	r5, 801552c <rcl_subscription_init+0x40>
 8015518:	f8d4 a000 	ldr.w	sl, [r4]
 801551c:	f1ba 0f00 	cmp.w	sl, #0
 8015520:	d009      	beq.n	8015536 <rcl_subscription_init+0x4a>
 8015522:	2564      	movs	r5, #100	; 0x64
 8015524:	4628      	mov	r0, r5
 8015526:	b011      	add	sp, #68	; 0x44
 8015528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801552c:	250b      	movs	r5, #11
 801552e:	4628      	mov	r0, r5
 8015530:	b011      	add	sp, #68	; 0x44
 8015532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015536:	46ce      	mov	lr, r9
 8015538:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801553c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8015540:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015544:	f8de 3000 	ldr.w	r3, [lr]
 8015548:	f8cc 3000 	str.w	r3, [ip]
 801554c:	f7f9 ff2a 	bl	800f3a4 <rcutils_get_zero_initialized_string_map>
 8015550:	ab10      	add	r3, sp, #64	; 0x40
 8015552:	4684      	mov	ip, r0
 8015554:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015558:	f8cd c020 	str.w	ip, [sp, #32]
 801555c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015560:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8015564:	4651      	mov	r1, sl
 8015566:	a808      	add	r0, sp, #32
 8015568:	f7f9 ff96 	bl	800f498 <rcutils_string_map_init>
 801556c:	b140      	cbz	r0, 8015580 <rcl_subscription_init+0x94>
 801556e:	280a      	cmp	r0, #10
 8015570:	d011      	beq.n	8015596 <rcl_subscription_init+0xaa>
 8015572:	2501      	movs	r5, #1
 8015574:	e7db      	b.n	801552e <rcl_subscription_init+0x42>
 8015576:	25c8      	movs	r5, #200	; 0xc8
 8015578:	4628      	mov	r0, r5
 801557a:	b011      	add	sp, #68	; 0x44
 801557c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015580:	a808      	add	r0, sp, #32
 8015582:	f7ff fb91 	bl	8014ca8 <rcl_get_default_topic_name_substitutions>
 8015586:	4682      	mov	sl, r0
 8015588:	b138      	cbz	r0, 801559a <rcl_subscription_init+0xae>
 801558a:	a808      	add	r0, sp, #32
 801558c:	f7f9 ffc4 	bl	800f518 <rcutils_string_map_fini>
 8015590:	f1ba 0f0a 	cmp.w	sl, #10
 8015594:	d1ed      	bne.n	8015572 <rcl_subscription_init+0x86>
 8015596:	250a      	movs	r5, #10
 8015598:	e7c9      	b.n	801552e <rcl_subscription_init+0x42>
 801559a:	4640      	mov	r0, r8
 801559c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80155a0:	f7ff fe38 	bl	8015214 <rcl_node_get_name>
 80155a4:	4682      	mov	sl, r0
 80155a6:	4640      	mov	r0, r8
 80155a8:	f7ff fe3c 	bl	8015224 <rcl_node_get_namespace>
 80155ac:	4686      	mov	lr, r0
 80155ae:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80155b2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 80155b6:	46ec      	mov	ip, sp
 80155b8:	f8cd b014 	str.w	fp, [sp, #20]
 80155bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155c0:	f8d9 3000 	ldr.w	r3, [r9]
 80155c4:	f8cc 3000 	str.w	r3, [ip]
 80155c8:	4628      	mov	r0, r5
 80155ca:	4651      	mov	r1, sl
 80155cc:	4672      	mov	r2, lr
 80155ce:	ab08      	add	r3, sp, #32
 80155d0:	f7ff fa04 	bl	80149dc <rcl_expand_topic_name>
 80155d4:	4605      	mov	r5, r0
 80155d6:	a808      	add	r0, sp, #32
 80155d8:	f7f9 ff9e 	bl	800f518 <rcutils_string_map_fini>
 80155dc:	b920      	cbnz	r0, 80155e8 <rcl_subscription_init+0xfc>
 80155de:	b15d      	cbz	r5, 80155f8 <rcl_subscription_init+0x10c>
 80155e0:	2d67      	cmp	r5, #103	; 0x67
 80155e2:	d002      	beq.n	80155ea <rcl_subscription_init+0xfe>
 80155e4:	2d69      	cmp	r5, #105	; 0x69
 80155e6:	d05a      	beq.n	801569e <rcl_subscription_init+0x1b2>
 80155e8:	2501      	movs	r5, #1
 80155ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155ec:	2800      	cmp	r0, #0
 80155ee:	d09e      	beq.n	801552e <rcl_subscription_init+0x42>
 80155f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80155f4:	4798      	blx	r3
 80155f6:	e79a      	b.n	801552e <rcl_subscription_init+0x42>
 80155f8:	4640      	mov	r0, r8
 80155fa:	f7ff fe1b 	bl	8015234 <rcl_node_get_options>
 80155fe:	2800      	cmp	r0, #0
 8015600:	d0f2      	beq.n	80155e8 <rcl_subscription_init+0xfc>
 8015602:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015604:	f7ea fdf6 	bl	80001f4 <strlen>
 8015608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801560a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801560c:	3001      	adds	r0, #1
 801560e:	4798      	blx	r3
 8015610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015612:	9107      	str	r1, [sp, #28]
 8015614:	4681      	mov	r9, r0
 8015616:	4608      	mov	r0, r1
 8015618:	f7ea fdec 	bl	80001f4 <strlen>
 801561c:	9907      	ldr	r1, [sp, #28]
 801561e:	1c42      	adds	r2, r0, #1
 8015620:	4648      	mov	r0, r9
 8015622:	f004 fa47 	bl	8019ab4 <memcpy>
 8015626:	462a      	mov	r2, r5
 8015628:	4648      	mov	r0, r9
 801562a:	a90a      	add	r1, sp, #40	; 0x28
 801562c:	f7fa f850 	bl	800f6d0 <rmw_validate_full_topic_name>
 8015630:	2800      	cmp	r0, #0
 8015632:	d132      	bne.n	801569a <rcl_subscription_init+0x1ae>
 8015634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015636:	2b00      	cmp	r3, #0
 8015638:	d133      	bne.n	80156a2 <rcl_subscription_init+0x1b6>
 801563a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801563c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801563e:	20c8      	movs	r0, #200	; 0xc8
 8015640:	4798      	blx	r3
 8015642:	6020      	str	r0, [r4, #0]
 8015644:	b378      	cbz	r0, 80156a6 <rcl_subscription_init+0x1ba>
 8015646:	4640      	mov	r0, r8
 8015648:	f7ff fdfc 	bl	8015244 <rcl_node_get_rmw_handle>
 801564c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015650:	9300      	str	r3, [sp, #0]
 8015652:	4631      	mov	r1, r6
 8015654:	463b      	mov	r3, r7
 8015656:	464a      	mov	r2, r9
 8015658:	6825      	ldr	r5, [r4, #0]
 801565a:	f7fa fe03 	bl	8010264 <rmw_create_subscription>
 801565e:	6821      	ldr	r1, [r4, #0]
 8015660:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 8015664:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8015668:	b368      	cbz	r0, 80156c6 <rcl_subscription_init+0x1da>
 801566a:	3170      	adds	r1, #112	; 0x70
 801566c:	f7fa feda 	bl	8010424 <rmw_subscription_get_actual_qos>
 8015670:	4605      	mov	r5, r0
 8015672:	b9d0      	cbnz	r0, 80156aa <rcl_subscription_init+0x1be>
 8015674:	6820      	ldr	r0, [r4, #0]
 8015676:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801567a:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 801567e:	2270      	movs	r2, #112	; 0x70
 8015680:	4639      	mov	r1, r7
 8015682:	f004 fa17 	bl	8019ab4 <memcpy>
 8015686:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015688:	b110      	cbz	r0, 8015690 <rcl_subscription_init+0x1a4>
 801568a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801568c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801568e:	4798      	blx	r3
 8015690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015692:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015694:	4648      	mov	r0, r9
 8015696:	4798      	blx	r3
 8015698:	e749      	b.n	801552e <rcl_subscription_init+0x42>
 801569a:	2501      	movs	r5, #1
 801569c:	e7f3      	b.n	8015686 <rcl_subscription_init+0x19a>
 801569e:	2567      	movs	r5, #103	; 0x67
 80156a0:	e7a3      	b.n	80155ea <rcl_subscription_init+0xfe>
 80156a2:	2567      	movs	r5, #103	; 0x67
 80156a4:	e7ef      	b.n	8015686 <rcl_subscription_init+0x19a>
 80156a6:	250a      	movs	r5, #10
 80156a8:	e7ed      	b.n	8015686 <rcl_subscription_init+0x19a>
 80156aa:	6823      	ldr	r3, [r4, #0]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d0f4      	beq.n	801569a <rcl_subscription_init+0x1ae>
 80156b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80156b4:	b13b      	cbz	r3, 80156c6 <rcl_subscription_init+0x1da>
 80156b6:	4640      	mov	r0, r8
 80156b8:	f7ff fdc4 	bl	8015244 <rcl_node_get_rmw_handle>
 80156bc:	6823      	ldr	r3, [r4, #0]
 80156be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80156c2:	f7fa feb1 	bl	8010428 <rmw_destroy_subscription>
 80156c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80156ca:	6820      	ldr	r0, [r4, #0]
 80156cc:	4798      	blx	r3
 80156ce:	2300      	movs	r3, #0
 80156d0:	6023      	str	r3, [r4, #0]
 80156d2:	2501      	movs	r5, #1
 80156d4:	e7d7      	b.n	8015686 <rcl_subscription_init+0x19a>
 80156d6:	bf00      	nop

080156d8 <rcl_subscription_get_default_options>:
 80156d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156dc:	4f12      	ldr	r7, [pc, #72]	; (8015728 <rcl_subscription_get_default_options+0x50>)
 80156de:	4913      	ldr	r1, [pc, #76]	; (801572c <rcl_subscription_get_default_options+0x54>)
 80156e0:	b088      	sub	sp, #32
 80156e2:	4606      	mov	r6, r0
 80156e4:	2250      	movs	r2, #80	; 0x50
 80156e6:	4638      	mov	r0, r7
 80156e8:	f004 f9e4 	bl	8019ab4 <memcpy>
 80156ec:	ac02      	add	r4, sp, #8
 80156ee:	a802      	add	r0, sp, #8
 80156f0:	f7f9 fe0e 	bl	800f310 <rcutils_get_default_allocator>
 80156f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80156f6:	f107 0550 	add.w	r5, r7, #80	; 0x50
 80156fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80156fc:	46e8      	mov	r8, sp
 80156fe:	6823      	ldr	r3, [r4, #0]
 8015700:	602b      	str	r3, [r5, #0]
 8015702:	4640      	mov	r0, r8
 8015704:	f001 fb7a 	bl	8016dfc <rmw_get_default_subscription_options>
 8015708:	e898 0003 	ldmia.w	r8, {r0, r1}
 801570c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015710:	e883 0003 	stmia.w	r3, {r0, r1}
 8015714:	2270      	movs	r2, #112	; 0x70
 8015716:	4639      	mov	r1, r7
 8015718:	4630      	mov	r0, r6
 801571a:	f004 f9cb 	bl	8019ab4 <memcpy>
 801571e:	4630      	mov	r0, r6
 8015720:	b008      	add	sp, #32
 8015722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015726:	bf00      	nop
 8015728:	20009e40 	.word	0x20009e40
 801572c:	0801eec8 	.word	0x0801eec8

08015730 <rcl_take>:
 8015730:	2800      	cmp	r0, #0
 8015732:	d03f      	beq.n	80157b4 <rcl_take+0x84>
 8015734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015738:	4617      	mov	r7, r2
 801573a:	6802      	ldr	r2, [r0, #0]
 801573c:	b09d      	sub	sp, #116	; 0x74
 801573e:	4606      	mov	r6, r0
 8015740:	b382      	cbz	r2, 80157a4 <rcl_take+0x74>
 8015742:	4699      	mov	r9, r3
 8015744:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8015748:	b363      	cbz	r3, 80157a4 <rcl_take+0x74>
 801574a:	4688      	mov	r8, r1
 801574c:	b381      	cbz	r1, 80157b0 <rcl_take+0x80>
 801574e:	2f00      	cmp	r7, #0
 8015750:	d034      	beq.n	80157bc <rcl_take+0x8c>
 8015752:	a802      	add	r0, sp, #8
 8015754:	ac02      	add	r4, sp, #8
 8015756:	f001 fb55 	bl	8016e04 <rmw_get_zero_initialized_message_info>
 801575a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801575c:	463d      	mov	r5, r7
 801575e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015764:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015768:	6834      	ldr	r4, [r6, #0]
 801576a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 801576e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015772:	2400      	movs	r4, #0
 8015774:	463b      	mov	r3, r7
 8015776:	4630      	mov	r0, r6
 8015778:	f8cd 9000 	str.w	r9, [sp]
 801577c:	4641      	mov	r1, r8
 801577e:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8015782:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 8015786:	f001 fef7 	bl	8017578 <rmw_take_with_info>
 801578a:	4603      	mov	r3, r0
 801578c:	b9c0      	cbnz	r0, 80157c0 <rcl_take+0x90>
 801578e:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 8015792:	f240 1291 	movw	r2, #401	; 0x191
 8015796:	2900      	cmp	r1, #0
 8015798:	bf08      	it	eq
 801579a:	4613      	moveq	r3, r2
 801579c:	4618      	mov	r0, r3
 801579e:	b01d      	add	sp, #116	; 0x74
 80157a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157a4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80157a8:	4618      	mov	r0, r3
 80157aa:	b01d      	add	sp, #116	; 0x74
 80157ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157b0:	230b      	movs	r3, #11
 80157b2:	e7f3      	b.n	801579c <rcl_take+0x6c>
 80157b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80157b8:	4618      	mov	r0, r3
 80157ba:	4770      	bx	lr
 80157bc:	af10      	add	r7, sp, #64	; 0x40
 80157be:	e7c8      	b.n	8015752 <rcl_take+0x22>
 80157c0:	f7ff f884 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 80157c4:	4603      	mov	r3, r0
 80157c6:	e7e9      	b.n	801579c <rcl_take+0x6c>

080157c8 <rcl_subscription_get_rmw_handle>:
 80157c8:	b118      	cbz	r0, 80157d2 <rcl_subscription_get_rmw_handle+0xa>
 80157ca:	6800      	ldr	r0, [r0, #0]
 80157cc:	b108      	cbz	r0, 80157d2 <rcl_subscription_get_rmw_handle+0xa>
 80157ce:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80157d2:	4770      	bx	lr

080157d4 <rcl_get_system_time>:
 80157d4:	4608      	mov	r0, r1
 80157d6:	f7f9 bf15 	b.w	800f604 <rcutils_system_time_now>
 80157da:	bf00      	nop

080157dc <rcl_get_steady_time>:
 80157dc:	4608      	mov	r0, r1
 80157de:	f7f9 bf39 	b.w	800f654 <rcutils_steady_time_now>
 80157e2:	bf00      	nop

080157e4 <rcl_get_ros_time>:
 80157e4:	7a03      	ldrb	r3, [r0, #8]
 80157e6:	b510      	push	{r4, lr}
 80157e8:	460c      	mov	r4, r1
 80157ea:	b133      	cbz	r3, 80157fa <rcl_get_ros_time+0x16>
 80157ec:	2105      	movs	r1, #5
 80157ee:	f001 f8e3 	bl	80169b8 <__atomic_load_8>
 80157f2:	e9c4 0100 	strd	r0, r1, [r4]
 80157f6:	2000      	movs	r0, #0
 80157f8:	bd10      	pop	{r4, pc}
 80157fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157fe:	4608      	mov	r0, r1
 8015800:	f7f9 bf00 	b.w	800f604 <rcutils_system_time_now>

08015804 <rcl_clock_init>:
 8015804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015808:	4606      	mov	r6, r0
 801580a:	4610      	mov	r0, r2
 801580c:	4614      	mov	r4, r2
 801580e:	460d      	mov	r5, r1
 8015810:	f7f9 fd8c 	bl	800f32c <rcutils_allocator_is_valid>
 8015814:	b128      	cbz	r0, 8015822 <rcl_clock_init+0x1e>
 8015816:	2e03      	cmp	r6, #3
 8015818:	d803      	bhi.n	8015822 <rcl_clock_init+0x1e>
 801581a:	e8df f006 	tbb	[pc, r6]
 801581e:	2c1b      	.short	0x2c1b
 8015820:	0554      	.short	0x0554
 8015822:	200b      	movs	r0, #11
 8015824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015828:	2d00      	cmp	r5, #0
 801582a:	d0fa      	beq.n	8015822 <rcl_clock_init+0x1e>
 801582c:	2c00      	cmp	r4, #0
 801582e:	d0f8      	beq.n	8015822 <rcl_clock_init+0x1e>
 8015830:	2600      	movs	r6, #0
 8015832:	702e      	strb	r6, [r5, #0]
 8015834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015836:	f105 0714 	add.w	r7, r5, #20
 801583a:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801583e:	612e      	str	r6, [r5, #16]
 8015840:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015842:	6823      	ldr	r3, [r4, #0]
 8015844:	603b      	str	r3, [r7, #0]
 8015846:	2303      	movs	r3, #3
 8015848:	4a2b      	ldr	r2, [pc, #172]	; (80158f8 <rcl_clock_init+0xf4>)
 801584a:	702b      	strb	r3, [r5, #0]
 801584c:	4630      	mov	r0, r6
 801584e:	60ea      	str	r2, [r5, #12]
 8015850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015854:	2d00      	cmp	r5, #0
 8015856:	d0e4      	beq.n	8015822 <rcl_clock_init+0x1e>
 8015858:	2600      	movs	r6, #0
 801585a:	702e      	strb	r6, [r5, #0]
 801585c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801585e:	f105 0714 	add.w	r7, r5, #20
 8015862:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015866:	e9c5 6603 	strd	r6, r6, [r5, #12]
 801586a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801586c:	6823      	ldr	r3, [r4, #0]
 801586e:	603b      	str	r3, [r7, #0]
 8015870:	4630      	mov	r0, r6
 8015872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015876:	2d00      	cmp	r5, #0
 8015878:	d0d3      	beq.n	8015822 <rcl_clock_init+0x1e>
 801587a:	2c00      	cmp	r4, #0
 801587c:	d0d1      	beq.n	8015822 <rcl_clock_init+0x1e>
 801587e:	2600      	movs	r6, #0
 8015880:	702e      	strb	r6, [r5, #0]
 8015882:	46a4      	mov	ip, r4
 8015884:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015888:	f105 0714 	add.w	r7, r5, #20
 801588c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015890:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8015894:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015896:	f8dc 3000 	ldr.w	r3, [ip]
 801589a:	603b      	str	r3, [r7, #0]
 801589c:	6921      	ldr	r1, [r4, #16]
 801589e:	6823      	ldr	r3, [r4, #0]
 80158a0:	2010      	movs	r0, #16
 80158a2:	4798      	blx	r3
 80158a4:	4603      	mov	r3, r0
 80158a6:	6128      	str	r0, [r5, #16]
 80158a8:	b318      	cbz	r0, 80158f2 <rcl_clock_init+0xee>
 80158aa:	f04f 0800 	mov.w	r8, #0
 80158ae:	f04f 0900 	mov.w	r9, #0
 80158b2:	7206      	strb	r6, [r0, #8]
 80158b4:	e9c3 8900 	strd	r8, r9, [r3]
 80158b8:	2301      	movs	r3, #1
 80158ba:	4a10      	ldr	r2, [pc, #64]	; (80158fc <rcl_clock_init+0xf8>)
 80158bc:	702b      	strb	r3, [r5, #0]
 80158be:	4630      	mov	r0, r6
 80158c0:	60ea      	str	r2, [r5, #12]
 80158c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158c6:	2d00      	cmp	r5, #0
 80158c8:	d0ab      	beq.n	8015822 <rcl_clock_init+0x1e>
 80158ca:	2c00      	cmp	r4, #0
 80158cc:	d0a9      	beq.n	8015822 <rcl_clock_init+0x1e>
 80158ce:	2600      	movs	r6, #0
 80158d0:	702e      	strb	r6, [r5, #0]
 80158d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158d4:	f105 0714 	add.w	r7, r5, #20
 80158d8:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80158dc:	612e      	str	r6, [r5, #16]
 80158de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80158e0:	6823      	ldr	r3, [r4, #0]
 80158e2:	603b      	str	r3, [r7, #0]
 80158e4:	2302      	movs	r3, #2
 80158e6:	4a06      	ldr	r2, [pc, #24]	; (8015900 <rcl_clock_init+0xfc>)
 80158e8:	702b      	strb	r3, [r5, #0]
 80158ea:	4630      	mov	r0, r6
 80158ec:	60ea      	str	r2, [r5, #12]
 80158ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158f2:	200a      	movs	r0, #10
 80158f4:	e796      	b.n	8015824 <rcl_clock_init+0x20>
 80158f6:	bf00      	nop
 80158f8:	080157dd 	.word	0x080157dd
 80158fc:	080157e5 	.word	0x080157e5
 8015900:	080157d5 	.word	0x080157d5

08015904 <rcl_clock_get_now>:
 8015904:	b140      	cbz	r0, 8015918 <rcl_clock_get_now+0x14>
 8015906:	b139      	cbz	r1, 8015918 <rcl_clock_get_now+0x14>
 8015908:	7803      	ldrb	r3, [r0, #0]
 801590a:	b11b      	cbz	r3, 8015914 <rcl_clock_get_now+0x10>
 801590c:	68c3      	ldr	r3, [r0, #12]
 801590e:	b10b      	cbz	r3, 8015914 <rcl_clock_get_now+0x10>
 8015910:	6900      	ldr	r0, [r0, #16]
 8015912:	4718      	bx	r3
 8015914:	2001      	movs	r0, #1
 8015916:	4770      	bx	lr
 8015918:	200b      	movs	r0, #11
 801591a:	4770      	bx	lr

0801591c <rcl_timer_call>:
 801591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015920:	b08b      	sub	sp, #44	; 0x2c
 8015922:	2800      	cmp	r0, #0
 8015924:	d06e      	beq.n	8015a04 <rcl_timer_call+0xe8>
 8015926:	6803      	ldr	r3, [r0, #0]
 8015928:	f3bf 8f5b 	dmb	ish
 801592c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015930:	f3bf 8f5b 	dmb	ish
 8015934:	4604      	mov	r4, r0
 8015936:	2b00      	cmp	r3, #0
 8015938:	d159      	bne.n	80159ee <rcl_timer_call+0xd2>
 801593a:	6803      	ldr	r3, [r0, #0]
 801593c:	a908      	add	r1, sp, #32
 801593e:	6818      	ldr	r0, [r3, #0]
 8015940:	f7ff ffe0 	bl	8015904 <rcl_clock_get_now>
 8015944:	4605      	mov	r5, r0
 8015946:	2800      	cmp	r0, #0
 8015948:	d14d      	bne.n	80159e6 <rcl_timer_call+0xca>
 801594a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801594e:	2a00      	cmp	r2, #0
 8015950:	f173 0100 	sbcs.w	r1, r3, #0
 8015954:	db51      	blt.n	80159fa <rcl_timer_call+0xde>
 8015956:	6820      	ldr	r0, [r4, #0]
 8015958:	2605      	movs	r6, #5
 801595a:	9600      	str	r6, [sp, #0]
 801595c:	3020      	adds	r0, #32
 801595e:	f001 f893 	bl	8016a88 <__atomic_exchange_8>
 8015962:	6822      	ldr	r2, [r4, #0]
 8015964:	f3bf 8f5b 	dmb	ish
 8015968:	4682      	mov	sl, r0
 801596a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 801596e:	f3bf 8f5b 	dmb	ish
 8015972:	6820      	ldr	r0, [r4, #0]
 8015974:	460b      	mov	r3, r1
 8015976:	3028      	adds	r0, #40	; 0x28
 8015978:	4631      	mov	r1, r6
 801597a:	9305      	str	r3, [sp, #20]
 801597c:	f001 f81c 	bl	80169b8 <__atomic_load_8>
 8015980:	4603      	mov	r3, r0
 8015982:	6820      	ldr	r0, [r4, #0]
 8015984:	460a      	mov	r2, r1
 8015986:	3018      	adds	r0, #24
 8015988:	4631      	mov	r1, r6
 801598a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801598e:	f001 f813 	bl	80169b8 <__atomic_load_8>
 8015992:	9b04      	ldr	r3, [sp, #16]
 8015994:	9a03      	ldr	r2, [sp, #12]
 8015996:	4606      	mov	r6, r0
 8015998:	460f      	mov	r7, r1
 801599a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801599e:	eb13 0806 	adds.w	r8, r3, r6
 80159a2:	eb42 0907 	adc.w	r9, r2, r7
 80159a6:	4580      	cmp	r8, r0
 80159a8:	eb79 0301 	sbcs.w	r3, r9, r1
 80159ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80159b0:	460a      	mov	r2, r1
 80159b2:	da04      	bge.n	80159be <rcl_timer_call+0xa2>
 80159b4:	ea56 0307 	orrs.w	r3, r6, r7
 80159b8:	d129      	bne.n	8015a0e <rcl_timer_call+0xf2>
 80159ba:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80159be:	6820      	ldr	r0, [r4, #0]
 80159c0:	2105      	movs	r1, #5
 80159c2:	4642      	mov	r2, r8
 80159c4:	464b      	mov	r3, r9
 80159c6:	3028      	adds	r0, #40	; 0x28
 80159c8:	9100      	str	r1, [sp, #0]
 80159ca:	f001 f829 	bl	8016a20 <__atomic_store_8>
 80159ce:	f1bb 0f00 	cmp.w	fp, #0
 80159d2:	d008      	beq.n	80159e6 <rcl_timer_call+0xca>
 80159d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80159d8:	9905      	ldr	r1, [sp, #20]
 80159da:	ebb2 020a 	subs.w	r2, r2, sl
 80159de:	4620      	mov	r0, r4
 80159e0:	eb63 0301 	sbc.w	r3, r3, r1
 80159e4:	47d8      	blx	fp
 80159e6:	4628      	mov	r0, r5
 80159e8:	b00b      	add	sp, #44	; 0x2c
 80159ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ee:	f240 3521 	movw	r5, #801	; 0x321
 80159f2:	4628      	mov	r0, r5
 80159f4:	b00b      	add	sp, #44	; 0x2c
 80159f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159fa:	2501      	movs	r5, #1
 80159fc:	4628      	mov	r0, r5
 80159fe:	b00b      	add	sp, #44	; 0x2c
 8015a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a04:	250b      	movs	r5, #11
 8015a06:	4628      	mov	r0, r5
 8015a08:	b00b      	add	sp, #44	; 0x2c
 8015a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0e:	ebb0 0008 	subs.w	r0, r0, r8
 8015a12:	eb62 0109 	sbc.w	r1, r2, r9
 8015a16:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8015a1a:	463b      	mov	r3, r7
 8015a1c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8015a20:	4632      	mov	r2, r6
 8015a22:	f7eb f949 	bl	8000cb8 <__aeabi_ldivmod>
 8015a26:	1c43      	adds	r3, r0, #1
 8015a28:	f141 0100 	adc.w	r1, r1, #0
 8015a2c:	fb00 7007 	mla	r0, r0, r7, r7
 8015a30:	fb06 0001 	mla	r0, r6, r1, r0
 8015a34:	fba3 6706 	umull	r6, r7, r3, r6
 8015a38:	4407      	add	r7, r0
 8015a3a:	eb18 0806 	adds.w	r8, r8, r6
 8015a3e:	eb49 0907 	adc.w	r9, r9, r7
 8015a42:	e7bc      	b.n	80159be <rcl_timer_call+0xa2>

08015a44 <rcl_timer_is_ready>:
 8015a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a48:	b082      	sub	sp, #8
 8015a4a:	b310      	cbz	r0, 8015a92 <rcl_timer_is_ready+0x4e>
 8015a4c:	4688      	mov	r8, r1
 8015a4e:	b301      	cbz	r1, 8015a92 <rcl_timer_is_ready+0x4e>
 8015a50:	6803      	ldr	r3, [r0, #0]
 8015a52:	4604      	mov	r4, r0
 8015a54:	4669      	mov	r1, sp
 8015a56:	6818      	ldr	r0, [r3, #0]
 8015a58:	f7ff ff54 	bl	8015904 <rcl_clock_get_now>
 8015a5c:	4605      	mov	r5, r0
 8015a5e:	b118      	cbz	r0, 8015a68 <rcl_timer_is_ready+0x24>
 8015a60:	4628      	mov	r0, r5
 8015a62:	b002      	add	sp, #8
 8015a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a68:	6820      	ldr	r0, [r4, #0]
 8015a6a:	2105      	movs	r1, #5
 8015a6c:	3028      	adds	r0, #40	; 0x28
 8015a6e:	f000 ffa3 	bl	80169b8 <__atomic_load_8>
 8015a72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015a76:	1ac6      	subs	r6, r0, r3
 8015a78:	eb61 0702 	sbc.w	r7, r1, r2
 8015a7c:	2e01      	cmp	r6, #1
 8015a7e:	f177 0300 	sbcs.w	r3, r7, #0
 8015a82:	db0b      	blt.n	8015a9c <rcl_timer_is_ready+0x58>
 8015a84:	462b      	mov	r3, r5
 8015a86:	4628      	mov	r0, r5
 8015a88:	f888 3000 	strb.w	r3, [r8]
 8015a8c:	b002      	add	sp, #8
 8015a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a92:	250b      	movs	r5, #11
 8015a94:	4628      	mov	r0, r5
 8015a96:	b002      	add	sp, #8
 8015a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a9c:	6823      	ldr	r3, [r4, #0]
 8015a9e:	f3bf 8f5b 	dmb	ish
 8015aa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015aa6:	f3bf 8f5b 	dmb	ish
 8015aaa:	fab3 f383 	clz	r3, r3
 8015aae:	095b      	lsrs	r3, r3, #5
 8015ab0:	e7e9      	b.n	8015a86 <rcl_timer_is_ready+0x42>
 8015ab2:	bf00      	nop

08015ab4 <rcl_timer_get_time_until_next_call>:
 8015ab4:	b570      	push	{r4, r5, r6, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	b1d8      	cbz	r0, 8015af2 <rcl_timer_get_time_until_next_call+0x3e>
 8015aba:	460d      	mov	r5, r1
 8015abc:	b1c9      	cbz	r1, 8015af2 <rcl_timer_get_time_until_next_call+0x3e>
 8015abe:	6803      	ldr	r3, [r0, #0]
 8015ac0:	4604      	mov	r4, r0
 8015ac2:	4669      	mov	r1, sp
 8015ac4:	6818      	ldr	r0, [r3, #0]
 8015ac6:	f7ff ff1d 	bl	8015904 <rcl_clock_get_now>
 8015aca:	4606      	mov	r6, r0
 8015acc:	b110      	cbz	r0, 8015ad4 <rcl_timer_get_time_until_next_call+0x20>
 8015ace:	4630      	mov	r0, r6
 8015ad0:	b002      	add	sp, #8
 8015ad2:	bd70      	pop	{r4, r5, r6, pc}
 8015ad4:	6820      	ldr	r0, [r4, #0]
 8015ad6:	2105      	movs	r1, #5
 8015ad8:	3028      	adds	r0, #40	; 0x28
 8015ada:	f000 ff6d 	bl	80169b8 <__atomic_load_8>
 8015ade:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015ae2:	1ac0      	subs	r0, r0, r3
 8015ae4:	eb61 0102 	sbc.w	r1, r1, r2
 8015ae8:	e9c5 0100 	strd	r0, r1, [r5]
 8015aec:	4630      	mov	r0, r6
 8015aee:	b002      	add	sp, #8
 8015af0:	bd70      	pop	{r4, r5, r6, pc}
 8015af2:	260b      	movs	r6, #11
 8015af4:	4630      	mov	r0, r6
 8015af6:	b002      	add	sp, #8
 8015af8:	bd70      	pop	{r4, r5, r6, pc}
 8015afa:	bf00      	nop

08015afc <rcl_timer_is_canceled>:
 8015afc:	b168      	cbz	r0, 8015b1a <rcl_timer_is_canceled+0x1e>
 8015afe:	b161      	cbz	r1, 8015b1a <rcl_timer_is_canceled+0x1e>
 8015b00:	6803      	ldr	r3, [r0, #0]
 8015b02:	f3bf 8f5b 	dmb	ish
 8015b06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015b0a:	f3bf 8f5b 	dmb	ish
 8015b0e:	3b00      	subs	r3, #0
 8015b10:	bf18      	it	ne
 8015b12:	2301      	movne	r3, #1
 8015b14:	700b      	strb	r3, [r1, #0]
 8015b16:	2000      	movs	r0, #0
 8015b18:	4770      	bx	lr
 8015b1a:	200b      	movs	r0, #11
 8015b1c:	4770      	bx	lr
 8015b1e:	bf00      	nop

08015b20 <rcl_timer_get_guard_condition>:
 8015b20:	b130      	cbz	r0, 8015b30 <rcl_timer_get_guard_condition+0x10>
 8015b22:	6800      	ldr	r0, [r0, #0]
 8015b24:	b120      	cbz	r0, 8015b30 <rcl_timer_get_guard_condition+0x10>
 8015b26:	68c3      	ldr	r3, [r0, #12]
 8015b28:	b10b      	cbz	r3, 8015b2e <rcl_timer_get_guard_condition+0xe>
 8015b2a:	3008      	adds	r0, #8
 8015b2c:	4770      	bx	lr
 8015b2e:	4618      	mov	r0, r3
 8015b30:	4770      	bx	lr
 8015b32:	bf00      	nop

08015b34 <rcl_validate_enclave_name_with_size>:
 8015b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b36:	b0c3      	sub	sp, #268	; 0x10c
 8015b38:	b1d0      	cbz	r0, 8015b70 <rcl_validate_enclave_name_with_size+0x3c>
 8015b3a:	4615      	mov	r5, r2
 8015b3c:	b1c2      	cbz	r2, 8015b70 <rcl_validate_enclave_name_with_size+0x3c>
 8015b3e:	461f      	mov	r7, r3
 8015b40:	466a      	mov	r2, sp
 8015b42:	ab01      	add	r3, sp, #4
 8015b44:	460e      	mov	r6, r1
 8015b46:	f001 f96f 	bl	8016e28 <rmw_validate_namespace_with_size>
 8015b4a:	4604      	mov	r4, r0
 8015b4c:	b9e0      	cbnz	r0, 8015b88 <rcl_validate_enclave_name_with_size+0x54>
 8015b4e:	9b00      	ldr	r3, [sp, #0]
 8015b50:	b923      	cbnz	r3, 8015b5c <rcl_validate_enclave_name_with_size+0x28>
 8015b52:	2300      	movs	r3, #0
 8015b54:	602b      	str	r3, [r5, #0]
 8015b56:	4620      	mov	r0, r4
 8015b58:	b043      	add	sp, #268	; 0x10c
 8015b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b5c:	2b07      	cmp	r3, #7
 8015b5e:	d00b      	beq.n	8015b78 <rcl_validate_enclave_name_with_size+0x44>
 8015b60:	1e5a      	subs	r2, r3, #1
 8015b62:	2a05      	cmp	r2, #5
 8015b64:	d82e      	bhi.n	8015bc4 <rcl_validate_enclave_name_with_size+0x90>
 8015b66:	e8df f002 	tbb	[pc, r2]
 8015b6a:	211e      	.short	0x211e
 8015b6c:	152a2724 	.word	0x152a2724
 8015b70:	240b      	movs	r4, #11
 8015b72:	4620      	mov	r0, r4
 8015b74:	b043      	add	sp, #268	; 0x10c
 8015b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b78:	2eff      	cmp	r6, #255	; 0xff
 8015b7a:	d9ea      	bls.n	8015b52 <rcl_validate_enclave_name_with_size+0x1e>
 8015b7c:	602b      	str	r3, [r5, #0]
 8015b7e:	2f00      	cmp	r7, #0
 8015b80:	d0e9      	beq.n	8015b56 <rcl_validate_enclave_name_with_size+0x22>
 8015b82:	23fe      	movs	r3, #254	; 0xfe
 8015b84:	603b      	str	r3, [r7, #0]
 8015b86:	e7e6      	b.n	8015b56 <rcl_validate_enclave_name_with_size+0x22>
 8015b88:	f7fe fea0 	bl	80148cc <rcl_convert_rmw_ret_to_rcl_ret>
 8015b8c:	4604      	mov	r4, r0
 8015b8e:	4620      	mov	r0, r4
 8015b90:	b043      	add	sp, #268	; 0x10c
 8015b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b94:	2306      	movs	r3, #6
 8015b96:	602b      	str	r3, [r5, #0]
 8015b98:	2f00      	cmp	r7, #0
 8015b9a:	d0dc      	beq.n	8015b56 <rcl_validate_enclave_name_with_size+0x22>
 8015b9c:	9b01      	ldr	r3, [sp, #4]
 8015b9e:	603b      	str	r3, [r7, #0]
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	b043      	add	sp, #268	; 0x10c
 8015ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ba6:	2301      	movs	r3, #1
 8015ba8:	602b      	str	r3, [r5, #0]
 8015baa:	e7f5      	b.n	8015b98 <rcl_validate_enclave_name_with_size+0x64>
 8015bac:	2302      	movs	r3, #2
 8015bae:	602b      	str	r3, [r5, #0]
 8015bb0:	e7f2      	b.n	8015b98 <rcl_validate_enclave_name_with_size+0x64>
 8015bb2:	2303      	movs	r3, #3
 8015bb4:	602b      	str	r3, [r5, #0]
 8015bb6:	e7ef      	b.n	8015b98 <rcl_validate_enclave_name_with_size+0x64>
 8015bb8:	2304      	movs	r3, #4
 8015bba:	602b      	str	r3, [r5, #0]
 8015bbc:	e7ec      	b.n	8015b98 <rcl_validate_enclave_name_with_size+0x64>
 8015bbe:	2305      	movs	r3, #5
 8015bc0:	602b      	str	r3, [r5, #0]
 8015bc2:	e7e9      	b.n	8015b98 <rcl_validate_enclave_name_with_size+0x64>
 8015bc4:	4a03      	ldr	r2, [pc, #12]	; (8015bd4 <rcl_validate_enclave_name_with_size+0xa0>)
 8015bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015bca:	a802      	add	r0, sp, #8
 8015bcc:	f001 f8a4 	bl	8016d18 <rcutils_snprintf>
 8015bd0:	2401      	movs	r4, #1
 8015bd2:	e7c0      	b.n	8015b56 <rcl_validate_enclave_name_with_size+0x22>
 8015bd4:	0801ef18 	.word	0x0801ef18

08015bd8 <rcl_validate_enclave_name>:
 8015bd8:	b168      	cbz	r0, 8015bf6 <rcl_validate_enclave_name+0x1e>
 8015bda:	b570      	push	{r4, r5, r6, lr}
 8015bdc:	460d      	mov	r5, r1
 8015bde:	4616      	mov	r6, r2
 8015be0:	4604      	mov	r4, r0
 8015be2:	f7ea fb07 	bl	80001f4 <strlen>
 8015be6:	4633      	mov	r3, r6
 8015be8:	4601      	mov	r1, r0
 8015bea:	462a      	mov	r2, r5
 8015bec:	4620      	mov	r0, r4
 8015bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bf2:	f7ff bf9f 	b.w	8015b34 <rcl_validate_enclave_name_with_size>
 8015bf6:	200b      	movs	r0, #11
 8015bf8:	4770      	bx	lr
 8015bfa:	bf00      	nop

08015bfc <rcl_validate_topic_name>:
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	f000 808b 	beq.w	8015d18 <rcl_validate_topic_name+0x11c>
 8015c02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c06:	460e      	mov	r6, r1
 8015c08:	2900      	cmp	r1, #0
 8015c0a:	f000 808c 	beq.w	8015d26 <rcl_validate_topic_name+0x12a>
 8015c0e:	4617      	mov	r7, r2
 8015c10:	4605      	mov	r5, r0
 8015c12:	f7ea faef 	bl	80001f4 <strlen>
 8015c16:	b1b0      	cbz	r0, 8015c46 <rcl_validate_topic_name+0x4a>
 8015c18:	f895 9000 	ldrb.w	r9, [r5]
 8015c1c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8015dcc <rcl_validate_topic_name+0x1d0>
 8015c20:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015c24:	f013 0304 	ands.w	r3, r3, #4
 8015c28:	d178      	bne.n	8015d1c <rcl_validate_topic_name+0x120>
 8015c2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8015c2e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015c32:	2a2f      	cmp	r2, #47	; 0x2f
 8015c34:	d10e      	bne.n	8015c54 <rcl_validate_topic_name+0x58>
 8015c36:	2202      	movs	r2, #2
 8015c38:	6032      	str	r2, [r6, #0]
 8015c3a:	b36f      	cbz	r7, 8015c98 <rcl_validate_topic_name+0x9c>
 8015c3c:	f8c7 8000 	str.w	r8, [r7]
 8015c40:	4618      	mov	r0, r3
 8015c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c46:	2301      	movs	r3, #1
 8015c48:	6033      	str	r3, [r6, #0]
 8015c4a:	b32f      	cbz	r7, 8015c98 <rcl_validate_topic_name+0x9c>
 8015c4c:	2000      	movs	r0, #0
 8015c4e:	6038      	str	r0, [r7, #0]
 8015c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c54:	461c      	mov	r4, r3
 8015c56:	4619      	mov	r1, r3
 8015c58:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8015c5c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015c60:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015c64:	f1be 0f09 	cmp.w	lr, #9
 8015c68:	d946      	bls.n	8015cf8 <rcl_validate_topic_name+0xfc>
 8015c6a:	f022 0e20 	bic.w	lr, r2, #32
 8015c6e:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015c72:	f1be 0f19 	cmp.w	lr, #25
 8015c76:	d93f      	bls.n	8015cf8 <rcl_validate_topic_name+0xfc>
 8015c78:	2a5f      	cmp	r2, #95	; 0x5f
 8015c7a:	d014      	beq.n	8015ca6 <rcl_validate_topic_name+0xaa>
 8015c7c:	2a2f      	cmp	r2, #47	; 0x2f
 8015c7e:	d05b      	beq.n	8015d38 <rcl_validate_topic_name+0x13c>
 8015c80:	2a7e      	cmp	r2, #126	; 0x7e
 8015c82:	d052      	beq.n	8015d2a <rcl_validate_topic_name+0x12e>
 8015c84:	2a7b      	cmp	r2, #123	; 0x7b
 8015c86:	d00a      	beq.n	8015c9e <rcl_validate_topic_name+0xa2>
 8015c88:	2a7d      	cmp	r2, #125	; 0x7d
 8015c8a:	d16f      	bne.n	8015d6c <rcl_validate_topic_name+0x170>
 8015c8c:	2c00      	cmp	r4, #0
 8015c8e:	d15e      	bne.n	8015d4e <rcl_validate_topic_name+0x152>
 8015c90:	2305      	movs	r3, #5
 8015c92:	6033      	str	r3, [r6, #0]
 8015c94:	b107      	cbz	r7, 8015c98 <rcl_validate_topic_name+0x9c>
 8015c96:	6039      	str	r1, [r7, #0]
 8015c98:	2000      	movs	r0, #0
 8015c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c9e:	2c00      	cmp	r4, #0
 8015ca0:	d14c      	bne.n	8015d3c <rcl_validate_topic_name+0x140>
 8015ca2:	460b      	mov	r3, r1
 8015ca4:	2401      	movs	r4, #1
 8015ca6:	3101      	adds	r1, #1
 8015ca8:	4288      	cmp	r0, r1
 8015caa:	d1d7      	bne.n	8015c5c <rcl_validate_topic_name+0x60>
 8015cac:	2c00      	cmp	r4, #0
 8015cae:	d156      	bne.n	8015d5e <rcl_validate_topic_name+0x162>
 8015cb0:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	d061      	beq.n	8015d7c <rcl_validate_topic_name+0x180>
 8015cb8:	f108 0e01 	add.w	lr, r8, #1
 8015cbc:	e007      	b.n	8015cce <rcl_validate_topic_name+0xd2>
 8015cbe:	2801      	cmp	r0, #1
 8015cc0:	d047      	beq.n	8015d52 <rcl_validate_topic_name+0x156>
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	4291      	cmp	r1, r2
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f105 0501 	add.w	r5, r5, #1
 8015ccc:	d944      	bls.n	8015d58 <rcl_validate_topic_name+0x15c>
 8015cce:	4580      	cmp	r8, r0
 8015cd0:	f100 0301 	add.w	r3, r0, #1
 8015cd4:	d037      	beq.n	8015d46 <rcl_validate_topic_name+0x14a>
 8015cd6:	782a      	ldrb	r2, [r5, #0]
 8015cd8:	2a2f      	cmp	r2, #47	; 0x2f
 8015cda:	d1f0      	bne.n	8015cbe <rcl_validate_topic_name+0xc2>
 8015cdc:	786b      	ldrb	r3, [r5, #1]
 8015cde:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8015ce2:	1c43      	adds	r3, r0, #1
 8015ce4:	0760      	lsls	r0, r4, #29
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	d5ec      	bpl.n	8015cc4 <rcl_validate_topic_name+0xc8>
 8015cea:	2304      	movs	r3, #4
 8015cec:	6033      	str	r3, [r6, #0]
 8015cee:	2f00      	cmp	r7, #0
 8015cf0:	d0d2      	beq.n	8015c98 <rcl_validate_topic_name+0x9c>
 8015cf2:	603a      	str	r2, [r7, #0]
 8015cf4:	2000      	movs	r0, #0
 8015cf6:	e7ab      	b.n	8015c50 <rcl_validate_topic_name+0x54>
 8015cf8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015cfc:	0752      	lsls	r2, r2, #29
 8015cfe:	d5d2      	bpl.n	8015ca6 <rcl_validate_topic_name+0xaa>
 8015d00:	2c00      	cmp	r4, #0
 8015d02:	d0d0      	beq.n	8015ca6 <rcl_validate_topic_name+0xaa>
 8015d04:	2900      	cmp	r1, #0
 8015d06:	d0ce      	beq.n	8015ca6 <rcl_validate_topic_name+0xaa>
 8015d08:	1e4a      	subs	r2, r1, #1
 8015d0a:	429a      	cmp	r2, r3
 8015d0c:	d1cb      	bne.n	8015ca6 <rcl_validate_topic_name+0xaa>
 8015d0e:	2309      	movs	r3, #9
 8015d10:	6033      	str	r3, [r6, #0]
 8015d12:	2f00      	cmp	r7, #0
 8015d14:	d1bf      	bne.n	8015c96 <rcl_validate_topic_name+0x9a>
 8015d16:	e7bf      	b.n	8015c98 <rcl_validate_topic_name+0x9c>
 8015d18:	200b      	movs	r0, #11
 8015d1a:	4770      	bx	lr
 8015d1c:	2304      	movs	r3, #4
 8015d1e:	6033      	str	r3, [r6, #0]
 8015d20:	2f00      	cmp	r7, #0
 8015d22:	d193      	bne.n	8015c4c <rcl_validate_topic_name+0x50>
 8015d24:	e7b8      	b.n	8015c98 <rcl_validate_topic_name+0x9c>
 8015d26:	200b      	movs	r0, #11
 8015d28:	e792      	b.n	8015c50 <rcl_validate_topic_name+0x54>
 8015d2a:	2900      	cmp	r1, #0
 8015d2c:	d0bb      	beq.n	8015ca6 <rcl_validate_topic_name+0xaa>
 8015d2e:	2306      	movs	r3, #6
 8015d30:	6033      	str	r3, [r6, #0]
 8015d32:	2f00      	cmp	r7, #0
 8015d34:	d1af      	bne.n	8015c96 <rcl_validate_topic_name+0x9a>
 8015d36:	e7af      	b.n	8015c98 <rcl_validate_topic_name+0x9c>
 8015d38:	2c00      	cmp	r4, #0
 8015d3a:	d0b4      	beq.n	8015ca6 <rcl_validate_topic_name+0xaa>
 8015d3c:	2308      	movs	r3, #8
 8015d3e:	6033      	str	r3, [r6, #0]
 8015d40:	2f00      	cmp	r7, #0
 8015d42:	d1a8      	bne.n	8015c96 <rcl_validate_topic_name+0x9a>
 8015d44:	e7a8      	b.n	8015c98 <rcl_validate_topic_name+0x9c>
 8015d46:	4672      	mov	r2, lr
 8015d48:	f108 0301 	add.w	r3, r8, #1
 8015d4c:	e7ba      	b.n	8015cc4 <rcl_validate_topic_name+0xc8>
 8015d4e:	2400      	movs	r4, #0
 8015d50:	e7a9      	b.n	8015ca6 <rcl_validate_topic_name+0xaa>
 8015d52:	2202      	movs	r2, #2
 8015d54:	4613      	mov	r3, r2
 8015d56:	e7b5      	b.n	8015cc4 <rcl_validate_topic_name+0xc8>
 8015d58:	2000      	movs	r0, #0
 8015d5a:	6030      	str	r0, [r6, #0]
 8015d5c:	e778      	b.n	8015c50 <rcl_validate_topic_name+0x54>
 8015d5e:	2205      	movs	r2, #5
 8015d60:	6032      	str	r2, [r6, #0]
 8015d62:	2f00      	cmp	r7, #0
 8015d64:	d098      	beq.n	8015c98 <rcl_validate_topic_name+0x9c>
 8015d66:	603b      	str	r3, [r7, #0]
 8015d68:	2000      	movs	r0, #0
 8015d6a:	e771      	b.n	8015c50 <rcl_validate_topic_name+0x54>
 8015d6c:	2c00      	cmp	r4, #0
 8015d6e:	bf14      	ite	ne
 8015d70:	2308      	movne	r3, #8
 8015d72:	2303      	moveq	r3, #3
 8015d74:	6033      	str	r3, [r6, #0]
 8015d76:	2f00      	cmp	r7, #0
 8015d78:	d18d      	bne.n	8015c96 <rcl_validate_topic_name+0x9a>
 8015d7a:	e78d      	b.n	8015c98 <rcl_validate_topic_name+0x9c>
 8015d7c:	f108 0401 	add.w	r4, r8, #1
 8015d80:	e007      	b.n	8015d92 <rcl_validate_topic_name+0x196>
 8015d82:	2801      	cmp	r0, #1
 8015d84:	d019      	beq.n	8015dba <rcl_validate_topic_name+0x1be>
 8015d86:	461a      	mov	r2, r3
 8015d88:	4291      	cmp	r1, r2
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f105 0501 	add.w	r5, r5, #1
 8015d90:	d9e2      	bls.n	8015d58 <rcl_validate_topic_name+0x15c>
 8015d92:	4580      	cmp	r8, r0
 8015d94:	f100 0301 	add.w	r3, r0, #1
 8015d98:	d00b      	beq.n	8015db2 <rcl_validate_topic_name+0x1b6>
 8015d9a:	782a      	ldrb	r2, [r5, #0]
 8015d9c:	2a2f      	cmp	r2, #47	; 0x2f
 8015d9e:	d1f0      	bne.n	8015d82 <rcl_validate_topic_name+0x186>
 8015da0:	786b      	ldrb	r3, [r5, #1]
 8015da2:	f81c e003 	ldrb.w	lr, [ip, r3]
 8015da6:	1c43      	adds	r3, r0, #1
 8015da8:	f01e 0f04 	tst.w	lr, #4
 8015dac:	461a      	mov	r2, r3
 8015dae:	d0eb      	beq.n	8015d88 <rcl_validate_topic_name+0x18c>
 8015db0:	e79b      	b.n	8015cea <rcl_validate_topic_name+0xee>
 8015db2:	4622      	mov	r2, r4
 8015db4:	f108 0301 	add.w	r3, r8, #1
 8015db8:	e7e6      	b.n	8015d88 <rcl_validate_topic_name+0x18c>
 8015dba:	2307      	movs	r3, #7
 8015dbc:	6033      	str	r3, [r6, #0]
 8015dbe:	2f00      	cmp	r7, #0
 8015dc0:	f43f af6a 	beq.w	8015c98 <rcl_validate_topic_name+0x9c>
 8015dc4:	6038      	str	r0, [r7, #0]
 8015dc6:	2000      	movs	r0, #0
 8015dc8:	e742      	b.n	8015c50 <rcl_validate_topic_name+0x54>
 8015dca:	bf00      	nop
 8015dcc:	0801f331 	.word	0x0801f331

08015dd0 <rcl_get_zero_initialized_wait_set>:
 8015dd0:	b470      	push	{r4, r5, r6}
 8015dd2:	4d07      	ldr	r5, [pc, #28]	; (8015df0 <rcl_get_zero_initialized_wait_set+0x20>)
 8015dd4:	4606      	mov	r6, r0
 8015dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015dd8:	4634      	mov	r4, r6
 8015dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015de4:	682b      	ldr	r3, [r5, #0]
 8015de6:	6023      	str	r3, [r4, #0]
 8015de8:	4630      	mov	r0, r6
 8015dea:	bc70      	pop	{r4, r5, r6}
 8015dec:	4770      	bx	lr
 8015dee:	bf00      	nop
 8015df0:	0801ef78 	.word	0x0801ef78

08015df4 <rcl_wait_set_is_valid>:
 8015df4:	b118      	cbz	r0, 8015dfe <rcl_wait_set_is_valid+0xa>
 8015df6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015df8:	3800      	subs	r0, #0
 8015dfa:	bf18      	it	ne
 8015dfc:	2001      	movne	r0, #1
 8015dfe:	4770      	bx	lr

08015e00 <rcl_wait_set_fini>:
 8015e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e04:	b082      	sub	sp, #8
 8015e06:	2800      	cmp	r0, #0
 8015e08:	f000 8095 	beq.w	8015f36 <rcl_wait_set_fini+0x136>
 8015e0c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8015e0e:	4604      	mov	r4, r0
 8015e10:	2e00      	cmp	r6, #0
 8015e12:	f000 808c 	beq.w	8015f2e <rcl_wait_set_fini+0x12e>
 8015e16:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8015e18:	f001 fd8c 	bl	8017934 <rmw_destroy_wait_set>
 8015e1c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e1e:	1e06      	subs	r6, r0, #0
 8015e20:	bf18      	it	ne
 8015e22:	f44f 7661 	movne.w	r6, #900	; 0x384
 8015e26:	2d00      	cmp	r5, #0
 8015e28:	f000 8081 	beq.w	8015f2e <rcl_wait_set_fini+0x12e>
 8015e2c:	6820      	ldr	r0, [r4, #0]
 8015e2e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015e32:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e34:	2700      	movs	r7, #0
 8015e36:	6067      	str	r7, [r4, #4]
 8015e38:	602f      	str	r7, [r5, #0]
 8015e3a:	b120      	cbz	r0, 8015e46 <rcl_wait_set_fini+0x46>
 8015e3c:	9101      	str	r1, [sp, #4]
 8015e3e:	47c0      	blx	r8
 8015e40:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e42:	9901      	ldr	r1, [sp, #4]
 8015e44:	6027      	str	r7, [r4, #0]
 8015e46:	68a8      	ldr	r0, [r5, #8]
 8015e48:	b120      	cbz	r0, 8015e54 <rcl_wait_set_fini+0x54>
 8015e4a:	47c0      	blx	r8
 8015e4c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e4e:	2300      	movs	r3, #0
 8015e50:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015e54:	68a0      	ldr	r0, [r4, #8]
 8015e56:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e58:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e5a:	f04f 0800 	mov.w	r8, #0
 8015e5e:	f8c4 800c 	str.w	r8, [r4, #12]
 8015e62:	f8c5 800c 	str.w	r8, [r5, #12]
 8015e66:	b128      	cbz	r0, 8015e74 <rcl_wait_set_fini+0x74>
 8015e68:	47b8      	blx	r7
 8015e6a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e6c:	f8c4 8008 	str.w	r8, [r4, #8]
 8015e70:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e72:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e74:	6968      	ldr	r0, [r5, #20]
 8015e76:	f04f 0800 	mov.w	r8, #0
 8015e7a:	f8c5 8010 	str.w	r8, [r5, #16]
 8015e7e:	b128      	cbz	r0, 8015e8c <rcl_wait_set_fini+0x8c>
 8015e80:	47b8      	blx	r7
 8015e82:	f8c5 8014 	str.w	r8, [r5, #20]
 8015e86:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e88:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e8a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e8c:	6920      	ldr	r0, [r4, #16]
 8015e8e:	f04f 0800 	mov.w	r8, #0
 8015e92:	f8c4 8014 	str.w	r8, [r4, #20]
 8015e96:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8015e9a:	b128      	cbz	r0, 8015ea8 <rcl_wait_set_fini+0xa8>
 8015e9c:	47b8      	blx	r7
 8015e9e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ea0:	f8c4 8010 	str.w	r8, [r4, #16]
 8015ea4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015ea6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015ea8:	69a0      	ldr	r0, [r4, #24]
 8015eaa:	f04f 0800 	mov.w	r8, #0
 8015eae:	f8c4 801c 	str.w	r8, [r4, #28]
 8015eb2:	f8c5 8018 	str.w	r8, [r5, #24]
 8015eb6:	b128      	cbz	r0, 8015ec4 <rcl_wait_set_fini+0xc4>
 8015eb8:	9101      	str	r1, [sp, #4]
 8015eba:	47b8      	blx	r7
 8015ebc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ebe:	9901      	ldr	r1, [sp, #4]
 8015ec0:	f8c4 8018 	str.w	r8, [r4, #24]
 8015ec4:	6a28      	ldr	r0, [r5, #32]
 8015ec6:	b120      	cbz	r0, 8015ed2 <rcl_wait_set_fini+0xd2>
 8015ec8:	47b8      	blx	r7
 8015eca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ecc:	2300      	movs	r3, #0
 8015ece:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015ed2:	6a20      	ldr	r0, [r4, #32]
 8015ed4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015ed8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015eda:	2700      	movs	r7, #0
 8015edc:	6267      	str	r7, [r4, #36]	; 0x24
 8015ede:	626f      	str	r7, [r5, #36]	; 0x24
 8015ee0:	b120      	cbz	r0, 8015eec <rcl_wait_set_fini+0xec>
 8015ee2:	9101      	str	r1, [sp, #4]
 8015ee4:	47c0      	blx	r8
 8015ee6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ee8:	9901      	ldr	r1, [sp, #4]
 8015eea:	6227      	str	r7, [r4, #32]
 8015eec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8015eee:	b120      	cbz	r0, 8015efa <rcl_wait_set_fini+0xfa>
 8015ef0:	47c0      	blx	r8
 8015ef2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8015efa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015efc:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015f00:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015f02:	2700      	movs	r7, #0
 8015f04:	62e7      	str	r7, [r4, #44]	; 0x2c
 8015f06:	632f      	str	r7, [r5, #48]	; 0x30
 8015f08:	b120      	cbz	r0, 8015f14 <rcl_wait_set_fini+0x114>
 8015f0a:	9101      	str	r1, [sp, #4]
 8015f0c:	47c0      	blx	r8
 8015f0e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f10:	9901      	ldr	r1, [sp, #4]
 8015f12:	62a7      	str	r7, [r4, #40]	; 0x28
 8015f14:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8015f16:	b120      	cbz	r0, 8015f22 <rcl_wait_set_fini+0x122>
 8015f18:	47c0      	blx	r8
 8015f1a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8015f22:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015f24:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015f26:	4628      	mov	r0, r5
 8015f28:	4798      	blx	r3
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	6323      	str	r3, [r4, #48]	; 0x30
 8015f2e:	4630      	mov	r0, r6
 8015f30:	b002      	add	sp, #8
 8015f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f36:	260b      	movs	r6, #11
 8015f38:	4630      	mov	r0, r6
 8015f3a:	b002      	add	sp, #8
 8015f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f40 <rcl_wait_set_add_subscription>:
 8015f40:	b320      	cbz	r0, 8015f8c <rcl_wait_set_add_subscription+0x4c>
 8015f42:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015f44:	b570      	push	{r4, r5, r6, lr}
 8015f46:	4604      	mov	r4, r0
 8015f48:	b1d3      	cbz	r3, 8015f80 <rcl_wait_set_add_subscription+0x40>
 8015f4a:	b319      	cbz	r1, 8015f94 <rcl_wait_set_add_subscription+0x54>
 8015f4c:	681d      	ldr	r5, [r3, #0]
 8015f4e:	6860      	ldr	r0, [r4, #4]
 8015f50:	4285      	cmp	r5, r0
 8015f52:	d218      	bcs.n	8015f86 <rcl_wait_set_add_subscription+0x46>
 8015f54:	6820      	ldr	r0, [r4, #0]
 8015f56:	1c6e      	adds	r6, r5, #1
 8015f58:	601e      	str	r6, [r3, #0]
 8015f5a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015f5e:	b102      	cbz	r2, 8015f62 <rcl_wait_set_add_subscription+0x22>
 8015f60:	6015      	str	r5, [r2, #0]
 8015f62:	4608      	mov	r0, r1
 8015f64:	f7ff fc30 	bl	80157c8 <rcl_subscription_get_rmw_handle>
 8015f68:	b190      	cbz	r0, 8015f90 <rcl_wait_set_add_subscription+0x50>
 8015f6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f6c:	6842      	ldr	r2, [r0, #4]
 8015f6e:	689b      	ldr	r3, [r3, #8]
 8015f70:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015f76:	6853      	ldr	r3, [r2, #4]
 8015f78:	3301      	adds	r3, #1
 8015f7a:	6053      	str	r3, [r2, #4]
 8015f7c:	2000      	movs	r0, #0
 8015f7e:	bd70      	pop	{r4, r5, r6, pc}
 8015f80:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015f84:	bd70      	pop	{r4, r5, r6, pc}
 8015f86:	f240 3086 	movw	r0, #902	; 0x386
 8015f8a:	bd70      	pop	{r4, r5, r6, pc}
 8015f8c:	200b      	movs	r0, #11
 8015f8e:	4770      	bx	lr
 8015f90:	2001      	movs	r0, #1
 8015f92:	bd70      	pop	{r4, r5, r6, pc}
 8015f94:	200b      	movs	r0, #11
 8015f96:	bd70      	pop	{r4, r5, r6, pc}

08015f98 <rcl_wait_set_clear>:
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	d073      	beq.n	8016084 <rcl_wait_set_clear+0xec>
 8015f9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015f9e:	b510      	push	{r4, lr}
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d070      	beq.n	8016088 <rcl_wait_set_clear+0xf0>
 8015fa6:	6800      	ldr	r0, [r0, #0]
 8015fa8:	b138      	cbz	r0, 8015fba <rcl_wait_set_clear+0x22>
 8015faa:	6862      	ldr	r2, [r4, #4]
 8015fac:	2100      	movs	r1, #0
 8015fae:	0092      	lsls	r2, r2, #2
 8015fb0:	f003 fda8 	bl	8019b04 <memset>
 8015fb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	601a      	str	r2, [r3, #0]
 8015fba:	68a0      	ldr	r0, [r4, #8]
 8015fbc:	b138      	cbz	r0, 8015fce <rcl_wait_set_clear+0x36>
 8015fbe:	68e2      	ldr	r2, [r4, #12]
 8015fc0:	2100      	movs	r1, #0
 8015fc2:	0092      	lsls	r2, r2, #2
 8015fc4:	f003 fd9e 	bl	8019b04 <memset>
 8015fc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fca:	2200      	movs	r2, #0
 8015fcc:	60da      	str	r2, [r3, #12]
 8015fce:	69a0      	ldr	r0, [r4, #24]
 8015fd0:	b138      	cbz	r0, 8015fe2 <rcl_wait_set_clear+0x4a>
 8015fd2:	69e2      	ldr	r2, [r4, #28]
 8015fd4:	2100      	movs	r1, #0
 8015fd6:	0092      	lsls	r2, r2, #2
 8015fd8:	f003 fd94 	bl	8019b04 <memset>
 8015fdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fde:	2200      	movs	r2, #0
 8015fe0:	619a      	str	r2, [r3, #24]
 8015fe2:	6a20      	ldr	r0, [r4, #32]
 8015fe4:	b138      	cbz	r0, 8015ff6 <rcl_wait_set_clear+0x5e>
 8015fe6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015fe8:	2100      	movs	r1, #0
 8015fea:	0092      	lsls	r2, r2, #2
 8015fec:	f003 fd8a 	bl	8019b04 <memset>
 8015ff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	625a      	str	r2, [r3, #36]	; 0x24
 8015ff6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015ff8:	b138      	cbz	r0, 801600a <rcl_wait_set_clear+0x72>
 8015ffa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015ffc:	2100      	movs	r1, #0
 8015ffe:	0092      	lsls	r2, r2, #2
 8016000:	f003 fd80 	bl	8019b04 <memset>
 8016004:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016006:	2200      	movs	r2, #0
 8016008:	631a      	str	r2, [r3, #48]	; 0x30
 801600a:	6920      	ldr	r0, [r4, #16]
 801600c:	b138      	cbz	r0, 801601e <rcl_wait_set_clear+0x86>
 801600e:	6962      	ldr	r2, [r4, #20]
 8016010:	2100      	movs	r1, #0
 8016012:	0092      	lsls	r2, r2, #2
 8016014:	f003 fd76 	bl	8019b04 <memset>
 8016018:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801601a:	2200      	movs	r2, #0
 801601c:	641a      	str	r2, [r3, #64]	; 0x40
 801601e:	6898      	ldr	r0, [r3, #8]
 8016020:	b138      	cbz	r0, 8016032 <rcl_wait_set_clear+0x9a>
 8016022:	685a      	ldr	r2, [r3, #4]
 8016024:	2100      	movs	r1, #0
 8016026:	0092      	lsls	r2, r2, #2
 8016028:	f003 fd6c 	bl	8019b04 <memset>
 801602c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801602e:	2200      	movs	r2, #0
 8016030:	605a      	str	r2, [r3, #4]
 8016032:	6958      	ldr	r0, [r3, #20]
 8016034:	b138      	cbz	r0, 8016046 <rcl_wait_set_clear+0xae>
 8016036:	691a      	ldr	r2, [r3, #16]
 8016038:	2100      	movs	r1, #0
 801603a:	0092      	lsls	r2, r2, #2
 801603c:	f003 fd62 	bl	8019b04 <memset>
 8016040:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016042:	2200      	movs	r2, #0
 8016044:	611a      	str	r2, [r3, #16]
 8016046:	6a18      	ldr	r0, [r3, #32]
 8016048:	b138      	cbz	r0, 801605a <rcl_wait_set_clear+0xc2>
 801604a:	69da      	ldr	r2, [r3, #28]
 801604c:	2100      	movs	r1, #0
 801604e:	0092      	lsls	r2, r2, #2
 8016050:	f003 fd58 	bl	8019b04 <memset>
 8016054:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016056:	2200      	movs	r2, #0
 8016058:	61da      	str	r2, [r3, #28]
 801605a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801605c:	b138      	cbz	r0, 801606e <rcl_wait_set_clear+0xd6>
 801605e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016060:	2100      	movs	r1, #0
 8016062:	0092      	lsls	r2, r2, #2
 8016064:	f003 fd4e 	bl	8019b04 <memset>
 8016068:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801606a:	2200      	movs	r2, #0
 801606c:	629a      	str	r2, [r3, #40]	; 0x28
 801606e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016070:	b138      	cbz	r0, 8016082 <rcl_wait_set_clear+0xea>
 8016072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016074:	2100      	movs	r1, #0
 8016076:	0092      	lsls	r2, r2, #2
 8016078:	f003 fd44 	bl	8019b04 <memset>
 801607c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801607e:	2000      	movs	r0, #0
 8016080:	6358      	str	r0, [r3, #52]	; 0x34
 8016082:	bd10      	pop	{r4, pc}
 8016084:	200b      	movs	r0, #11
 8016086:	4770      	bx	lr
 8016088:	f44f 7061 	mov.w	r0, #900	; 0x384
 801608c:	bd10      	pop	{r4, pc}
 801608e:	bf00      	nop

08016090 <rcl_wait_set_resize>:
 8016090:	2800      	cmp	r0, #0
 8016092:	f000 81a6 	beq.w	80163e2 <rcl_wait_set_resize+0x352>
 8016096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801609a:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 801609e:	b083      	sub	sp, #12
 80160a0:	4604      	mov	r4, r0
 80160a2:	f1ba 0f00 	cmp.w	sl, #0
 80160a6:	f000 819e 	beq.w	80163e6 <rcl_wait_set_resize+0x356>
 80160aa:	461e      	mov	r6, r3
 80160ac:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 80160b0:	f04f 0800 	mov.w	r8, #0
 80160b4:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 80160b8:	9300      	str	r3, [sp, #0]
 80160ba:	f8c0 8004 	str.w	r8, [r0, #4]
 80160be:	460f      	mov	r7, r1
 80160c0:	4615      	mov	r5, r2
 80160c2:	f8ca 8000 	str.w	r8, [sl]
 80160c6:	2900      	cmp	r1, #0
 80160c8:	f000 80c9 	beq.w	801625e <rcl_wait_set_resize+0x1ce>
 80160cc:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80160d0:	6800      	ldr	r0, [r0, #0]
 80160d2:	4651      	mov	r1, sl
 80160d4:	464a      	mov	r2, r9
 80160d6:	4798      	blx	r3
 80160d8:	6020      	str	r0, [r4, #0]
 80160da:	2800      	cmp	r0, #0
 80160dc:	f000 80d8 	beq.w	8016290 <rcl_wait_set_resize+0x200>
 80160e0:	4652      	mov	r2, sl
 80160e2:	4641      	mov	r1, r8
 80160e4:	f003 fd0e 	bl	8019b04 <memset>
 80160e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80160ea:	6067      	str	r7, [r4, #4]
 80160ec:	6898      	ldr	r0, [r3, #8]
 80160ee:	f8c3 8004 	str.w	r8, [r3, #4]
 80160f2:	9301      	str	r3, [sp, #4]
 80160f4:	464a      	mov	r2, r9
 80160f6:	9b00      	ldr	r3, [sp, #0]
 80160f8:	4651      	mov	r1, sl
 80160fa:	4798      	blx	r3
 80160fc:	9b01      	ldr	r3, [sp, #4]
 80160fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016100:	6098      	str	r0, [r3, #8]
 8016102:	6897      	ldr	r7, [r2, #8]
 8016104:	2f00      	cmp	r7, #0
 8016106:	f000 80be 	beq.w	8016286 <rcl_wait_set_resize+0x1f6>
 801610a:	4652      	mov	r2, sl
 801610c:	4641      	mov	r1, r8
 801610e:	4638      	mov	r0, r7
 8016110:	f003 fcf8 	bl	8019b04 <memset>
 8016114:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016118:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801611c:	2700      	movs	r7, #0
 801611e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8016122:	60e7      	str	r7, [r4, #12]
 8016124:	f8ca 700c 	str.w	r7, [sl, #12]
 8016128:	2d00      	cmp	r5, #0
 801612a:	f040 80b5 	bne.w	8016298 <rcl_wait_set_resize+0x208>
 801612e:	68a0      	ldr	r0, [r4, #8]
 8016130:	b130      	cbz	r0, 8016140 <rcl_wait_set_resize+0xb0>
 8016132:	4641      	mov	r1, r8
 8016134:	4790      	blx	r2
 8016136:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801613a:	60a5      	str	r5, [r4, #8]
 801613c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016140:	2700      	movs	r7, #0
 8016142:	19ad      	adds	r5, r5, r6
 8016144:	f8ca 7010 	str.w	r7, [sl, #16]
 8016148:	f040 80be 	bne.w	80162c8 <rcl_wait_set_resize+0x238>
 801614c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016150:	b148      	cbz	r0, 8016166 <rcl_wait_set_resize+0xd6>
 8016152:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8016156:	4641      	mov	r1, r8
 8016158:	4798      	blx	r3
 801615a:	f8ca 5014 	str.w	r5, [sl, #20]
 801615e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016162:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016166:	2500      	movs	r5, #0
 8016168:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801616c:	6165      	str	r5, [r4, #20]
 801616e:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8016172:	2e00      	cmp	r6, #0
 8016174:	f040 80bf 	bne.w	80162f6 <rcl_wait_set_resize+0x266>
 8016178:	6920      	ldr	r0, [r4, #16]
 801617a:	b140      	cbz	r0, 801618e <rcl_wait_set_resize+0xfe>
 801617c:	4641      	mov	r1, r8
 801617e:	47c8      	blx	r9
 8016180:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016184:	6126      	str	r6, [r4, #16]
 8016186:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801618a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801618e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016190:	2500      	movs	r5, #0
 8016192:	61e5      	str	r5, [r4, #28]
 8016194:	f8ca 5018 	str.w	r5, [sl, #24]
 8016198:	2b00      	cmp	r3, #0
 801619a:	f040 80c1 	bne.w	8016320 <rcl_wait_set_resize+0x290>
 801619e:	69a0      	ldr	r0, [r4, #24]
 80161a0:	b128      	cbz	r0, 80161ae <rcl_wait_set_resize+0x11e>
 80161a2:	4641      	mov	r1, r8
 80161a4:	47c8      	blx	r9
 80161a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80161ac:	61a3      	str	r3, [r4, #24]
 80161ae:	f8da 0020 	ldr.w	r0, [sl, #32]
 80161b2:	b130      	cbz	r0, 80161c2 <rcl_wait_set_resize+0x132>
 80161b4:	4641      	mov	r1, r8
 80161b6:	47c8      	blx	r9
 80161b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80161bc:	2300      	movs	r3, #0
 80161be:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80161c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161c4:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 80161c8:	2600      	movs	r6, #0
 80161ca:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 80161ce:	6266      	str	r6, [r4, #36]	; 0x24
 80161d0:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	f000 80c8 	beq.w	801636a <rcl_wait_set_resize+0x2da>
 80161da:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80161de:	6a20      	ldr	r0, [r4, #32]
 80161e0:	4651      	mov	r1, sl
 80161e2:	463a      	mov	r2, r7
 80161e4:	47c8      	blx	r9
 80161e6:	6220      	str	r0, [r4, #32]
 80161e8:	2800      	cmp	r0, #0
 80161ea:	d051      	beq.n	8016290 <rcl_wait_set_resize+0x200>
 80161ec:	4652      	mov	r2, sl
 80161ee:	4631      	mov	r1, r6
 80161f0:	f003 fc88 	bl	8019b04 <memset>
 80161f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161f8:	6263      	str	r3, [r4, #36]	; 0x24
 80161fa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80161fc:	62ae      	str	r6, [r5, #40]	; 0x28
 80161fe:	463a      	mov	r2, r7
 8016200:	4651      	mov	r1, sl
 8016202:	47c8      	blx	r9
 8016204:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016206:	62e8      	str	r0, [r5, #44]	; 0x2c
 8016208:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801620a:	2d00      	cmp	r5, #0
 801620c:	f000 8105 	beq.w	801641a <rcl_wait_set_resize+0x38a>
 8016210:	4652      	mov	r2, sl
 8016212:	4631      	mov	r1, r6
 8016214:	4628      	mov	r0, r5
 8016216:	f003 fc75 	bl	8019b04 <memset>
 801621a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801621e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016220:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8016224:	2500      	movs	r5, #0
 8016226:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 801622a:	62e5      	str	r5, [r4, #44]	; 0x2c
 801622c:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8016230:	2b00      	cmp	r3, #0
 8016232:	f040 80af 	bne.w	8016394 <rcl_wait_set_resize+0x304>
 8016236:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016238:	b128      	cbz	r0, 8016246 <rcl_wait_set_resize+0x1b6>
 801623a:	4631      	mov	r1, r6
 801623c:	47b8      	blx	r7
 801623e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016240:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016244:	62a3      	str	r3, [r4, #40]	; 0x28
 8016246:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801624a:	b310      	cbz	r0, 8016292 <rcl_wait_set_resize+0x202>
 801624c:	4631      	mov	r1, r6
 801624e:	47b8      	blx	r7
 8016250:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016252:	2000      	movs	r0, #0
 8016254:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8016258:	b003      	add	sp, #12
 801625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801625e:	6800      	ldr	r0, [r0, #0]
 8016260:	b120      	cbz	r0, 801626c <rcl_wait_set_resize+0x1dc>
 8016262:	4649      	mov	r1, r9
 8016264:	47d8      	blx	fp
 8016266:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801626a:	6027      	str	r7, [r4, #0]
 801626c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8016270:	2800      	cmp	r0, #0
 8016272:	f43f af51 	beq.w	8016118 <rcl_wait_set_resize+0x88>
 8016276:	4649      	mov	r1, r9
 8016278:	47d8      	blx	fp
 801627a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801627e:	2300      	movs	r3, #0
 8016280:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8016284:	e748      	b.n	8016118 <rcl_wait_set_resize+0x88>
 8016286:	6820      	ldr	r0, [r4, #0]
 8016288:	4649      	mov	r1, r9
 801628a:	47d8      	blx	fp
 801628c:	e9c4 7700 	strd	r7, r7, [r4]
 8016290:	200a      	movs	r0, #10
 8016292:	b003      	add	sp, #12
 8016294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016298:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801629c:	68a0      	ldr	r0, [r4, #8]
 801629e:	4642      	mov	r2, r8
 80162a0:	4649      	mov	r1, r9
 80162a2:	4798      	blx	r3
 80162a4:	60a0      	str	r0, [r4, #8]
 80162a6:	2800      	cmp	r0, #0
 80162a8:	d0f2      	beq.n	8016290 <rcl_wait_set_resize+0x200>
 80162aa:	4639      	mov	r1, r7
 80162ac:	464a      	mov	r2, r9
 80162ae:	f003 fc29 	bl	8019b04 <memset>
 80162b2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162b6:	60e5      	str	r5, [r4, #12]
 80162b8:	2700      	movs	r7, #0
 80162ba:	19ad      	adds	r5, r5, r6
 80162bc:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80162c0:	f8ca 7010 	str.w	r7, [sl, #16]
 80162c4:	f43f af42 	beq.w	801614c <rcl_wait_set_resize+0xbc>
 80162c8:	00ad      	lsls	r5, r5, #2
 80162ca:	4642      	mov	r2, r8
 80162cc:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80162d0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80162d4:	4629      	mov	r1, r5
 80162d6:	4798      	blx	r3
 80162d8:	4680      	mov	r8, r0
 80162da:	f8ca 0014 	str.w	r0, [sl, #20]
 80162de:	2800      	cmp	r0, #0
 80162e0:	f000 8084 	beq.w	80163ec <rcl_wait_set_resize+0x35c>
 80162e4:	462a      	mov	r2, r5
 80162e6:	4639      	mov	r1, r7
 80162e8:	f003 fc0c 	bl	8019b04 <memset>
 80162ec:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162f0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80162f4:	e737      	b.n	8016166 <rcl_wait_set_resize+0xd6>
 80162f6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80162fa:	6920      	ldr	r0, [r4, #16]
 80162fc:	4642      	mov	r2, r8
 80162fe:	4649      	mov	r1, r9
 8016300:	47b8      	blx	r7
 8016302:	6120      	str	r0, [r4, #16]
 8016304:	2800      	cmp	r0, #0
 8016306:	d0c3      	beq.n	8016290 <rcl_wait_set_resize+0x200>
 8016308:	464a      	mov	r2, r9
 801630a:	4629      	mov	r1, r5
 801630c:	f003 fbfa 	bl	8019b04 <memset>
 8016310:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016314:	6166      	str	r6, [r4, #20]
 8016316:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801631a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801631e:	e736      	b.n	801618e <rcl_wait_set_resize+0xfe>
 8016320:	009e      	lsls	r6, r3, #2
 8016322:	69a0      	ldr	r0, [r4, #24]
 8016324:	4631      	mov	r1, r6
 8016326:	4642      	mov	r2, r8
 8016328:	47b8      	blx	r7
 801632a:	61a0      	str	r0, [r4, #24]
 801632c:	2800      	cmp	r0, #0
 801632e:	d0af      	beq.n	8016290 <rcl_wait_set_resize+0x200>
 8016330:	4632      	mov	r2, r6
 8016332:	4629      	mov	r1, r5
 8016334:	f003 fbe6 	bl	8019b04 <memset>
 8016338:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801633c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801633e:	61e3      	str	r3, [r4, #28]
 8016340:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016344:	f8ca 501c 	str.w	r5, [sl, #28]
 8016348:	4642      	mov	r2, r8
 801634a:	4631      	mov	r1, r6
 801634c:	47b8      	blx	r7
 801634e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016350:	f8ca 0020 	str.w	r0, [sl, #32]
 8016354:	6a1f      	ldr	r7, [r3, #32]
 8016356:	2f00      	cmp	r7, #0
 8016358:	d058      	beq.n	801640c <rcl_wait_set_resize+0x37c>
 801635a:	4632      	mov	r2, r6
 801635c:	4629      	mov	r1, r5
 801635e:	4638      	mov	r0, r7
 8016360:	f003 fbd0 	bl	8019b04 <memset>
 8016364:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016368:	e72b      	b.n	80161c2 <rcl_wait_set_resize+0x132>
 801636a:	6a20      	ldr	r0, [r4, #32]
 801636c:	b128      	cbz	r0, 801637a <rcl_wait_set_resize+0x2ea>
 801636e:	4639      	mov	r1, r7
 8016370:	47c0      	blx	r8
 8016372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016374:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016378:	6223      	str	r3, [r4, #32]
 801637a:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 801637e:	2800      	cmp	r0, #0
 8016380:	f43f af4d 	beq.w	801621e <rcl_wait_set_resize+0x18e>
 8016384:	4639      	mov	r1, r7
 8016386:	47c0      	blx	r8
 8016388:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801638c:	2300      	movs	r3, #0
 801638e:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8016392:	e744      	b.n	801621e <rcl_wait_set_resize+0x18e>
 8016394:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8016398:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801639a:	4641      	mov	r1, r8
 801639c:	4632      	mov	r2, r6
 801639e:	47c8      	blx	r9
 80163a0:	62a0      	str	r0, [r4, #40]	; 0x28
 80163a2:	2800      	cmp	r0, #0
 80163a4:	f43f af74 	beq.w	8016290 <rcl_wait_set_resize+0x200>
 80163a8:	4642      	mov	r2, r8
 80163aa:	4629      	mov	r1, r5
 80163ac:	f003 fbaa 	bl	8019b04 <memset>
 80163b0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80163b8:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80163bc:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 80163c0:	4632      	mov	r2, r6
 80163c2:	4641      	mov	r1, r8
 80163c4:	47c8      	blx	r9
 80163c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163c8:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80163cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163ce:	b35b      	cbz	r3, 8016428 <rcl_wait_set_resize+0x398>
 80163d0:	4642      	mov	r2, r8
 80163d2:	4618      	mov	r0, r3
 80163d4:	4629      	mov	r1, r5
 80163d6:	f003 fb95 	bl	8019b04 <memset>
 80163da:	4628      	mov	r0, r5
 80163dc:	b003      	add	sp, #12
 80163de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163e2:	200b      	movs	r0, #11
 80163e4:	4770      	bx	lr
 80163e6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80163ea:	e752      	b.n	8016292 <rcl_wait_set_resize+0x202>
 80163ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163ee:	68a0      	ldr	r0, [r4, #8]
 80163f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80163f2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80163f4:	4790      	blx	r2
 80163f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163f8:	6920      	ldr	r0, [r4, #16]
 80163fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80163fc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80163fe:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8016402:	4790      	blx	r2
 8016404:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8016408:	200a      	movs	r0, #10
 801640a:	e742      	b.n	8016292 <rcl_wait_set_resize+0x202>
 801640c:	69a0      	ldr	r0, [r4, #24]
 801640e:	4641      	mov	r1, r8
 8016410:	47c8      	blx	r9
 8016412:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8016416:	200a      	movs	r0, #10
 8016418:	e73b      	b.n	8016292 <rcl_wait_set_resize+0x202>
 801641a:	6a20      	ldr	r0, [r4, #32]
 801641c:	4639      	mov	r1, r7
 801641e:	47c0      	blx	r8
 8016420:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8016424:	200a      	movs	r0, #10
 8016426:	e734      	b.n	8016292 <rcl_wait_set_resize+0x202>
 8016428:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801642a:	9300      	str	r3, [sp, #0]
 801642c:	4631      	mov	r1, r6
 801642e:	47b8      	blx	r7
 8016430:	9b00      	ldr	r3, [sp, #0]
 8016432:	200a      	movs	r0, #10
 8016434:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8016438:	e72b      	b.n	8016292 <rcl_wait_set_resize+0x202>
 801643a:	bf00      	nop

0801643c <rcl_wait_set_init>:
 801643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016440:	b084      	sub	sp, #16
 8016442:	4604      	mov	r4, r0
 8016444:	a810      	add	r0, sp, #64	; 0x40
 8016446:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801644a:	460f      	mov	r7, r1
 801644c:	4690      	mov	r8, r2
 801644e:	4699      	mov	r9, r3
 8016450:	f7f8 ff6c 	bl	800f32c <rcutils_allocator_is_valid>
 8016454:	2800      	cmp	r0, #0
 8016456:	d06b      	beq.n	8016530 <rcl_wait_set_init+0xf4>
 8016458:	2c00      	cmp	r4, #0
 801645a:	d069      	beq.n	8016530 <rcl_wait_set_init+0xf4>
 801645c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801645e:	b125      	cbz	r5, 801646a <rcl_wait_set_init+0x2e>
 8016460:	2564      	movs	r5, #100	; 0x64
 8016462:	4628      	mov	r0, r5
 8016464:	b004      	add	sp, #16
 8016466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801646a:	f1ba 0f00 	cmp.w	sl, #0
 801646e:	d05f      	beq.n	8016530 <rcl_wait_set_init+0xf4>
 8016470:	4650      	mov	r0, sl
 8016472:	f7fe fa49 	bl	8014908 <rcl_context_is_valid>
 8016476:	2800      	cmp	r0, #0
 8016478:	d067      	beq.n	801654a <rcl_wait_set_init+0x10e>
 801647a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801647c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801647e:	205c      	movs	r0, #92	; 0x5c
 8016480:	4798      	blx	r3
 8016482:	6320      	str	r0, [r4, #48]	; 0x30
 8016484:	2800      	cmp	r0, #0
 8016486:	d062      	beq.n	801654e <rcl_wait_set_init+0x112>
 8016488:	225c      	movs	r2, #92	; 0x5c
 801648a:	4629      	mov	r1, r5
 801648c:	f003 fb3a 	bl	8019b04 <memset>
 8016490:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8016494:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016498:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801649a:	f8dc e000 	ldr.w	lr, [ip]
 801649e:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80164a2:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80164a6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80164aa:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80164ae:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80164b2:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 80164b6:	60b5      	str	r5, [r6, #8]
 80164b8:	6075      	str	r5, [r6, #4]
 80164ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164be:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80164c2:	1899      	adds	r1, r3, r2
 80164c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164c6:	f8da 0000 	ldr.w	r0, [sl]
 80164ca:	f8cc e000 	str.w	lr, [ip]
 80164ce:	4419      	add	r1, r3
 80164d0:	4441      	add	r1, r8
 80164d2:	3028      	adds	r0, #40	; 0x28
 80164d4:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80164d8:	f001 fa22 	bl	8017920 <rmw_create_wait_set>
 80164dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164de:	63f0      	str	r0, [r6, #60]	; 0x3c
 80164e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80164e2:	b350      	cbz	r0, 801653a <rcl_wait_set_init+0xfe>
 80164e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164e6:	9302      	str	r3, [sp, #8]
 80164e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164ea:	9301      	str	r3, [sp, #4]
 80164ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164ee:	9300      	str	r3, [sp, #0]
 80164f0:	4642      	mov	r2, r8
 80164f2:	464b      	mov	r3, r9
 80164f4:	4639      	mov	r1, r7
 80164f6:	4620      	mov	r0, r4
 80164f8:	f7ff fdca 	bl	8016090 <rcl_wait_set_resize>
 80164fc:	4605      	mov	r5, r0
 80164fe:	2800      	cmp	r0, #0
 8016500:	d0af      	beq.n	8016462 <rcl_wait_set_init+0x26>
 8016502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016504:	bb2b      	cbnz	r3, 8016552 <rcl_wait_set_init+0x116>
 8016506:	2600      	movs	r6, #0
 8016508:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801650c:	9600      	str	r6, [sp, #0]
 801650e:	4633      	mov	r3, r6
 8016510:	4632      	mov	r2, r6
 8016512:	4631      	mov	r1, r6
 8016514:	4620      	mov	r0, r4
 8016516:	f7ff fdbb 	bl	8016090 <rcl_wait_set_resize>
 801651a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801651c:	2800      	cmp	r0, #0
 801651e:	d0a0      	beq.n	8016462 <rcl_wait_set_init+0x26>
 8016520:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016522:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8016524:	4798      	blx	r3
 8016526:	4628      	mov	r0, r5
 8016528:	6326      	str	r6, [r4, #48]	; 0x30
 801652a:	b004      	add	sp, #16
 801652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016530:	250b      	movs	r5, #11
 8016532:	4628      	mov	r0, r5
 8016534:	b004      	add	sp, #16
 8016536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801653a:	2501      	movs	r5, #1
 801653c:	f001 f9fa 	bl	8017934 <rmw_destroy_wait_set>
 8016540:	2800      	cmp	r0, #0
 8016542:	bf18      	it	ne
 8016544:	f44f 7561 	movne.w	r5, #900	; 0x384
 8016548:	e7dd      	b.n	8016506 <rcl_wait_set_init+0xca>
 801654a:	2565      	movs	r5, #101	; 0x65
 801654c:	e789      	b.n	8016462 <rcl_wait_set_init+0x26>
 801654e:	250a      	movs	r5, #10
 8016550:	e787      	b.n	8016462 <rcl_wait_set_init+0x26>
 8016552:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016554:	e7f2      	b.n	801653c <rcl_wait_set_init+0x100>
 8016556:	bf00      	nop

08016558 <rcl_wait_set_add_guard_condition>:
 8016558:	b320      	cbz	r0, 80165a4 <rcl_wait_set_add_guard_condition+0x4c>
 801655a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801655c:	b570      	push	{r4, r5, r6, lr}
 801655e:	4604      	mov	r4, r0
 8016560:	b1d3      	cbz	r3, 8016598 <rcl_wait_set_add_guard_condition+0x40>
 8016562:	b319      	cbz	r1, 80165ac <rcl_wait_set_add_guard_condition+0x54>
 8016564:	68dd      	ldr	r5, [r3, #12]
 8016566:	68e0      	ldr	r0, [r4, #12]
 8016568:	4285      	cmp	r5, r0
 801656a:	d218      	bcs.n	801659e <rcl_wait_set_add_guard_condition+0x46>
 801656c:	68a0      	ldr	r0, [r4, #8]
 801656e:	1c6e      	adds	r6, r5, #1
 8016570:	60de      	str	r6, [r3, #12]
 8016572:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016576:	b102      	cbz	r2, 801657a <rcl_wait_set_add_guard_condition+0x22>
 8016578:	6015      	str	r5, [r2, #0]
 801657a:	4608      	mov	r0, r1
 801657c:	f003 f8e4 	bl	8019748 <rcl_guard_condition_get_rmw_handle>
 8016580:	b190      	cbz	r0, 80165a8 <rcl_wait_set_add_guard_condition+0x50>
 8016582:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016584:	6842      	ldr	r2, [r0, #4]
 8016586:	695b      	ldr	r3, [r3, #20]
 8016588:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801658c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801658e:	6913      	ldr	r3, [r2, #16]
 8016590:	3301      	adds	r3, #1
 8016592:	6113      	str	r3, [r2, #16]
 8016594:	2000      	movs	r0, #0
 8016596:	bd70      	pop	{r4, r5, r6, pc}
 8016598:	f44f 7061 	mov.w	r0, #900	; 0x384
 801659c:	bd70      	pop	{r4, r5, r6, pc}
 801659e:	f240 3086 	movw	r0, #902	; 0x386
 80165a2:	bd70      	pop	{r4, r5, r6, pc}
 80165a4:	200b      	movs	r0, #11
 80165a6:	4770      	bx	lr
 80165a8:	2001      	movs	r0, #1
 80165aa:	bd70      	pop	{r4, r5, r6, pc}
 80165ac:	200b      	movs	r0, #11
 80165ae:	bd70      	pop	{r4, r5, r6, pc}

080165b0 <rcl_wait_set_add_timer>:
 80165b0:	b340      	cbz	r0, 8016604 <rcl_wait_set_add_timer+0x54>
 80165b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80165b4:	b570      	push	{r4, r5, r6, lr}
 80165b6:	4604      	mov	r4, r0
 80165b8:	b1f3      	cbz	r3, 80165f8 <rcl_wait_set_add_timer+0x48>
 80165ba:	b329      	cbz	r1, 8016608 <rcl_wait_set_add_timer+0x58>
 80165bc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80165be:	6965      	ldr	r5, [r4, #20]
 80165c0:	42a8      	cmp	r0, r5
 80165c2:	d21c      	bcs.n	80165fe <rcl_wait_set_add_timer+0x4e>
 80165c4:	6925      	ldr	r5, [r4, #16]
 80165c6:	1c46      	adds	r6, r0, #1
 80165c8:	641e      	str	r6, [r3, #64]	; 0x40
 80165ca:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80165ce:	b102      	cbz	r2, 80165d2 <rcl_wait_set_add_timer+0x22>
 80165d0:	6010      	str	r0, [r2, #0]
 80165d2:	4608      	mov	r0, r1
 80165d4:	f7ff faa4 	bl	8015b20 <rcl_timer_get_guard_condition>
 80165d8:	b168      	cbz	r0, 80165f6 <rcl_wait_set_add_timer+0x46>
 80165da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80165dc:	68e3      	ldr	r3, [r4, #12]
 80165de:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80165e0:	3b01      	subs	r3, #1
 80165e2:	441d      	add	r5, r3
 80165e4:	f003 f8b0 	bl	8019748 <rcl_guard_condition_get_rmw_handle>
 80165e8:	b180      	cbz	r0, 801660c <rcl_wait_set_add_timer+0x5c>
 80165ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80165ec:	6842      	ldr	r2, [r0, #4]
 80165ee:	695b      	ldr	r3, [r3, #20]
 80165f0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165f4:	2000      	movs	r0, #0
 80165f6:	bd70      	pop	{r4, r5, r6, pc}
 80165f8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80165fc:	bd70      	pop	{r4, r5, r6, pc}
 80165fe:	f240 3086 	movw	r0, #902	; 0x386
 8016602:	bd70      	pop	{r4, r5, r6, pc}
 8016604:	200b      	movs	r0, #11
 8016606:	4770      	bx	lr
 8016608:	200b      	movs	r0, #11
 801660a:	bd70      	pop	{r4, r5, r6, pc}
 801660c:	2001      	movs	r0, #1
 801660e:	bd70      	pop	{r4, r5, r6, pc}

08016610 <rcl_wait_set_add_client>:
 8016610:	b320      	cbz	r0, 801665c <rcl_wait_set_add_client+0x4c>
 8016612:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016614:	b570      	push	{r4, r5, r6, lr}
 8016616:	4604      	mov	r4, r0
 8016618:	b1d3      	cbz	r3, 8016650 <rcl_wait_set_add_client+0x40>
 801661a:	b319      	cbz	r1, 8016664 <rcl_wait_set_add_client+0x54>
 801661c:	699d      	ldr	r5, [r3, #24]
 801661e:	69e0      	ldr	r0, [r4, #28]
 8016620:	4285      	cmp	r5, r0
 8016622:	d218      	bcs.n	8016656 <rcl_wait_set_add_client+0x46>
 8016624:	69a0      	ldr	r0, [r4, #24]
 8016626:	1c6e      	adds	r6, r5, #1
 8016628:	619e      	str	r6, [r3, #24]
 801662a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801662e:	b102      	cbz	r2, 8016632 <rcl_wait_set_add_client+0x22>
 8016630:	6015      	str	r5, [r2, #0]
 8016632:	4608      	mov	r0, r1
 8016634:	f7fe f908 	bl	8014848 <rcl_client_get_rmw_handle>
 8016638:	b190      	cbz	r0, 8016660 <rcl_wait_set_add_client+0x50>
 801663a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801663c:	6842      	ldr	r2, [r0, #4]
 801663e:	6a1b      	ldr	r3, [r3, #32]
 8016640:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016644:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016646:	69d3      	ldr	r3, [r2, #28]
 8016648:	3301      	adds	r3, #1
 801664a:	61d3      	str	r3, [r2, #28]
 801664c:	2000      	movs	r0, #0
 801664e:	bd70      	pop	{r4, r5, r6, pc}
 8016650:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016654:	bd70      	pop	{r4, r5, r6, pc}
 8016656:	f240 3086 	movw	r0, #902	; 0x386
 801665a:	bd70      	pop	{r4, r5, r6, pc}
 801665c:	200b      	movs	r0, #11
 801665e:	4770      	bx	lr
 8016660:	2001      	movs	r0, #1
 8016662:	bd70      	pop	{r4, r5, r6, pc}
 8016664:	200b      	movs	r0, #11
 8016666:	bd70      	pop	{r4, r5, r6, pc}

08016668 <rcl_wait_set_add_service>:
 8016668:	b320      	cbz	r0, 80166b4 <rcl_wait_set_add_service+0x4c>
 801666a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801666c:	b570      	push	{r4, r5, r6, lr}
 801666e:	4604      	mov	r4, r0
 8016670:	b1d3      	cbz	r3, 80166a8 <rcl_wait_set_add_service+0x40>
 8016672:	b319      	cbz	r1, 80166bc <rcl_wait_set_add_service+0x54>
 8016674:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8016676:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016678:	4285      	cmp	r5, r0
 801667a:	d218      	bcs.n	80166ae <rcl_wait_set_add_service+0x46>
 801667c:	6a20      	ldr	r0, [r4, #32]
 801667e:	1c6e      	adds	r6, r5, #1
 8016680:	625e      	str	r6, [r3, #36]	; 0x24
 8016682:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016686:	b102      	cbz	r2, 801668a <rcl_wait_set_add_service+0x22>
 8016688:	6015      	str	r5, [r2, #0]
 801668a:	4608      	mov	r0, r1
 801668c:	f7fe fed4 	bl	8015438 <rcl_service_get_rmw_handle>
 8016690:	b190      	cbz	r0, 80166b8 <rcl_wait_set_add_service+0x50>
 8016692:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016694:	6842      	ldr	r2, [r0, #4]
 8016696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016698:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801669c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801669e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80166a0:	3301      	adds	r3, #1
 80166a2:	6293      	str	r3, [r2, #40]	; 0x28
 80166a4:	2000      	movs	r0, #0
 80166a6:	bd70      	pop	{r4, r5, r6, pc}
 80166a8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80166ac:	bd70      	pop	{r4, r5, r6, pc}
 80166ae:	f240 3086 	movw	r0, #902	; 0x386
 80166b2:	bd70      	pop	{r4, r5, r6, pc}
 80166b4:	200b      	movs	r0, #11
 80166b6:	4770      	bx	lr
 80166b8:	2001      	movs	r0, #1
 80166ba:	bd70      	pop	{r4, r5, r6, pc}
 80166bc:	200b      	movs	r0, #11
 80166be:	bd70      	pop	{r4, r5, r6, pc}

080166c0 <rcl_wait>:
 80166c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c4:	b08f      	sub	sp, #60	; 0x3c
 80166c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80166ca:	2800      	cmp	r0, #0
 80166cc:	f000 814c 	beq.w	8016968 <rcl_wait+0x2a8>
 80166d0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80166d2:	4604      	mov	r4, r0
 80166d4:	2d00      	cmp	r5, #0
 80166d6:	f000 80bc 	beq.w	8016852 <rcl_wait+0x192>
 80166da:	6843      	ldr	r3, [r0, #4]
 80166dc:	b973      	cbnz	r3, 80166fc <rcl_wait+0x3c>
 80166de:	68e3      	ldr	r3, [r4, #12]
 80166e0:	b963      	cbnz	r3, 80166fc <rcl_wait+0x3c>
 80166e2:	6963      	ldr	r3, [r4, #20]
 80166e4:	b953      	cbnz	r3, 80166fc <rcl_wait+0x3c>
 80166e6:	69e3      	ldr	r3, [r4, #28]
 80166e8:	b943      	cbnz	r3, 80166fc <rcl_wait+0x3c>
 80166ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166ec:	b933      	cbnz	r3, 80166fc <rcl_wait+0x3c>
 80166ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80166f0:	b923      	cbnz	r3, 80166fc <rcl_wait+0x3c>
 80166f2:	f240 3085 	movw	r0, #901	; 0x385
 80166f6:	b00f      	add	sp, #60	; 0x3c
 80166f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016700:	2a01      	cmp	r2, #1
 8016702:	f173 0300 	sbcs.w	r3, r3, #0
 8016706:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8016708:	db56      	blt.n	80167b8 <rcl_wait+0xf8>
 801670a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801670e:	2900      	cmp	r1, #0
 8016710:	f000 8149 	beq.w	80169a6 <rcl_wait+0x2e6>
 8016714:	2300      	movs	r3, #0
 8016716:	9307      	str	r3, [sp, #28]
 8016718:	469b      	mov	fp, r3
 801671a:	f04f 0800 	mov.w	r8, #0
 801671e:	f04f 0900 	mov.w	r9, #0
 8016722:	e00d      	b.n	8016740 <rcl_wait+0x80>
 8016724:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016726:	6922      	ldr	r2, [r4, #16]
 8016728:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801672a:	f842 000a 	str.w	r0, [r2, sl]
 801672e:	f118 0801 	adds.w	r8, r8, #1
 8016732:	f149 0900 	adc.w	r9, r9, #0
 8016736:	2300      	movs	r3, #0
 8016738:	4599      	cmp	r9, r3
 801673a:	bf08      	it	eq
 801673c:	4588      	cmpeq	r8, r1
 801673e:	d243      	bcs.n	80167c8 <rcl_wait+0x108>
 8016740:	6922      	ldr	r2, [r4, #16]
 8016742:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8016746:	f852 000a 	ldr.w	r0, [r2, sl]
 801674a:	2800      	cmp	r0, #0
 801674c:	d0ef      	beq.n	801672e <rcl_wait+0x6e>
 801674e:	68e2      	ldr	r2, [r4, #12]
 8016750:	6969      	ldr	r1, [r5, #20]
 8016752:	4442      	add	r2, r8
 8016754:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8016758:	b13b      	cbz	r3, 801676a <rcl_wait+0xaa>
 801675a:	692a      	ldr	r2, [r5, #16]
 801675c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016760:	6921      	ldr	r1, [r4, #16]
 8016762:	3201      	adds	r2, #1
 8016764:	f851 000a 	ldr.w	r0, [r1, sl]
 8016768:	612a      	str	r2, [r5, #16]
 801676a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801676e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 8016772:	f7ff f9c3 	bl	8015afc <rcl_timer_is_canceled>
 8016776:	2800      	cmp	r0, #0
 8016778:	d1bd      	bne.n	80166f6 <rcl_wait+0x36>
 801677a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801677e:	2a00      	cmp	r2, #0
 8016780:	d1d0      	bne.n	8016724 <rcl_wait+0x64>
 8016782:	6922      	ldr	r2, [r4, #16]
 8016784:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016788:	f852 000a 	ldr.w	r0, [r2, sl]
 801678c:	a90a      	add	r1, sp, #40	; 0x28
 801678e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016792:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016796:	f7ff f98d 	bl	8015ab4 <rcl_timer_get_time_until_next_call>
 801679a:	2800      	cmp	r0, #0
 801679c:	d1ab      	bne.n	80166f6 <rcl_wait+0x36>
 801679e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80167a2:	42b2      	cmp	r2, r6
 80167a4:	eb73 0107 	sbcs.w	r1, r3, r7
 80167a8:	da03      	bge.n	80167b2 <rcl_wait+0xf2>
 80167aa:	461f      	mov	r7, r3
 80167ac:	2301      	movs	r3, #1
 80167ae:	4616      	mov	r6, r2
 80167b0:	9307      	str	r3, [sp, #28]
 80167b2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80167b4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80167b6:	e7ba      	b.n	801672e <rcl_wait+0x6e>
 80167b8:	2900      	cmp	r1, #0
 80167ba:	f000 80de 	beq.w	801697a <rcl_wait+0x2ba>
 80167be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80167c2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80167c6:	e7a5      	b.n	8016714 <rcl_wait+0x54>
 80167c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80167cc:	4313      	orrs	r3, r2
 80167ce:	d145      	bne.n	801685c <rcl_wait+0x19c>
 80167d0:	2300      	movs	r3, #0
 80167d2:	2200      	movs	r2, #0
 80167d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80167d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80167dc:	ab0a      	add	r3, sp, #40	; 0x28
 80167de:	9302      	str	r3, [sp, #8]
 80167e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80167e2:	9301      	str	r3, [sp, #4]
 80167e4:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80167e8:	9300      	str	r3, [sp, #0]
 80167ea:	f105 0228 	add.w	r2, r5, #40	; 0x28
 80167ee:	f105 031c 	add.w	r3, r5, #28
 80167f2:	f105 0110 	add.w	r1, r5, #16
 80167f6:	1d28      	adds	r0, r5, #4
 80167f8:	f000 ff12 	bl	8017620 <rmw_wait>
 80167fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80167fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016800:	4680      	mov	r8, r0
 8016802:	b30a      	cbz	r2, 8016848 <rcl_wait+0x188>
 8016804:	2500      	movs	r5, #0
 8016806:	462f      	mov	r7, r5
 8016808:	e004      	b.n	8016814 <rcl_wait+0x154>
 801680a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801680c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801680e:	3501      	adds	r5, #1
 8016810:	42aa      	cmp	r2, r5
 8016812:	d919      	bls.n	8016848 <rcl_wait+0x188>
 8016814:	6922      	ldr	r2, [r4, #16]
 8016816:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801681a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801681e:	00ae      	lsls	r6, r5, #2
 8016820:	2800      	cmp	r0, #0
 8016822:	d0f3      	beq.n	801680c <rcl_wait+0x14c>
 8016824:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8016828:	f7ff f90c 	bl	8015a44 <rcl_timer_is_ready>
 801682c:	2800      	cmp	r0, #0
 801682e:	f47f af62 	bne.w	80166f6 <rcl_wait+0x36>
 8016832:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016836:	2a00      	cmp	r2, #0
 8016838:	d1e7      	bne.n	801680a <rcl_wait+0x14a>
 801683a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801683c:	6921      	ldr	r1, [r4, #16]
 801683e:	518a      	str	r2, [r1, r6]
 8016840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016842:	3501      	adds	r5, #1
 8016844:	42aa      	cmp	r2, r5
 8016846:	d8e5      	bhi.n	8016814 <rcl_wait+0x154>
 8016848:	f038 0002 	bics.w	r0, r8, #2
 801684c:	d029      	beq.n	80168a2 <rcl_wait+0x1e2>
 801684e:	2001      	movs	r0, #1
 8016850:	e751      	b.n	80166f6 <rcl_wait+0x36>
 8016852:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016856:	b00f      	add	sp, #60	; 0x3c
 8016858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801685c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016860:	2a01      	cmp	r2, #1
 8016862:	f173 0300 	sbcs.w	r3, r3, #0
 8016866:	f2c0 8083 	blt.w	8016970 <rcl_wait+0x2b0>
 801686a:	2e00      	cmp	r6, #0
 801686c:	f177 0300 	sbcs.w	r3, r7, #0
 8016870:	bfbc      	itt	lt
 8016872:	2600      	movlt	r6, #0
 8016874:	2700      	movlt	r7, #0
 8016876:	a34e      	add	r3, pc, #312	; (adr r3, 80169b0 <rcl_wait+0x2f0>)
 8016878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687c:	4630      	mov	r0, r6
 801687e:	4639      	mov	r1, r7
 8016880:	f7ea fa1a 	bl	8000cb8 <__aeabi_ldivmod>
 8016884:	a34a      	add	r3, pc, #296	; (adr r3, 80169b0 <rcl_wait+0x2f0>)
 8016886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801688a:	4680      	mov	r8, r0
 801688c:	4689      	mov	r9, r1
 801688e:	4630      	mov	r0, r6
 8016890:	4639      	mov	r1, r7
 8016892:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8016896:	f7ea fa0f 	bl	8000cb8 <__aeabi_ldivmod>
 801689a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801689e:	ab0a      	add	r3, sp, #40	; 0x28
 80168a0:	e79d      	b.n	80167de <rcl_wait+0x11e>
 80168a2:	6866      	ldr	r6, [r4, #4]
 80168a4:	4602      	mov	r2, r0
 80168a6:	b91e      	cbnz	r6, 80168b0 <rcl_wait+0x1f0>
 80168a8:	e00d      	b.n	80168c6 <rcl_wait+0x206>
 80168aa:	3201      	adds	r2, #1
 80168ac:	42b2      	cmp	r2, r6
 80168ae:	d00a      	beq.n	80168c6 <rcl_wait+0x206>
 80168b0:	6899      	ldr	r1, [r3, #8]
 80168b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168b6:	2900      	cmp	r1, #0
 80168b8:	d1f7      	bne.n	80168aa <rcl_wait+0x1ea>
 80168ba:	6825      	ldr	r5, [r4, #0]
 80168bc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168c0:	3201      	adds	r2, #1
 80168c2:	42b2      	cmp	r2, r6
 80168c4:	d1f4      	bne.n	80168b0 <rcl_wait+0x1f0>
 80168c6:	68e6      	ldr	r6, [r4, #12]
 80168c8:	2200      	movs	r2, #0
 80168ca:	b91e      	cbnz	r6, 80168d4 <rcl_wait+0x214>
 80168cc:	e00d      	b.n	80168ea <rcl_wait+0x22a>
 80168ce:	3201      	adds	r2, #1
 80168d0:	42b2      	cmp	r2, r6
 80168d2:	d00a      	beq.n	80168ea <rcl_wait+0x22a>
 80168d4:	6959      	ldr	r1, [r3, #20]
 80168d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168da:	2900      	cmp	r1, #0
 80168dc:	d1f7      	bne.n	80168ce <rcl_wait+0x20e>
 80168de:	68a5      	ldr	r5, [r4, #8]
 80168e0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168e4:	3201      	adds	r2, #1
 80168e6:	42b2      	cmp	r2, r6
 80168e8:	d1f4      	bne.n	80168d4 <rcl_wait+0x214>
 80168ea:	69e6      	ldr	r6, [r4, #28]
 80168ec:	2200      	movs	r2, #0
 80168ee:	b91e      	cbnz	r6, 80168f8 <rcl_wait+0x238>
 80168f0:	e00d      	b.n	801690e <rcl_wait+0x24e>
 80168f2:	3201      	adds	r2, #1
 80168f4:	42b2      	cmp	r2, r6
 80168f6:	d00a      	beq.n	801690e <rcl_wait+0x24e>
 80168f8:	6a19      	ldr	r1, [r3, #32]
 80168fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168fe:	2900      	cmp	r1, #0
 8016900:	d1f7      	bne.n	80168f2 <rcl_wait+0x232>
 8016902:	69a5      	ldr	r5, [r4, #24]
 8016904:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016908:	3201      	adds	r2, #1
 801690a:	42b2      	cmp	r2, r6
 801690c:	d1f4      	bne.n	80168f8 <rcl_wait+0x238>
 801690e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016910:	2200      	movs	r2, #0
 8016912:	b91e      	cbnz	r6, 801691c <rcl_wait+0x25c>
 8016914:	e00d      	b.n	8016932 <rcl_wait+0x272>
 8016916:	3201      	adds	r2, #1
 8016918:	4296      	cmp	r6, r2
 801691a:	d00a      	beq.n	8016932 <rcl_wait+0x272>
 801691c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801691e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016922:	2900      	cmp	r1, #0
 8016924:	d1f7      	bne.n	8016916 <rcl_wait+0x256>
 8016926:	6a25      	ldr	r5, [r4, #32]
 8016928:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801692c:	3201      	adds	r2, #1
 801692e:	4296      	cmp	r6, r2
 8016930:	d1f4      	bne.n	801691c <rcl_wait+0x25c>
 8016932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016934:	2200      	movs	r2, #0
 8016936:	b91e      	cbnz	r6, 8016940 <rcl_wait+0x280>
 8016938:	e00d      	b.n	8016956 <rcl_wait+0x296>
 801693a:	3201      	adds	r2, #1
 801693c:	42b2      	cmp	r2, r6
 801693e:	d00a      	beq.n	8016956 <rcl_wait+0x296>
 8016940:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8016942:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016946:	2900      	cmp	r1, #0
 8016948:	d1f7      	bne.n	801693a <rcl_wait+0x27a>
 801694a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801694c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016950:	3201      	adds	r2, #1
 8016952:	42b2      	cmp	r2, r6
 8016954:	d1f4      	bne.n	8016940 <rcl_wait+0x280>
 8016956:	f1b8 0f02 	cmp.w	r8, #2
 801695a:	f47f aecc 	bne.w	80166f6 <rcl_wait+0x36>
 801695e:	9b07      	ldr	r3, [sp, #28]
 8016960:	2b00      	cmp	r3, #0
 8016962:	bf08      	it	eq
 8016964:	2002      	moveq	r0, #2
 8016966:	e6c6      	b.n	80166f6 <rcl_wait+0x36>
 8016968:	200b      	movs	r0, #11
 801696a:	b00f      	add	sp, #60	; 0x3c
 801696c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016970:	9b07      	ldr	r3, [sp, #28]
 8016972:	2b00      	cmp	r3, #0
 8016974:	f47f af79 	bne.w	801686a <rcl_wait+0x1aa>
 8016978:	e731      	b.n	80167de <rcl_wait+0x11e>
 801697a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801697e:	4313      	orrs	r3, r2
 8016980:	bf08      	it	eq
 8016982:	9107      	streq	r1, [sp, #28]
 8016984:	f43f af24 	beq.w	80167d0 <rcl_wait+0x110>
 8016988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801698c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016990:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016994:	2a01      	cmp	r2, #1
 8016996:	f173 0300 	sbcs.w	r3, r3, #0
 801699a:	f04f 0300 	mov.w	r3, #0
 801699e:	9307      	str	r3, [sp, #28]
 80169a0:	f6bf af63 	bge.w	801686a <rcl_wait+0x1aa>
 80169a4:	e71b      	b.n	80167de <rcl_wait+0x11e>
 80169a6:	4632      	mov	r2, r6
 80169a8:	463b      	mov	r3, r7
 80169aa:	e7f3      	b.n	8016994 <rcl_wait+0x2d4>
 80169ac:	f3af 8000 	nop.w
 80169b0:	3b9aca00 	.word	0x3b9aca00
 80169b4:	00000000 	.word	0x00000000

080169b8 <__atomic_load_8>:
 80169b8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80169bc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80169c0:	4b14      	ldr	r3, [pc, #80]	; (8016a14 <__atomic_load_8+0x5c>)
 80169c2:	4a15      	ldr	r2, [pc, #84]	; (8016a18 <__atomic_load_8+0x60>)
 80169c4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80169c8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80169cc:	fb03 f301 	mul.w	r3, r3, r1
 80169d0:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 80169d4:	fba2 1203 	umull	r1, r2, r2, r3
 80169d8:	0912      	lsrs	r2, r2, #4
 80169da:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80169de:	b430      	push	{r4, r5}
 80169e0:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 80169e4:	4c0d      	ldr	r4, [pc, #52]	; (8016a1c <__atomic_load_8+0x64>)
 80169e6:	1a9b      	subs	r3, r3, r2
 80169e8:	18e1      	adds	r1, r4, r3
 80169ea:	f04f 0501 	mov.w	r5, #1
 80169ee:	e8d1 2f4f 	ldrexb	r2, [r1]
 80169f2:	e8c1 5f4c 	strexb	ip, r5, [r1]
 80169f6:	f1bc 0f00 	cmp.w	ip, #0
 80169fa:	d1f8      	bne.n	80169ee <__atomic_load_8+0x36>
 80169fc:	f3bf 8f5b 	dmb	ish
 8016a00:	b2d2      	uxtb	r2, r2
 8016a02:	2a00      	cmp	r2, #0
 8016a04:	d1f3      	bne.n	80169ee <__atomic_load_8+0x36>
 8016a06:	e9d0 0100 	ldrd	r0, r1, [r0]
 8016a0a:	f3bf 8f5b 	dmb	ish
 8016a0e:	54e2      	strb	r2, [r4, r3]
 8016a10:	bc30      	pop	{r4, r5}
 8016a12:	4770      	bx	lr
 8016a14:	27d4eb2d 	.word	0x27d4eb2d
 8016a18:	b21642c9 	.word	0xb21642c9
 8016a1c:	20009eb0 	.word	0x20009eb0

08016a20 <__atomic_store_8>:
 8016a20:	b4f0      	push	{r4, r5, r6, r7}
 8016a22:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016a26:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016a2a:	4914      	ldr	r1, [pc, #80]	; (8016a7c <__atomic_store_8+0x5c>)
 8016a2c:	4c14      	ldr	r4, [pc, #80]	; (8016a80 <__atomic_store_8+0x60>)
 8016a2e:	4e15      	ldr	r6, [pc, #84]	; (8016a84 <__atomic_store_8+0x64>)
 8016a30:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016a34:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016a38:	fb01 f105 	mul.w	r1, r1, r5
 8016a3c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016a40:	fba4 5401 	umull	r5, r4, r4, r1
 8016a44:	0924      	lsrs	r4, r4, #4
 8016a46:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016a4a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8016a4e:	1b09      	subs	r1, r1, r4
 8016a50:	1875      	adds	r5, r6, r1
 8016a52:	f04f 0701 	mov.w	r7, #1
 8016a56:	e8d5 4f4f 	ldrexb	r4, [r5]
 8016a5a:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8016a5e:	f1bc 0f00 	cmp.w	ip, #0
 8016a62:	d1f8      	bne.n	8016a56 <__atomic_store_8+0x36>
 8016a64:	f3bf 8f5b 	dmb	ish
 8016a68:	b2e4      	uxtb	r4, r4
 8016a6a:	2c00      	cmp	r4, #0
 8016a6c:	d1f3      	bne.n	8016a56 <__atomic_store_8+0x36>
 8016a6e:	e9c0 2300 	strd	r2, r3, [r0]
 8016a72:	f3bf 8f5b 	dmb	ish
 8016a76:	5474      	strb	r4, [r6, r1]
 8016a78:	bcf0      	pop	{r4, r5, r6, r7}
 8016a7a:	4770      	bx	lr
 8016a7c:	27d4eb2d 	.word	0x27d4eb2d
 8016a80:	b21642c9 	.word	0xb21642c9
 8016a84:	20009eb0 	.word	0x20009eb0

08016a88 <__atomic_exchange_8>:
 8016a88:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8016a8c:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016a90:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016a94:	4c16      	ldr	r4, [pc, #88]	; (8016af0 <__atomic_exchange_8+0x68>)
 8016a96:	4917      	ldr	r1, [pc, #92]	; (8016af4 <__atomic_exchange_8+0x6c>)
 8016a98:	4e17      	ldr	r6, [pc, #92]	; (8016af8 <__atomic_exchange_8+0x70>)
 8016a9a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016a9e:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016aa2:	fb04 f505 	mul.w	r5, r4, r5
 8016aa6:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8016aaa:	fba1 4105 	umull	r4, r1, r1, r5
 8016aae:	0909      	lsrs	r1, r1, #4
 8016ab0:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016ab4:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016ab8:	1a6c      	subs	r4, r5, r1
 8016aba:	1931      	adds	r1, r6, r4
 8016abc:	f04f 0701 	mov.w	r7, #1
 8016ac0:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016ac4:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016ac8:	f1bc 0f00 	cmp.w	ip, #0
 8016acc:	d1f8      	bne.n	8016ac0 <__atomic_exchange_8+0x38>
 8016ace:	f3bf 8f5b 	dmb	ish
 8016ad2:	b2ed      	uxtb	r5, r5
 8016ad4:	2d00      	cmp	r5, #0
 8016ad6:	d1f3      	bne.n	8016ac0 <__atomic_exchange_8+0x38>
 8016ad8:	e9d0 8900 	ldrd	r8, r9, [r0]
 8016adc:	e9c0 2300 	strd	r2, r3, [r0]
 8016ae0:	f3bf 8f5b 	dmb	ish
 8016ae4:	5535      	strb	r5, [r6, r4]
 8016ae6:	4640      	mov	r0, r8
 8016ae8:	4649      	mov	r1, r9
 8016aea:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8016aee:	4770      	bx	lr
 8016af0:	27d4eb2d 	.word	0x27d4eb2d
 8016af4:	b21642c9 	.word	0xb21642c9
 8016af8:	20009eb0 	.word	0x20009eb0

08016afc <rcutils_is_directory>:
 8016afc:	2000      	movs	r0, #0
 8016afe:	4770      	bx	lr

08016b00 <rcutils_join_path>:
 8016b00:	b082      	sub	sp, #8
 8016b02:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016b06:	2000      	movs	r0, #0
 8016b08:	b002      	add	sp, #8
 8016b0a:	4770      	bx	lr

08016b0c <rcutils_to_native_path>:
 8016b0c:	b084      	sub	sp, #16
 8016b0e:	a801      	add	r0, sp, #4
 8016b10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016b14:	b004      	add	sp, #16
 8016b16:	2000      	movs	r0, #0
 8016b18:	4770      	bx	lr
 8016b1a:	bf00      	nop

08016b1c <rcutils_format_string_limit>:
 8016b1c:	b40f      	push	{r0, r1, r2, r3}
 8016b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b20:	b083      	sub	sp, #12
 8016b22:	ac08      	add	r4, sp, #32
 8016b24:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016b2a:	b34e      	cbz	r6, 8016b80 <rcutils_format_string_limit+0x64>
 8016b2c:	a808      	add	r0, sp, #32
 8016b2e:	f7f8 fbfd 	bl	800f32c <rcutils_allocator_is_valid>
 8016b32:	b328      	cbz	r0, 8016b80 <rcutils_format_string_limit+0x64>
 8016b34:	2100      	movs	r1, #0
 8016b36:	ab0f      	add	r3, sp, #60	; 0x3c
 8016b38:	4608      	mov	r0, r1
 8016b3a:	4632      	mov	r2, r6
 8016b3c:	e9cd 3300 	strd	r3, r3, [sp]
 8016b40:	f000 f904 	bl	8016d4c <rcutils_vsnprintf>
 8016b44:	1c43      	adds	r3, r0, #1
 8016b46:	4605      	mov	r5, r0
 8016b48:	d01a      	beq.n	8016b80 <rcutils_format_string_limit+0x64>
 8016b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b4e:	1c47      	adds	r7, r0, #1
 8016b50:	429f      	cmp	r7, r3
 8016b52:	bf84      	itt	hi
 8016b54:	461f      	movhi	r7, r3
 8016b56:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8016b5a:	4638      	mov	r0, r7
 8016b5c:	9b08      	ldr	r3, [sp, #32]
 8016b5e:	4798      	blx	r3
 8016b60:	4604      	mov	r4, r0
 8016b62:	b168      	cbz	r0, 8016b80 <rcutils_format_string_limit+0x64>
 8016b64:	9b01      	ldr	r3, [sp, #4]
 8016b66:	4632      	mov	r2, r6
 8016b68:	4639      	mov	r1, r7
 8016b6a:	f000 f8ef 	bl	8016d4c <rcutils_vsnprintf>
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	db02      	blt.n	8016b78 <rcutils_format_string_limit+0x5c>
 8016b72:	2300      	movs	r3, #0
 8016b74:	5563      	strb	r3, [r4, r5]
 8016b76:	e004      	b.n	8016b82 <rcutils_format_string_limit+0x66>
 8016b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	4798      	blx	r3
 8016b80:	2400      	movs	r4, #0
 8016b82:	4620      	mov	r0, r4
 8016b84:	b003      	add	sp, #12
 8016b86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016b8a:	b004      	add	sp, #16
 8016b8c:	4770      	bx	lr
 8016b8e:	bf00      	nop

08016b90 <rcutils_get_env>:
 8016b90:	b168      	cbz	r0, 8016bae <rcutils_get_env+0x1e>
 8016b92:	b510      	push	{r4, lr}
 8016b94:	460c      	mov	r4, r1
 8016b96:	b129      	cbz	r1, 8016ba4 <rcutils_get_env+0x14>
 8016b98:	f002 ff0c 	bl	80199b4 <getenv>
 8016b9c:	b120      	cbz	r0, 8016ba8 <rcutils_get_env+0x18>
 8016b9e:	6020      	str	r0, [r4, #0]
 8016ba0:	2000      	movs	r0, #0
 8016ba2:	bd10      	pop	{r4, pc}
 8016ba4:	4803      	ldr	r0, [pc, #12]	; (8016bb4 <rcutils_get_env+0x24>)
 8016ba6:	bd10      	pop	{r4, pc}
 8016ba8:	4b03      	ldr	r3, [pc, #12]	; (8016bb8 <rcutils_get_env+0x28>)
 8016baa:	6023      	str	r3, [r4, #0]
 8016bac:	bd10      	pop	{r4, pc}
 8016bae:	4803      	ldr	r0, [pc, #12]	; (8016bbc <rcutils_get_env+0x2c>)
 8016bb0:	4770      	bx	lr
 8016bb2:	bf00      	nop
 8016bb4:	0801efc8 	.word	0x0801efc8
 8016bb8:	0801f0ec 	.word	0x0801f0ec
 8016bbc:	0801efac 	.word	0x0801efac

08016bc0 <rcutils_repl_str>:
 8016bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc4:	ed2d 8b02 	vpush	{d8}
 8016bc8:	b087      	sub	sp, #28
 8016bca:	4680      	mov	r8, r0
 8016bcc:	4608      	mov	r0, r1
 8016bce:	f8cd 8000 	str.w	r8, [sp]
 8016bd2:	ee08 2a10 	vmov	s16, r2
 8016bd6:	468a      	mov	sl, r1
 8016bd8:	4699      	mov	r9, r3
 8016bda:	f7e9 fb0b 	bl	80001f4 <strlen>
 8016bde:	2600      	movs	r6, #0
 8016be0:	4647      	mov	r7, r8
 8016be2:	9001      	str	r0, [sp, #4]
 8016be4:	46b3      	mov	fp, r6
 8016be6:	2510      	movs	r5, #16
 8016be8:	46b0      	mov	r8, r6
 8016bea:	e01d      	b.n	8016c28 <rcutils_repl_str+0x68>
 8016bec:	f10b 0b01 	add.w	fp, fp, #1
 8016bf0:	455e      	cmp	r6, fp
 8016bf2:	d211      	bcs.n	8016c18 <rcutils_repl_str+0x58>
 8016bf4:	442e      	add	r6, r5
 8016bf6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bfa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016bfe:	00b1      	lsls	r1, r6, #2
 8016c00:	4798      	blx	r3
 8016c02:	2800      	cmp	r0, #0
 8016c04:	f000 8084 	beq.w	8016d10 <rcutils_repl_str+0x150>
 8016c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c0c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016c10:	bf28      	it	cs
 8016c12:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016c16:	4680      	mov	r8, r0
 8016c18:	9a00      	ldr	r2, [sp, #0]
 8016c1a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016c1e:	1aa2      	subs	r2, r4, r2
 8016c20:	f843 2c04 	str.w	r2, [r3, #-4]
 8016c24:	9b01      	ldr	r3, [sp, #4]
 8016c26:	18e7      	adds	r7, r4, r3
 8016c28:	4651      	mov	r1, sl
 8016c2a:	4638      	mov	r0, r7
 8016c2c:	f004 f924 	bl	801ae78 <strstr>
 8016c30:	4604      	mov	r4, r0
 8016c32:	4640      	mov	r0, r8
 8016c34:	2c00      	cmp	r4, #0
 8016c36:	d1d9      	bne.n	8016bec <rcutils_repl_str+0x2c>
 8016c38:	46b8      	mov	r8, r7
 8016c3a:	4607      	mov	r7, r0
 8016c3c:	4640      	mov	r0, r8
 8016c3e:	f7e9 fad9 	bl	80001f4 <strlen>
 8016c42:	9b00      	ldr	r3, [sp, #0]
 8016c44:	eba8 0303 	sub.w	r3, r8, r3
 8016c48:	181d      	adds	r5, r3, r0
 8016c4a:	9504      	str	r5, [sp, #16]
 8016c4c:	f1bb 0f00 	cmp.w	fp, #0
 8016c50:	d03d      	beq.n	8016cce <rcutils_repl_str+0x10e>
 8016c52:	ee18 0a10 	vmov	r0, s16
 8016c56:	f7e9 facd 	bl	80001f4 <strlen>
 8016c5a:	9b01      	ldr	r3, [sp, #4]
 8016c5c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016c60:	1ac3      	subs	r3, r0, r3
 8016c62:	fb0b 5303 	mla	r3, fp, r3, r5
 8016c66:	9305      	str	r3, [sp, #20]
 8016c68:	4606      	mov	r6, r0
 8016c6a:	1c58      	adds	r0, r3, #1
 8016c6c:	f8d9 3000 	ldr.w	r3, [r9]
 8016c70:	4798      	blx	r3
 8016c72:	9003      	str	r0, [sp, #12]
 8016c74:	2800      	cmp	r0, #0
 8016c76:	d04c      	beq.n	8016d12 <rcutils_repl_str+0x152>
 8016c78:	683a      	ldr	r2, [r7, #0]
 8016c7a:	9900      	ldr	r1, [sp, #0]
 8016c7c:	f002 ff1a 	bl	8019ab4 <memcpy>
 8016c80:	9b03      	ldr	r3, [sp, #12]
 8016c82:	683d      	ldr	r5, [r7, #0]
 8016c84:	ee18 8a10 	vmov	r8, s16
 8016c88:	441d      	add	r5, r3
 8016c8a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8016c8e:	9302      	str	r3, [sp, #8]
 8016c90:	46ba      	mov	sl, r7
 8016c92:	4632      	mov	r2, r6
 8016c94:	4641      	mov	r1, r8
 8016c96:	4628      	mov	r0, r5
 8016c98:	f002 ff0c 	bl	8019ab4 <memcpy>
 8016c9c:	9b01      	ldr	r3, [sp, #4]
 8016c9e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016ca2:	441a      	add	r2, r3
 8016ca4:	9b00      	ldr	r3, [sp, #0]
 8016ca6:	1899      	adds	r1, r3, r2
 8016ca8:	9b02      	ldr	r3, [sp, #8]
 8016caa:	4435      	add	r5, r6
 8016cac:	429c      	cmp	r4, r3
 8016cae:	4628      	mov	r0, r5
 8016cb0:	d025      	beq.n	8016cfe <rcutils_repl_str+0x13e>
 8016cb2:	f8da 3000 	ldr.w	r3, [sl]
 8016cb6:	3401      	adds	r4, #1
 8016cb8:	1a9a      	subs	r2, r3, r2
 8016cba:	4415      	add	r5, r2
 8016cbc:	f002 fefa 	bl	8019ab4 <memcpy>
 8016cc0:	455c      	cmp	r4, fp
 8016cc2:	d3e6      	bcc.n	8016c92 <rcutils_repl_str+0xd2>
 8016cc4:	9a03      	ldr	r2, [sp, #12]
 8016cc6:	9905      	ldr	r1, [sp, #20]
 8016cc8:	2300      	movs	r3, #0
 8016cca:	5453      	strb	r3, [r2, r1]
 8016ccc:	e00b      	b.n	8016ce6 <rcutils_repl_str+0x126>
 8016cce:	4628      	mov	r0, r5
 8016cd0:	f8d9 3000 	ldr.w	r3, [r9]
 8016cd4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016cd8:	3001      	adds	r0, #1
 8016cda:	4798      	blx	r3
 8016cdc:	9003      	str	r0, [sp, #12]
 8016cde:	b110      	cbz	r0, 8016ce6 <rcutils_repl_str+0x126>
 8016ce0:	9900      	ldr	r1, [sp, #0]
 8016ce2:	f004 f8ad 	bl	801ae40 <strcpy>
 8016ce6:	4638      	mov	r0, r7
 8016ce8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016cec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016cf0:	4798      	blx	r3
 8016cf2:	9803      	ldr	r0, [sp, #12]
 8016cf4:	b007      	add	sp, #28
 8016cf6:	ecbd 8b02 	vpop	{d8}
 8016cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cfe:	9b04      	ldr	r3, [sp, #16]
 8016d00:	3401      	adds	r4, #1
 8016d02:	1a9a      	subs	r2, r3, r2
 8016d04:	4415      	add	r5, r2
 8016d06:	f002 fed5 	bl	8019ab4 <memcpy>
 8016d0a:	455c      	cmp	r4, fp
 8016d0c:	d3c1      	bcc.n	8016c92 <rcutils_repl_str+0xd2>
 8016d0e:	e7d9      	b.n	8016cc4 <rcutils_repl_str+0x104>
 8016d10:	4647      	mov	r7, r8
 8016d12:	2300      	movs	r3, #0
 8016d14:	9303      	str	r3, [sp, #12]
 8016d16:	e7e6      	b.n	8016ce6 <rcutils_repl_str+0x126>

08016d18 <rcutils_snprintf>:
 8016d18:	b40c      	push	{r2, r3}
 8016d1a:	b530      	push	{r4, r5, lr}
 8016d1c:	b083      	sub	sp, #12
 8016d1e:	ab06      	add	r3, sp, #24
 8016d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d24:	9301      	str	r3, [sp, #4]
 8016d26:	b152      	cbz	r2, 8016d3e <rcutils_snprintf+0x26>
 8016d28:	b138      	cbz	r0, 8016d3a <rcutils_snprintf+0x22>
 8016d2a:	b141      	cbz	r1, 8016d3e <rcutils_snprintf+0x26>
 8016d2c:	f005 f876 	bl	801be1c <vsniprintf>
 8016d30:	b003      	add	sp, #12
 8016d32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d36:	b002      	add	sp, #8
 8016d38:	4770      	bx	lr
 8016d3a:	2900      	cmp	r1, #0
 8016d3c:	d0f6      	beq.n	8016d2c <rcutils_snprintf+0x14>
 8016d3e:	f002 fd3d 	bl	80197bc <__errno>
 8016d42:	2316      	movs	r3, #22
 8016d44:	6003      	str	r3, [r0, #0]
 8016d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d4a:	e7f1      	b.n	8016d30 <rcutils_snprintf+0x18>

08016d4c <rcutils_vsnprintf>:
 8016d4c:	b570      	push	{r4, r5, r6, lr}
 8016d4e:	b13a      	cbz	r2, 8016d60 <rcutils_vsnprintf+0x14>
 8016d50:	b120      	cbz	r0, 8016d5c <rcutils_vsnprintf+0x10>
 8016d52:	b129      	cbz	r1, 8016d60 <rcutils_vsnprintf+0x14>
 8016d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d58:	f005 b860 	b.w	801be1c <vsniprintf>
 8016d5c:	2900      	cmp	r1, #0
 8016d5e:	d0f9      	beq.n	8016d54 <rcutils_vsnprintf+0x8>
 8016d60:	f002 fd2c 	bl	80197bc <__errno>
 8016d64:	2316      	movs	r3, #22
 8016d66:	6003      	str	r3, [r0, #0]
 8016d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d6c:	bd70      	pop	{r4, r5, r6, pc}
 8016d6e:	bf00      	nop

08016d70 <rcutils_strdup>:
 8016d70:	b084      	sub	sp, #16
 8016d72:	b570      	push	{r4, r5, r6, lr}
 8016d74:	b082      	sub	sp, #8
 8016d76:	ac07      	add	r4, sp, #28
 8016d78:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016d7c:	4605      	mov	r5, r0
 8016d7e:	b1b0      	cbz	r0, 8016dae <rcutils_strdup+0x3e>
 8016d80:	f7e9 fa38 	bl	80001f4 <strlen>
 8016d84:	1c42      	adds	r2, r0, #1
 8016d86:	9b07      	ldr	r3, [sp, #28]
 8016d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d8a:	9201      	str	r2, [sp, #4]
 8016d8c:	4606      	mov	r6, r0
 8016d8e:	4610      	mov	r0, r2
 8016d90:	4798      	blx	r3
 8016d92:	4604      	mov	r4, r0
 8016d94:	b128      	cbz	r0, 8016da2 <rcutils_strdup+0x32>
 8016d96:	9a01      	ldr	r2, [sp, #4]
 8016d98:	4629      	mov	r1, r5
 8016d9a:	f002 fe8b 	bl	8019ab4 <memcpy>
 8016d9e:	2300      	movs	r3, #0
 8016da0:	55a3      	strb	r3, [r4, r6]
 8016da2:	4620      	mov	r0, r4
 8016da4:	b002      	add	sp, #8
 8016da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016daa:	b004      	add	sp, #16
 8016dac:	4770      	bx	lr
 8016dae:	4604      	mov	r4, r0
 8016db0:	e7f7      	b.n	8016da2 <rcutils_strdup+0x32>
 8016db2:	bf00      	nop

08016db4 <rcutils_strndup>:
 8016db4:	b082      	sub	sp, #8
 8016db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db8:	460e      	mov	r6, r1
 8016dba:	a906      	add	r1, sp, #24
 8016dbc:	e881 000c 	stmia.w	r1, {r2, r3}
 8016dc0:	4605      	mov	r5, r0
 8016dc2:	b180      	cbz	r0, 8016de6 <rcutils_strndup+0x32>
 8016dc4:	1c77      	adds	r7, r6, #1
 8016dc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016dc8:	4638      	mov	r0, r7
 8016dca:	4790      	blx	r2
 8016dcc:	4604      	mov	r4, r0
 8016dce:	b128      	cbz	r0, 8016ddc <rcutils_strndup+0x28>
 8016dd0:	463a      	mov	r2, r7
 8016dd2:	4629      	mov	r1, r5
 8016dd4:	f002 fe6e 	bl	8019ab4 <memcpy>
 8016dd8:	2300      	movs	r3, #0
 8016dda:	55a3      	strb	r3, [r4, r6]
 8016ddc:	4620      	mov	r0, r4
 8016dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016de2:	b002      	add	sp, #8
 8016de4:	4770      	bx	lr
 8016de6:	4604      	mov	r4, r0
 8016de8:	e7f8      	b.n	8016ddc <rcutils_strndup+0x28>
 8016dea:	bf00      	nop

08016dec <rmw_get_zero_initialized_context>:
 8016dec:	b510      	push	{r4, lr}
 8016dee:	2250      	movs	r2, #80	; 0x50
 8016df0:	4604      	mov	r4, r0
 8016df2:	2100      	movs	r1, #0
 8016df4:	f002 fe86 	bl	8019b04 <memset>
 8016df8:	4620      	mov	r0, r4
 8016dfa:	bd10      	pop	{r4, pc}

08016dfc <rmw_get_default_subscription_options>:
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	6002      	str	r2, [r0, #0]
 8016e00:	7102      	strb	r2, [r0, #4]
 8016e02:	4770      	bx	lr

08016e04 <rmw_get_zero_initialized_message_info>:
 8016e04:	b470      	push	{r4, r5, r6}
 8016e06:	4d07      	ldr	r5, [pc, #28]	; (8016e24 <rmw_get_zero_initialized_message_info+0x20>)
 8016e08:	4606      	mov	r6, r0
 8016e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e0c:	4634      	mov	r4, r6
 8016e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016e18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016e1c:	4630      	mov	r0, r6
 8016e1e:	bc70      	pop	{r4, r5, r6}
 8016e20:	4770      	bx	lr
 8016e22:	bf00      	nop
 8016e24:	0801e9a0 	.word	0x0801e9a0

08016e28 <rmw_validate_namespace_with_size>:
 8016e28:	b340      	cbz	r0, 8016e7c <rmw_validate_namespace_with_size+0x54>
 8016e2a:	b5d0      	push	{r4, r6, r7, lr}
 8016e2c:	4614      	mov	r4, r2
 8016e2e:	b0c2      	sub	sp, #264	; 0x108
 8016e30:	b332      	cbz	r2, 8016e80 <rmw_validate_namespace_with_size+0x58>
 8016e32:	2901      	cmp	r1, #1
 8016e34:	460f      	mov	r7, r1
 8016e36:	461e      	mov	r6, r3
 8016e38:	d102      	bne.n	8016e40 <rmw_validate_namespace_with_size+0x18>
 8016e3a:	7803      	ldrb	r3, [r0, #0]
 8016e3c:	2b2f      	cmp	r3, #47	; 0x2f
 8016e3e:	d019      	beq.n	8016e74 <rmw_validate_namespace_with_size+0x4c>
 8016e40:	aa01      	add	r2, sp, #4
 8016e42:	4669      	mov	r1, sp
 8016e44:	f7f8 fc44 	bl	800f6d0 <rmw_validate_full_topic_name>
 8016e48:	b990      	cbnz	r0, 8016e70 <rmw_validate_namespace_with_size+0x48>
 8016e4a:	9b00      	ldr	r3, [sp, #0]
 8016e4c:	b14b      	cbz	r3, 8016e62 <rmw_validate_namespace_with_size+0x3a>
 8016e4e:	2b07      	cmp	r3, #7
 8016e50:	d007      	beq.n	8016e62 <rmw_validate_namespace_with_size+0x3a>
 8016e52:	1e5a      	subs	r2, r3, #1
 8016e54:	2a05      	cmp	r2, #5
 8016e56:	d82b      	bhi.n	8016eb0 <rmw_validate_namespace_with_size+0x88>
 8016e58:	e8df f002 	tbb	[pc, r2]
 8016e5c:	24211e1b 	.word	0x24211e1b
 8016e60:	1427      	.short	0x1427
 8016e62:	2ff5      	cmp	r7, #245	; 0xf5
 8016e64:	d906      	bls.n	8016e74 <rmw_validate_namespace_with_size+0x4c>
 8016e66:	2307      	movs	r3, #7
 8016e68:	6023      	str	r3, [r4, #0]
 8016e6a:	b10e      	cbz	r6, 8016e70 <rmw_validate_namespace_with_size+0x48>
 8016e6c:	23f4      	movs	r3, #244	; 0xf4
 8016e6e:	6033      	str	r3, [r6, #0]
 8016e70:	b042      	add	sp, #264	; 0x108
 8016e72:	bdd0      	pop	{r4, r6, r7, pc}
 8016e74:	2000      	movs	r0, #0
 8016e76:	6020      	str	r0, [r4, #0]
 8016e78:	b042      	add	sp, #264	; 0x108
 8016e7a:	bdd0      	pop	{r4, r6, r7, pc}
 8016e7c:	200b      	movs	r0, #11
 8016e7e:	4770      	bx	lr
 8016e80:	200b      	movs	r0, #11
 8016e82:	e7f5      	b.n	8016e70 <rmw_validate_namespace_with_size+0x48>
 8016e84:	2306      	movs	r3, #6
 8016e86:	6023      	str	r3, [r4, #0]
 8016e88:	2e00      	cmp	r6, #0
 8016e8a:	d0f1      	beq.n	8016e70 <rmw_validate_namespace_with_size+0x48>
 8016e8c:	9b01      	ldr	r3, [sp, #4]
 8016e8e:	6033      	str	r3, [r6, #0]
 8016e90:	e7ee      	b.n	8016e70 <rmw_validate_namespace_with_size+0x48>
 8016e92:	2301      	movs	r3, #1
 8016e94:	6023      	str	r3, [r4, #0]
 8016e96:	e7f7      	b.n	8016e88 <rmw_validate_namespace_with_size+0x60>
 8016e98:	2302      	movs	r3, #2
 8016e9a:	6023      	str	r3, [r4, #0]
 8016e9c:	e7f4      	b.n	8016e88 <rmw_validate_namespace_with_size+0x60>
 8016e9e:	2303      	movs	r3, #3
 8016ea0:	6023      	str	r3, [r4, #0]
 8016ea2:	e7f1      	b.n	8016e88 <rmw_validate_namespace_with_size+0x60>
 8016ea4:	2304      	movs	r3, #4
 8016ea6:	6023      	str	r3, [r4, #0]
 8016ea8:	e7ee      	b.n	8016e88 <rmw_validate_namespace_with_size+0x60>
 8016eaa:	2305      	movs	r3, #5
 8016eac:	6023      	str	r3, [r4, #0]
 8016eae:	e7eb      	b.n	8016e88 <rmw_validate_namespace_with_size+0x60>
 8016eb0:	4a03      	ldr	r2, [pc, #12]	; (8016ec0 <rmw_validate_namespace_with_size+0x98>)
 8016eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016eb6:	a802      	add	r0, sp, #8
 8016eb8:	f7ff ff2e 	bl	8016d18 <rcutils_snprintf>
 8016ebc:	2001      	movs	r0, #1
 8016ebe:	e7d7      	b.n	8016e70 <rmw_validate_namespace_with_size+0x48>
 8016ec0:	0801efe4 	.word	0x0801efe4

08016ec4 <rmw_validate_namespace>:
 8016ec4:	b168      	cbz	r0, 8016ee2 <rmw_validate_namespace+0x1e>
 8016ec6:	b570      	push	{r4, r5, r6, lr}
 8016ec8:	460d      	mov	r5, r1
 8016eca:	4616      	mov	r6, r2
 8016ecc:	4604      	mov	r4, r0
 8016ece:	f7e9 f991 	bl	80001f4 <strlen>
 8016ed2:	4633      	mov	r3, r6
 8016ed4:	4601      	mov	r1, r0
 8016ed6:	462a      	mov	r2, r5
 8016ed8:	4620      	mov	r0, r4
 8016eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ede:	f7ff bfa3 	b.w	8016e28 <rmw_validate_namespace_with_size>
 8016ee2:	200b      	movs	r0, #11
 8016ee4:	4770      	bx	lr
 8016ee6:	bf00      	nop

08016ee8 <rmw_namespace_validation_result_string>:
 8016ee8:	2807      	cmp	r0, #7
 8016eea:	bf9a      	itte	ls
 8016eec:	4b02      	ldrls	r3, [pc, #8]	; (8016ef8 <rmw_namespace_validation_result_string+0x10>)
 8016eee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016ef2:	4802      	ldrhi	r0, [pc, #8]	; (8016efc <rmw_namespace_validation_result_string+0x14>)
 8016ef4:	4770      	bx	lr
 8016ef6:	bf00      	nop
 8016ef8:	0801f1dc 	.word	0x0801f1dc
 8016efc:	0801f034 	.word	0x0801f034

08016f00 <rmw_validate_node_name>:
 8016f00:	2800      	cmp	r0, #0
 8016f02:	d03b      	beq.n	8016f7c <rmw_validate_node_name+0x7c>
 8016f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f08:	460f      	mov	r7, r1
 8016f0a:	2900      	cmp	r1, #0
 8016f0c:	d038      	beq.n	8016f80 <rmw_validate_node_name+0x80>
 8016f0e:	4615      	mov	r5, r2
 8016f10:	4604      	mov	r4, r0
 8016f12:	f7e9 f96f 	bl	80001f4 <strlen>
 8016f16:	b1e0      	cbz	r0, 8016f52 <rmw_validate_node_name+0x52>
 8016f18:	1e63      	subs	r3, r4, #1
 8016f1a:	eb03 0e00 	add.w	lr, r3, r0
 8016f1e:	f1c4 0c01 	rsb	ip, r4, #1
 8016f22:	eb0c 0803 	add.w	r8, ip, r3
 8016f26:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8016f2a:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8016f2e:	f026 0220 	bic.w	r2, r6, #32
 8016f32:	2909      	cmp	r1, #9
 8016f34:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8016f38:	d913      	bls.n	8016f62 <rmw_validate_node_name+0x62>
 8016f3a:	2a19      	cmp	r2, #25
 8016f3c:	d911      	bls.n	8016f62 <rmw_validate_node_name+0x62>
 8016f3e:	2e5f      	cmp	r6, #95	; 0x5f
 8016f40:	d00f      	beq.n	8016f62 <rmw_validate_node_name+0x62>
 8016f42:	2302      	movs	r3, #2
 8016f44:	603b      	str	r3, [r7, #0]
 8016f46:	b10d      	cbz	r5, 8016f4c <rmw_validate_node_name+0x4c>
 8016f48:	f8c5 8000 	str.w	r8, [r5]
 8016f4c:	2000      	movs	r0, #0
 8016f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f52:	2301      	movs	r3, #1
 8016f54:	603b      	str	r3, [r7, #0]
 8016f56:	2d00      	cmp	r5, #0
 8016f58:	d0f8      	beq.n	8016f4c <rmw_validate_node_name+0x4c>
 8016f5a:	2000      	movs	r0, #0
 8016f5c:	6028      	str	r0, [r5, #0]
 8016f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f62:	4573      	cmp	r3, lr
 8016f64:	d1dd      	bne.n	8016f22 <rmw_validate_node_name+0x22>
 8016f66:	7822      	ldrb	r2, [r4, #0]
 8016f68:	4b0d      	ldr	r3, [pc, #52]	; (8016fa0 <rmw_validate_node_name+0xa0>)
 8016f6a:	5cd3      	ldrb	r3, [r2, r3]
 8016f6c:	f013 0304 	ands.w	r3, r3, #4
 8016f70:	d110      	bne.n	8016f94 <rmw_validate_node_name+0x94>
 8016f72:	28ff      	cmp	r0, #255	; 0xff
 8016f74:	d806      	bhi.n	8016f84 <rmw_validate_node_name+0x84>
 8016f76:	603b      	str	r3, [r7, #0]
 8016f78:	4618      	mov	r0, r3
 8016f7a:	e7e8      	b.n	8016f4e <rmw_validate_node_name+0x4e>
 8016f7c:	200b      	movs	r0, #11
 8016f7e:	4770      	bx	lr
 8016f80:	200b      	movs	r0, #11
 8016f82:	e7e4      	b.n	8016f4e <rmw_validate_node_name+0x4e>
 8016f84:	2204      	movs	r2, #4
 8016f86:	603a      	str	r2, [r7, #0]
 8016f88:	2d00      	cmp	r5, #0
 8016f8a:	d0df      	beq.n	8016f4c <rmw_validate_node_name+0x4c>
 8016f8c:	22fe      	movs	r2, #254	; 0xfe
 8016f8e:	4618      	mov	r0, r3
 8016f90:	602a      	str	r2, [r5, #0]
 8016f92:	e7dc      	b.n	8016f4e <rmw_validate_node_name+0x4e>
 8016f94:	2303      	movs	r3, #3
 8016f96:	603b      	str	r3, [r7, #0]
 8016f98:	2d00      	cmp	r5, #0
 8016f9a:	d1de      	bne.n	8016f5a <rmw_validate_node_name+0x5a>
 8016f9c:	e7d6      	b.n	8016f4c <rmw_validate_node_name+0x4c>
 8016f9e:	bf00      	nop
 8016fa0:	0801f331 	.word	0x0801f331

08016fa4 <rmw_node_name_validation_result_string>:
 8016fa4:	2804      	cmp	r0, #4
 8016fa6:	bf9a      	itte	ls
 8016fa8:	4b02      	ldrls	r3, [pc, #8]	; (8016fb4 <rmw_node_name_validation_result_string+0x10>)
 8016faa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016fae:	4802      	ldrhi	r0, [pc, #8]	; (8016fb8 <rmw_node_name_validation_result_string+0x14>)
 8016fb0:	4770      	bx	lr
 8016fb2:	bf00      	nop
 8016fb4:	0801f2e8 	.word	0x0801f2e8
 8016fb8:	0801f1fc 	.word	0x0801f1fc

08016fbc <on_status>:
 8016fbc:	b082      	sub	sp, #8
 8016fbe:	b002      	add	sp, #8
 8016fc0:	4770      	bx	lr
 8016fc2:	bf00      	nop

08016fc4 <on_topic>:
 8016fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fc8:	4a21      	ldr	r2, [pc, #132]	; (8017050 <on_topic+0x8c>)
 8016fca:	b094      	sub	sp, #80	; 0x50
 8016fcc:	6812      	ldr	r2, [r2, #0]
 8016fce:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016fd0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8016fd4:	9113      	str	r1, [sp, #76]	; 0x4c
 8016fd6:	9312      	str	r3, [sp, #72]	; 0x48
 8016fd8:	b3ba      	cbz	r2, 801704a <on_topic+0x86>
 8016fda:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8016fde:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8016fe2:	e001      	b.n	8016fe8 <on_topic+0x24>
 8016fe4:	6892      	ldr	r2, [r2, #8]
 8016fe6:	b382      	cbz	r2, 801704a <on_topic+0x86>
 8016fe8:	68d4      	ldr	r4, [r2, #12]
 8016fea:	8aa3      	ldrh	r3, [r4, #20]
 8016fec:	428b      	cmp	r3, r1
 8016fee:	d1f9      	bne.n	8016fe4 <on_topic+0x20>
 8016ff0:	7da3      	ldrb	r3, [r4, #22]
 8016ff2:	4283      	cmp	r3, r0
 8016ff4:	d1f6      	bne.n	8016fe4 <on_topic+0x20>
 8016ff6:	2248      	movs	r2, #72	; 0x48
 8016ff8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016ffc:	4668      	mov	r0, sp
 8016ffe:	f002 fd59 	bl	8019ab4 <memcpy>
 8017002:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8017006:	4620      	mov	r0, r4
 8017008:	f7f9 fc30 	bl	801086c <rmw_uxrce_get_static_input_buffer_for_entity>
 801700c:	4607      	mov	r7, r0
 801700e:	b1e0      	cbz	r0, 801704a <on_topic+0x86>
 8017010:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017014:	462a      	mov	r2, r5
 8017016:	4630      	mov	r0, r6
 8017018:	f108 0110 	add.w	r1, r8, #16
 801701c:	f000 fd74 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 8017020:	b930      	cbnz	r0, 8017030 <on_topic+0x6c>
 8017022:	480c      	ldr	r0, [pc, #48]	; (8017054 <on_topic+0x90>)
 8017024:	4639      	mov	r1, r7
 8017026:	b014      	add	sp, #80	; 0x50
 8017028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801702c:	f000 b8ba 	b.w	80171a4 <put_memory>
 8017030:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8017034:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017038:	f000 fc90 	bl	801795c <rmw_uros_epoch_nanos>
 801703c:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8017040:	2305      	movs	r3, #5
 8017042:	e9c2 0100 	strd	r0, r1, [r2]
 8017046:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801704a:	b014      	add	sp, #80	; 0x50
 801704c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017050:	2000d234 	.word	0x2000d234
 8017054:	20009fc8 	.word	0x20009fc8

08017058 <on_request>:
 8017058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801705c:	4822      	ldr	r0, [pc, #136]	; (80170e8 <on_request+0x90>)
 801705e:	b095      	sub	sp, #84	; 0x54
 8017060:	9113      	str	r1, [sp, #76]	; 0x4c
 8017062:	6801      	ldr	r1, [r0, #0]
 8017064:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017066:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801706a:	2900      	cmp	r1, #0
 801706c:	d039      	beq.n	80170e2 <on_request+0x8a>
 801706e:	461d      	mov	r5, r3
 8017070:	e001      	b.n	8017076 <on_request+0x1e>
 8017072:	6889      	ldr	r1, [r1, #8]
 8017074:	b3a9      	cbz	r1, 80170e2 <on_request+0x8a>
 8017076:	68cc      	ldr	r4, [r1, #12]
 8017078:	8b20      	ldrh	r0, [r4, #24]
 801707a:	4290      	cmp	r0, r2
 801707c:	d1f9      	bne.n	8017072 <on_request+0x1a>
 801707e:	2248      	movs	r2, #72	; 0x48
 8017080:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017084:	4668      	mov	r0, sp
 8017086:	f002 fd15 	bl	8019ab4 <memcpy>
 801708a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801708e:	4620      	mov	r0, r4
 8017090:	f7f9 fbec 	bl	801086c <rmw_uxrce_get_static_input_buffer_for_entity>
 8017094:	4680      	mov	r8, r0
 8017096:	b320      	cbz	r0, 80170e2 <on_request+0x8a>
 8017098:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801709c:	4632      	mov	r2, r6
 801709e:	4638      	mov	r0, r7
 80170a0:	f109 0110 	add.w	r1, r9, #16
 80170a4:	f000 fd30 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 80170a8:	b930      	cbnz	r0, 80170b8 <on_request+0x60>
 80170aa:	4810      	ldr	r0, [pc, #64]	; (80170ec <on_request+0x94>)
 80170ac:	4641      	mov	r1, r8
 80170ae:	b015      	add	sp, #84	; 0x54
 80170b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170b4:	f000 b876 	b.w	80171a4 <put_memory>
 80170b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80170ba:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80170be:	f609 0428 	addw	r4, r9, #2088	; 0x828
 80170c2:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80170c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80170cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80170d0:	f000 fc44 	bl	801795c <rmw_uros_epoch_nanos>
 80170d4:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80170d8:	2303      	movs	r3, #3
 80170da:	e9c2 0100 	strd	r0, r1, [r2]
 80170de:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80170e2:	b015      	add	sp, #84	; 0x54
 80170e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170e8:	2000d224 	.word	0x2000d224
 80170ec:	20009fc8 	.word	0x20009fc8

080170f0 <on_reply>:
 80170f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170f4:	4821      	ldr	r0, [pc, #132]	; (801717c <on_reply+0x8c>)
 80170f6:	b095      	sub	sp, #84	; 0x54
 80170f8:	9113      	str	r1, [sp, #76]	; 0x4c
 80170fa:	6801      	ldr	r1, [r0, #0]
 80170fc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80170fe:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017102:	b3b9      	cbz	r1, 8017174 <on_reply+0x84>
 8017104:	461d      	mov	r5, r3
 8017106:	e001      	b.n	801710c <on_reply+0x1c>
 8017108:	6889      	ldr	r1, [r1, #8]
 801710a:	b399      	cbz	r1, 8017174 <on_reply+0x84>
 801710c:	68cc      	ldr	r4, [r1, #12]
 801710e:	8b20      	ldrh	r0, [r4, #24]
 8017110:	4290      	cmp	r0, r2
 8017112:	d1f9      	bne.n	8017108 <on_reply+0x18>
 8017114:	2248      	movs	r2, #72	; 0x48
 8017116:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801711a:	4668      	mov	r0, sp
 801711c:	f002 fcca 	bl	8019ab4 <memcpy>
 8017120:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017124:	4620      	mov	r0, r4
 8017126:	f7f9 fba1 	bl	801086c <rmw_uxrce_get_static_input_buffer_for_entity>
 801712a:	4680      	mov	r8, r0
 801712c:	b310      	cbz	r0, 8017174 <on_reply+0x84>
 801712e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017132:	4632      	mov	r2, r6
 8017134:	4638      	mov	r0, r7
 8017136:	f109 0110 	add.w	r1, r9, #16
 801713a:	f000 fce5 	bl	8017b08 <ucdr_deserialize_array_uint8_t>
 801713e:	b930      	cbnz	r0, 801714e <on_reply+0x5e>
 8017140:	480f      	ldr	r0, [pc, #60]	; (8017180 <on_reply+0x90>)
 8017142:	4641      	mov	r1, r8
 8017144:	b015      	add	sp, #84	; 0x54
 8017146:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801714a:	f000 b82b 	b.w	80171a4 <put_memory>
 801714e:	b2aa      	uxth	r2, r5
 8017150:	2300      	movs	r3, #0
 8017152:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8017156:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801715a:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 801715e:	e9c1 2300 	strd	r2, r3, [r1]
 8017162:	f000 fbfb 	bl	801795c <rmw_uros_epoch_nanos>
 8017166:	f609 0218 	addw	r2, r9, #2072	; 0x818
 801716a:	2304      	movs	r3, #4
 801716c:	e9c2 0100 	strd	r0, r1, [r2]
 8017170:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017174:	b015      	add	sp, #84	; 0x54
 8017176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801717a:	bf00      	nop
 801717c:	2000a858 	.word	0x2000a858
 8017180:	20009fc8 	.word	0x20009fc8

08017184 <get_memory>:
 8017184:	4603      	mov	r3, r0
 8017186:	6840      	ldr	r0, [r0, #4]
 8017188:	b158      	cbz	r0, 80171a2 <get_memory+0x1e>
 801718a:	6882      	ldr	r2, [r0, #8]
 801718c:	605a      	str	r2, [r3, #4]
 801718e:	b10a      	cbz	r2, 8017194 <get_memory+0x10>
 8017190:	2100      	movs	r1, #0
 8017192:	6051      	str	r1, [r2, #4]
 8017194:	681a      	ldr	r2, [r3, #0]
 8017196:	6082      	str	r2, [r0, #8]
 8017198:	b102      	cbz	r2, 801719c <get_memory+0x18>
 801719a:	6050      	str	r0, [r2, #4]
 801719c:	2200      	movs	r2, #0
 801719e:	6042      	str	r2, [r0, #4]
 80171a0:	6018      	str	r0, [r3, #0]
 80171a2:	4770      	bx	lr

080171a4 <put_memory>:
 80171a4:	684b      	ldr	r3, [r1, #4]
 80171a6:	b10b      	cbz	r3, 80171ac <put_memory+0x8>
 80171a8:	688a      	ldr	r2, [r1, #8]
 80171aa:	609a      	str	r2, [r3, #8]
 80171ac:	688a      	ldr	r2, [r1, #8]
 80171ae:	b102      	cbz	r2, 80171b2 <put_memory+0xe>
 80171b0:	6053      	str	r3, [r2, #4]
 80171b2:	6803      	ldr	r3, [r0, #0]
 80171b4:	428b      	cmp	r3, r1
 80171b6:	6843      	ldr	r3, [r0, #4]
 80171b8:	bf08      	it	eq
 80171ba:	6002      	streq	r2, [r0, #0]
 80171bc:	608b      	str	r3, [r1, #8]
 80171be:	b103      	cbz	r3, 80171c2 <put_memory+0x1e>
 80171c0:	6059      	str	r1, [r3, #4]
 80171c2:	2300      	movs	r3, #0
 80171c4:	604b      	str	r3, [r1, #4]
 80171c6:	6041      	str	r1, [r0, #4]
 80171c8:	4770      	bx	lr
 80171ca:	bf00      	nop

080171cc <rmw_destroy_client>:
 80171cc:	b570      	push	{r4, r5, r6, lr}
 80171ce:	b128      	cbz	r0, 80171dc <rmw_destroy_client+0x10>
 80171d0:	4604      	mov	r4, r0
 80171d2:	6800      	ldr	r0, [r0, #0]
 80171d4:	460d      	mov	r5, r1
 80171d6:	f7f9 fcb7 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 80171da:	b910      	cbnz	r0, 80171e2 <rmw_destroy_client+0x16>
 80171dc:	2401      	movs	r4, #1
 80171de:	4620      	mov	r0, r4
 80171e0:	bd70      	pop	{r4, r5, r6, pc}
 80171e2:	6863      	ldr	r3, [r4, #4]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d0f9      	beq.n	80171dc <rmw_destroy_client+0x10>
 80171e8:	2d00      	cmp	r5, #0
 80171ea:	d0f7      	beq.n	80171dc <rmw_destroy_client+0x10>
 80171ec:	6828      	ldr	r0, [r5, #0]
 80171ee:	f7f9 fcab 	bl	8010b48 <is_uxrce_rmw_identifier_valid>
 80171f2:	2800      	cmp	r0, #0
 80171f4:	d0f2      	beq.n	80171dc <rmw_destroy_client+0x10>
 80171f6:	686e      	ldr	r6, [r5, #4]
 80171f8:	2e00      	cmp	r6, #0
 80171fa:	d0ef      	beq.n	80171dc <rmw_destroy_client+0x10>
 80171fc:	6864      	ldr	r4, [r4, #4]
 80171fe:	6932      	ldr	r2, [r6, #16]
 8017200:	6920      	ldr	r0, [r4, #16]
 8017202:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017206:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801720a:	6819      	ldr	r1, [r3, #0]
 801720c:	f7fa f962 	bl	80114d4 <uxr_buffer_cancel_data>
 8017210:	4602      	mov	r2, r0
 8017212:	6920      	ldr	r0, [r4, #16]
 8017214:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017218:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801721c:	f7f9 fc14 	bl	8010a48 <run_xrce_session>
 8017220:	6920      	ldr	r0, [r4, #16]
 8017222:	6932      	ldr	r2, [r6, #16]
 8017224:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017228:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801722c:	6819      	ldr	r1, [r3, #0]
 801722e:	f7f9 fe27 	bl	8010e80 <uxr_buffer_delete_entity>
 8017232:	4602      	mov	r2, r0
 8017234:	6920      	ldr	r0, [r4, #16]
 8017236:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801723a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801723e:	f7f9 fc03 	bl	8010a48 <run_xrce_session>
 8017242:	2800      	cmp	r0, #0
 8017244:	4628      	mov	r0, r5
 8017246:	bf14      	ite	ne
 8017248:	2400      	movne	r4, #0
 801724a:	2402      	moveq	r4, #2
 801724c:	f7f9 faec 	bl	8010828 <rmw_uxrce_fini_client_memory>
 8017250:	e7c5      	b.n	80171de <rmw_destroy_client+0x12>
 8017252:	bf00      	nop

08017254 <rmw_get_implementation_identifier>:
 8017254:	4b01      	ldr	r3, [pc, #4]	; (801725c <rmw_get_implementation_identifier+0x8>)
 8017256:	6818      	ldr	r0, [r3, #0]
 8017258:	4770      	bx	lr
 801725a:	bf00      	nop
 801725c:	0801f314 	.word	0x0801f314

08017260 <create_topic>:
 8017260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017264:	4605      	mov	r5, r0
 8017266:	b084      	sub	sp, #16
 8017268:	482b      	ldr	r0, [pc, #172]	; (8017318 <create_topic+0xb8>)
 801726a:	460f      	mov	r7, r1
 801726c:	4616      	mov	r6, r2
 801726e:	f7ff ff89 	bl	8017184 <get_memory>
 8017272:	4604      	mov	r4, r0
 8017274:	2800      	cmp	r0, #0
 8017276:	d036      	beq.n	80172e6 <create_topic+0x86>
 8017278:	692a      	ldr	r2, [r5, #16]
 801727a:	68c4      	ldr	r4, [r0, #12]
 801727c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8017320 <create_topic+0xc0>
 8017280:	61a5      	str	r5, [r4, #24]
 8017282:	f241 5396 	movw	r3, #5526	; 0x1596
 8017286:	6166      	str	r6, [r4, #20]
 8017288:	5ad0      	ldrh	r0, [r2, r3]
 801728a:	1c41      	adds	r1, r0, #1
 801728c:	52d1      	strh	r1, [r2, r3]
 801728e:	2102      	movs	r1, #2
 8017290:	f7fa f8b8 	bl	8011404 <uxr_object_id>
 8017294:	4641      	mov	r1, r8
 8017296:	6120      	str	r0, [r4, #16]
 8017298:	223c      	movs	r2, #60	; 0x3c
 801729a:	4638      	mov	r0, r7
 801729c:	f7f9 fc3a 	bl	8010b14 <generate_topic_name>
 80172a0:	4607      	mov	r7, r0
 80172a2:	b320      	cbz	r0, 80172ee <create_topic+0x8e>
 80172a4:	4f1d      	ldr	r7, [pc, #116]	; (801731c <create_topic+0xbc>)
 80172a6:	4630      	mov	r0, r6
 80172a8:	4639      	mov	r1, r7
 80172aa:	2264      	movs	r2, #100	; 0x64
 80172ac:	f7f9 fc02 	bl	8010ab4 <generate_type_name>
 80172b0:	4606      	mov	r6, r0
 80172b2:	b320      	cbz	r0, 80172fe <create_topic+0x9e>
 80172b4:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 80172b8:	2106      	movs	r1, #6
 80172ba:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80172be:	9701      	str	r7, [sp, #4]
 80172c0:	f8cd 8000 	str.w	r8, [sp]
 80172c4:	9102      	str	r1, [sp, #8]
 80172c6:	6811      	ldr	r1, [r2, #0]
 80172c8:	6922      	ldr	r2, [r4, #16]
 80172ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80172ce:	f7f9 fe55 	bl	8010f7c <uxr_buffer_create_topic_bin>
 80172d2:	4602      	mov	r2, r0
 80172d4:	6928      	ldr	r0, [r5, #16]
 80172d6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80172da:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80172de:	f7f9 fbb3 	bl	8010a48 <run_xrce_session>
 80172e2:	4605      	mov	r5, r0
 80172e4:	b198      	cbz	r0, 801730e <create_topic+0xae>
 80172e6:	4620      	mov	r0, r4
 80172e8:	b004      	add	sp, #16
 80172ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172ee:	4620      	mov	r0, r4
 80172f0:	f7f9 fab0 	bl	8010854 <rmw_uxrce_fini_topic_memory>
 80172f4:	463c      	mov	r4, r7
 80172f6:	4620      	mov	r0, r4
 80172f8:	b004      	add	sp, #16
 80172fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172fe:	4620      	mov	r0, r4
 8017300:	f7f9 faa8 	bl	8010854 <rmw_uxrce_fini_topic_memory>
 8017304:	4634      	mov	r4, r6
 8017306:	4620      	mov	r0, r4
 8017308:	b004      	add	sp, #16
 801730a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801730e:	4620      	mov	r0, r4
 8017310:	f7f9 faa0 	bl	8010854 <rmw_uxrce_fini_topic_memory>
 8017314:	462c      	mov	r4, r5
 8017316:	e7e6      	b.n	80172e6 <create_topic+0x86>
 8017318:	2000d160 	.word	0x2000d160
 801731c:	20009f04 	.word	0x20009f04
 8017320:	20009ec8 	.word	0x20009ec8

08017324 <destroy_topic>:
 8017324:	b538      	push	{r3, r4, r5, lr}
 8017326:	6985      	ldr	r5, [r0, #24]
 8017328:	b1d5      	cbz	r5, 8017360 <destroy_topic+0x3c>
 801732a:	4604      	mov	r4, r0
 801732c:	6928      	ldr	r0, [r5, #16]
 801732e:	6922      	ldr	r2, [r4, #16]
 8017330:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017334:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017338:	6819      	ldr	r1, [r3, #0]
 801733a:	f7f9 fda1 	bl	8010e80 <uxr_buffer_delete_entity>
 801733e:	4602      	mov	r2, r0
 8017340:	6928      	ldr	r0, [r5, #16]
 8017342:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017346:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801734a:	f7f9 fb7d 	bl	8010a48 <run_xrce_session>
 801734e:	2800      	cmp	r0, #0
 8017350:	4620      	mov	r0, r4
 8017352:	bf14      	ite	ne
 8017354:	2400      	movne	r4, #0
 8017356:	2402      	moveq	r4, #2
 8017358:	f7f9 fa7c 	bl	8010854 <rmw_uxrce_fini_topic_memory>
 801735c:	4620      	mov	r0, r4
 801735e:	bd38      	pop	{r3, r4, r5, pc}
 8017360:	2401      	movs	r4, #1
 8017362:	4620      	mov	r0, r4
 8017364:	bd38      	pop	{r3, r4, r5, pc}
 8017366:	bf00      	nop

08017368 <rmw_take_request>:
 8017368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801736c:	4605      	mov	r5, r0
 801736e:	6800      	ldr	r0, [r0, #0]
 8017370:	b089      	sub	sp, #36	; 0x24
 8017372:	460c      	mov	r4, r1
 8017374:	4690      	mov	r8, r2
 8017376:	461e      	mov	r6, r3
 8017378:	b128      	cbz	r0, 8017386 <rmw_take_request+0x1e>
 801737a:	4b28      	ldr	r3, [pc, #160]	; (801741c <rmw_take_request+0xb4>)
 801737c:	6819      	ldr	r1, [r3, #0]
 801737e:	f7e8 ff2f 	bl	80001e0 <strcmp>
 8017382:	2800      	cmp	r0, #0
 8017384:	d146      	bne.n	8017414 <rmw_take_request+0xac>
 8017386:	b10e      	cbz	r6, 801738c <rmw_take_request+0x24>
 8017388:	2300      	movs	r3, #0
 801738a:	7033      	strb	r3, [r6, #0]
 801738c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017390:	f7f9 fae2 	bl	8010958 <rmw_uxrce_clean_expired_static_input_buffer>
 8017394:	4648      	mov	r0, r9
 8017396:	f7f9 fab5 	bl	8010904 <rmw_uxrce_find_static_input_buffer_by_owner>
 801739a:	4607      	mov	r7, r0
 801739c:	b3b0      	cbz	r0, 801740c <rmw_take_request+0xa4>
 801739e:	68c5      	ldr	r5, [r0, #12]
 80173a0:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80173a4:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 80173a8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80173ac:	7423      	strb	r3, [r4, #16]
 80173ae:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80173b2:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80173b6:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80173ba:	74e2      	strb	r2, [r4, #19]
 80173bc:	f8a4 3011 	strh.w	r3, [r4, #17]
 80173c0:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 80173c4:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 80173c8:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 80173cc:	61e1      	str	r1, [r4, #28]
 80173ce:	6162      	str	r2, [r4, #20]
 80173d0:	61a3      	str	r3, [r4, #24]
 80173d2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80173d6:	689b      	ldr	r3, [r3, #8]
 80173d8:	4798      	blx	r3
 80173da:	6844      	ldr	r4, [r0, #4]
 80173dc:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80173e0:	f105 0110 	add.w	r1, r5, #16
 80173e4:	4668      	mov	r0, sp
 80173e6:	f7f9 fc83 	bl	8010cf0 <ucdr_init_buffer>
 80173ea:	68e3      	ldr	r3, [r4, #12]
 80173ec:	4641      	mov	r1, r8
 80173ee:	4668      	mov	r0, sp
 80173f0:	4798      	blx	r3
 80173f2:	4639      	mov	r1, r7
 80173f4:	4604      	mov	r4, r0
 80173f6:	480a      	ldr	r0, [pc, #40]	; (8017420 <rmw_take_request+0xb8>)
 80173f8:	f7ff fed4 	bl	80171a4 <put_memory>
 80173fc:	b106      	cbz	r6, 8017400 <rmw_take_request+0x98>
 80173fe:	7034      	strb	r4, [r6, #0]
 8017400:	f084 0001 	eor.w	r0, r4, #1
 8017404:	b2c0      	uxtb	r0, r0
 8017406:	b009      	add	sp, #36	; 0x24
 8017408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801740c:	2001      	movs	r0, #1
 801740e:	b009      	add	sp, #36	; 0x24
 8017410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017414:	200c      	movs	r0, #12
 8017416:	b009      	add	sp, #36	; 0x24
 8017418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801741c:	0801f314 	.word	0x0801f314
 8017420:	20009fc8 	.word	0x20009fc8

08017424 <rmw_send_response>:
 8017424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017426:	4605      	mov	r5, r0
 8017428:	6800      	ldr	r0, [r0, #0]
 801742a:	b091      	sub	sp, #68	; 0x44
 801742c:	460c      	mov	r4, r1
 801742e:	4617      	mov	r7, r2
 8017430:	b128      	cbz	r0, 801743e <rmw_send_response+0x1a>
 8017432:	4b2a      	ldr	r3, [pc, #168]	; (80174dc <rmw_send_response+0xb8>)
 8017434:	6819      	ldr	r1, [r3, #0]
 8017436:	f7e8 fed3 	bl	80001e0 <strcmp>
 801743a:	2800      	cmp	r0, #0
 801743c:	d143      	bne.n	80174c6 <rmw_send_response+0xa2>
 801743e:	4623      	mov	r3, r4
 8017440:	4626      	mov	r6, r4
 8017442:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8017446:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 801744a:	6859      	ldr	r1, [r3, #4]
 801744c:	686d      	ldr	r5, [r5, #4]
 801744e:	689a      	ldr	r2, [r3, #8]
 8017450:	78b3      	ldrb	r3, [r6, #2]
 8017452:	f894 c000 	ldrb.w	ip, [r4]
 8017456:	6966      	ldr	r6, [r4, #20]
 8017458:	f88d 3016 	strb.w	r3, [sp, #22]
 801745c:	ab02      	add	r3, sp, #8
 801745e:	f8ad e014 	strh.w	lr, [sp, #20]
 8017462:	f88d c017 	strb.w	ip, [sp, #23]
 8017466:	9606      	str	r6, [sp, #24]
 8017468:	c307      	stmia	r3!, {r0, r1, r2}
 801746a:	696b      	ldr	r3, [r5, #20]
 801746c:	6922      	ldr	r2, [r4, #16]
 801746e:	9207      	str	r2, [sp, #28]
 8017470:	68db      	ldr	r3, [r3, #12]
 8017472:	6fae      	ldr	r6, [r5, #120]	; 0x78
 8017474:	4798      	blx	r3
 8017476:	4603      	mov	r3, r0
 8017478:	4638      	mov	r0, r7
 801747a:	685c      	ldr	r4, [r3, #4]
 801747c:	6923      	ldr	r3, [r4, #16]
 801747e:	4798      	blx	r3
 8017480:	6933      	ldr	r3, [r6, #16]
 8017482:	3018      	adds	r0, #24
 8017484:	9000      	str	r0, [sp, #0]
 8017486:	692a      	ldr	r2, [r5, #16]
 8017488:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801748a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801748e:	ab08      	add	r3, sp, #32
 8017490:	f7fc f86c 	bl	801356c <uxr_prepare_output_stream>
 8017494:	b910      	cbnz	r0, 801749c <rmw_send_response+0x78>
 8017496:	2001      	movs	r0, #1
 8017498:	b011      	add	sp, #68	; 0x44
 801749a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801749c:	a902      	add	r1, sp, #8
 801749e:	a808      	add	r0, sp, #32
 80174a0:	f7fd f982 	bl	80147a8 <uxr_serialize_SampleIdentity>
 80174a4:	68a3      	ldr	r3, [r4, #8]
 80174a6:	a908      	add	r1, sp, #32
 80174a8:	4638      	mov	r0, r7
 80174aa:	4798      	blx	r3
 80174ac:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80174b0:	6930      	ldr	r0, [r6, #16]
 80174b2:	2b01      	cmp	r3, #1
 80174b4:	d00a      	beq.n	80174cc <rmw_send_response+0xa8>
 80174b6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80174b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80174bc:	f7fa fdd0 	bl	8012060 <uxr_run_session_until_confirm_delivery>
 80174c0:	2000      	movs	r0, #0
 80174c2:	b011      	add	sp, #68	; 0x44
 80174c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174c6:	200c      	movs	r0, #12
 80174c8:	b011      	add	sp, #68	; 0x44
 80174ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174cc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80174d0:	f7fa fa0a 	bl	80118e8 <uxr_flash_output_streams>
 80174d4:	2000      	movs	r0, #0
 80174d6:	b011      	add	sp, #68	; 0x44
 80174d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174da:	bf00      	nop
 80174dc:	0801f314 	.word	0x0801f314

080174e0 <rmw_take_response>:
 80174e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174e4:	4604      	mov	r4, r0
 80174e6:	6800      	ldr	r0, [r0, #0]
 80174e8:	b089      	sub	sp, #36	; 0x24
 80174ea:	4688      	mov	r8, r1
 80174ec:	4617      	mov	r7, r2
 80174ee:	461d      	mov	r5, r3
 80174f0:	b120      	cbz	r0, 80174fc <rmw_take_response+0x1c>
 80174f2:	4b1f      	ldr	r3, [pc, #124]	; (8017570 <rmw_take_response+0x90>)
 80174f4:	6819      	ldr	r1, [r3, #0]
 80174f6:	f7e8 fe73 	bl	80001e0 <strcmp>
 80174fa:	bb88      	cbnz	r0, 8017560 <rmw_take_response+0x80>
 80174fc:	b10d      	cbz	r5, 8017502 <rmw_take_response+0x22>
 80174fe:	2300      	movs	r3, #0
 8017500:	702b      	strb	r3, [r5, #0]
 8017502:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8017506:	f7f9 fa27 	bl	8010958 <rmw_uxrce_clean_expired_static_input_buffer>
 801750a:	4648      	mov	r0, r9
 801750c:	f7f9 f9fa 	bl	8010904 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017510:	4606      	mov	r6, r0
 8017512:	b348      	cbz	r0, 8017568 <rmw_take_response+0x88>
 8017514:	68c4      	ldr	r4, [r0, #12]
 8017516:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801751a:	f604 0328 	addw	r3, r4, #2088	; 0x828
 801751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017522:	68c9      	ldr	r1, [r1, #12]
 8017524:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8017528:	4788      	blx	r1
 801752a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801752e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8017532:	f104 0110 	add.w	r1, r4, #16
 8017536:	4668      	mov	r0, sp
 8017538:	f7f9 fbda 	bl	8010cf0 <ucdr_init_buffer>
 801753c:	4639      	mov	r1, r7
 801753e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017542:	4668      	mov	r0, sp
 8017544:	4798      	blx	r3
 8017546:	4631      	mov	r1, r6
 8017548:	4604      	mov	r4, r0
 801754a:	480a      	ldr	r0, [pc, #40]	; (8017574 <rmw_take_response+0x94>)
 801754c:	f7ff fe2a 	bl	80171a4 <put_memory>
 8017550:	b105      	cbz	r5, 8017554 <rmw_take_response+0x74>
 8017552:	702c      	strb	r4, [r5, #0]
 8017554:	f084 0001 	eor.w	r0, r4, #1
 8017558:	b2c0      	uxtb	r0, r0
 801755a:	b009      	add	sp, #36	; 0x24
 801755c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017560:	200c      	movs	r0, #12
 8017562:	b009      	add	sp, #36	; 0x24
 8017564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017568:	2001      	movs	r0, #1
 801756a:	b009      	add	sp, #36	; 0x24
 801756c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017570:	0801f314 	.word	0x0801f314
 8017574:	20009fc8 	.word	0x20009fc8

08017578 <rmw_take_with_info>:
 8017578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801757a:	4604      	mov	r4, r0
 801757c:	6800      	ldr	r0, [r0, #0]
 801757e:	b089      	sub	sp, #36	; 0x24
 8017580:	460f      	mov	r7, r1
 8017582:	4615      	mov	r5, r2
 8017584:	b128      	cbz	r0, 8017592 <rmw_take_with_info+0x1a>
 8017586:	4b24      	ldr	r3, [pc, #144]	; (8017618 <rmw_take_with_info+0xa0>)
 8017588:	6819      	ldr	r1, [r3, #0]
 801758a:	f7e8 fe29 	bl	80001e0 <strcmp>
 801758e:	2800      	cmp	r0, #0
 8017590:	d13e      	bne.n	8017610 <rmw_take_with_info+0x98>
 8017592:	b305      	cbz	r5, 80175d6 <rmw_take_with_info+0x5e>
 8017594:	6864      	ldr	r4, [r4, #4]
 8017596:	2300      	movs	r3, #0
 8017598:	702b      	strb	r3, [r5, #0]
 801759a:	f7f9 f9dd 	bl	8010958 <rmw_uxrce_clean_expired_static_input_buffer>
 801759e:	4620      	mov	r0, r4
 80175a0:	f7f9 f9b0 	bl	8010904 <rmw_uxrce_find_static_input_buffer_by_owner>
 80175a4:	4606      	mov	r6, r0
 80175a6:	b1f0      	cbz	r0, 80175e6 <rmw_take_with_info+0x6e>
 80175a8:	68c1      	ldr	r1, [r0, #12]
 80175aa:	4668      	mov	r0, sp
 80175ac:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80175b0:	3110      	adds	r1, #16
 80175b2:	f7f9 fb9d 	bl	8010cf0 <ucdr_init_buffer>
 80175b6:	69a3      	ldr	r3, [r4, #24]
 80175b8:	4639      	mov	r1, r7
 80175ba:	68db      	ldr	r3, [r3, #12]
 80175bc:	4668      	mov	r0, sp
 80175be:	4798      	blx	r3
 80175c0:	4631      	mov	r1, r6
 80175c2:	4604      	mov	r4, r0
 80175c4:	4815      	ldr	r0, [pc, #84]	; (801761c <rmw_take_with_info+0xa4>)
 80175c6:	f7ff fded 	bl	80171a4 <put_memory>
 80175ca:	702c      	strb	r4, [r5, #0]
 80175cc:	f084 0001 	eor.w	r0, r4, #1
 80175d0:	b2c0      	uxtb	r0, r0
 80175d2:	b009      	add	sp, #36	; 0x24
 80175d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175d6:	6864      	ldr	r4, [r4, #4]
 80175d8:	f7f9 f9be 	bl	8010958 <rmw_uxrce_clean_expired_static_input_buffer>
 80175dc:	4620      	mov	r0, r4
 80175de:	f7f9 f991 	bl	8010904 <rmw_uxrce_find_static_input_buffer_by_owner>
 80175e2:	4605      	mov	r5, r0
 80175e4:	b910      	cbnz	r0, 80175ec <rmw_take_with_info+0x74>
 80175e6:	2001      	movs	r0, #1
 80175e8:	b009      	add	sp, #36	; 0x24
 80175ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175ec:	68e9      	ldr	r1, [r5, #12]
 80175ee:	4668      	mov	r0, sp
 80175f0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80175f4:	3110      	adds	r1, #16
 80175f6:	f7f9 fb7b 	bl	8010cf0 <ucdr_init_buffer>
 80175fa:	69a3      	ldr	r3, [r4, #24]
 80175fc:	4639      	mov	r1, r7
 80175fe:	68db      	ldr	r3, [r3, #12]
 8017600:	4668      	mov	r0, sp
 8017602:	4798      	blx	r3
 8017604:	4629      	mov	r1, r5
 8017606:	4604      	mov	r4, r0
 8017608:	4804      	ldr	r0, [pc, #16]	; (801761c <rmw_take_with_info+0xa4>)
 801760a:	f7ff fdcb 	bl	80171a4 <put_memory>
 801760e:	e7dd      	b.n	80175cc <rmw_take_with_info+0x54>
 8017610:	200c      	movs	r0, #12
 8017612:	b009      	add	sp, #36	; 0x24
 8017614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017616:	bf00      	nop
 8017618:	0801f314 	.word	0x0801f314
 801761c:	20009fc8 	.word	0x20009fc8

08017620 <rmw_wait>:
 8017620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017624:	460f      	mov	r7, r1
 8017626:	4606      	mov	r6, r0
 8017628:	990c      	ldr	r1, [sp, #48]	; 0x30
 801762a:	469a      	mov	sl, r3
 801762c:	4615      	mov	r5, r2
 801762e:	2a00      	cmp	r2, #0
 8017630:	f000 8122 	beq.w	8017878 <rmw_wait+0x258>
 8017634:	2900      	cmp	r1, #0
 8017636:	f000 812a 	beq.w	801788e <rmw_wait+0x26e>
 801763a:	e9d1 2300 	ldrd	r2, r3, [r1]
 801763e:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8017642:	015c      	lsls	r4, r3, #5
 8017644:	ebbb 0b02 	subs.w	fp, fp, r2
 8017648:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 801764c:	eb64 0403 	sbc.w	r4, r4, r3
 8017650:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8017654:	00a4      	lsls	r4, r4, #2
 8017656:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 801765a:	eb10 0b02 	adds.w	fp, r0, r2
 801765e:	eb43 0404 	adc.w	r4, r3, r4
 8017662:	4aad      	ldr	r2, [pc, #692]	; (8017918 <rmw_wait+0x2f8>)
 8017664:	2300      	movs	r3, #0
 8017666:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 801766a:	f7e9 fb75 	bl	8000d58 <__aeabi_uldivmod>
 801766e:	00e4      	lsls	r4, r4, #3
 8017670:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8017674:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8017678:	eb1b 0800 	adds.w	r8, fp, r0
 801767c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017680:	eb44 0901 	adc.w	r9, r4, r1
 8017684:	2300      	movs	r3, #0
 8017686:	4542      	cmp	r2, r8
 8017688:	eb73 0109 	sbcs.w	r1, r3, r9
 801768c:	f2c0 80f2 	blt.w	8017874 <rmw_wait+0x254>
 8017690:	f7f9 f962 	bl	8010958 <rmw_uxrce_clean_expired_static_input_buffer>
 8017694:	4ba1      	ldr	r3, [pc, #644]	; (801791c <rmw_wait+0x2fc>)
 8017696:	681c      	ldr	r4, [r3, #0]
 8017698:	b144      	cbz	r4, 80176ac <rmw_wait+0x8c>
 801769a:	4623      	mov	r3, r4
 801769c:	f241 50a4 	movw	r0, #5540	; 0x15a4
 80176a0:	2100      	movs	r1, #0
 80176a2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80176a6:	5411      	strb	r1, [r2, r0]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d1fa      	bne.n	80176a2 <rmw_wait+0x82>
 80176ac:	b185      	cbz	r5, 80176d0 <rmw_wait+0xb0>
 80176ae:	6829      	ldr	r1, [r5, #0]
 80176b0:	b171      	cbz	r1, 80176d0 <rmw_wait+0xb0>
 80176b2:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80176b6:	2300      	movs	r3, #0
 80176b8:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80176bc:	2001      	movs	r0, #1
 80176be:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80176c2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80176c4:	3301      	adds	r3, #1
 80176c6:	6912      	ldr	r2, [r2, #16]
 80176c8:	4299      	cmp	r1, r3
 80176ca:	f802 000c 	strb.w	r0, [r2, ip]
 80176ce:	d1f6      	bne.n	80176be <rmw_wait+0x9e>
 80176d0:	f1ba 0f00 	cmp.w	sl, #0
 80176d4:	d011      	beq.n	80176fa <rmw_wait+0xda>
 80176d6:	f8da 1000 	ldr.w	r1, [sl]
 80176da:	b171      	cbz	r1, 80176fa <rmw_wait+0xda>
 80176dc:	f8da e004 	ldr.w	lr, [sl, #4]
 80176e0:	2300      	movs	r3, #0
 80176e2:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80176e6:	2001      	movs	r0, #1
 80176e8:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80176ec:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80176ee:	3301      	adds	r3, #1
 80176f0:	6912      	ldr	r2, [r2, #16]
 80176f2:	4299      	cmp	r1, r3
 80176f4:	f802 000c 	strb.w	r0, [r2, ip]
 80176f8:	d1f6      	bne.n	80176e8 <rmw_wait+0xc8>
 80176fa:	b186      	cbz	r6, 801771e <rmw_wait+0xfe>
 80176fc:	6831      	ldr	r1, [r6, #0]
 80176fe:	b171      	cbz	r1, 801771e <rmw_wait+0xfe>
 8017700:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8017704:	2300      	movs	r3, #0
 8017706:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 801770a:	2001      	movs	r0, #1
 801770c:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017710:	6a12      	ldr	r2, [r2, #32]
 8017712:	3301      	adds	r3, #1
 8017714:	6912      	ldr	r2, [r2, #16]
 8017716:	4299      	cmp	r1, r3
 8017718:	f802 000c 	strb.w	r0, [r2, ip]
 801771c:	d1f6      	bne.n	801770c <rmw_wait+0xec>
 801771e:	b34c      	cbz	r4, 8017774 <rmw_wait+0x154>
 8017720:	4622      	mov	r2, r4
 8017722:	2300      	movs	r3, #0
 8017724:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017728:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 801772c:	5c09      	ldrb	r1, [r1, r0]
 801772e:	440b      	add	r3, r1
 8017730:	b2db      	uxtb	r3, r3
 8017732:	2a00      	cmp	r2, #0
 8017734:	d1f8      	bne.n	8017728 <rmw_wait+0x108>
 8017736:	2b00      	cmp	r3, #0
 8017738:	f000 8082 	beq.w	8017840 <rmw_wait+0x220>
 801773c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8017740:	d00d      	beq.n	801775e <rmw_wait+0x13e>
 8017742:	ee07 8a90 	vmov	s15, r8
 8017746:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801774a:	ee07 3a90 	vmov	s15, r3
 801774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017756:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801775a:	ee17 8a90 	vmov	r8, s15
 801775e:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8017762:	68e0      	ldr	r0, [r4, #12]
 8017764:	f810 3009 	ldrb.w	r3, [r0, r9]
 8017768:	2b00      	cmp	r3, #0
 801776a:	f040 8093 	bne.w	8017894 <rmw_wait+0x274>
 801776e:	68a4      	ldr	r4, [r4, #8]
 8017770:	2c00      	cmp	r4, #0
 8017772:	d1f6      	bne.n	8017762 <rmw_wait+0x142>
 8017774:	2d00      	cmp	r5, #0
 8017776:	f000 80ac 	beq.w	80178d2 <rmw_wait+0x2b2>
 801777a:	682b      	ldr	r3, [r5, #0]
 801777c:	2b00      	cmp	r3, #0
 801777e:	f000 8093 	beq.w	80178a8 <rmw_wait+0x288>
 8017782:	2400      	movs	r4, #0
 8017784:	46a0      	mov	r8, r4
 8017786:	686b      	ldr	r3, [r5, #4]
 8017788:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801778c:	f7f9 f8ba 	bl	8010904 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017790:	2800      	cmp	r0, #0
 8017792:	d05f      	beq.n	8017854 <rmw_wait+0x234>
 8017794:	682b      	ldr	r3, [r5, #0]
 8017796:	3401      	adds	r4, #1
 8017798:	42a3      	cmp	r3, r4
 801779a:	f04f 0801 	mov.w	r8, #1
 801779e:	d8f2      	bhi.n	8017786 <rmw_wait+0x166>
 80177a0:	f1ba 0f00 	cmp.w	sl, #0
 80177a4:	d012      	beq.n	80177cc <rmw_wait+0x1ac>
 80177a6:	f8da 3000 	ldr.w	r3, [sl]
 80177aa:	b17b      	cbz	r3, 80177cc <rmw_wait+0x1ac>
 80177ac:	2400      	movs	r4, #0
 80177ae:	f8da 3004 	ldr.w	r3, [sl, #4]
 80177b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80177b6:	f7f9 f8a5 	bl	8010904 <rmw_uxrce_find_static_input_buffer_by_owner>
 80177ba:	2800      	cmp	r0, #0
 80177bc:	d052      	beq.n	8017864 <rmw_wait+0x244>
 80177be:	f8da 3000 	ldr.w	r3, [sl]
 80177c2:	3401      	adds	r4, #1
 80177c4:	42a3      	cmp	r3, r4
 80177c6:	f04f 0801 	mov.w	r8, #1
 80177ca:	d8f0      	bhi.n	80177ae <rmw_wait+0x18e>
 80177cc:	b1e6      	cbz	r6, 8017808 <rmw_wait+0x1e8>
 80177ce:	6833      	ldr	r3, [r6, #0]
 80177d0:	b1d3      	cbz	r3, 8017808 <rmw_wait+0x1e8>
 80177d2:	2400      	movs	r4, #0
 80177d4:	6873      	ldr	r3, [r6, #4]
 80177d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80177da:	f7f9 f893 	bl	8010904 <rmw_uxrce_find_static_input_buffer_by_owner>
 80177de:	b160      	cbz	r0, 80177fa <rmw_wait+0x1da>
 80177e0:	6833      	ldr	r3, [r6, #0]
 80177e2:	3401      	adds	r4, #1
 80177e4:	42a3      	cmp	r3, r4
 80177e6:	d96c      	bls.n	80178c2 <rmw_wait+0x2a2>
 80177e8:	6873      	ldr	r3, [r6, #4]
 80177ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80177ee:	f04f 0801 	mov.w	r8, #1
 80177f2:	f7f9 f887 	bl	8010904 <rmw_uxrce_find_static_input_buffer_by_owner>
 80177f6:	2800      	cmp	r0, #0
 80177f8:	d1f2      	bne.n	80177e0 <rmw_wait+0x1c0>
 80177fa:	e9d6 3200 	ldrd	r3, r2, [r6]
 80177fe:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017802:	3401      	adds	r4, #1
 8017804:	42a3      	cmp	r3, r4
 8017806:	d8e5      	bhi.n	80177d4 <rmw_wait+0x1b4>
 8017808:	b1a7      	cbz	r7, 8017834 <rmw_wait+0x214>
 801780a:	683c      	ldr	r4, [r7, #0]
 801780c:	b194      	cbz	r4, 8017834 <rmw_wait+0x214>
 801780e:	2300      	movs	r3, #0
 8017810:	461d      	mov	r5, r3
 8017812:	e004      	b.n	801781e <rmw_wait+0x1fe>
 8017814:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017818:	3301      	adds	r3, #1
 801781a:	42a3      	cmp	r3, r4
 801781c:	d00a      	beq.n	8017834 <rmw_wait+0x214>
 801781e:	6878      	ldr	r0, [r7, #4]
 8017820:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017824:	7c0a      	ldrb	r2, [r1, #16]
 8017826:	2a00      	cmp	r2, #0
 8017828:	d0f4      	beq.n	8017814 <rmw_wait+0x1f4>
 801782a:	3301      	adds	r3, #1
 801782c:	42a3      	cmp	r3, r4
 801782e:	740d      	strb	r5, [r1, #16]
 8017830:	4690      	mov	r8, r2
 8017832:	d1f4      	bne.n	801781e <rmw_wait+0x1fe>
 8017834:	f1b8 0f00 	cmp.w	r8, #0
 8017838:	d040      	beq.n	80178bc <rmw_wait+0x29c>
 801783a:	2000      	movs	r0, #0
 801783c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017840:	68e0      	ldr	r0, [r4, #12]
 8017842:	2100      	movs	r1, #0
 8017844:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017848:	f7fa fbd0 	bl	8011fec <uxr_run_session_timeout>
 801784c:	68a4      	ldr	r4, [r4, #8]
 801784e:	2c00      	cmp	r4, #0
 8017850:	d1f6      	bne.n	8017840 <rmw_wait+0x220>
 8017852:	e78f      	b.n	8017774 <rmw_wait+0x154>
 8017854:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017858:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801785c:	3401      	adds	r4, #1
 801785e:	42a3      	cmp	r3, r4
 8017860:	d891      	bhi.n	8017786 <rmw_wait+0x166>
 8017862:	e79d      	b.n	80177a0 <rmw_wait+0x180>
 8017864:	e9da 3200 	ldrd	r3, r2, [sl]
 8017868:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801786c:	3401      	adds	r4, #1
 801786e:	429c      	cmp	r4, r3
 8017870:	d39d      	bcc.n	80177ae <rmw_wait+0x18e>
 8017872:	e7ab      	b.n	80177cc <rmw_wait+0x1ac>
 8017874:	4690      	mov	r8, r2
 8017876:	e70b      	b.n	8017690 <rmw_wait+0x70>
 8017878:	2b00      	cmp	r3, #0
 801787a:	f47f aedb 	bne.w	8017634 <rmw_wait+0x14>
 801787e:	2800      	cmp	r0, #0
 8017880:	f47f aed8 	bne.w	8017634 <rmw_wait+0x14>
 8017884:	2f00      	cmp	r7, #0
 8017886:	d0d8      	beq.n	801783a <rmw_wait+0x21a>
 8017888:	2900      	cmp	r1, #0
 801788a:	f47f aed6 	bne.w	801763a <rmw_wait+0x1a>
 801788e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017892:	e6fd      	b.n	8017690 <rmw_wait+0x70>
 8017894:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017898:	4641      	mov	r1, r8
 801789a:	f7fa fbc1 	bl	8012020 <uxr_run_session_until_data>
 801789e:	68a4      	ldr	r4, [r4, #8]
 80178a0:	2c00      	cmp	r4, #0
 80178a2:	f47f af5e 	bne.w	8017762 <rmw_wait+0x142>
 80178a6:	e765      	b.n	8017774 <rmw_wait+0x154>
 80178a8:	f1ba 0f00 	cmp.w	sl, #0
 80178ac:	d11e      	bne.n	80178ec <rmw_wait+0x2cc>
 80178ae:	b35e      	cbz	r6, 8017908 <rmw_wait+0x2e8>
 80178b0:	6833      	ldr	r3, [r6, #0]
 80178b2:	46d0      	mov	r8, sl
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d18c      	bne.n	80177d2 <rmw_wait+0x1b2>
 80178b8:	2f00      	cmp	r7, #0
 80178ba:	d1a6      	bne.n	801780a <rmw_wait+0x1ea>
 80178bc:	2002      	movs	r0, #2
 80178be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178c2:	2f00      	cmp	r7, #0
 80178c4:	d0b9      	beq.n	801783a <rmw_wait+0x21a>
 80178c6:	683c      	ldr	r4, [r7, #0]
 80178c8:	f04f 0801 	mov.w	r8, #1
 80178cc:	2c00      	cmp	r4, #0
 80178ce:	d19e      	bne.n	801780e <rmw_wait+0x1ee>
 80178d0:	e7b3      	b.n	801783a <rmw_wait+0x21a>
 80178d2:	f1ba 0f00 	cmp.w	sl, #0
 80178d6:	d0ea      	beq.n	80178ae <rmw_wait+0x28e>
 80178d8:	f8da 3000 	ldr.w	r3, [sl]
 80178dc:	46a8      	mov	r8, r5
 80178de:	2b00      	cmp	r3, #0
 80178e0:	f47f af64 	bne.w	80177ac <rmw_wait+0x18c>
 80178e4:	2e00      	cmp	r6, #0
 80178e6:	f47f af72 	bne.w	80177ce <rmw_wait+0x1ae>
 80178ea:	e009      	b.n	8017900 <rmw_wait+0x2e0>
 80178ec:	f8da 2000 	ldr.w	r2, [sl]
 80178f0:	4698      	mov	r8, r3
 80178f2:	2a00      	cmp	r2, #0
 80178f4:	f47f af5a 	bne.w	80177ac <rmw_wait+0x18c>
 80178f8:	4690      	mov	r8, r2
 80178fa:	2e00      	cmp	r6, #0
 80178fc:	f47f af67 	bne.w	80177ce <rmw_wait+0x1ae>
 8017900:	46b0      	mov	r8, r6
 8017902:	2f00      	cmp	r7, #0
 8017904:	d181      	bne.n	801780a <rmw_wait+0x1ea>
 8017906:	e7d9      	b.n	80178bc <rmw_wait+0x29c>
 8017908:	2f00      	cmp	r7, #0
 801790a:	d0d7      	beq.n	80178bc <rmw_wait+0x29c>
 801790c:	683c      	ldr	r4, [r7, #0]
 801790e:	46b0      	mov	r8, r6
 8017910:	2c00      	cmp	r4, #0
 8017912:	f47f af7c 	bne.w	801780e <rmw_wait+0x1ee>
 8017916:	e7d1      	b.n	80178bc <rmw_wait+0x29c>
 8017918:	000f4240 	.word	0x000f4240
 801791c:	2000d170 	.word	0x2000d170

08017920 <rmw_create_wait_set>:
 8017920:	b508      	push	{r3, lr}
 8017922:	4803      	ldr	r0, [pc, #12]	; (8017930 <rmw_create_wait_set+0x10>)
 8017924:	f7ff fc2e 	bl	8017184 <get_memory>
 8017928:	b108      	cbz	r0, 801792e <rmw_create_wait_set+0xe>
 801792a:	68c0      	ldr	r0, [r0, #12]
 801792c:	3010      	adds	r0, #16
 801792e:	bd08      	pop	{r3, pc}
 8017930:	2000e948 	.word	0x2000e948

08017934 <rmw_destroy_wait_set>:
 8017934:	b508      	push	{r3, lr}
 8017936:	4b08      	ldr	r3, [pc, #32]	; (8017958 <rmw_destroy_wait_set+0x24>)
 8017938:	6819      	ldr	r1, [r3, #0]
 801793a:	b911      	cbnz	r1, 8017942 <rmw_destroy_wait_set+0xe>
 801793c:	e00a      	b.n	8017954 <rmw_destroy_wait_set+0x20>
 801793e:	6889      	ldr	r1, [r1, #8]
 8017940:	b141      	cbz	r1, 8017954 <rmw_destroy_wait_set+0x20>
 8017942:	68cb      	ldr	r3, [r1, #12]
 8017944:	3310      	adds	r3, #16
 8017946:	4298      	cmp	r0, r3
 8017948:	d1f9      	bne.n	801793e <rmw_destroy_wait_set+0xa>
 801794a:	4803      	ldr	r0, [pc, #12]	; (8017958 <rmw_destroy_wait_set+0x24>)
 801794c:	f7ff fc2a 	bl	80171a4 <put_memory>
 8017950:	2000      	movs	r0, #0
 8017952:	bd08      	pop	{r3, pc}
 8017954:	2001      	movs	r0, #1
 8017956:	bd08      	pop	{r3, pc}
 8017958:	2000e948 	.word	0x2000e948

0801795c <rmw_uros_epoch_nanos>:
 801795c:	4b05      	ldr	r3, [pc, #20]	; (8017974 <rmw_uros_epoch_nanos+0x18>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	b123      	cbz	r3, 801796c <rmw_uros_epoch_nanos+0x10>
 8017962:	68d8      	ldr	r0, [r3, #12]
 8017964:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017968:	f7f9 bfb4 	b.w	80118d4 <uxr_epoch_nanos>
 801796c:	2000      	movs	r0, #0
 801796e:	2100      	movs	r1, #0
 8017970:	4770      	bx	lr
 8017972:	bf00      	nop
 8017974:	2000d170 	.word	0x2000d170

08017978 <ucdr_serialize_endian_array_char>:
 8017978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801797c:	4619      	mov	r1, r3
 801797e:	461e      	mov	r6, r3
 8017980:	4690      	mov	r8, r2
 8017982:	4604      	mov	r4, r0
 8017984:	f7f9 f962 	bl	8010c4c <ucdr_check_buffer_available_for>
 8017988:	b9e0      	cbnz	r0, 80179c4 <ucdr_serialize_endian_array_char+0x4c>
 801798a:	4637      	mov	r7, r6
 801798c:	e009      	b.n	80179a2 <ucdr_serialize_endian_array_char+0x2a>
 801798e:	68a0      	ldr	r0, [r4, #8]
 8017990:	f002 f890 	bl	8019ab4 <memcpy>
 8017994:	68a2      	ldr	r2, [r4, #8]
 8017996:	6923      	ldr	r3, [r4, #16]
 8017998:	442a      	add	r2, r5
 801799a:	442b      	add	r3, r5
 801799c:	1b7f      	subs	r7, r7, r5
 801799e:	60a2      	str	r2, [r4, #8]
 80179a0:	6123      	str	r3, [r4, #16]
 80179a2:	2201      	movs	r2, #1
 80179a4:	4639      	mov	r1, r7
 80179a6:	4620      	mov	r0, r4
 80179a8:	f7f9 f9d6 	bl	8010d58 <ucdr_check_final_buffer_behavior_array>
 80179ac:	1bf1      	subs	r1, r6, r7
 80179ae:	4441      	add	r1, r8
 80179b0:	4605      	mov	r5, r0
 80179b2:	4602      	mov	r2, r0
 80179b4:	2800      	cmp	r0, #0
 80179b6:	d1ea      	bne.n	801798e <ucdr_serialize_endian_array_char+0x16>
 80179b8:	2301      	movs	r3, #1
 80179ba:	7da0      	ldrb	r0, [r4, #22]
 80179bc:	7563      	strb	r3, [r4, #21]
 80179be:	4058      	eors	r0, r3
 80179c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c4:	4632      	mov	r2, r6
 80179c6:	68a0      	ldr	r0, [r4, #8]
 80179c8:	4641      	mov	r1, r8
 80179ca:	f002 f873 	bl	8019ab4 <memcpy>
 80179ce:	68a2      	ldr	r2, [r4, #8]
 80179d0:	6923      	ldr	r3, [r4, #16]
 80179d2:	4432      	add	r2, r6
 80179d4:	4433      	add	r3, r6
 80179d6:	60a2      	str	r2, [r4, #8]
 80179d8:	6123      	str	r3, [r4, #16]
 80179da:	e7ed      	b.n	80179b8 <ucdr_serialize_endian_array_char+0x40>

080179dc <ucdr_deserialize_endian_array_char>:
 80179dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179e0:	4619      	mov	r1, r3
 80179e2:	461e      	mov	r6, r3
 80179e4:	4690      	mov	r8, r2
 80179e6:	4604      	mov	r4, r0
 80179e8:	f7f9 f930 	bl	8010c4c <ucdr_check_buffer_available_for>
 80179ec:	b9e0      	cbnz	r0, 8017a28 <ucdr_deserialize_endian_array_char+0x4c>
 80179ee:	4637      	mov	r7, r6
 80179f0:	e009      	b.n	8017a06 <ucdr_deserialize_endian_array_char+0x2a>
 80179f2:	68a1      	ldr	r1, [r4, #8]
 80179f4:	f002 f85e 	bl	8019ab4 <memcpy>
 80179f8:	68a2      	ldr	r2, [r4, #8]
 80179fa:	6923      	ldr	r3, [r4, #16]
 80179fc:	442a      	add	r2, r5
 80179fe:	442b      	add	r3, r5
 8017a00:	1b7f      	subs	r7, r7, r5
 8017a02:	60a2      	str	r2, [r4, #8]
 8017a04:	6123      	str	r3, [r4, #16]
 8017a06:	2201      	movs	r2, #1
 8017a08:	4639      	mov	r1, r7
 8017a0a:	4620      	mov	r0, r4
 8017a0c:	f7f9 f9a4 	bl	8010d58 <ucdr_check_final_buffer_behavior_array>
 8017a10:	4605      	mov	r5, r0
 8017a12:	1bf0      	subs	r0, r6, r7
 8017a14:	4440      	add	r0, r8
 8017a16:	462a      	mov	r2, r5
 8017a18:	2d00      	cmp	r5, #0
 8017a1a:	d1ea      	bne.n	80179f2 <ucdr_deserialize_endian_array_char+0x16>
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	7da0      	ldrb	r0, [r4, #22]
 8017a20:	7563      	strb	r3, [r4, #21]
 8017a22:	4058      	eors	r0, r3
 8017a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a28:	4632      	mov	r2, r6
 8017a2a:	68a1      	ldr	r1, [r4, #8]
 8017a2c:	4640      	mov	r0, r8
 8017a2e:	f002 f841 	bl	8019ab4 <memcpy>
 8017a32:	68a2      	ldr	r2, [r4, #8]
 8017a34:	6923      	ldr	r3, [r4, #16]
 8017a36:	4432      	add	r2, r6
 8017a38:	4433      	add	r3, r6
 8017a3a:	60a2      	str	r2, [r4, #8]
 8017a3c:	6123      	str	r3, [r4, #16]
 8017a3e:	e7ed      	b.n	8017a1c <ucdr_deserialize_endian_array_char+0x40>

08017a40 <ucdr_serialize_array_uint8_t>:
 8017a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a44:	4688      	mov	r8, r1
 8017a46:	4611      	mov	r1, r2
 8017a48:	4616      	mov	r6, r2
 8017a4a:	4604      	mov	r4, r0
 8017a4c:	f7f9 f8fe 	bl	8010c4c <ucdr_check_buffer_available_for>
 8017a50:	b9e0      	cbnz	r0, 8017a8c <ucdr_serialize_array_uint8_t+0x4c>
 8017a52:	4637      	mov	r7, r6
 8017a54:	e009      	b.n	8017a6a <ucdr_serialize_array_uint8_t+0x2a>
 8017a56:	68a0      	ldr	r0, [r4, #8]
 8017a58:	f002 f82c 	bl	8019ab4 <memcpy>
 8017a5c:	68a2      	ldr	r2, [r4, #8]
 8017a5e:	6923      	ldr	r3, [r4, #16]
 8017a60:	442a      	add	r2, r5
 8017a62:	442b      	add	r3, r5
 8017a64:	1b7f      	subs	r7, r7, r5
 8017a66:	60a2      	str	r2, [r4, #8]
 8017a68:	6123      	str	r3, [r4, #16]
 8017a6a:	2201      	movs	r2, #1
 8017a6c:	4639      	mov	r1, r7
 8017a6e:	4620      	mov	r0, r4
 8017a70:	f7f9 f972 	bl	8010d58 <ucdr_check_final_buffer_behavior_array>
 8017a74:	1bf1      	subs	r1, r6, r7
 8017a76:	4441      	add	r1, r8
 8017a78:	4605      	mov	r5, r0
 8017a7a:	4602      	mov	r2, r0
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	d1ea      	bne.n	8017a56 <ucdr_serialize_array_uint8_t+0x16>
 8017a80:	2301      	movs	r3, #1
 8017a82:	7da0      	ldrb	r0, [r4, #22]
 8017a84:	7563      	strb	r3, [r4, #21]
 8017a86:	4058      	eors	r0, r3
 8017a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a8c:	4632      	mov	r2, r6
 8017a8e:	68a0      	ldr	r0, [r4, #8]
 8017a90:	4641      	mov	r1, r8
 8017a92:	f002 f80f 	bl	8019ab4 <memcpy>
 8017a96:	68a3      	ldr	r3, [r4, #8]
 8017a98:	6922      	ldr	r2, [r4, #16]
 8017a9a:	4433      	add	r3, r6
 8017a9c:	4432      	add	r2, r6
 8017a9e:	60a3      	str	r3, [r4, #8]
 8017aa0:	6122      	str	r2, [r4, #16]
 8017aa2:	e7ed      	b.n	8017a80 <ucdr_serialize_array_uint8_t+0x40>

08017aa4 <ucdr_serialize_endian_array_uint8_t>:
 8017aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aa8:	4619      	mov	r1, r3
 8017aaa:	461e      	mov	r6, r3
 8017aac:	4690      	mov	r8, r2
 8017aae:	4604      	mov	r4, r0
 8017ab0:	f7f9 f8cc 	bl	8010c4c <ucdr_check_buffer_available_for>
 8017ab4:	b9e0      	cbnz	r0, 8017af0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017ab6:	4637      	mov	r7, r6
 8017ab8:	e009      	b.n	8017ace <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017aba:	68a0      	ldr	r0, [r4, #8]
 8017abc:	f001 fffa 	bl	8019ab4 <memcpy>
 8017ac0:	68a2      	ldr	r2, [r4, #8]
 8017ac2:	6923      	ldr	r3, [r4, #16]
 8017ac4:	442a      	add	r2, r5
 8017ac6:	442b      	add	r3, r5
 8017ac8:	1b7f      	subs	r7, r7, r5
 8017aca:	60a2      	str	r2, [r4, #8]
 8017acc:	6123      	str	r3, [r4, #16]
 8017ace:	2201      	movs	r2, #1
 8017ad0:	4639      	mov	r1, r7
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f7f9 f940 	bl	8010d58 <ucdr_check_final_buffer_behavior_array>
 8017ad8:	1bf1      	subs	r1, r6, r7
 8017ada:	4441      	add	r1, r8
 8017adc:	4605      	mov	r5, r0
 8017ade:	4602      	mov	r2, r0
 8017ae0:	2800      	cmp	r0, #0
 8017ae2:	d1ea      	bne.n	8017aba <ucdr_serialize_endian_array_uint8_t+0x16>
 8017ae4:	2301      	movs	r3, #1
 8017ae6:	7da0      	ldrb	r0, [r4, #22]
 8017ae8:	7563      	strb	r3, [r4, #21]
 8017aea:	4058      	eors	r0, r3
 8017aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017af0:	4632      	mov	r2, r6
 8017af2:	68a0      	ldr	r0, [r4, #8]
 8017af4:	4641      	mov	r1, r8
 8017af6:	f001 ffdd 	bl	8019ab4 <memcpy>
 8017afa:	68a2      	ldr	r2, [r4, #8]
 8017afc:	6923      	ldr	r3, [r4, #16]
 8017afe:	4432      	add	r2, r6
 8017b00:	4433      	add	r3, r6
 8017b02:	60a2      	str	r2, [r4, #8]
 8017b04:	6123      	str	r3, [r4, #16]
 8017b06:	e7ed      	b.n	8017ae4 <ucdr_serialize_endian_array_uint8_t+0x40>

08017b08 <ucdr_deserialize_array_uint8_t>:
 8017b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b0c:	4688      	mov	r8, r1
 8017b0e:	4611      	mov	r1, r2
 8017b10:	4616      	mov	r6, r2
 8017b12:	4604      	mov	r4, r0
 8017b14:	f7f9 f89a 	bl	8010c4c <ucdr_check_buffer_available_for>
 8017b18:	b9e0      	cbnz	r0, 8017b54 <ucdr_deserialize_array_uint8_t+0x4c>
 8017b1a:	4637      	mov	r7, r6
 8017b1c:	e009      	b.n	8017b32 <ucdr_deserialize_array_uint8_t+0x2a>
 8017b1e:	68a1      	ldr	r1, [r4, #8]
 8017b20:	f001 ffc8 	bl	8019ab4 <memcpy>
 8017b24:	68a2      	ldr	r2, [r4, #8]
 8017b26:	6923      	ldr	r3, [r4, #16]
 8017b28:	442a      	add	r2, r5
 8017b2a:	442b      	add	r3, r5
 8017b2c:	1b7f      	subs	r7, r7, r5
 8017b2e:	60a2      	str	r2, [r4, #8]
 8017b30:	6123      	str	r3, [r4, #16]
 8017b32:	2201      	movs	r2, #1
 8017b34:	4639      	mov	r1, r7
 8017b36:	4620      	mov	r0, r4
 8017b38:	f7f9 f90e 	bl	8010d58 <ucdr_check_final_buffer_behavior_array>
 8017b3c:	4605      	mov	r5, r0
 8017b3e:	1bf0      	subs	r0, r6, r7
 8017b40:	4440      	add	r0, r8
 8017b42:	462a      	mov	r2, r5
 8017b44:	2d00      	cmp	r5, #0
 8017b46:	d1ea      	bne.n	8017b1e <ucdr_deserialize_array_uint8_t+0x16>
 8017b48:	2301      	movs	r3, #1
 8017b4a:	7da0      	ldrb	r0, [r4, #22]
 8017b4c:	7563      	strb	r3, [r4, #21]
 8017b4e:	4058      	eors	r0, r3
 8017b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b54:	4632      	mov	r2, r6
 8017b56:	68a1      	ldr	r1, [r4, #8]
 8017b58:	4640      	mov	r0, r8
 8017b5a:	f001 ffab 	bl	8019ab4 <memcpy>
 8017b5e:	68a3      	ldr	r3, [r4, #8]
 8017b60:	6922      	ldr	r2, [r4, #16]
 8017b62:	4433      	add	r3, r6
 8017b64:	4432      	add	r2, r6
 8017b66:	60a3      	str	r3, [r4, #8]
 8017b68:	6122      	str	r2, [r4, #16]
 8017b6a:	e7ed      	b.n	8017b48 <ucdr_deserialize_array_uint8_t+0x40>

08017b6c <ucdr_deserialize_endian_array_uint8_t>:
 8017b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b70:	4619      	mov	r1, r3
 8017b72:	461e      	mov	r6, r3
 8017b74:	4690      	mov	r8, r2
 8017b76:	4604      	mov	r4, r0
 8017b78:	f7f9 f868 	bl	8010c4c <ucdr_check_buffer_available_for>
 8017b7c:	b9e0      	cbnz	r0, 8017bb8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8017b7e:	4637      	mov	r7, r6
 8017b80:	e009      	b.n	8017b96 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8017b82:	68a1      	ldr	r1, [r4, #8]
 8017b84:	f001 ff96 	bl	8019ab4 <memcpy>
 8017b88:	68a2      	ldr	r2, [r4, #8]
 8017b8a:	6923      	ldr	r3, [r4, #16]
 8017b8c:	442a      	add	r2, r5
 8017b8e:	442b      	add	r3, r5
 8017b90:	1b7f      	subs	r7, r7, r5
 8017b92:	60a2      	str	r2, [r4, #8]
 8017b94:	6123      	str	r3, [r4, #16]
 8017b96:	2201      	movs	r2, #1
 8017b98:	4639      	mov	r1, r7
 8017b9a:	4620      	mov	r0, r4
 8017b9c:	f7f9 f8dc 	bl	8010d58 <ucdr_check_final_buffer_behavior_array>
 8017ba0:	4605      	mov	r5, r0
 8017ba2:	1bf0      	subs	r0, r6, r7
 8017ba4:	4440      	add	r0, r8
 8017ba6:	462a      	mov	r2, r5
 8017ba8:	2d00      	cmp	r5, #0
 8017baa:	d1ea      	bne.n	8017b82 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017bac:	2301      	movs	r3, #1
 8017bae:	7da0      	ldrb	r0, [r4, #22]
 8017bb0:	7563      	strb	r3, [r4, #21]
 8017bb2:	4058      	eors	r0, r3
 8017bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bb8:	4632      	mov	r2, r6
 8017bba:	68a1      	ldr	r1, [r4, #8]
 8017bbc:	4640      	mov	r0, r8
 8017bbe:	f001 ff79 	bl	8019ab4 <memcpy>
 8017bc2:	68a2      	ldr	r2, [r4, #8]
 8017bc4:	6923      	ldr	r3, [r4, #16]
 8017bc6:	4432      	add	r2, r6
 8017bc8:	4433      	add	r3, r6
 8017bca:	60a2      	str	r2, [r4, #8]
 8017bcc:	6123      	str	r3, [r4, #16]
 8017bce:	e7ed      	b.n	8017bac <ucdr_deserialize_endian_array_uint8_t+0x40>

08017bd0 <ucdr_serialize_bool>:
 8017bd0:	b538      	push	{r3, r4, r5, lr}
 8017bd2:	460d      	mov	r5, r1
 8017bd4:	2101      	movs	r1, #1
 8017bd6:	4604      	mov	r4, r0
 8017bd8:	f7f9 f844 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017bdc:	b148      	cbz	r0, 8017bf2 <ucdr_serialize_bool+0x22>
 8017bde:	68a3      	ldr	r3, [r4, #8]
 8017be0:	701d      	strb	r5, [r3, #0]
 8017be2:	68a2      	ldr	r2, [r4, #8]
 8017be4:	6923      	ldr	r3, [r4, #16]
 8017be6:	3201      	adds	r2, #1
 8017be8:	3301      	adds	r3, #1
 8017bea:	2101      	movs	r1, #1
 8017bec:	60a2      	str	r2, [r4, #8]
 8017bee:	6123      	str	r3, [r4, #16]
 8017bf0:	7561      	strb	r1, [r4, #21]
 8017bf2:	7da0      	ldrb	r0, [r4, #22]
 8017bf4:	f080 0001 	eor.w	r0, r0, #1
 8017bf8:	bd38      	pop	{r3, r4, r5, pc}
 8017bfa:	bf00      	nop

08017bfc <ucdr_deserialize_bool>:
 8017bfc:	b538      	push	{r3, r4, r5, lr}
 8017bfe:	460d      	mov	r5, r1
 8017c00:	2101      	movs	r1, #1
 8017c02:	4604      	mov	r4, r0
 8017c04:	f7f9 f82e 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017c08:	b168      	cbz	r0, 8017c26 <ucdr_deserialize_bool+0x2a>
 8017c0a:	68a2      	ldr	r2, [r4, #8]
 8017c0c:	6923      	ldr	r3, [r4, #16]
 8017c0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8017c12:	3900      	subs	r1, #0
 8017c14:	f103 0301 	add.w	r3, r3, #1
 8017c18:	bf18      	it	ne
 8017c1a:	2101      	movne	r1, #1
 8017c1c:	2001      	movs	r0, #1
 8017c1e:	7029      	strb	r1, [r5, #0]
 8017c20:	60a2      	str	r2, [r4, #8]
 8017c22:	6123      	str	r3, [r4, #16]
 8017c24:	7560      	strb	r0, [r4, #21]
 8017c26:	7da0      	ldrb	r0, [r4, #22]
 8017c28:	f080 0001 	eor.w	r0, r0, #1
 8017c2c:	bd38      	pop	{r3, r4, r5, pc}
 8017c2e:	bf00      	nop

08017c30 <ucdr_serialize_uint8_t>:
 8017c30:	b538      	push	{r3, r4, r5, lr}
 8017c32:	460d      	mov	r5, r1
 8017c34:	2101      	movs	r1, #1
 8017c36:	4604      	mov	r4, r0
 8017c38:	f7f9 f814 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017c3c:	b148      	cbz	r0, 8017c52 <ucdr_serialize_uint8_t+0x22>
 8017c3e:	68a3      	ldr	r3, [r4, #8]
 8017c40:	701d      	strb	r5, [r3, #0]
 8017c42:	68a2      	ldr	r2, [r4, #8]
 8017c44:	6923      	ldr	r3, [r4, #16]
 8017c46:	3201      	adds	r2, #1
 8017c48:	3301      	adds	r3, #1
 8017c4a:	2101      	movs	r1, #1
 8017c4c:	60a2      	str	r2, [r4, #8]
 8017c4e:	6123      	str	r3, [r4, #16]
 8017c50:	7561      	strb	r1, [r4, #21]
 8017c52:	7da0      	ldrb	r0, [r4, #22]
 8017c54:	f080 0001 	eor.w	r0, r0, #1
 8017c58:	bd38      	pop	{r3, r4, r5, pc}
 8017c5a:	bf00      	nop

08017c5c <ucdr_deserialize_uint8_t>:
 8017c5c:	b538      	push	{r3, r4, r5, lr}
 8017c5e:	460d      	mov	r5, r1
 8017c60:	2101      	movs	r1, #1
 8017c62:	4604      	mov	r4, r0
 8017c64:	f7f8 fffe 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017c68:	b150      	cbz	r0, 8017c80 <ucdr_deserialize_uint8_t+0x24>
 8017c6a:	68a3      	ldr	r3, [r4, #8]
 8017c6c:	781b      	ldrb	r3, [r3, #0]
 8017c6e:	702b      	strb	r3, [r5, #0]
 8017c70:	68a2      	ldr	r2, [r4, #8]
 8017c72:	6923      	ldr	r3, [r4, #16]
 8017c74:	3201      	adds	r2, #1
 8017c76:	3301      	adds	r3, #1
 8017c78:	2101      	movs	r1, #1
 8017c7a:	60a2      	str	r2, [r4, #8]
 8017c7c:	6123      	str	r3, [r4, #16]
 8017c7e:	7561      	strb	r1, [r4, #21]
 8017c80:	7da0      	ldrb	r0, [r4, #22]
 8017c82:	f080 0001 	eor.w	r0, r0, #1
 8017c86:	bd38      	pop	{r3, r4, r5, pc}

08017c88 <ucdr_serialize_uint16_t>:
 8017c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c8c:	b082      	sub	sp, #8
 8017c8e:	460b      	mov	r3, r1
 8017c90:	2102      	movs	r1, #2
 8017c92:	4604      	mov	r4, r0
 8017c94:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017c98:	f7f9 f836 	bl	8010d08 <ucdr_buffer_alignment>
 8017c9c:	4601      	mov	r1, r0
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	7d67      	ldrb	r7, [r4, #21]
 8017ca2:	f7f9 f875 	bl	8010d90 <ucdr_advance_buffer>
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	2102      	movs	r1, #2
 8017caa:	f7f8 ffcf 	bl	8010c4c <ucdr_check_buffer_available_for>
 8017cae:	bb78      	cbnz	r0, 8017d10 <ucdr_serialize_uint16_t+0x88>
 8017cb0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8017cb4:	42b5      	cmp	r5, r6
 8017cb6:	d926      	bls.n	8017d06 <ucdr_serialize_uint16_t+0x7e>
 8017cb8:	6922      	ldr	r2, [r4, #16]
 8017cba:	60a5      	str	r5, [r4, #8]
 8017cbc:	1bad      	subs	r5, r5, r6
 8017cbe:	442a      	add	r2, r5
 8017cc0:	f1c5 0802 	rsb	r8, r5, #2
 8017cc4:	6122      	str	r2, [r4, #16]
 8017cc6:	4641      	mov	r1, r8
 8017cc8:	4620      	mov	r0, r4
 8017cca:	f7f8 ffcb 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	d03b      	beq.n	8017d4a <ucdr_serialize_uint16_t+0xc2>
 8017cd2:	7d23      	ldrb	r3, [r4, #20]
 8017cd4:	2b01      	cmp	r3, #1
 8017cd6:	d04a      	beq.n	8017d6e <ucdr_serialize_uint16_t+0xe6>
 8017cd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017cdc:	7033      	strb	r3, [r6, #0]
 8017cde:	2d00      	cmp	r5, #0
 8017ce0:	d040      	beq.n	8017d64 <ucdr_serialize_uint16_t+0xdc>
 8017ce2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017ce6:	7073      	strb	r3, [r6, #1]
 8017ce8:	6923      	ldr	r3, [r4, #16]
 8017cea:	68a2      	ldr	r2, [r4, #8]
 8017cec:	7da0      	ldrb	r0, [r4, #22]
 8017cee:	3302      	adds	r3, #2
 8017cf0:	1b5b      	subs	r3, r3, r5
 8017cf2:	4442      	add	r2, r8
 8017cf4:	2102      	movs	r1, #2
 8017cf6:	f080 0001 	eor.w	r0, r0, #1
 8017cfa:	6123      	str	r3, [r4, #16]
 8017cfc:	60a2      	str	r2, [r4, #8]
 8017cfe:	7561      	strb	r1, [r4, #21]
 8017d00:	b002      	add	sp, #8
 8017d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d06:	2102      	movs	r1, #2
 8017d08:	4620      	mov	r0, r4
 8017d0a:	f7f8 ffab 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017d0e:	b190      	cbz	r0, 8017d36 <ucdr_serialize_uint16_t+0xae>
 8017d10:	7d23      	ldrb	r3, [r4, #20]
 8017d12:	2b01      	cmp	r3, #1
 8017d14:	68a3      	ldr	r3, [r4, #8]
 8017d16:	d014      	beq.n	8017d42 <ucdr_serialize_uint16_t+0xba>
 8017d18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017d1c:	701a      	strb	r2, [r3, #0]
 8017d1e:	68a3      	ldr	r3, [r4, #8]
 8017d20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017d24:	705a      	strb	r2, [r3, #1]
 8017d26:	68a2      	ldr	r2, [r4, #8]
 8017d28:	6923      	ldr	r3, [r4, #16]
 8017d2a:	3202      	adds	r2, #2
 8017d2c:	3302      	adds	r3, #2
 8017d2e:	2102      	movs	r1, #2
 8017d30:	60a2      	str	r2, [r4, #8]
 8017d32:	6123      	str	r3, [r4, #16]
 8017d34:	7561      	strb	r1, [r4, #21]
 8017d36:	7da0      	ldrb	r0, [r4, #22]
 8017d38:	f080 0001 	eor.w	r0, r0, #1
 8017d3c:	b002      	add	sp, #8
 8017d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d42:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017d46:	801a      	strh	r2, [r3, #0]
 8017d48:	e7ed      	b.n	8017d26 <ucdr_serialize_uint16_t+0x9e>
 8017d4a:	68a2      	ldr	r2, [r4, #8]
 8017d4c:	6923      	ldr	r3, [r4, #16]
 8017d4e:	7da0      	ldrb	r0, [r4, #22]
 8017d50:	7567      	strb	r7, [r4, #21]
 8017d52:	1b52      	subs	r2, r2, r5
 8017d54:	1b5b      	subs	r3, r3, r5
 8017d56:	f080 0001 	eor.w	r0, r0, #1
 8017d5a:	60a2      	str	r2, [r4, #8]
 8017d5c:	6123      	str	r3, [r4, #16]
 8017d5e:	b002      	add	sp, #8
 8017d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d64:	68a3      	ldr	r3, [r4, #8]
 8017d66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017d6a:	701a      	strb	r2, [r3, #0]
 8017d6c:	e7bc      	b.n	8017ce8 <ucdr_serialize_uint16_t+0x60>
 8017d6e:	4630      	mov	r0, r6
 8017d70:	f10d 0606 	add.w	r6, sp, #6
 8017d74:	4631      	mov	r1, r6
 8017d76:	462a      	mov	r2, r5
 8017d78:	f001 fe9c 	bl	8019ab4 <memcpy>
 8017d7c:	68a0      	ldr	r0, [r4, #8]
 8017d7e:	4642      	mov	r2, r8
 8017d80:	1971      	adds	r1, r6, r5
 8017d82:	f001 fe97 	bl	8019ab4 <memcpy>
 8017d86:	e7af      	b.n	8017ce8 <ucdr_serialize_uint16_t+0x60>

08017d88 <ucdr_serialize_endian_uint16_t>:
 8017d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d8c:	b083      	sub	sp, #12
 8017d8e:	460d      	mov	r5, r1
 8017d90:	2102      	movs	r1, #2
 8017d92:	4604      	mov	r4, r0
 8017d94:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017d98:	f7f8 ffb6 	bl	8010d08 <ucdr_buffer_alignment>
 8017d9c:	4601      	mov	r1, r0
 8017d9e:	4620      	mov	r0, r4
 8017da0:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017da4:	f7f8 fff4 	bl	8010d90 <ucdr_advance_buffer>
 8017da8:	4620      	mov	r0, r4
 8017daa:	2102      	movs	r1, #2
 8017dac:	f7f8 ff4e 	bl	8010c4c <ucdr_check_buffer_available_for>
 8017db0:	bb70      	cbnz	r0, 8017e10 <ucdr_serialize_endian_uint16_t+0x88>
 8017db2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8017db6:	42be      	cmp	r6, r7
 8017db8:	d925      	bls.n	8017e06 <ucdr_serialize_endian_uint16_t+0x7e>
 8017dba:	6922      	ldr	r2, [r4, #16]
 8017dbc:	60a6      	str	r6, [r4, #8]
 8017dbe:	1bf6      	subs	r6, r6, r7
 8017dc0:	4432      	add	r2, r6
 8017dc2:	f1c6 0902 	rsb	r9, r6, #2
 8017dc6:	6122      	str	r2, [r4, #16]
 8017dc8:	4649      	mov	r1, r9
 8017dca:	4620      	mov	r0, r4
 8017dcc:	f7f8 ff4a 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017dd0:	2800      	cmp	r0, #0
 8017dd2:	d039      	beq.n	8017e48 <ucdr_serialize_endian_uint16_t+0xc0>
 8017dd4:	2d01      	cmp	r5, #1
 8017dd6:	d04a      	beq.n	8017e6e <ucdr_serialize_endian_uint16_t+0xe6>
 8017dd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017ddc:	703b      	strb	r3, [r7, #0]
 8017dde:	2e00      	cmp	r6, #0
 8017de0:	d040      	beq.n	8017e64 <ucdr_serialize_endian_uint16_t+0xdc>
 8017de2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017de6:	707b      	strb	r3, [r7, #1]
 8017de8:	6923      	ldr	r3, [r4, #16]
 8017dea:	68a2      	ldr	r2, [r4, #8]
 8017dec:	7da0      	ldrb	r0, [r4, #22]
 8017dee:	3302      	adds	r3, #2
 8017df0:	1b9b      	subs	r3, r3, r6
 8017df2:	444a      	add	r2, r9
 8017df4:	2102      	movs	r1, #2
 8017df6:	f080 0001 	eor.w	r0, r0, #1
 8017dfa:	6123      	str	r3, [r4, #16]
 8017dfc:	60a2      	str	r2, [r4, #8]
 8017dfe:	7561      	strb	r1, [r4, #21]
 8017e00:	b003      	add	sp, #12
 8017e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e06:	2102      	movs	r1, #2
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f7f8 ff2b 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017e0e:	b188      	cbz	r0, 8017e34 <ucdr_serialize_endian_uint16_t+0xac>
 8017e10:	2d01      	cmp	r5, #1
 8017e12:	68a3      	ldr	r3, [r4, #8]
 8017e14:	d014      	beq.n	8017e40 <ucdr_serialize_endian_uint16_t+0xb8>
 8017e16:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017e1a:	701a      	strb	r2, [r3, #0]
 8017e1c:	68a3      	ldr	r3, [r4, #8]
 8017e1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017e22:	705a      	strb	r2, [r3, #1]
 8017e24:	68a2      	ldr	r2, [r4, #8]
 8017e26:	6923      	ldr	r3, [r4, #16]
 8017e28:	3202      	adds	r2, #2
 8017e2a:	3302      	adds	r3, #2
 8017e2c:	2102      	movs	r1, #2
 8017e2e:	60a2      	str	r2, [r4, #8]
 8017e30:	6123      	str	r3, [r4, #16]
 8017e32:	7561      	strb	r1, [r4, #21]
 8017e34:	7da0      	ldrb	r0, [r4, #22]
 8017e36:	f080 0001 	eor.w	r0, r0, #1
 8017e3a:	b003      	add	sp, #12
 8017e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017e44:	801a      	strh	r2, [r3, #0]
 8017e46:	e7ed      	b.n	8017e24 <ucdr_serialize_endian_uint16_t+0x9c>
 8017e48:	68a2      	ldr	r2, [r4, #8]
 8017e4a:	6923      	ldr	r3, [r4, #16]
 8017e4c:	7da0      	ldrb	r0, [r4, #22]
 8017e4e:	f884 8015 	strb.w	r8, [r4, #21]
 8017e52:	1b92      	subs	r2, r2, r6
 8017e54:	1b9b      	subs	r3, r3, r6
 8017e56:	f080 0001 	eor.w	r0, r0, #1
 8017e5a:	60a2      	str	r2, [r4, #8]
 8017e5c:	6123      	str	r3, [r4, #16]
 8017e5e:	b003      	add	sp, #12
 8017e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e64:	68a3      	ldr	r3, [r4, #8]
 8017e66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017e6a:	701a      	strb	r2, [r3, #0]
 8017e6c:	e7bc      	b.n	8017de8 <ucdr_serialize_endian_uint16_t+0x60>
 8017e6e:	f10d 0506 	add.w	r5, sp, #6
 8017e72:	4629      	mov	r1, r5
 8017e74:	4632      	mov	r2, r6
 8017e76:	4638      	mov	r0, r7
 8017e78:	f001 fe1c 	bl	8019ab4 <memcpy>
 8017e7c:	68a0      	ldr	r0, [r4, #8]
 8017e7e:	464a      	mov	r2, r9
 8017e80:	19a9      	adds	r1, r5, r6
 8017e82:	f001 fe17 	bl	8019ab4 <memcpy>
 8017e86:	e7af      	b.n	8017de8 <ucdr_serialize_endian_uint16_t+0x60>

08017e88 <ucdr_deserialize_uint16_t>:
 8017e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e8c:	460d      	mov	r5, r1
 8017e8e:	2102      	movs	r1, #2
 8017e90:	4604      	mov	r4, r0
 8017e92:	f7f8 ff39 	bl	8010d08 <ucdr_buffer_alignment>
 8017e96:	4601      	mov	r1, r0
 8017e98:	4620      	mov	r0, r4
 8017e9a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017e9e:	f7f8 ff77 	bl	8010d90 <ucdr_advance_buffer>
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	2102      	movs	r1, #2
 8017ea6:	f7f8 fed1 	bl	8010c4c <ucdr_check_buffer_available_for>
 8017eaa:	bb60      	cbnz	r0, 8017f06 <ucdr_deserialize_uint16_t+0x7e>
 8017eac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8017eb0:	42be      	cmp	r6, r7
 8017eb2:	d923      	bls.n	8017efc <ucdr_deserialize_uint16_t+0x74>
 8017eb4:	6922      	ldr	r2, [r4, #16]
 8017eb6:	60a6      	str	r6, [r4, #8]
 8017eb8:	1bf6      	subs	r6, r6, r7
 8017eba:	4432      	add	r2, r6
 8017ebc:	f1c6 0902 	rsb	r9, r6, #2
 8017ec0:	6122      	str	r2, [r4, #16]
 8017ec2:	4649      	mov	r1, r9
 8017ec4:	4620      	mov	r0, r4
 8017ec6:	f7f8 fecd 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017eca:	2800      	cmp	r0, #0
 8017ecc:	d034      	beq.n	8017f38 <ucdr_deserialize_uint16_t+0xb0>
 8017ece:	7d23      	ldrb	r3, [r4, #20]
 8017ed0:	2b01      	cmp	r3, #1
 8017ed2:	d042      	beq.n	8017f5a <ucdr_deserialize_uint16_t+0xd2>
 8017ed4:	787b      	ldrb	r3, [r7, #1]
 8017ed6:	702b      	strb	r3, [r5, #0]
 8017ed8:	2e00      	cmp	r6, #0
 8017eda:	d03a      	beq.n	8017f52 <ucdr_deserialize_uint16_t+0xca>
 8017edc:	783b      	ldrb	r3, [r7, #0]
 8017ede:	706b      	strb	r3, [r5, #1]
 8017ee0:	6923      	ldr	r3, [r4, #16]
 8017ee2:	68a2      	ldr	r2, [r4, #8]
 8017ee4:	7da0      	ldrb	r0, [r4, #22]
 8017ee6:	2102      	movs	r1, #2
 8017ee8:	3302      	adds	r3, #2
 8017eea:	1b9b      	subs	r3, r3, r6
 8017eec:	444a      	add	r2, r9
 8017eee:	7561      	strb	r1, [r4, #21]
 8017ef0:	6123      	str	r3, [r4, #16]
 8017ef2:	60a2      	str	r2, [r4, #8]
 8017ef4:	f080 0001 	eor.w	r0, r0, #1
 8017ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017efc:	2102      	movs	r1, #2
 8017efe:	4620      	mov	r0, r4
 8017f00:	f7f8 feb0 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017f04:	b180      	cbz	r0, 8017f28 <ucdr_deserialize_uint16_t+0xa0>
 8017f06:	7d23      	ldrb	r3, [r4, #20]
 8017f08:	2b01      	cmp	r3, #1
 8017f0a:	68a3      	ldr	r3, [r4, #8]
 8017f0c:	d011      	beq.n	8017f32 <ucdr_deserialize_uint16_t+0xaa>
 8017f0e:	785b      	ldrb	r3, [r3, #1]
 8017f10:	702b      	strb	r3, [r5, #0]
 8017f12:	68a3      	ldr	r3, [r4, #8]
 8017f14:	781b      	ldrb	r3, [r3, #0]
 8017f16:	706b      	strb	r3, [r5, #1]
 8017f18:	68a2      	ldr	r2, [r4, #8]
 8017f1a:	6923      	ldr	r3, [r4, #16]
 8017f1c:	3202      	adds	r2, #2
 8017f1e:	3302      	adds	r3, #2
 8017f20:	2102      	movs	r1, #2
 8017f22:	60a2      	str	r2, [r4, #8]
 8017f24:	6123      	str	r3, [r4, #16]
 8017f26:	7561      	strb	r1, [r4, #21]
 8017f28:	7da0      	ldrb	r0, [r4, #22]
 8017f2a:	f080 0001 	eor.w	r0, r0, #1
 8017f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f32:	881b      	ldrh	r3, [r3, #0]
 8017f34:	802b      	strh	r3, [r5, #0]
 8017f36:	e7ef      	b.n	8017f18 <ucdr_deserialize_uint16_t+0x90>
 8017f38:	68a2      	ldr	r2, [r4, #8]
 8017f3a:	6923      	ldr	r3, [r4, #16]
 8017f3c:	7da0      	ldrb	r0, [r4, #22]
 8017f3e:	f884 8015 	strb.w	r8, [r4, #21]
 8017f42:	1b92      	subs	r2, r2, r6
 8017f44:	1b9b      	subs	r3, r3, r6
 8017f46:	60a2      	str	r2, [r4, #8]
 8017f48:	6123      	str	r3, [r4, #16]
 8017f4a:	f080 0001 	eor.w	r0, r0, #1
 8017f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f52:	68a3      	ldr	r3, [r4, #8]
 8017f54:	781b      	ldrb	r3, [r3, #0]
 8017f56:	706b      	strb	r3, [r5, #1]
 8017f58:	e7c2      	b.n	8017ee0 <ucdr_deserialize_uint16_t+0x58>
 8017f5a:	4639      	mov	r1, r7
 8017f5c:	4632      	mov	r2, r6
 8017f5e:	4628      	mov	r0, r5
 8017f60:	f001 fda8 	bl	8019ab4 <memcpy>
 8017f64:	68a1      	ldr	r1, [r4, #8]
 8017f66:	464a      	mov	r2, r9
 8017f68:	19a8      	adds	r0, r5, r6
 8017f6a:	f001 fda3 	bl	8019ab4 <memcpy>
 8017f6e:	e7b7      	b.n	8017ee0 <ucdr_deserialize_uint16_t+0x58>

08017f70 <ucdr_deserialize_endian_uint16_t>:
 8017f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f74:	460e      	mov	r6, r1
 8017f76:	2102      	movs	r1, #2
 8017f78:	4604      	mov	r4, r0
 8017f7a:	4615      	mov	r5, r2
 8017f7c:	f7f8 fec4 	bl	8010d08 <ucdr_buffer_alignment>
 8017f80:	4601      	mov	r1, r0
 8017f82:	4620      	mov	r0, r4
 8017f84:	f894 9015 	ldrb.w	r9, [r4, #21]
 8017f88:	f7f8 ff02 	bl	8010d90 <ucdr_advance_buffer>
 8017f8c:	4620      	mov	r0, r4
 8017f8e:	2102      	movs	r1, #2
 8017f90:	f7f8 fe5c 	bl	8010c4c <ucdr_check_buffer_available_for>
 8017f94:	bb70      	cbnz	r0, 8017ff4 <ucdr_deserialize_endian_uint16_t+0x84>
 8017f96:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8017f9a:	4547      	cmp	r7, r8
 8017f9c:	d925      	bls.n	8017fea <ucdr_deserialize_endian_uint16_t+0x7a>
 8017f9e:	6922      	ldr	r2, [r4, #16]
 8017fa0:	60a7      	str	r7, [r4, #8]
 8017fa2:	eba7 0708 	sub.w	r7, r7, r8
 8017fa6:	443a      	add	r2, r7
 8017fa8:	f1c7 0a02 	rsb	sl, r7, #2
 8017fac:	6122      	str	r2, [r4, #16]
 8017fae:	4651      	mov	r1, sl
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f7f8 fe57 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017fb6:	2800      	cmp	r0, #0
 8017fb8:	d034      	beq.n	8018024 <ucdr_deserialize_endian_uint16_t+0xb4>
 8017fba:	2e01      	cmp	r6, #1
 8017fbc:	d043      	beq.n	8018046 <ucdr_deserialize_endian_uint16_t+0xd6>
 8017fbe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017fc2:	702b      	strb	r3, [r5, #0]
 8017fc4:	2f00      	cmp	r7, #0
 8017fc6:	d03a      	beq.n	801803e <ucdr_deserialize_endian_uint16_t+0xce>
 8017fc8:	f898 3000 	ldrb.w	r3, [r8]
 8017fcc:	706b      	strb	r3, [r5, #1]
 8017fce:	6923      	ldr	r3, [r4, #16]
 8017fd0:	68a2      	ldr	r2, [r4, #8]
 8017fd2:	7da0      	ldrb	r0, [r4, #22]
 8017fd4:	2102      	movs	r1, #2
 8017fd6:	3302      	adds	r3, #2
 8017fd8:	1bdb      	subs	r3, r3, r7
 8017fda:	4452      	add	r2, sl
 8017fdc:	7561      	strb	r1, [r4, #21]
 8017fde:	6123      	str	r3, [r4, #16]
 8017fe0:	60a2      	str	r2, [r4, #8]
 8017fe2:	f080 0001 	eor.w	r0, r0, #1
 8017fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fea:	2102      	movs	r1, #2
 8017fec:	4620      	mov	r0, r4
 8017fee:	f7f8 fe39 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8017ff2:	b178      	cbz	r0, 8018014 <ucdr_deserialize_endian_uint16_t+0xa4>
 8017ff4:	2e01      	cmp	r6, #1
 8017ff6:	68a3      	ldr	r3, [r4, #8]
 8017ff8:	d011      	beq.n	801801e <ucdr_deserialize_endian_uint16_t+0xae>
 8017ffa:	785b      	ldrb	r3, [r3, #1]
 8017ffc:	702b      	strb	r3, [r5, #0]
 8017ffe:	68a3      	ldr	r3, [r4, #8]
 8018000:	781b      	ldrb	r3, [r3, #0]
 8018002:	706b      	strb	r3, [r5, #1]
 8018004:	68a2      	ldr	r2, [r4, #8]
 8018006:	6923      	ldr	r3, [r4, #16]
 8018008:	3202      	adds	r2, #2
 801800a:	3302      	adds	r3, #2
 801800c:	2102      	movs	r1, #2
 801800e:	60a2      	str	r2, [r4, #8]
 8018010:	6123      	str	r3, [r4, #16]
 8018012:	7561      	strb	r1, [r4, #21]
 8018014:	7da0      	ldrb	r0, [r4, #22]
 8018016:	f080 0001 	eor.w	r0, r0, #1
 801801a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801801e:	881b      	ldrh	r3, [r3, #0]
 8018020:	802b      	strh	r3, [r5, #0]
 8018022:	e7ef      	b.n	8018004 <ucdr_deserialize_endian_uint16_t+0x94>
 8018024:	68a2      	ldr	r2, [r4, #8]
 8018026:	6923      	ldr	r3, [r4, #16]
 8018028:	7da0      	ldrb	r0, [r4, #22]
 801802a:	f884 9015 	strb.w	r9, [r4, #21]
 801802e:	1bd2      	subs	r2, r2, r7
 8018030:	1bdb      	subs	r3, r3, r7
 8018032:	60a2      	str	r2, [r4, #8]
 8018034:	6123      	str	r3, [r4, #16]
 8018036:	f080 0001 	eor.w	r0, r0, #1
 801803a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801803e:	68a3      	ldr	r3, [r4, #8]
 8018040:	781b      	ldrb	r3, [r3, #0]
 8018042:	706b      	strb	r3, [r5, #1]
 8018044:	e7c3      	b.n	8017fce <ucdr_deserialize_endian_uint16_t+0x5e>
 8018046:	4641      	mov	r1, r8
 8018048:	463a      	mov	r2, r7
 801804a:	4628      	mov	r0, r5
 801804c:	f001 fd32 	bl	8019ab4 <memcpy>
 8018050:	68a1      	ldr	r1, [r4, #8]
 8018052:	4652      	mov	r2, sl
 8018054:	19e8      	adds	r0, r5, r7
 8018056:	f001 fd2d 	bl	8019ab4 <memcpy>
 801805a:	e7b8      	b.n	8017fce <ucdr_deserialize_endian_uint16_t+0x5e>

0801805c <ucdr_serialize_uint32_t>:
 801805c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018060:	b082      	sub	sp, #8
 8018062:	4604      	mov	r4, r0
 8018064:	9101      	str	r1, [sp, #4]
 8018066:	2104      	movs	r1, #4
 8018068:	f7f8 fe4e 	bl	8010d08 <ucdr_buffer_alignment>
 801806c:	4601      	mov	r1, r0
 801806e:	4620      	mov	r0, r4
 8018070:	7d67      	ldrb	r7, [r4, #21]
 8018072:	f7f8 fe8d 	bl	8010d90 <ucdr_advance_buffer>
 8018076:	4620      	mov	r0, r4
 8018078:	2104      	movs	r1, #4
 801807a:	f7f8 fde7 	bl	8010c4c <ucdr_check_buffer_available_for>
 801807e:	2800      	cmp	r0, #0
 8018080:	d139      	bne.n	80180f6 <ucdr_serialize_uint32_t+0x9a>
 8018082:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8018086:	42ae      	cmp	r6, r5
 8018088:	d930      	bls.n	80180ec <ucdr_serialize_uint32_t+0x90>
 801808a:	6922      	ldr	r2, [r4, #16]
 801808c:	60a6      	str	r6, [r4, #8]
 801808e:	1b76      	subs	r6, r6, r5
 8018090:	4432      	add	r2, r6
 8018092:	f1c6 0804 	rsb	r8, r6, #4
 8018096:	6122      	str	r2, [r4, #16]
 8018098:	4641      	mov	r1, r8
 801809a:	4620      	mov	r0, r4
 801809c:	f7f8 fde2 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 80180a0:	2800      	cmp	r0, #0
 80180a2:	d04c      	beq.n	801813e <ucdr_serialize_uint32_t+0xe2>
 80180a4:	7d23      	ldrb	r3, [r4, #20]
 80180a6:	2b01      	cmp	r3, #1
 80180a8:	d063      	beq.n	8018172 <ucdr_serialize_uint32_t+0x116>
 80180aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80180ae:	702b      	strb	r3, [r5, #0]
 80180b0:	2e00      	cmp	r6, #0
 80180b2:	d051      	beq.n	8018158 <ucdr_serialize_uint32_t+0xfc>
 80180b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80180b8:	706b      	strb	r3, [r5, #1]
 80180ba:	2e01      	cmp	r6, #1
 80180bc:	d050      	beq.n	8018160 <ucdr_serialize_uint32_t+0x104>
 80180be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80180c2:	70ab      	strb	r3, [r5, #2]
 80180c4:	2e02      	cmp	r6, #2
 80180c6:	d04f      	beq.n	8018168 <ucdr_serialize_uint32_t+0x10c>
 80180c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80180cc:	70eb      	strb	r3, [r5, #3]
 80180ce:	6923      	ldr	r3, [r4, #16]
 80180d0:	68a2      	ldr	r2, [r4, #8]
 80180d2:	7da0      	ldrb	r0, [r4, #22]
 80180d4:	3304      	adds	r3, #4
 80180d6:	1b9b      	subs	r3, r3, r6
 80180d8:	4442      	add	r2, r8
 80180da:	2104      	movs	r1, #4
 80180dc:	f080 0001 	eor.w	r0, r0, #1
 80180e0:	6123      	str	r3, [r4, #16]
 80180e2:	60a2      	str	r2, [r4, #8]
 80180e4:	7561      	strb	r1, [r4, #21]
 80180e6:	b002      	add	sp, #8
 80180e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180ec:	2104      	movs	r1, #4
 80180ee:	4620      	mov	r0, r4
 80180f0:	f7f8 fdb8 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 80180f4:	b1d0      	cbz	r0, 801812c <ucdr_serialize_uint32_t+0xd0>
 80180f6:	7d23      	ldrb	r3, [r4, #20]
 80180f8:	2b01      	cmp	r3, #1
 80180fa:	68a3      	ldr	r3, [r4, #8]
 80180fc:	d01c      	beq.n	8018138 <ucdr_serialize_uint32_t+0xdc>
 80180fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018102:	701a      	strb	r2, [r3, #0]
 8018104:	68a3      	ldr	r3, [r4, #8]
 8018106:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801810a:	705a      	strb	r2, [r3, #1]
 801810c:	68a3      	ldr	r3, [r4, #8]
 801810e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018112:	709a      	strb	r2, [r3, #2]
 8018114:	68a3      	ldr	r3, [r4, #8]
 8018116:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801811a:	70da      	strb	r2, [r3, #3]
 801811c:	68a2      	ldr	r2, [r4, #8]
 801811e:	6923      	ldr	r3, [r4, #16]
 8018120:	3204      	adds	r2, #4
 8018122:	3304      	adds	r3, #4
 8018124:	2104      	movs	r1, #4
 8018126:	60a2      	str	r2, [r4, #8]
 8018128:	6123      	str	r3, [r4, #16]
 801812a:	7561      	strb	r1, [r4, #21]
 801812c:	7da0      	ldrb	r0, [r4, #22]
 801812e:	f080 0001 	eor.w	r0, r0, #1
 8018132:	b002      	add	sp, #8
 8018134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018138:	9a01      	ldr	r2, [sp, #4]
 801813a:	601a      	str	r2, [r3, #0]
 801813c:	e7ee      	b.n	801811c <ucdr_serialize_uint32_t+0xc0>
 801813e:	68a2      	ldr	r2, [r4, #8]
 8018140:	6923      	ldr	r3, [r4, #16]
 8018142:	7da0      	ldrb	r0, [r4, #22]
 8018144:	7567      	strb	r7, [r4, #21]
 8018146:	1b92      	subs	r2, r2, r6
 8018148:	1b9b      	subs	r3, r3, r6
 801814a:	f080 0001 	eor.w	r0, r0, #1
 801814e:	60a2      	str	r2, [r4, #8]
 8018150:	6123      	str	r3, [r4, #16]
 8018152:	b002      	add	sp, #8
 8018154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018158:	68a3      	ldr	r3, [r4, #8]
 801815a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801815e:	701a      	strb	r2, [r3, #0]
 8018160:	68a3      	ldr	r3, [r4, #8]
 8018162:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018166:	701a      	strb	r2, [r3, #0]
 8018168:	68a3      	ldr	r3, [r4, #8]
 801816a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801816e:	701a      	strb	r2, [r3, #0]
 8018170:	e7ad      	b.n	80180ce <ucdr_serialize_uint32_t+0x72>
 8018172:	4628      	mov	r0, r5
 8018174:	ad01      	add	r5, sp, #4
 8018176:	4629      	mov	r1, r5
 8018178:	4632      	mov	r2, r6
 801817a:	f001 fc9b 	bl	8019ab4 <memcpy>
 801817e:	68a0      	ldr	r0, [r4, #8]
 8018180:	4642      	mov	r2, r8
 8018182:	19a9      	adds	r1, r5, r6
 8018184:	f001 fc96 	bl	8019ab4 <memcpy>
 8018188:	e7a1      	b.n	80180ce <ucdr_serialize_uint32_t+0x72>
 801818a:	bf00      	nop

0801818c <ucdr_serialize_endian_uint32_t>:
 801818c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018190:	b083      	sub	sp, #12
 8018192:	460d      	mov	r5, r1
 8018194:	2104      	movs	r1, #4
 8018196:	4604      	mov	r4, r0
 8018198:	9201      	str	r2, [sp, #4]
 801819a:	f7f8 fdb5 	bl	8010d08 <ucdr_buffer_alignment>
 801819e:	4601      	mov	r1, r0
 80181a0:	4620      	mov	r0, r4
 80181a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80181a6:	f7f8 fdf3 	bl	8010d90 <ucdr_advance_buffer>
 80181aa:	4620      	mov	r0, r4
 80181ac:	2104      	movs	r1, #4
 80181ae:	f7f8 fd4d 	bl	8010c4c <ucdr_check_buffer_available_for>
 80181b2:	2800      	cmp	r0, #0
 80181b4:	d138      	bne.n	8018228 <ucdr_serialize_endian_uint32_t+0x9c>
 80181b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80181ba:	42b7      	cmp	r7, r6
 80181bc:	d92f      	bls.n	801821e <ucdr_serialize_endian_uint32_t+0x92>
 80181be:	6922      	ldr	r2, [r4, #16]
 80181c0:	60a7      	str	r7, [r4, #8]
 80181c2:	1bbf      	subs	r7, r7, r6
 80181c4:	443a      	add	r2, r7
 80181c6:	f1c7 0904 	rsb	r9, r7, #4
 80181ca:	6122      	str	r2, [r4, #16]
 80181cc:	4649      	mov	r1, r9
 80181ce:	4620      	mov	r0, r4
 80181d0:	f7f8 fd48 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 80181d4:	2800      	cmp	r0, #0
 80181d6:	d04a      	beq.n	801826e <ucdr_serialize_endian_uint32_t+0xe2>
 80181d8:	2d01      	cmp	r5, #1
 80181da:	d063      	beq.n	80182a4 <ucdr_serialize_endian_uint32_t+0x118>
 80181dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80181e0:	7033      	strb	r3, [r6, #0]
 80181e2:	2f00      	cmp	r7, #0
 80181e4:	d051      	beq.n	801828a <ucdr_serialize_endian_uint32_t+0xfe>
 80181e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80181ea:	7073      	strb	r3, [r6, #1]
 80181ec:	2f01      	cmp	r7, #1
 80181ee:	d050      	beq.n	8018292 <ucdr_serialize_endian_uint32_t+0x106>
 80181f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80181f4:	70b3      	strb	r3, [r6, #2]
 80181f6:	2f02      	cmp	r7, #2
 80181f8:	d04f      	beq.n	801829a <ucdr_serialize_endian_uint32_t+0x10e>
 80181fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80181fe:	70f3      	strb	r3, [r6, #3]
 8018200:	6923      	ldr	r3, [r4, #16]
 8018202:	68a2      	ldr	r2, [r4, #8]
 8018204:	7da0      	ldrb	r0, [r4, #22]
 8018206:	3304      	adds	r3, #4
 8018208:	1bdb      	subs	r3, r3, r7
 801820a:	444a      	add	r2, r9
 801820c:	2104      	movs	r1, #4
 801820e:	f080 0001 	eor.w	r0, r0, #1
 8018212:	6123      	str	r3, [r4, #16]
 8018214:	60a2      	str	r2, [r4, #8]
 8018216:	7561      	strb	r1, [r4, #21]
 8018218:	b003      	add	sp, #12
 801821a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801821e:	2104      	movs	r1, #4
 8018220:	4620      	mov	r0, r4
 8018222:	f7f8 fd1f 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8018226:	b1c8      	cbz	r0, 801825c <ucdr_serialize_endian_uint32_t+0xd0>
 8018228:	2d01      	cmp	r5, #1
 801822a:	68a3      	ldr	r3, [r4, #8]
 801822c:	d01c      	beq.n	8018268 <ucdr_serialize_endian_uint32_t+0xdc>
 801822e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018232:	701a      	strb	r2, [r3, #0]
 8018234:	68a3      	ldr	r3, [r4, #8]
 8018236:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801823a:	705a      	strb	r2, [r3, #1]
 801823c:	68a3      	ldr	r3, [r4, #8]
 801823e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018242:	709a      	strb	r2, [r3, #2]
 8018244:	68a3      	ldr	r3, [r4, #8]
 8018246:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801824a:	70da      	strb	r2, [r3, #3]
 801824c:	68a2      	ldr	r2, [r4, #8]
 801824e:	6923      	ldr	r3, [r4, #16]
 8018250:	3204      	adds	r2, #4
 8018252:	3304      	adds	r3, #4
 8018254:	2104      	movs	r1, #4
 8018256:	60a2      	str	r2, [r4, #8]
 8018258:	6123      	str	r3, [r4, #16]
 801825a:	7561      	strb	r1, [r4, #21]
 801825c:	7da0      	ldrb	r0, [r4, #22]
 801825e:	f080 0001 	eor.w	r0, r0, #1
 8018262:	b003      	add	sp, #12
 8018264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018268:	9a01      	ldr	r2, [sp, #4]
 801826a:	601a      	str	r2, [r3, #0]
 801826c:	e7ee      	b.n	801824c <ucdr_serialize_endian_uint32_t+0xc0>
 801826e:	68a2      	ldr	r2, [r4, #8]
 8018270:	6923      	ldr	r3, [r4, #16]
 8018272:	7da0      	ldrb	r0, [r4, #22]
 8018274:	f884 8015 	strb.w	r8, [r4, #21]
 8018278:	1bd2      	subs	r2, r2, r7
 801827a:	1bdb      	subs	r3, r3, r7
 801827c:	f080 0001 	eor.w	r0, r0, #1
 8018280:	60a2      	str	r2, [r4, #8]
 8018282:	6123      	str	r3, [r4, #16]
 8018284:	b003      	add	sp, #12
 8018286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801828a:	68a3      	ldr	r3, [r4, #8]
 801828c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018290:	701a      	strb	r2, [r3, #0]
 8018292:	68a3      	ldr	r3, [r4, #8]
 8018294:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018298:	701a      	strb	r2, [r3, #0]
 801829a:	68a3      	ldr	r3, [r4, #8]
 801829c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80182a0:	701a      	strb	r2, [r3, #0]
 80182a2:	e7ad      	b.n	8018200 <ucdr_serialize_endian_uint32_t+0x74>
 80182a4:	ad01      	add	r5, sp, #4
 80182a6:	4629      	mov	r1, r5
 80182a8:	463a      	mov	r2, r7
 80182aa:	4630      	mov	r0, r6
 80182ac:	f001 fc02 	bl	8019ab4 <memcpy>
 80182b0:	68a0      	ldr	r0, [r4, #8]
 80182b2:	464a      	mov	r2, r9
 80182b4:	19e9      	adds	r1, r5, r7
 80182b6:	f001 fbfd 	bl	8019ab4 <memcpy>
 80182ba:	e7a1      	b.n	8018200 <ucdr_serialize_endian_uint32_t+0x74>

080182bc <ucdr_deserialize_uint32_t>:
 80182bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182c0:	460d      	mov	r5, r1
 80182c2:	2104      	movs	r1, #4
 80182c4:	4604      	mov	r4, r0
 80182c6:	f7f8 fd1f 	bl	8010d08 <ucdr_buffer_alignment>
 80182ca:	4601      	mov	r1, r0
 80182cc:	4620      	mov	r0, r4
 80182ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80182d2:	f7f8 fd5d 	bl	8010d90 <ucdr_advance_buffer>
 80182d6:	4620      	mov	r0, r4
 80182d8:	2104      	movs	r1, #4
 80182da:	f7f8 fcb7 	bl	8010c4c <ucdr_check_buffer_available_for>
 80182de:	2800      	cmp	r0, #0
 80182e0:	d138      	bne.n	8018354 <ucdr_deserialize_uint32_t+0x98>
 80182e2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80182e6:	42b7      	cmp	r7, r6
 80182e8:	d92f      	bls.n	801834a <ucdr_deserialize_uint32_t+0x8e>
 80182ea:	6922      	ldr	r2, [r4, #16]
 80182ec:	60a7      	str	r7, [r4, #8]
 80182ee:	1bbf      	subs	r7, r7, r6
 80182f0:	443a      	add	r2, r7
 80182f2:	f1c7 0904 	rsb	r9, r7, #4
 80182f6:	6122      	str	r2, [r4, #16]
 80182f8:	4649      	mov	r1, r9
 80182fa:	4620      	mov	r0, r4
 80182fc:	f7f8 fcb2 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8018300:	2800      	cmp	r0, #0
 8018302:	d046      	beq.n	8018392 <ucdr_deserialize_uint32_t+0xd6>
 8018304:	7d23      	ldrb	r3, [r4, #20]
 8018306:	2b01      	cmp	r3, #1
 8018308:	d05c      	beq.n	80183c4 <ucdr_deserialize_uint32_t+0x108>
 801830a:	78f3      	ldrb	r3, [r6, #3]
 801830c:	702b      	strb	r3, [r5, #0]
 801830e:	2f00      	cmp	r7, #0
 8018310:	d04c      	beq.n	80183ac <ucdr_deserialize_uint32_t+0xf0>
 8018312:	78b3      	ldrb	r3, [r6, #2]
 8018314:	706b      	strb	r3, [r5, #1]
 8018316:	2f01      	cmp	r7, #1
 8018318:	f105 0302 	add.w	r3, r5, #2
 801831c:	d04a      	beq.n	80183b4 <ucdr_deserialize_uint32_t+0xf8>
 801831e:	7873      	ldrb	r3, [r6, #1]
 8018320:	70ab      	strb	r3, [r5, #2]
 8018322:	2f02      	cmp	r7, #2
 8018324:	f105 0303 	add.w	r3, r5, #3
 8018328:	d048      	beq.n	80183bc <ucdr_deserialize_uint32_t+0x100>
 801832a:	7833      	ldrb	r3, [r6, #0]
 801832c:	70eb      	strb	r3, [r5, #3]
 801832e:	6923      	ldr	r3, [r4, #16]
 8018330:	68a2      	ldr	r2, [r4, #8]
 8018332:	7da0      	ldrb	r0, [r4, #22]
 8018334:	2104      	movs	r1, #4
 8018336:	3304      	adds	r3, #4
 8018338:	1bdb      	subs	r3, r3, r7
 801833a:	444a      	add	r2, r9
 801833c:	7561      	strb	r1, [r4, #21]
 801833e:	6123      	str	r3, [r4, #16]
 8018340:	60a2      	str	r2, [r4, #8]
 8018342:	f080 0001 	eor.w	r0, r0, #1
 8018346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801834a:	2104      	movs	r1, #4
 801834c:	4620      	mov	r0, r4
 801834e:	f7f8 fc89 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8018352:	b1b0      	cbz	r0, 8018382 <ucdr_deserialize_uint32_t+0xc6>
 8018354:	7d23      	ldrb	r3, [r4, #20]
 8018356:	2b01      	cmp	r3, #1
 8018358:	68a3      	ldr	r3, [r4, #8]
 801835a:	d017      	beq.n	801838c <ucdr_deserialize_uint32_t+0xd0>
 801835c:	78db      	ldrb	r3, [r3, #3]
 801835e:	702b      	strb	r3, [r5, #0]
 8018360:	68a3      	ldr	r3, [r4, #8]
 8018362:	789b      	ldrb	r3, [r3, #2]
 8018364:	706b      	strb	r3, [r5, #1]
 8018366:	68a3      	ldr	r3, [r4, #8]
 8018368:	785b      	ldrb	r3, [r3, #1]
 801836a:	70ab      	strb	r3, [r5, #2]
 801836c:	68a3      	ldr	r3, [r4, #8]
 801836e:	781b      	ldrb	r3, [r3, #0]
 8018370:	70eb      	strb	r3, [r5, #3]
 8018372:	68a2      	ldr	r2, [r4, #8]
 8018374:	6923      	ldr	r3, [r4, #16]
 8018376:	3204      	adds	r2, #4
 8018378:	3304      	adds	r3, #4
 801837a:	2104      	movs	r1, #4
 801837c:	60a2      	str	r2, [r4, #8]
 801837e:	6123      	str	r3, [r4, #16]
 8018380:	7561      	strb	r1, [r4, #21]
 8018382:	7da0      	ldrb	r0, [r4, #22]
 8018384:	f080 0001 	eor.w	r0, r0, #1
 8018388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	602b      	str	r3, [r5, #0]
 8018390:	e7ef      	b.n	8018372 <ucdr_deserialize_uint32_t+0xb6>
 8018392:	68a2      	ldr	r2, [r4, #8]
 8018394:	6923      	ldr	r3, [r4, #16]
 8018396:	7da0      	ldrb	r0, [r4, #22]
 8018398:	f884 8015 	strb.w	r8, [r4, #21]
 801839c:	1bd2      	subs	r2, r2, r7
 801839e:	1bdb      	subs	r3, r3, r7
 80183a0:	60a2      	str	r2, [r4, #8]
 80183a2:	6123      	str	r3, [r4, #16]
 80183a4:	f080 0001 	eor.w	r0, r0, #1
 80183a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183ac:	68a3      	ldr	r3, [r4, #8]
 80183ae:	789b      	ldrb	r3, [r3, #2]
 80183b0:	706b      	strb	r3, [r5, #1]
 80183b2:	1cab      	adds	r3, r5, #2
 80183b4:	68a2      	ldr	r2, [r4, #8]
 80183b6:	7852      	ldrb	r2, [r2, #1]
 80183b8:	f803 2b01 	strb.w	r2, [r3], #1
 80183bc:	68a2      	ldr	r2, [r4, #8]
 80183be:	7812      	ldrb	r2, [r2, #0]
 80183c0:	701a      	strb	r2, [r3, #0]
 80183c2:	e7b4      	b.n	801832e <ucdr_deserialize_uint32_t+0x72>
 80183c4:	4631      	mov	r1, r6
 80183c6:	463a      	mov	r2, r7
 80183c8:	4628      	mov	r0, r5
 80183ca:	f001 fb73 	bl	8019ab4 <memcpy>
 80183ce:	68a1      	ldr	r1, [r4, #8]
 80183d0:	464a      	mov	r2, r9
 80183d2:	19e8      	adds	r0, r5, r7
 80183d4:	f001 fb6e 	bl	8019ab4 <memcpy>
 80183d8:	e7a9      	b.n	801832e <ucdr_deserialize_uint32_t+0x72>
 80183da:	bf00      	nop

080183dc <ucdr_deserialize_endian_uint32_t>:
 80183dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183e0:	460e      	mov	r6, r1
 80183e2:	2104      	movs	r1, #4
 80183e4:	4604      	mov	r4, r0
 80183e6:	4615      	mov	r5, r2
 80183e8:	f7f8 fc8e 	bl	8010d08 <ucdr_buffer_alignment>
 80183ec:	4601      	mov	r1, r0
 80183ee:	4620      	mov	r0, r4
 80183f0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80183f4:	f7f8 fccc 	bl	8010d90 <ucdr_advance_buffer>
 80183f8:	4620      	mov	r0, r4
 80183fa:	2104      	movs	r1, #4
 80183fc:	f7f8 fc26 	bl	8010c4c <ucdr_check_buffer_available_for>
 8018400:	2800      	cmp	r0, #0
 8018402:	d13c      	bne.n	801847e <ucdr_deserialize_endian_uint32_t+0xa2>
 8018404:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8018408:	42bb      	cmp	r3, r7
 801840a:	d933      	bls.n	8018474 <ucdr_deserialize_endian_uint32_t+0x98>
 801840c:	6922      	ldr	r2, [r4, #16]
 801840e:	60a3      	str	r3, [r4, #8]
 8018410:	eba3 0807 	sub.w	r8, r3, r7
 8018414:	4442      	add	r2, r8
 8018416:	f1c8 0a04 	rsb	sl, r8, #4
 801841a:	6122      	str	r2, [r4, #16]
 801841c:	4651      	mov	r1, sl
 801841e:	4620      	mov	r0, r4
 8018420:	f7f8 fc20 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8018424:	2800      	cmp	r0, #0
 8018426:	d048      	beq.n	80184ba <ucdr_deserialize_endian_uint32_t+0xde>
 8018428:	2e01      	cmp	r6, #1
 801842a:	d061      	beq.n	80184f0 <ucdr_deserialize_endian_uint32_t+0x114>
 801842c:	78fb      	ldrb	r3, [r7, #3]
 801842e:	702b      	strb	r3, [r5, #0]
 8018430:	f1b8 0f00 	cmp.w	r8, #0
 8018434:	d050      	beq.n	80184d8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8018436:	78bb      	ldrb	r3, [r7, #2]
 8018438:	706b      	strb	r3, [r5, #1]
 801843a:	f1b8 0f01 	cmp.w	r8, #1
 801843e:	f105 0302 	add.w	r3, r5, #2
 8018442:	d04d      	beq.n	80184e0 <ucdr_deserialize_endian_uint32_t+0x104>
 8018444:	787b      	ldrb	r3, [r7, #1]
 8018446:	70ab      	strb	r3, [r5, #2]
 8018448:	f1b8 0f02 	cmp.w	r8, #2
 801844c:	f105 0303 	add.w	r3, r5, #3
 8018450:	d04a      	beq.n	80184e8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8018452:	783b      	ldrb	r3, [r7, #0]
 8018454:	70eb      	strb	r3, [r5, #3]
 8018456:	6923      	ldr	r3, [r4, #16]
 8018458:	68a2      	ldr	r2, [r4, #8]
 801845a:	7da0      	ldrb	r0, [r4, #22]
 801845c:	2104      	movs	r1, #4
 801845e:	3304      	adds	r3, #4
 8018460:	eba3 0308 	sub.w	r3, r3, r8
 8018464:	4452      	add	r2, sl
 8018466:	7561      	strb	r1, [r4, #21]
 8018468:	6123      	str	r3, [r4, #16]
 801846a:	60a2      	str	r2, [r4, #8]
 801846c:	f080 0001 	eor.w	r0, r0, #1
 8018470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018474:	2104      	movs	r1, #4
 8018476:	4620      	mov	r0, r4
 8018478:	f7f8 fbf4 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 801847c:	b1a8      	cbz	r0, 80184aa <ucdr_deserialize_endian_uint32_t+0xce>
 801847e:	2e01      	cmp	r6, #1
 8018480:	68a3      	ldr	r3, [r4, #8]
 8018482:	d017      	beq.n	80184b4 <ucdr_deserialize_endian_uint32_t+0xd8>
 8018484:	78db      	ldrb	r3, [r3, #3]
 8018486:	702b      	strb	r3, [r5, #0]
 8018488:	68a3      	ldr	r3, [r4, #8]
 801848a:	789b      	ldrb	r3, [r3, #2]
 801848c:	706b      	strb	r3, [r5, #1]
 801848e:	68a3      	ldr	r3, [r4, #8]
 8018490:	785b      	ldrb	r3, [r3, #1]
 8018492:	70ab      	strb	r3, [r5, #2]
 8018494:	68a3      	ldr	r3, [r4, #8]
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	70eb      	strb	r3, [r5, #3]
 801849a:	68a2      	ldr	r2, [r4, #8]
 801849c:	6923      	ldr	r3, [r4, #16]
 801849e:	3204      	adds	r2, #4
 80184a0:	3304      	adds	r3, #4
 80184a2:	2104      	movs	r1, #4
 80184a4:	60a2      	str	r2, [r4, #8]
 80184a6:	6123      	str	r3, [r4, #16]
 80184a8:	7561      	strb	r1, [r4, #21]
 80184aa:	7da0      	ldrb	r0, [r4, #22]
 80184ac:	f080 0001 	eor.w	r0, r0, #1
 80184b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	602b      	str	r3, [r5, #0]
 80184b8:	e7ef      	b.n	801849a <ucdr_deserialize_endian_uint32_t+0xbe>
 80184ba:	68a2      	ldr	r2, [r4, #8]
 80184bc:	6923      	ldr	r3, [r4, #16]
 80184be:	7da0      	ldrb	r0, [r4, #22]
 80184c0:	f884 9015 	strb.w	r9, [r4, #21]
 80184c4:	eba2 0208 	sub.w	r2, r2, r8
 80184c8:	eba3 0308 	sub.w	r3, r3, r8
 80184cc:	60a2      	str	r2, [r4, #8]
 80184ce:	6123      	str	r3, [r4, #16]
 80184d0:	f080 0001 	eor.w	r0, r0, #1
 80184d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184d8:	68a3      	ldr	r3, [r4, #8]
 80184da:	789b      	ldrb	r3, [r3, #2]
 80184dc:	706b      	strb	r3, [r5, #1]
 80184de:	1cab      	adds	r3, r5, #2
 80184e0:	68a2      	ldr	r2, [r4, #8]
 80184e2:	7852      	ldrb	r2, [r2, #1]
 80184e4:	f803 2b01 	strb.w	r2, [r3], #1
 80184e8:	68a2      	ldr	r2, [r4, #8]
 80184ea:	7812      	ldrb	r2, [r2, #0]
 80184ec:	701a      	strb	r2, [r3, #0]
 80184ee:	e7b2      	b.n	8018456 <ucdr_deserialize_endian_uint32_t+0x7a>
 80184f0:	4639      	mov	r1, r7
 80184f2:	4642      	mov	r2, r8
 80184f4:	4628      	mov	r0, r5
 80184f6:	f001 fadd 	bl	8019ab4 <memcpy>
 80184fa:	68a1      	ldr	r1, [r4, #8]
 80184fc:	4652      	mov	r2, sl
 80184fe:	eb05 0008 	add.w	r0, r5, r8
 8018502:	f001 fad7 	bl	8019ab4 <memcpy>
 8018506:	e7a6      	b.n	8018456 <ucdr_deserialize_endian_uint32_t+0x7a>

08018508 <ucdr_serialize_uint64_t>:
 8018508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801850c:	2108      	movs	r1, #8
 801850e:	b082      	sub	sp, #8
 8018510:	4604      	mov	r4, r0
 8018512:	e9cd 2300 	strd	r2, r3, [sp]
 8018516:	f7f8 fbf7 	bl	8010d08 <ucdr_buffer_alignment>
 801851a:	4601      	mov	r1, r0
 801851c:	4620      	mov	r0, r4
 801851e:	7d67      	ldrb	r7, [r4, #21]
 8018520:	f7f8 fc36 	bl	8010d90 <ucdr_advance_buffer>
 8018524:	4620      	mov	r0, r4
 8018526:	2108      	movs	r1, #8
 8018528:	f7f8 fb90 	bl	8010c4c <ucdr_check_buffer_available_for>
 801852c:	2800      	cmp	r0, #0
 801852e:	d14e      	bne.n	80185ce <ucdr_serialize_uint64_t+0xc6>
 8018530:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8018534:	42b5      	cmp	r5, r6
 8018536:	d945      	bls.n	80185c4 <ucdr_serialize_uint64_t+0xbc>
 8018538:	6923      	ldr	r3, [r4, #16]
 801853a:	60a5      	str	r5, [r4, #8]
 801853c:	1bad      	subs	r5, r5, r6
 801853e:	442b      	add	r3, r5
 8018540:	f1c5 0808 	rsb	r8, r5, #8
 8018544:	6123      	str	r3, [r4, #16]
 8018546:	4641      	mov	r1, r8
 8018548:	4620      	mov	r0, r4
 801854a:	f7f8 fb8b 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 801854e:	2800      	cmp	r0, #0
 8018550:	d074      	beq.n	801863c <ucdr_serialize_uint64_t+0x134>
 8018552:	7d23      	ldrb	r3, [r4, #20]
 8018554:	2b01      	cmp	r3, #1
 8018556:	f000 809b 	beq.w	8018690 <ucdr_serialize_uint64_t+0x188>
 801855a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801855e:	7033      	strb	r3, [r6, #0]
 8018560:	2d00      	cmp	r5, #0
 8018562:	d078      	beq.n	8018656 <ucdr_serialize_uint64_t+0x14e>
 8018564:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018568:	7073      	strb	r3, [r6, #1]
 801856a:	2d01      	cmp	r5, #1
 801856c:	d077      	beq.n	801865e <ucdr_serialize_uint64_t+0x156>
 801856e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018572:	70b3      	strb	r3, [r6, #2]
 8018574:	2d02      	cmp	r5, #2
 8018576:	d076      	beq.n	8018666 <ucdr_serialize_uint64_t+0x15e>
 8018578:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801857c:	70f3      	strb	r3, [r6, #3]
 801857e:	2d03      	cmp	r5, #3
 8018580:	d075      	beq.n	801866e <ucdr_serialize_uint64_t+0x166>
 8018582:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018586:	7133      	strb	r3, [r6, #4]
 8018588:	2d04      	cmp	r5, #4
 801858a:	d074      	beq.n	8018676 <ucdr_serialize_uint64_t+0x16e>
 801858c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8018590:	7173      	strb	r3, [r6, #5]
 8018592:	2d05      	cmp	r5, #5
 8018594:	d073      	beq.n	801867e <ucdr_serialize_uint64_t+0x176>
 8018596:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801859a:	71b3      	strb	r3, [r6, #6]
 801859c:	2d06      	cmp	r5, #6
 801859e:	d072      	beq.n	8018686 <ucdr_serialize_uint64_t+0x17e>
 80185a0:	f89d 3000 	ldrb.w	r3, [sp]
 80185a4:	71f3      	strb	r3, [r6, #7]
 80185a6:	6923      	ldr	r3, [r4, #16]
 80185a8:	68a2      	ldr	r2, [r4, #8]
 80185aa:	7da0      	ldrb	r0, [r4, #22]
 80185ac:	3308      	adds	r3, #8
 80185ae:	1b5d      	subs	r5, r3, r5
 80185b0:	4442      	add	r2, r8
 80185b2:	2308      	movs	r3, #8
 80185b4:	f080 0001 	eor.w	r0, r0, #1
 80185b8:	6125      	str	r5, [r4, #16]
 80185ba:	60a2      	str	r2, [r4, #8]
 80185bc:	7563      	strb	r3, [r4, #21]
 80185be:	b002      	add	sp, #8
 80185c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185c4:	2108      	movs	r1, #8
 80185c6:	4620      	mov	r0, r4
 80185c8:	f7f8 fb4c 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 80185cc:	b350      	cbz	r0, 8018624 <ucdr_serialize_uint64_t+0x11c>
 80185ce:	7d23      	ldrb	r3, [r4, #20]
 80185d0:	2b01      	cmp	r3, #1
 80185d2:	d02d      	beq.n	8018630 <ucdr_serialize_uint64_t+0x128>
 80185d4:	68a3      	ldr	r3, [r4, #8]
 80185d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80185da:	701a      	strb	r2, [r3, #0]
 80185dc:	68a3      	ldr	r3, [r4, #8]
 80185de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80185e2:	705a      	strb	r2, [r3, #1]
 80185e4:	68a3      	ldr	r3, [r4, #8]
 80185e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80185ea:	709a      	strb	r2, [r3, #2]
 80185ec:	68a3      	ldr	r3, [r4, #8]
 80185ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80185f2:	70da      	strb	r2, [r3, #3]
 80185f4:	68a3      	ldr	r3, [r4, #8]
 80185f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80185fa:	711a      	strb	r2, [r3, #4]
 80185fc:	68a3      	ldr	r3, [r4, #8]
 80185fe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8018602:	715a      	strb	r2, [r3, #5]
 8018604:	68a3      	ldr	r3, [r4, #8]
 8018606:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801860a:	719a      	strb	r2, [r3, #6]
 801860c:	68a3      	ldr	r3, [r4, #8]
 801860e:	f89d 2000 	ldrb.w	r2, [sp]
 8018612:	71da      	strb	r2, [r3, #7]
 8018614:	68a2      	ldr	r2, [r4, #8]
 8018616:	6923      	ldr	r3, [r4, #16]
 8018618:	3208      	adds	r2, #8
 801861a:	3308      	adds	r3, #8
 801861c:	2108      	movs	r1, #8
 801861e:	60a2      	str	r2, [r4, #8]
 8018620:	6123      	str	r3, [r4, #16]
 8018622:	7561      	strb	r1, [r4, #21]
 8018624:	7da0      	ldrb	r0, [r4, #22]
 8018626:	f080 0001 	eor.w	r0, r0, #1
 801862a:	b002      	add	sp, #8
 801862c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018630:	466b      	mov	r3, sp
 8018632:	cb03      	ldmia	r3!, {r0, r1}
 8018634:	68a3      	ldr	r3, [r4, #8]
 8018636:	6018      	str	r0, [r3, #0]
 8018638:	6059      	str	r1, [r3, #4]
 801863a:	e7eb      	b.n	8018614 <ucdr_serialize_uint64_t+0x10c>
 801863c:	68a2      	ldr	r2, [r4, #8]
 801863e:	6923      	ldr	r3, [r4, #16]
 8018640:	7da0      	ldrb	r0, [r4, #22]
 8018642:	7567      	strb	r7, [r4, #21]
 8018644:	1b52      	subs	r2, r2, r5
 8018646:	f080 0001 	eor.w	r0, r0, #1
 801864a:	1b5d      	subs	r5, r3, r5
 801864c:	60a2      	str	r2, [r4, #8]
 801864e:	6125      	str	r5, [r4, #16]
 8018650:	b002      	add	sp, #8
 8018652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018656:	68a3      	ldr	r3, [r4, #8]
 8018658:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801865c:	701a      	strb	r2, [r3, #0]
 801865e:	68a3      	ldr	r3, [r4, #8]
 8018660:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018664:	701a      	strb	r2, [r3, #0]
 8018666:	68a3      	ldr	r3, [r4, #8]
 8018668:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801866c:	701a      	strb	r2, [r3, #0]
 801866e:	68a3      	ldr	r3, [r4, #8]
 8018670:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8018674:	701a      	strb	r2, [r3, #0]
 8018676:	68a3      	ldr	r3, [r4, #8]
 8018678:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801867c:	701a      	strb	r2, [r3, #0]
 801867e:	68a3      	ldr	r3, [r4, #8]
 8018680:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8018684:	701a      	strb	r2, [r3, #0]
 8018686:	68a3      	ldr	r3, [r4, #8]
 8018688:	f89d 2000 	ldrb.w	r2, [sp]
 801868c:	701a      	strb	r2, [r3, #0]
 801868e:	e78a      	b.n	80185a6 <ucdr_serialize_uint64_t+0x9e>
 8018690:	4630      	mov	r0, r6
 8018692:	466e      	mov	r6, sp
 8018694:	4631      	mov	r1, r6
 8018696:	462a      	mov	r2, r5
 8018698:	f001 fa0c 	bl	8019ab4 <memcpy>
 801869c:	68a0      	ldr	r0, [r4, #8]
 801869e:	4642      	mov	r2, r8
 80186a0:	1971      	adds	r1, r6, r5
 80186a2:	f001 fa07 	bl	8019ab4 <memcpy>
 80186a6:	e77e      	b.n	80185a6 <ucdr_serialize_uint64_t+0x9e>

080186a8 <ucdr_serialize_int16_t>:
 80186a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186ac:	b082      	sub	sp, #8
 80186ae:	460b      	mov	r3, r1
 80186b0:	2102      	movs	r1, #2
 80186b2:	4604      	mov	r4, r0
 80186b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80186b8:	f7f8 fb26 	bl	8010d08 <ucdr_buffer_alignment>
 80186bc:	4601      	mov	r1, r0
 80186be:	4620      	mov	r0, r4
 80186c0:	7d67      	ldrb	r7, [r4, #21]
 80186c2:	f7f8 fb65 	bl	8010d90 <ucdr_advance_buffer>
 80186c6:	4620      	mov	r0, r4
 80186c8:	2102      	movs	r1, #2
 80186ca:	f7f8 fabf 	bl	8010c4c <ucdr_check_buffer_available_for>
 80186ce:	bb78      	cbnz	r0, 8018730 <ucdr_serialize_int16_t+0x88>
 80186d0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80186d4:	42b5      	cmp	r5, r6
 80186d6:	d926      	bls.n	8018726 <ucdr_serialize_int16_t+0x7e>
 80186d8:	6922      	ldr	r2, [r4, #16]
 80186da:	60a5      	str	r5, [r4, #8]
 80186dc:	1bad      	subs	r5, r5, r6
 80186de:	442a      	add	r2, r5
 80186e0:	f1c5 0802 	rsb	r8, r5, #2
 80186e4:	6122      	str	r2, [r4, #16]
 80186e6:	4641      	mov	r1, r8
 80186e8:	4620      	mov	r0, r4
 80186ea:	f7f8 fabb 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 80186ee:	2800      	cmp	r0, #0
 80186f0:	d03b      	beq.n	801876a <ucdr_serialize_int16_t+0xc2>
 80186f2:	7d23      	ldrb	r3, [r4, #20]
 80186f4:	2b01      	cmp	r3, #1
 80186f6:	d04a      	beq.n	801878e <ucdr_serialize_int16_t+0xe6>
 80186f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80186fc:	7033      	strb	r3, [r6, #0]
 80186fe:	2d00      	cmp	r5, #0
 8018700:	d040      	beq.n	8018784 <ucdr_serialize_int16_t+0xdc>
 8018702:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018706:	7073      	strb	r3, [r6, #1]
 8018708:	6923      	ldr	r3, [r4, #16]
 801870a:	68a2      	ldr	r2, [r4, #8]
 801870c:	7da0      	ldrb	r0, [r4, #22]
 801870e:	3302      	adds	r3, #2
 8018710:	1b5b      	subs	r3, r3, r5
 8018712:	4442      	add	r2, r8
 8018714:	2102      	movs	r1, #2
 8018716:	f080 0001 	eor.w	r0, r0, #1
 801871a:	6123      	str	r3, [r4, #16]
 801871c:	60a2      	str	r2, [r4, #8]
 801871e:	7561      	strb	r1, [r4, #21]
 8018720:	b002      	add	sp, #8
 8018722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018726:	2102      	movs	r1, #2
 8018728:	4620      	mov	r0, r4
 801872a:	f7f8 fa9b 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 801872e:	b190      	cbz	r0, 8018756 <ucdr_serialize_int16_t+0xae>
 8018730:	7d23      	ldrb	r3, [r4, #20]
 8018732:	2b01      	cmp	r3, #1
 8018734:	68a3      	ldr	r3, [r4, #8]
 8018736:	d014      	beq.n	8018762 <ucdr_serialize_int16_t+0xba>
 8018738:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801873c:	701a      	strb	r2, [r3, #0]
 801873e:	68a3      	ldr	r3, [r4, #8]
 8018740:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018744:	705a      	strb	r2, [r3, #1]
 8018746:	68a2      	ldr	r2, [r4, #8]
 8018748:	6923      	ldr	r3, [r4, #16]
 801874a:	3202      	adds	r2, #2
 801874c:	3302      	adds	r3, #2
 801874e:	2102      	movs	r1, #2
 8018750:	60a2      	str	r2, [r4, #8]
 8018752:	6123      	str	r3, [r4, #16]
 8018754:	7561      	strb	r1, [r4, #21]
 8018756:	7da0      	ldrb	r0, [r4, #22]
 8018758:	f080 0001 	eor.w	r0, r0, #1
 801875c:	b002      	add	sp, #8
 801875e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018762:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018766:	801a      	strh	r2, [r3, #0]
 8018768:	e7ed      	b.n	8018746 <ucdr_serialize_int16_t+0x9e>
 801876a:	68a2      	ldr	r2, [r4, #8]
 801876c:	6923      	ldr	r3, [r4, #16]
 801876e:	7da0      	ldrb	r0, [r4, #22]
 8018770:	7567      	strb	r7, [r4, #21]
 8018772:	1b52      	subs	r2, r2, r5
 8018774:	1b5b      	subs	r3, r3, r5
 8018776:	f080 0001 	eor.w	r0, r0, #1
 801877a:	60a2      	str	r2, [r4, #8]
 801877c:	6123      	str	r3, [r4, #16]
 801877e:	b002      	add	sp, #8
 8018780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018784:	68a3      	ldr	r3, [r4, #8]
 8018786:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801878a:	701a      	strb	r2, [r3, #0]
 801878c:	e7bc      	b.n	8018708 <ucdr_serialize_int16_t+0x60>
 801878e:	4630      	mov	r0, r6
 8018790:	f10d 0606 	add.w	r6, sp, #6
 8018794:	4631      	mov	r1, r6
 8018796:	462a      	mov	r2, r5
 8018798:	f001 f98c 	bl	8019ab4 <memcpy>
 801879c:	68a0      	ldr	r0, [r4, #8]
 801879e:	4642      	mov	r2, r8
 80187a0:	1971      	adds	r1, r6, r5
 80187a2:	f001 f987 	bl	8019ab4 <memcpy>
 80187a6:	e7af      	b.n	8018708 <ucdr_serialize_int16_t+0x60>

080187a8 <ucdr_deserialize_int16_t>:
 80187a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187ac:	460d      	mov	r5, r1
 80187ae:	2102      	movs	r1, #2
 80187b0:	4604      	mov	r4, r0
 80187b2:	f7f8 faa9 	bl	8010d08 <ucdr_buffer_alignment>
 80187b6:	4601      	mov	r1, r0
 80187b8:	4620      	mov	r0, r4
 80187ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 80187be:	f7f8 fae7 	bl	8010d90 <ucdr_advance_buffer>
 80187c2:	4620      	mov	r0, r4
 80187c4:	2102      	movs	r1, #2
 80187c6:	f7f8 fa41 	bl	8010c4c <ucdr_check_buffer_available_for>
 80187ca:	bb60      	cbnz	r0, 8018826 <ucdr_deserialize_int16_t+0x7e>
 80187cc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80187d0:	42be      	cmp	r6, r7
 80187d2:	d923      	bls.n	801881c <ucdr_deserialize_int16_t+0x74>
 80187d4:	6922      	ldr	r2, [r4, #16]
 80187d6:	60a6      	str	r6, [r4, #8]
 80187d8:	1bf6      	subs	r6, r6, r7
 80187da:	4432      	add	r2, r6
 80187dc:	f1c6 0902 	rsb	r9, r6, #2
 80187e0:	6122      	str	r2, [r4, #16]
 80187e2:	4649      	mov	r1, r9
 80187e4:	4620      	mov	r0, r4
 80187e6:	f7f8 fa3d 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 80187ea:	2800      	cmp	r0, #0
 80187ec:	d034      	beq.n	8018858 <ucdr_deserialize_int16_t+0xb0>
 80187ee:	7d23      	ldrb	r3, [r4, #20]
 80187f0:	2b01      	cmp	r3, #1
 80187f2:	d042      	beq.n	801887a <ucdr_deserialize_int16_t+0xd2>
 80187f4:	787b      	ldrb	r3, [r7, #1]
 80187f6:	702b      	strb	r3, [r5, #0]
 80187f8:	2e00      	cmp	r6, #0
 80187fa:	d03a      	beq.n	8018872 <ucdr_deserialize_int16_t+0xca>
 80187fc:	783b      	ldrb	r3, [r7, #0]
 80187fe:	706b      	strb	r3, [r5, #1]
 8018800:	6923      	ldr	r3, [r4, #16]
 8018802:	68a2      	ldr	r2, [r4, #8]
 8018804:	7da0      	ldrb	r0, [r4, #22]
 8018806:	2102      	movs	r1, #2
 8018808:	3302      	adds	r3, #2
 801880a:	1b9b      	subs	r3, r3, r6
 801880c:	444a      	add	r2, r9
 801880e:	7561      	strb	r1, [r4, #21]
 8018810:	6123      	str	r3, [r4, #16]
 8018812:	60a2      	str	r2, [r4, #8]
 8018814:	f080 0001 	eor.w	r0, r0, #1
 8018818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801881c:	2102      	movs	r1, #2
 801881e:	4620      	mov	r0, r4
 8018820:	f7f8 fa20 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8018824:	b180      	cbz	r0, 8018848 <ucdr_deserialize_int16_t+0xa0>
 8018826:	7d23      	ldrb	r3, [r4, #20]
 8018828:	2b01      	cmp	r3, #1
 801882a:	68a3      	ldr	r3, [r4, #8]
 801882c:	d011      	beq.n	8018852 <ucdr_deserialize_int16_t+0xaa>
 801882e:	785b      	ldrb	r3, [r3, #1]
 8018830:	702b      	strb	r3, [r5, #0]
 8018832:	68a3      	ldr	r3, [r4, #8]
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	706b      	strb	r3, [r5, #1]
 8018838:	68a2      	ldr	r2, [r4, #8]
 801883a:	6923      	ldr	r3, [r4, #16]
 801883c:	3202      	adds	r2, #2
 801883e:	3302      	adds	r3, #2
 8018840:	2102      	movs	r1, #2
 8018842:	60a2      	str	r2, [r4, #8]
 8018844:	6123      	str	r3, [r4, #16]
 8018846:	7561      	strb	r1, [r4, #21]
 8018848:	7da0      	ldrb	r0, [r4, #22]
 801884a:	f080 0001 	eor.w	r0, r0, #1
 801884e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018852:	881b      	ldrh	r3, [r3, #0]
 8018854:	802b      	strh	r3, [r5, #0]
 8018856:	e7ef      	b.n	8018838 <ucdr_deserialize_int16_t+0x90>
 8018858:	68a2      	ldr	r2, [r4, #8]
 801885a:	6923      	ldr	r3, [r4, #16]
 801885c:	7da0      	ldrb	r0, [r4, #22]
 801885e:	f884 8015 	strb.w	r8, [r4, #21]
 8018862:	1b92      	subs	r2, r2, r6
 8018864:	1b9b      	subs	r3, r3, r6
 8018866:	60a2      	str	r2, [r4, #8]
 8018868:	6123      	str	r3, [r4, #16]
 801886a:	f080 0001 	eor.w	r0, r0, #1
 801886e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018872:	68a3      	ldr	r3, [r4, #8]
 8018874:	781b      	ldrb	r3, [r3, #0]
 8018876:	706b      	strb	r3, [r5, #1]
 8018878:	e7c2      	b.n	8018800 <ucdr_deserialize_int16_t+0x58>
 801887a:	4639      	mov	r1, r7
 801887c:	4632      	mov	r2, r6
 801887e:	4628      	mov	r0, r5
 8018880:	f001 f918 	bl	8019ab4 <memcpy>
 8018884:	68a1      	ldr	r1, [r4, #8]
 8018886:	464a      	mov	r2, r9
 8018888:	19a8      	adds	r0, r5, r6
 801888a:	f001 f913 	bl	8019ab4 <memcpy>
 801888e:	e7b7      	b.n	8018800 <ucdr_deserialize_int16_t+0x58>

08018890 <ucdr_serialize_int32_t>:
 8018890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018894:	b082      	sub	sp, #8
 8018896:	4604      	mov	r4, r0
 8018898:	9101      	str	r1, [sp, #4]
 801889a:	2104      	movs	r1, #4
 801889c:	f7f8 fa34 	bl	8010d08 <ucdr_buffer_alignment>
 80188a0:	4601      	mov	r1, r0
 80188a2:	4620      	mov	r0, r4
 80188a4:	7d67      	ldrb	r7, [r4, #21]
 80188a6:	f7f8 fa73 	bl	8010d90 <ucdr_advance_buffer>
 80188aa:	4620      	mov	r0, r4
 80188ac:	2104      	movs	r1, #4
 80188ae:	f7f8 f9cd 	bl	8010c4c <ucdr_check_buffer_available_for>
 80188b2:	2800      	cmp	r0, #0
 80188b4:	d139      	bne.n	801892a <ucdr_serialize_int32_t+0x9a>
 80188b6:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 80188ba:	42ae      	cmp	r6, r5
 80188bc:	d930      	bls.n	8018920 <ucdr_serialize_int32_t+0x90>
 80188be:	6922      	ldr	r2, [r4, #16]
 80188c0:	60a6      	str	r6, [r4, #8]
 80188c2:	1b76      	subs	r6, r6, r5
 80188c4:	4432      	add	r2, r6
 80188c6:	f1c6 0804 	rsb	r8, r6, #4
 80188ca:	6122      	str	r2, [r4, #16]
 80188cc:	4641      	mov	r1, r8
 80188ce:	4620      	mov	r0, r4
 80188d0:	f7f8 f9c8 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 80188d4:	2800      	cmp	r0, #0
 80188d6:	d04c      	beq.n	8018972 <ucdr_serialize_int32_t+0xe2>
 80188d8:	7d23      	ldrb	r3, [r4, #20]
 80188da:	2b01      	cmp	r3, #1
 80188dc:	d063      	beq.n	80189a6 <ucdr_serialize_int32_t+0x116>
 80188de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80188e2:	702b      	strb	r3, [r5, #0]
 80188e4:	2e00      	cmp	r6, #0
 80188e6:	d051      	beq.n	801898c <ucdr_serialize_int32_t+0xfc>
 80188e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80188ec:	706b      	strb	r3, [r5, #1]
 80188ee:	2e01      	cmp	r6, #1
 80188f0:	d050      	beq.n	8018994 <ucdr_serialize_int32_t+0x104>
 80188f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80188f6:	70ab      	strb	r3, [r5, #2]
 80188f8:	2e02      	cmp	r6, #2
 80188fa:	d04f      	beq.n	801899c <ucdr_serialize_int32_t+0x10c>
 80188fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018900:	70eb      	strb	r3, [r5, #3]
 8018902:	6923      	ldr	r3, [r4, #16]
 8018904:	68a2      	ldr	r2, [r4, #8]
 8018906:	7da0      	ldrb	r0, [r4, #22]
 8018908:	3304      	adds	r3, #4
 801890a:	1b9b      	subs	r3, r3, r6
 801890c:	4442      	add	r2, r8
 801890e:	2104      	movs	r1, #4
 8018910:	f080 0001 	eor.w	r0, r0, #1
 8018914:	6123      	str	r3, [r4, #16]
 8018916:	60a2      	str	r2, [r4, #8]
 8018918:	7561      	strb	r1, [r4, #21]
 801891a:	b002      	add	sp, #8
 801891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018920:	2104      	movs	r1, #4
 8018922:	4620      	mov	r0, r4
 8018924:	f7f8 f99e 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8018928:	b1d0      	cbz	r0, 8018960 <ucdr_serialize_int32_t+0xd0>
 801892a:	7d23      	ldrb	r3, [r4, #20]
 801892c:	2b01      	cmp	r3, #1
 801892e:	68a3      	ldr	r3, [r4, #8]
 8018930:	d01c      	beq.n	801896c <ucdr_serialize_int32_t+0xdc>
 8018932:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018936:	701a      	strb	r2, [r3, #0]
 8018938:	68a3      	ldr	r3, [r4, #8]
 801893a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801893e:	705a      	strb	r2, [r3, #1]
 8018940:	68a3      	ldr	r3, [r4, #8]
 8018942:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018946:	709a      	strb	r2, [r3, #2]
 8018948:	68a3      	ldr	r3, [r4, #8]
 801894a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801894e:	70da      	strb	r2, [r3, #3]
 8018950:	68a2      	ldr	r2, [r4, #8]
 8018952:	6923      	ldr	r3, [r4, #16]
 8018954:	3204      	adds	r2, #4
 8018956:	3304      	adds	r3, #4
 8018958:	2104      	movs	r1, #4
 801895a:	60a2      	str	r2, [r4, #8]
 801895c:	6123      	str	r3, [r4, #16]
 801895e:	7561      	strb	r1, [r4, #21]
 8018960:	7da0      	ldrb	r0, [r4, #22]
 8018962:	f080 0001 	eor.w	r0, r0, #1
 8018966:	b002      	add	sp, #8
 8018968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801896c:	9a01      	ldr	r2, [sp, #4]
 801896e:	601a      	str	r2, [r3, #0]
 8018970:	e7ee      	b.n	8018950 <ucdr_serialize_int32_t+0xc0>
 8018972:	68a2      	ldr	r2, [r4, #8]
 8018974:	6923      	ldr	r3, [r4, #16]
 8018976:	7da0      	ldrb	r0, [r4, #22]
 8018978:	7567      	strb	r7, [r4, #21]
 801897a:	1b92      	subs	r2, r2, r6
 801897c:	1b9b      	subs	r3, r3, r6
 801897e:	f080 0001 	eor.w	r0, r0, #1
 8018982:	60a2      	str	r2, [r4, #8]
 8018984:	6123      	str	r3, [r4, #16]
 8018986:	b002      	add	sp, #8
 8018988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801898c:	68a3      	ldr	r3, [r4, #8]
 801898e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018992:	701a      	strb	r2, [r3, #0]
 8018994:	68a3      	ldr	r3, [r4, #8]
 8018996:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801899a:	701a      	strb	r2, [r3, #0]
 801899c:	68a3      	ldr	r3, [r4, #8]
 801899e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80189a2:	701a      	strb	r2, [r3, #0]
 80189a4:	e7ad      	b.n	8018902 <ucdr_serialize_int32_t+0x72>
 80189a6:	4628      	mov	r0, r5
 80189a8:	ad01      	add	r5, sp, #4
 80189aa:	4629      	mov	r1, r5
 80189ac:	4632      	mov	r2, r6
 80189ae:	f001 f881 	bl	8019ab4 <memcpy>
 80189b2:	68a0      	ldr	r0, [r4, #8]
 80189b4:	4642      	mov	r2, r8
 80189b6:	19a9      	adds	r1, r5, r6
 80189b8:	f001 f87c 	bl	8019ab4 <memcpy>
 80189bc:	e7a1      	b.n	8018902 <ucdr_serialize_int32_t+0x72>
 80189be:	bf00      	nop

080189c0 <ucdr_deserialize_int32_t>:
 80189c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189c4:	460d      	mov	r5, r1
 80189c6:	2104      	movs	r1, #4
 80189c8:	4604      	mov	r4, r0
 80189ca:	f7f8 f99d 	bl	8010d08 <ucdr_buffer_alignment>
 80189ce:	4601      	mov	r1, r0
 80189d0:	4620      	mov	r0, r4
 80189d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80189d6:	f7f8 f9db 	bl	8010d90 <ucdr_advance_buffer>
 80189da:	4620      	mov	r0, r4
 80189dc:	2104      	movs	r1, #4
 80189de:	f7f8 f935 	bl	8010c4c <ucdr_check_buffer_available_for>
 80189e2:	2800      	cmp	r0, #0
 80189e4:	d138      	bne.n	8018a58 <ucdr_deserialize_int32_t+0x98>
 80189e6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80189ea:	42b7      	cmp	r7, r6
 80189ec:	d92f      	bls.n	8018a4e <ucdr_deserialize_int32_t+0x8e>
 80189ee:	6922      	ldr	r2, [r4, #16]
 80189f0:	60a7      	str	r7, [r4, #8]
 80189f2:	1bbf      	subs	r7, r7, r6
 80189f4:	443a      	add	r2, r7
 80189f6:	f1c7 0904 	rsb	r9, r7, #4
 80189fa:	6122      	str	r2, [r4, #16]
 80189fc:	4649      	mov	r1, r9
 80189fe:	4620      	mov	r0, r4
 8018a00:	f7f8 f930 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8018a04:	2800      	cmp	r0, #0
 8018a06:	d046      	beq.n	8018a96 <ucdr_deserialize_int32_t+0xd6>
 8018a08:	7d23      	ldrb	r3, [r4, #20]
 8018a0a:	2b01      	cmp	r3, #1
 8018a0c:	d05c      	beq.n	8018ac8 <ucdr_deserialize_int32_t+0x108>
 8018a0e:	78f3      	ldrb	r3, [r6, #3]
 8018a10:	702b      	strb	r3, [r5, #0]
 8018a12:	2f00      	cmp	r7, #0
 8018a14:	d04c      	beq.n	8018ab0 <ucdr_deserialize_int32_t+0xf0>
 8018a16:	78b3      	ldrb	r3, [r6, #2]
 8018a18:	706b      	strb	r3, [r5, #1]
 8018a1a:	2f01      	cmp	r7, #1
 8018a1c:	f105 0302 	add.w	r3, r5, #2
 8018a20:	d04a      	beq.n	8018ab8 <ucdr_deserialize_int32_t+0xf8>
 8018a22:	7873      	ldrb	r3, [r6, #1]
 8018a24:	70ab      	strb	r3, [r5, #2]
 8018a26:	2f02      	cmp	r7, #2
 8018a28:	f105 0303 	add.w	r3, r5, #3
 8018a2c:	d048      	beq.n	8018ac0 <ucdr_deserialize_int32_t+0x100>
 8018a2e:	7833      	ldrb	r3, [r6, #0]
 8018a30:	70eb      	strb	r3, [r5, #3]
 8018a32:	6923      	ldr	r3, [r4, #16]
 8018a34:	68a2      	ldr	r2, [r4, #8]
 8018a36:	7da0      	ldrb	r0, [r4, #22]
 8018a38:	2104      	movs	r1, #4
 8018a3a:	3304      	adds	r3, #4
 8018a3c:	1bdb      	subs	r3, r3, r7
 8018a3e:	444a      	add	r2, r9
 8018a40:	7561      	strb	r1, [r4, #21]
 8018a42:	6123      	str	r3, [r4, #16]
 8018a44:	60a2      	str	r2, [r4, #8]
 8018a46:	f080 0001 	eor.w	r0, r0, #1
 8018a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a4e:	2104      	movs	r1, #4
 8018a50:	4620      	mov	r0, r4
 8018a52:	f7f8 f907 	bl	8010c64 <ucdr_check_final_buffer_behavior>
 8018a56:	b1b0      	cbz	r0, 8018a86 <ucdr_deserialize_int32_t+0xc6>
 8018a58:	7d23      	ldrb	r3, [r4, #20]
 8018a5a:	2b01      	cmp	r3, #1
 8018a5c:	68a3      	ldr	r3, [r4, #8]
 8018a5e:	d017      	beq.n	8018a90 <ucdr_deserialize_int32_t+0xd0>
 8018a60:	78db      	ldrb	r3, [r3, #3]
 8018a62:	702b      	strb	r3, [r5, #0]
 8018a64:	68a3      	ldr	r3, [r4, #8]
 8018a66:	789b      	ldrb	r3, [r3, #2]
 8018a68:	706b      	strb	r3, [r5, #1]
 8018a6a:	68a3      	ldr	r3, [r4, #8]
 8018a6c:	785b      	ldrb	r3, [r3, #1]
 8018a6e:	70ab      	strb	r3, [r5, #2]
 8018a70:	68a3      	ldr	r3, [r4, #8]
 8018a72:	781b      	ldrb	r3, [r3, #0]
 8018a74:	70eb      	strb	r3, [r5, #3]
 8018a76:	68a2      	ldr	r2, [r4, #8]
 8018a78:	6923      	ldr	r3, [r4, #16]
 8018a7a:	3204      	adds	r2, #4
 8018a7c:	3304      	adds	r3, #4
 8018a7e:	2104      	movs	r1, #4
 8018a80:	60a2      	str	r2, [r4, #8]
 8018a82:	6123      	str	r3, [r4, #16]
 8018a84:	7561      	strb	r1, [r4, #21]
 8018a86:	7da0      	ldrb	r0, [r4, #22]
 8018a88:	f080 0001 	eor.w	r0, r0, #1
 8018a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	602b      	str	r3, [r5, #0]
 8018a94:	e7ef      	b.n	8018a76 <ucdr_deserialize_int32_t+0xb6>
 8018a96:	68a2      	ldr	r2, [r4, #8]
 8018a98:	6923      	ldr	r3, [r4, #16]
 8018a9a:	7da0      	ldrb	r0, [r4, #22]
 8018a9c:	f884 8015 	strb.w	r8, [r4, #21]
 8018aa0:	1bd2      	subs	r2, r2, r7
 8018aa2:	1bdb      	subs	r3, r3, r7
 8018aa4:	60a2      	str	r2, [r4, #8]
 8018aa6:	6123      	str	r3, [r4, #16]
 8018aa8:	f080 0001 	eor.w	r0, r0, #1
 8018aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ab0:	68a3      	ldr	r3, [r4, #8]
 8018ab2:	789b      	ldrb	r3, [r3, #2]
 8018ab4:	706b      	strb	r3, [r5, #1]
 8018ab6:	1cab      	adds	r3, r5, #2
 8018ab8:	68a2      	ldr	r2, [r4, #8]
 8018aba:	7852      	ldrb	r2, [r2, #1]
 8018abc:	f803 2b01 	strb.w	r2, [r3], #1
 8018ac0:	68a2      	ldr	r2, [r4, #8]
 8018ac2:	7812      	ldrb	r2, [r2, #0]
 8018ac4:	701a      	strb	r2, [r3, #0]
 8018ac6:	e7b4      	b.n	8018a32 <ucdr_deserialize_int32_t+0x72>
 8018ac8:	4631      	mov	r1, r6
 8018aca:	463a      	mov	r2, r7
 8018acc:	4628      	mov	r0, r5
 8018ace:	f000 fff1 	bl	8019ab4 <memcpy>
 8018ad2:	68a1      	ldr	r1, [r4, #8]
 8018ad4:	464a      	mov	r2, r9
 8018ad6:	19e8      	adds	r0, r5, r7
 8018ad8:	f000 ffec 	bl	8019ab4 <memcpy>
 8018adc:	e7a9      	b.n	8018a32 <ucdr_deserialize_int32_t+0x72>
 8018ade:	bf00      	nop

08018ae0 <ucdr_serialize_string>:
 8018ae0:	b510      	push	{r4, lr}
 8018ae2:	b082      	sub	sp, #8
 8018ae4:	4604      	mov	r4, r0
 8018ae6:	4608      	mov	r0, r1
 8018ae8:	9101      	str	r1, [sp, #4]
 8018aea:	f7e7 fb83 	bl	80001f4 <strlen>
 8018aee:	9901      	ldr	r1, [sp, #4]
 8018af0:	4602      	mov	r2, r0
 8018af2:	3201      	adds	r2, #1
 8018af4:	4620      	mov	r0, r4
 8018af6:	b002      	add	sp, #8
 8018af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018afc:	f7f8 b968 	b.w	8010dd0 <ucdr_serialize_sequence_char>

08018b00 <ucdr_deserialize_string>:
 8018b00:	b500      	push	{lr}
 8018b02:	b083      	sub	sp, #12
 8018b04:	ab01      	add	r3, sp, #4
 8018b06:	f7f8 f975 	bl	8010df4 <ucdr_deserialize_sequence_char>
 8018b0a:	b003      	add	sp, #12
 8018b0c:	f85d fb04 	ldr.w	pc, [sp], #4

08018b10 <uxr_init_input_best_effort_stream>:
 8018b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b14:	8003      	strh	r3, [r0, #0]
 8018b16:	4770      	bx	lr

08018b18 <uxr_reset_input_best_effort_stream>:
 8018b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b1c:	8003      	strh	r3, [r0, #0]
 8018b1e:	4770      	bx	lr

08018b20 <uxr_receive_best_effort_message>:
 8018b20:	b538      	push	{r3, r4, r5, lr}
 8018b22:	4604      	mov	r4, r0
 8018b24:	8800      	ldrh	r0, [r0, #0]
 8018b26:	460d      	mov	r5, r1
 8018b28:	f000 fd20 	bl	801956c <uxr_seq_num_cmp>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018b34:	bfb8      	it	lt
 8018b36:	8025      	strhlt	r5, [r4, #0]
 8018b38:	bd38      	pop	{r3, r4, r5, pc}
 8018b3a:	bf00      	nop

08018b3c <on_full_input_buffer>:
 8018b3c:	b570      	push	{r4, r5, r6, lr}
 8018b3e:	6802      	ldr	r2, [r0, #0]
 8018b40:	460d      	mov	r5, r1
 8018b42:	6809      	ldr	r1, [r1, #0]
 8018b44:	686c      	ldr	r4, [r5, #4]
 8018b46:	1a53      	subs	r3, r2, r1
 8018b48:	4606      	mov	r6, r0
 8018b4a:	8928      	ldrh	r0, [r5, #8]
 8018b4c:	fbb4 f4f0 	udiv	r4, r4, r0
 8018b50:	fbb3 f3f4 	udiv	r3, r3, r4
 8018b54:	3301      	adds	r3, #1
 8018b56:	b29b      	uxth	r3, r3
 8018b58:	fbb3 f2f0 	udiv	r2, r3, r0
 8018b5c:	fb00 3312 	mls	r3, r0, r2, r3
 8018b60:	b29b      	uxth	r3, r3
 8018b62:	fb04 f403 	mul.w	r4, r4, r3
 8018b66:	1d23      	adds	r3, r4, #4
 8018b68:	440b      	add	r3, r1
 8018b6a:	7d28      	ldrb	r0, [r5, #20]
 8018b6c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8018b70:	b110      	cbz	r0, 8018b78 <on_full_input_buffer+0x3c>
 8018b72:	2000      	movs	r0, #0
 8018b74:	f843 0c04 	str.w	r0, [r3, #-4]
 8018b78:	2a03      	cmp	r2, #3
 8018b7a:	d801      	bhi.n	8018b80 <on_full_input_buffer+0x44>
 8018b7c:	2001      	movs	r0, #1
 8018b7e:	bd70      	pop	{r4, r5, r6, pc}
 8018b80:	3408      	adds	r4, #8
 8018b82:	6933      	ldr	r3, [r6, #16]
 8018b84:	4421      	add	r1, r4
 8018b86:	4630      	mov	r0, r6
 8018b88:	3a04      	subs	r2, #4
 8018b8a:	f7f8 f8a9 	bl	8010ce0 <ucdr_init_buffer_origin>
 8018b8e:	4630      	mov	r0, r6
 8018b90:	4902      	ldr	r1, [pc, #8]	; (8018b9c <on_full_input_buffer+0x60>)
 8018b92:	462a      	mov	r2, r5
 8018b94:	f7f8 f882 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 8018b98:	2000      	movs	r0, #0
 8018b9a:	bd70      	pop	{r4, r5, r6, pc}
 8018b9c:	08018b3d 	.word	0x08018b3d

08018ba0 <uxr_init_input_reliable_stream>:
 8018ba0:	b470      	push	{r4, r5, r6}
 8018ba2:	9c03      	ldr	r4, [sp, #12]
 8018ba4:	6001      	str	r1, [r0, #0]
 8018ba6:	2600      	movs	r6, #0
 8018ba8:	8103      	strh	r3, [r0, #8]
 8018baa:	6042      	str	r2, [r0, #4]
 8018bac:	6104      	str	r4, [r0, #16]
 8018bae:	7506      	strb	r6, [r0, #20]
 8018bb0:	b1ab      	cbz	r3, 8018bde <uxr_init_input_reliable_stream+0x3e>
 8018bb2:	600e      	str	r6, [r1, #0]
 8018bb4:	8901      	ldrh	r1, [r0, #8]
 8018bb6:	2901      	cmp	r1, #1
 8018bb8:	d911      	bls.n	8018bde <uxr_init_input_reliable_stream+0x3e>
 8018bba:	2201      	movs	r2, #1
 8018bbc:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018bc0:	fbb2 f3f1 	udiv	r3, r2, r1
 8018bc4:	fb01 2313 	mls	r3, r1, r3, r2
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	fbb4 f1f1 	udiv	r1, r4, r1
 8018bce:	fb03 f301 	mul.w	r3, r3, r1
 8018bd2:	3201      	adds	r2, #1
 8018bd4:	50ee      	str	r6, [r5, r3]
 8018bd6:	8901      	ldrh	r1, [r0, #8]
 8018bd8:	b292      	uxth	r2, r2
 8018bda:	4291      	cmp	r1, r2
 8018bdc:	d8ee      	bhi.n	8018bbc <uxr_init_input_reliable_stream+0x1c>
 8018bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018be2:	bc70      	pop	{r4, r5, r6}
 8018be4:	60c3      	str	r3, [r0, #12]
 8018be6:	4770      	bx	lr

08018be8 <uxr_reset_input_reliable_stream>:
 8018be8:	8902      	ldrh	r2, [r0, #8]
 8018bea:	b1ca      	cbz	r2, 8018c20 <uxr_reset_input_reliable_stream+0x38>
 8018bec:	b470      	push	{r4, r5, r6}
 8018bee:	2400      	movs	r4, #0
 8018bf0:	4621      	mov	r1, r4
 8018bf2:	4626      	mov	r6, r4
 8018bf4:	fbb1 f3f2 	udiv	r3, r1, r2
 8018bf8:	fb02 1313 	mls	r3, r2, r3, r1
 8018bfc:	e9d0 5100 	ldrd	r5, r1, [r0]
 8018c00:	b29b      	uxth	r3, r3
 8018c02:	fbb1 f2f2 	udiv	r2, r1, r2
 8018c06:	fb03 f302 	mul.w	r3, r3, r2
 8018c0a:	3401      	adds	r4, #1
 8018c0c:	50ee      	str	r6, [r5, r3]
 8018c0e:	8902      	ldrh	r2, [r0, #8]
 8018c10:	b2a1      	uxth	r1, r4
 8018c12:	428a      	cmp	r2, r1
 8018c14:	d8ee      	bhi.n	8018bf4 <uxr_reset_input_reliable_stream+0xc>
 8018c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c1a:	bc70      	pop	{r4, r5, r6}
 8018c1c:	60c3      	str	r3, [r0, #12]
 8018c1e:	4770      	bx	lr
 8018c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c24:	60c3      	str	r3, [r0, #12]
 8018c26:	4770      	bx	lr

08018c28 <uxr_receive_reliable_message>:
 8018c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c2c:	4604      	mov	r4, r0
 8018c2e:	460d      	mov	r5, r1
 8018c30:	8901      	ldrh	r1, [r0, #8]
 8018c32:	8980      	ldrh	r0, [r0, #12]
 8018c34:	4690      	mov	r8, r2
 8018c36:	461f      	mov	r7, r3
 8018c38:	f000 fc90 	bl	801955c <uxr_seq_num_add>
 8018c3c:	4629      	mov	r1, r5
 8018c3e:	4606      	mov	r6, r0
 8018c40:	89a0      	ldrh	r0, [r4, #12]
 8018c42:	f000 fc93 	bl	801956c <uxr_seq_num_cmp>
 8018c46:	2800      	cmp	r0, #0
 8018c48:	db0a      	blt.n	8018c60 <uxr_receive_reliable_message+0x38>
 8018c4a:	2600      	movs	r6, #0
 8018c4c:	89e0      	ldrh	r0, [r4, #14]
 8018c4e:	4629      	mov	r1, r5
 8018c50:	f000 fc8c 	bl	801956c <uxr_seq_num_cmp>
 8018c54:	2800      	cmp	r0, #0
 8018c56:	bfb8      	it	lt
 8018c58:	81e5      	strhlt	r5, [r4, #14]
 8018c5a:	4630      	mov	r0, r6
 8018c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c60:	4630      	mov	r0, r6
 8018c62:	4629      	mov	r1, r5
 8018c64:	f000 fc82 	bl	801956c <uxr_seq_num_cmp>
 8018c68:	2800      	cmp	r0, #0
 8018c6a:	dbee      	blt.n	8018c4a <uxr_receive_reliable_message+0x22>
 8018c6c:	6923      	ldr	r3, [r4, #16]
 8018c6e:	4640      	mov	r0, r8
 8018c70:	4798      	blx	r3
 8018c72:	2101      	movs	r1, #1
 8018c74:	4681      	mov	r9, r0
 8018c76:	89a0      	ldrh	r0, [r4, #12]
 8018c78:	f000 fc70 	bl	801955c <uxr_seq_num_add>
 8018c7c:	f1b9 0f00 	cmp.w	r9, #0
 8018c80:	d101      	bne.n	8018c86 <uxr_receive_reliable_message+0x5e>
 8018c82:	4285      	cmp	r5, r0
 8018c84:	d049      	beq.n	8018d1a <uxr_receive_reliable_message+0xf2>
 8018c86:	8921      	ldrh	r1, [r4, #8]
 8018c88:	fbb5 f3f1 	udiv	r3, r5, r1
 8018c8c:	fb01 5313 	mls	r3, r1, r3, r5
 8018c90:	b29b      	uxth	r3, r3
 8018c92:	6862      	ldr	r2, [r4, #4]
 8018c94:	6820      	ldr	r0, [r4, #0]
 8018c96:	fbb2 f2f1 	udiv	r2, r2, r1
 8018c9a:	fb03 f302 	mul.w	r3, r3, r2
 8018c9e:	3304      	adds	r3, #4
 8018ca0:	4418      	add	r0, r3
 8018ca2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d1cf      	bne.n	8018c4a <uxr_receive_reliable_message+0x22>
 8018caa:	4641      	mov	r1, r8
 8018cac:	463a      	mov	r2, r7
 8018cae:	f000 ff01 	bl	8019ab4 <memcpy>
 8018cb2:	8921      	ldrh	r1, [r4, #8]
 8018cb4:	fbb5 f3f1 	udiv	r3, r5, r1
 8018cb8:	fb01 5313 	mls	r3, r1, r3, r5
 8018cbc:	b29b      	uxth	r3, r3
 8018cbe:	6862      	ldr	r2, [r4, #4]
 8018cc0:	fbb2 f2f1 	udiv	r2, r2, r1
 8018cc4:	6821      	ldr	r1, [r4, #0]
 8018cc6:	fb03 f302 	mul.w	r3, r3, r2
 8018cca:	2201      	movs	r2, #1
 8018ccc:	50cf      	str	r7, [r1, r3]
 8018cce:	9b08      	ldr	r3, [sp, #32]
 8018cd0:	701a      	strb	r2, [r3, #0]
 8018cd2:	f1b9 0f00 	cmp.w	r9, #0
 8018cd6:	d0b8      	beq.n	8018c4a <uxr_receive_reliable_message+0x22>
 8018cd8:	89a6      	ldrh	r6, [r4, #12]
 8018cda:	e001      	b.n	8018ce0 <uxr_receive_reliable_message+0xb8>
 8018cdc:	2801      	cmp	r0, #1
 8018cde:	d1b4      	bne.n	8018c4a <uxr_receive_reliable_message+0x22>
 8018ce0:	4630      	mov	r0, r6
 8018ce2:	2101      	movs	r1, #1
 8018ce4:	f000 fc3a 	bl	801955c <uxr_seq_num_add>
 8018ce8:	8921      	ldrh	r1, [r4, #8]
 8018cea:	fbb0 f3f1 	udiv	r3, r0, r1
 8018cee:	fb01 0313 	mls	r3, r1, r3, r0
 8018cf2:	b29b      	uxth	r3, r3
 8018cf4:	6862      	ldr	r2, [r4, #4]
 8018cf6:	fbb2 f2f1 	udiv	r2, r2, r1
 8018cfa:	4606      	mov	r6, r0
 8018cfc:	fb03 f302 	mul.w	r3, r3, r2
 8018d00:	6820      	ldr	r0, [r4, #0]
 8018d02:	3304      	adds	r3, #4
 8018d04:	4418      	add	r0, r3
 8018d06:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d09d      	beq.n	8018c4a <uxr_receive_reliable_message+0x22>
 8018d0e:	6923      	ldr	r3, [r4, #16]
 8018d10:	4798      	blx	r3
 8018d12:	2802      	cmp	r0, #2
 8018d14:	d1e2      	bne.n	8018cdc <uxr_receive_reliable_message+0xb4>
 8018d16:	2601      	movs	r6, #1
 8018d18:	e798      	b.n	8018c4c <uxr_receive_reliable_message+0x24>
 8018d1a:	9b08      	ldr	r3, [sp, #32]
 8018d1c:	81a5      	strh	r5, [r4, #12]
 8018d1e:	2601      	movs	r6, #1
 8018d20:	f883 9000 	strb.w	r9, [r3]
 8018d24:	e792      	b.n	8018c4c <uxr_receive_reliable_message+0x24>
 8018d26:	bf00      	nop

08018d28 <uxr_next_input_reliable_buffer_available>:
 8018d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d2c:	4604      	mov	r4, r0
 8018d2e:	460e      	mov	r6, r1
 8018d30:	8980      	ldrh	r0, [r0, #12]
 8018d32:	2101      	movs	r1, #1
 8018d34:	4617      	mov	r7, r2
 8018d36:	f000 fc11 	bl	801955c <uxr_seq_num_add>
 8018d3a:	8921      	ldrh	r1, [r4, #8]
 8018d3c:	fbb0 f3f1 	udiv	r3, r0, r1
 8018d40:	fb01 0313 	mls	r3, r1, r3, r0
 8018d44:	b29b      	uxth	r3, r3
 8018d46:	6862      	ldr	r2, [r4, #4]
 8018d48:	fbb2 f2f1 	udiv	r2, r2, r1
 8018d4c:	fb03 f302 	mul.w	r3, r3, r2
 8018d50:	6822      	ldr	r2, [r4, #0]
 8018d52:	3304      	adds	r3, #4
 8018d54:	eb02 0803 	add.w	r8, r2, r3
 8018d58:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8018d5c:	f1b9 0f00 	cmp.w	r9, #0
 8018d60:	d025      	beq.n	8018dae <uxr_next_input_reliable_buffer_available+0x86>
 8018d62:	6923      	ldr	r3, [r4, #16]
 8018d64:	4605      	mov	r5, r0
 8018d66:	4640      	mov	r0, r8
 8018d68:	4798      	blx	r3
 8018d6a:	4682      	mov	sl, r0
 8018d6c:	b310      	cbz	r0, 8018db4 <uxr_next_input_reliable_buffer_available+0x8c>
 8018d6e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018d72:	e005      	b.n	8018d80 <uxr_next_input_reliable_buffer_available+0x58>
 8018d74:	6923      	ldr	r3, [r4, #16]
 8018d76:	4798      	blx	r3
 8018d78:	2802      	cmp	r0, #2
 8018d7a:	d032      	beq.n	8018de2 <uxr_next_input_reliable_buffer_available+0xba>
 8018d7c:	2801      	cmp	r0, #1
 8018d7e:	d116      	bne.n	8018dae <uxr_next_input_reliable_buffer_available+0x86>
 8018d80:	4650      	mov	r0, sl
 8018d82:	2101      	movs	r1, #1
 8018d84:	f000 fbea 	bl	801955c <uxr_seq_num_add>
 8018d88:	8921      	ldrh	r1, [r4, #8]
 8018d8a:	fbb0 f3f1 	udiv	r3, r0, r1
 8018d8e:	fb01 0313 	mls	r3, r1, r3, r0
 8018d92:	b29b      	uxth	r3, r3
 8018d94:	6862      	ldr	r2, [r4, #4]
 8018d96:	fbb2 f2f1 	udiv	r2, r2, r1
 8018d9a:	4682      	mov	sl, r0
 8018d9c:	fb03 f302 	mul.w	r3, r3, r2
 8018da0:	6820      	ldr	r0, [r4, #0]
 8018da2:	3304      	adds	r3, #4
 8018da4:	4418      	add	r0, r3
 8018da6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d1e2      	bne.n	8018d74 <uxr_next_input_reliable_buffer_available+0x4c>
 8018dae:	2000      	movs	r0, #0
 8018db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018db4:	464a      	mov	r2, r9
 8018db6:	4641      	mov	r1, r8
 8018db8:	4630      	mov	r0, r6
 8018dba:	f7f7 ff99 	bl	8010cf0 <ucdr_init_buffer>
 8018dbe:	8921      	ldrh	r1, [r4, #8]
 8018dc0:	fbb5 f3f1 	udiv	r3, r5, r1
 8018dc4:	fb01 5313 	mls	r3, r1, r3, r5
 8018dc8:	b29b      	uxth	r3, r3
 8018dca:	6862      	ldr	r2, [r4, #4]
 8018dcc:	fbb2 f2f1 	udiv	r2, r2, r1
 8018dd0:	6821      	ldr	r1, [r4, #0]
 8018dd2:	fb03 f302 	mul.w	r3, r3, r2
 8018dd6:	2001      	movs	r0, #1
 8018dd8:	f841 a003 	str.w	sl, [r1, r3]
 8018ddc:	81a5      	strh	r5, [r4, #12]
 8018dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018de2:	8922      	ldrh	r2, [r4, #8]
 8018de4:	fbb5 f0f2 	udiv	r0, r5, r2
 8018de8:	fb02 5510 	mls	r5, r2, r0, r5
 8018dec:	b2ad      	uxth	r5, r5
 8018dee:	6863      	ldr	r3, [r4, #4]
 8018df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8018df4:	fb05 f503 	mul.w	r5, r5, r3
 8018df8:	6823      	ldr	r3, [r4, #0]
 8018dfa:	2000      	movs	r0, #0
 8018dfc:	5158      	str	r0, [r3, r5]
 8018dfe:	eba9 0207 	sub.w	r2, r9, r7
 8018e02:	eb08 0107 	add.w	r1, r8, r7
 8018e06:	4630      	mov	r0, r6
 8018e08:	f7f7 ff72 	bl	8010cf0 <ucdr_init_buffer>
 8018e0c:	4630      	mov	r0, r6
 8018e0e:	4904      	ldr	r1, [pc, #16]	; (8018e20 <uxr_next_input_reliable_buffer_available+0xf8>)
 8018e10:	4622      	mov	r2, r4
 8018e12:	f7f7 ff43 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 8018e16:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018e1a:	2001      	movs	r0, #1
 8018e1c:	e7c8      	b.n	8018db0 <uxr_next_input_reliable_buffer_available+0x88>
 8018e1e:	bf00      	nop
 8018e20:	08018b3d 	.word	0x08018b3d

08018e24 <uxr_process_heartbeat>:
 8018e24:	b538      	push	{r3, r4, r5, lr}
 8018e26:	4611      	mov	r1, r2
 8018e28:	4604      	mov	r4, r0
 8018e2a:	89c0      	ldrh	r0, [r0, #14]
 8018e2c:	4615      	mov	r5, r2
 8018e2e:	f000 fb9d 	bl	801956c <uxr_seq_num_cmp>
 8018e32:	2800      	cmp	r0, #0
 8018e34:	bfb8      	it	lt
 8018e36:	81e5      	strhlt	r5, [r4, #14]
 8018e38:	bd38      	pop	{r3, r4, r5, pc}
 8018e3a:	bf00      	nop

08018e3c <uxr_compute_acknack>:
 8018e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e40:	8903      	ldrh	r3, [r0, #8]
 8018e42:	8986      	ldrh	r6, [r0, #12]
 8018e44:	4604      	mov	r4, r0
 8018e46:	460d      	mov	r5, r1
 8018e48:	b1d3      	cbz	r3, 8018e80 <uxr_compute_acknack+0x44>
 8018e4a:	4630      	mov	r0, r6
 8018e4c:	2701      	movs	r7, #1
 8018e4e:	e003      	b.n	8018e58 <uxr_compute_acknack+0x1c>
 8018e50:	4567      	cmp	r7, ip
 8018e52:	d215      	bcs.n	8018e80 <uxr_compute_acknack+0x44>
 8018e54:	89a0      	ldrh	r0, [r4, #12]
 8018e56:	3701      	adds	r7, #1
 8018e58:	b2b9      	uxth	r1, r7
 8018e5a:	f000 fb7f 	bl	801955c <uxr_seq_num_add>
 8018e5e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018e62:	fbb0 f2fc 	udiv	r2, r0, ip
 8018e66:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018e6a:	fb0c 0212 	mls	r2, ip, r2, r0
 8018e6e:	b292      	uxth	r2, r2
 8018e70:	fbb3 f3fc 	udiv	r3, r3, ip
 8018e74:	fb02 1303 	mla	r3, r2, r3, r1
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d1e8      	bne.n	8018e50 <uxr_compute_acknack+0x14>
 8018e7e:	4606      	mov	r6, r0
 8018e80:	802e      	strh	r6, [r5, #0]
 8018e82:	4630      	mov	r0, r6
 8018e84:	2101      	movs	r1, #1
 8018e86:	89e6      	ldrh	r6, [r4, #14]
 8018e88:	f000 fb6c 	bl	8019564 <uxr_seq_num_sub>
 8018e8c:	4601      	mov	r1, r0
 8018e8e:	4630      	mov	r0, r6
 8018e90:	f000 fb68 	bl	8019564 <uxr_seq_num_sub>
 8018e94:	4606      	mov	r6, r0
 8018e96:	b318      	cbz	r0, 8018ee0 <uxr_compute_acknack+0xa4>
 8018e98:	f04f 0900 	mov.w	r9, #0
 8018e9c:	464f      	mov	r7, r9
 8018e9e:	f04f 0801 	mov.w	r8, #1
 8018ea2:	fa1f f189 	uxth.w	r1, r9
 8018ea6:	8828      	ldrh	r0, [r5, #0]
 8018ea8:	f000 fb58 	bl	801955c <uxr_seq_num_add>
 8018eac:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018eb0:	6822      	ldr	r2, [r4, #0]
 8018eb2:	fbb0 f1fc 	udiv	r1, r0, ip
 8018eb6:	fb01 011c 	mls	r1, r1, ip, r0
 8018eba:	b289      	uxth	r1, r1
 8018ebc:	6863      	ldr	r3, [r4, #4]
 8018ebe:	fbb3 f3fc 	udiv	r3, r3, ip
 8018ec2:	fb01 2303 	mla	r3, r1, r3, r2
 8018ec6:	fa08 f209 	lsl.w	r2, r8, r9
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	f109 0901 	add.w	r9, r9, #1
 8018ed0:	b90b      	cbnz	r3, 8018ed6 <uxr_compute_acknack+0x9a>
 8018ed2:	4317      	orrs	r7, r2
 8018ed4:	b2bf      	uxth	r7, r7
 8018ed6:	454e      	cmp	r6, r9
 8018ed8:	d1e3      	bne.n	8018ea2 <uxr_compute_acknack+0x66>
 8018eda:	4638      	mov	r0, r7
 8018edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ee0:	4607      	mov	r7, r0
 8018ee2:	4638      	mov	r0, r7
 8018ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018ee8 <uxr_init_output_best_effort_stream>:
 8018ee8:	b410      	push	{r4}
 8018eea:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8018eee:	81c4      	strh	r4, [r0, #14]
 8018ef0:	e9c0 1300 	strd	r1, r3, [r0]
 8018ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ef8:	7303      	strb	r3, [r0, #12]
 8018efa:	6082      	str	r2, [r0, #8]
 8018efc:	4770      	bx	lr
 8018efe:	bf00      	nop

08018f00 <uxr_reset_output_best_effort_stream>:
 8018f00:	7b02      	ldrb	r2, [r0, #12]
 8018f02:	6042      	str	r2, [r0, #4]
 8018f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f08:	81c3      	strh	r3, [r0, #14]
 8018f0a:	4770      	bx	lr

08018f0c <uxr_prepare_best_effort_buffer_to_write>:
 8018f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f0e:	4604      	mov	r4, r0
 8018f10:	b083      	sub	sp, #12
 8018f12:	6840      	ldr	r0, [r0, #4]
 8018f14:	460d      	mov	r5, r1
 8018f16:	4616      	mov	r6, r2
 8018f18:	f7fa fa66 	bl	80133e8 <uxr_submessage_padding>
 8018f1c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8018f20:	4410      	add	r0, r2
 8018f22:	1942      	adds	r2, r0, r5
 8018f24:	4293      	cmp	r3, r2
 8018f26:	bf2c      	ite	cs
 8018f28:	2701      	movcs	r7, #1
 8018f2a:	2700      	movcc	r7, #0
 8018f2c:	d202      	bcs.n	8018f34 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018f2e:	4638      	mov	r0, r7
 8018f30:	b003      	add	sp, #12
 8018f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f34:	9000      	str	r0, [sp, #0]
 8018f36:	6821      	ldr	r1, [r4, #0]
 8018f38:	4630      	mov	r0, r6
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	f7f7 fec6 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 8018f40:	6861      	ldr	r1, [r4, #4]
 8018f42:	4638      	mov	r0, r7
 8018f44:	4429      	add	r1, r5
 8018f46:	6061      	str	r1, [r4, #4]
 8018f48:	b003      	add	sp, #12
 8018f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018f4c <uxr_prepare_best_effort_buffer_to_send>:
 8018f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f50:	6845      	ldr	r5, [r0, #4]
 8018f52:	4604      	mov	r4, r0
 8018f54:	7b00      	ldrb	r0, [r0, #12]
 8018f56:	4285      	cmp	r5, r0
 8018f58:	bf8c      	ite	hi
 8018f5a:	2701      	movhi	r7, #1
 8018f5c:	2700      	movls	r7, #0
 8018f5e:	d802      	bhi.n	8018f66 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8018f60:	4638      	mov	r0, r7
 8018f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f66:	4688      	mov	r8, r1
 8018f68:	89e0      	ldrh	r0, [r4, #14]
 8018f6a:	2101      	movs	r1, #1
 8018f6c:	4615      	mov	r5, r2
 8018f6e:	461e      	mov	r6, r3
 8018f70:	f000 faf4 	bl	801955c <uxr_seq_num_add>
 8018f74:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018f78:	81e0      	strh	r0, [r4, #14]
 8018f7a:	8030      	strh	r0, [r6, #0]
 8018f7c:	f8c8 2000 	str.w	r2, [r8]
 8018f80:	602b      	str	r3, [r5, #0]
 8018f82:	7b23      	ldrb	r3, [r4, #12]
 8018f84:	6063      	str	r3, [r4, #4]
 8018f86:	4638      	mov	r0, r7
 8018f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f8c <on_full_output_buffer>:
 8018f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f8e:	6802      	ldr	r2, [r0, #0]
 8018f90:	460d      	mov	r5, r1
 8018f92:	6809      	ldr	r1, [r1, #0]
 8018f94:	892f      	ldrh	r7, [r5, #8]
 8018f96:	686c      	ldr	r4, [r5, #4]
 8018f98:	fbb4 f4f7 	udiv	r4, r4, r7
 8018f9c:	1a53      	subs	r3, r2, r1
 8018f9e:	fbb3 f3f4 	udiv	r3, r3, r4
 8018fa2:	3301      	adds	r3, #1
 8018fa4:	b29b      	uxth	r3, r3
 8018fa6:	fbb3 f2f7 	udiv	r2, r3, r7
 8018faa:	fb07 3312 	mls	r3, r7, r2, r3
 8018fae:	b29b      	uxth	r3, r3
 8018fb0:	fb04 f403 	mul.w	r4, r4, r3
 8018fb4:	7b2f      	ldrb	r7, [r5, #12]
 8018fb6:	590a      	ldr	r2, [r1, r4]
 8018fb8:	6903      	ldr	r3, [r0, #16]
 8018fba:	443c      	add	r4, r7
 8018fbc:	3408      	adds	r4, #8
 8018fbe:	1bd2      	subs	r2, r2, r7
 8018fc0:	4606      	mov	r6, r0
 8018fc2:	4421      	add	r1, r4
 8018fc4:	3a04      	subs	r2, #4
 8018fc6:	f7f7 fe8b 	bl	8010ce0 <ucdr_init_buffer_origin>
 8018fca:	4630      	mov	r0, r6
 8018fcc:	4902      	ldr	r1, [pc, #8]	; (8018fd8 <on_full_output_buffer+0x4c>)
 8018fce:	462a      	mov	r2, r5
 8018fd0:	f7f7 fe64 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 8018fd4:	2000      	movs	r0, #0
 8018fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fd8:	08018f8d 	.word	0x08018f8d

08018fdc <uxr_init_output_reliable_stream>:
 8018fdc:	b430      	push	{r4, r5}
 8018fde:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8018fe2:	6001      	str	r1, [r0, #0]
 8018fe4:	8103      	strh	r3, [r0, #8]
 8018fe6:	6042      	str	r2, [r0, #4]
 8018fe8:	7304      	strb	r4, [r0, #12]
 8018fea:	b1b3      	cbz	r3, 801901a <uxr_init_output_reliable_stream+0x3e>
 8018fec:	600c      	str	r4, [r1, #0]
 8018fee:	8901      	ldrh	r1, [r0, #8]
 8018ff0:	2901      	cmp	r1, #1
 8018ff2:	d912      	bls.n	801901a <uxr_init_output_reliable_stream+0x3e>
 8018ff4:	2201      	movs	r2, #1
 8018ff6:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018ffa:	fbb2 f3f1 	udiv	r3, r2, r1
 8018ffe:	fb01 2313 	mls	r3, r1, r3, r2
 8019002:	b29b      	uxth	r3, r3
 8019004:	fbb4 f1f1 	udiv	r1, r4, r1
 8019008:	fb03 f301 	mul.w	r3, r3, r1
 801900c:	7b01      	ldrb	r1, [r0, #12]
 801900e:	50e9      	str	r1, [r5, r3]
 8019010:	3201      	adds	r2, #1
 8019012:	8901      	ldrh	r1, [r0, #8]
 8019014:	b292      	uxth	r2, r2
 8019016:	4291      	cmp	r1, r2
 8019018:	d8ed      	bhi.n	8018ff6 <uxr_init_output_reliable_stream+0x1a>
 801901a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801901e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019022:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019026:	4b05      	ldr	r3, [pc, #20]	; (801903c <uxr_init_output_reliable_stream+0x60>)
 8019028:	f8c0 300e 	str.w	r3, [r0, #14]
 801902c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019030:	2300      	movs	r3, #0
 8019032:	bc30      	pop	{r4, r5}
 8019034:	8242      	strh	r2, [r0, #18]
 8019036:	8403      	strh	r3, [r0, #32]
 8019038:	4770      	bx	lr
 801903a:	bf00      	nop
 801903c:	ffff0000 	.word	0xffff0000

08019040 <uxr_reset_output_reliable_stream>:
 8019040:	8902      	ldrh	r2, [r0, #8]
 8019042:	b430      	push	{r4, r5}
 8019044:	b19a      	cbz	r2, 801906e <uxr_reset_output_reliable_stream+0x2e>
 8019046:	2400      	movs	r4, #0
 8019048:	4621      	mov	r1, r4
 801904a:	fbb1 f3f2 	udiv	r3, r1, r2
 801904e:	fb02 1313 	mls	r3, r2, r3, r1
 8019052:	e9d0 5100 	ldrd	r5, r1, [r0]
 8019056:	b29b      	uxth	r3, r3
 8019058:	fbb1 f2f2 	udiv	r2, r1, r2
 801905c:	fb03 f302 	mul.w	r3, r3, r2
 8019060:	7b02      	ldrb	r2, [r0, #12]
 8019062:	50ea      	str	r2, [r5, r3]
 8019064:	3401      	adds	r4, #1
 8019066:	8902      	ldrh	r2, [r0, #8]
 8019068:	b2a1      	uxth	r1, r4
 801906a:	428a      	cmp	r2, r1
 801906c:	d8ed      	bhi.n	801904a <uxr_reset_output_reliable_stream+0xa>
 801906e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019072:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019076:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801907a:	4b05      	ldr	r3, [pc, #20]	; (8019090 <uxr_reset_output_reliable_stream+0x50>)
 801907c:	f8c0 300e 	str.w	r3, [r0, #14]
 8019080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019084:	2300      	movs	r3, #0
 8019086:	bc30      	pop	{r4, r5}
 8019088:	8242      	strh	r2, [r0, #18]
 801908a:	8403      	strh	r3, [r0, #32]
 801908c:	4770      	bx	lr
 801908e:	bf00      	nop
 8019090:	ffff0000 	.word	0xffff0000

08019094 <uxr_prepare_reliable_buffer_to_write>:
 8019094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019098:	89c5      	ldrh	r5, [r0, #14]
 801909a:	4604      	mov	r4, r0
 801909c:	8900      	ldrh	r0, [r0, #8]
 801909e:	fbb5 f3f0 	udiv	r3, r5, r0
 80190a2:	4688      	mov	r8, r1
 80190a4:	e9d4 1600 	ldrd	r1, r6, [r4]
 80190a8:	fb00 5313 	mls	r3, r0, r3, r5
 80190ac:	b29b      	uxth	r3, r3
 80190ae:	fbb6 f0f0 	udiv	r0, r6, r0
 80190b2:	fb00 f303 	mul.w	r3, r0, r3
 80190b6:	3304      	adds	r3, #4
 80190b8:	18cb      	adds	r3, r1, r3
 80190ba:	b091      	sub	sp, #68	; 0x44
 80190bc:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80190c0:	9004      	str	r0, [sp, #16]
 80190c2:	2104      	movs	r1, #4
 80190c4:	4630      	mov	r0, r6
 80190c6:	9305      	str	r3, [sp, #20]
 80190c8:	9206      	str	r2, [sp, #24]
 80190ca:	f7f7 fe15 	bl	8010cf8 <ucdr_alignment>
 80190ce:	1833      	adds	r3, r6, r0
 80190d0:	9804      	ldr	r0, [sp, #16]
 80190d2:	9303      	str	r3, [sp, #12]
 80190d4:	eb03 0708 	add.w	r7, r3, r8
 80190d8:	1f06      	subs	r6, r0, #4
 80190da:	42b7      	cmp	r7, r6
 80190dc:	f240 80dc 	bls.w	8019298 <uxr_prepare_reliable_buffer_to_write+0x204>
 80190e0:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80190e4:	eb0e 0308 	add.w	r3, lr, r8
 80190e8:	42b3      	cmp	r3, r6
 80190ea:	f240 80c2 	bls.w	8019272 <uxr_prepare_reliable_buffer_to_write+0x1de>
 80190ee:	9b03      	ldr	r3, [sp, #12]
 80190f0:	3304      	adds	r3, #4
 80190f2:	42b3      	cmp	r3, r6
 80190f4:	f080 8112 	bcs.w	801931c <uxr_prepare_reliable_buffer_to_write+0x288>
 80190f8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80190fc:	f1bc 0f00 	cmp.w	ip, #0
 8019100:	f000 8127 	beq.w	8019352 <uxr_prepare_reliable_buffer_to_write+0x2be>
 8019104:	e9d4 7300 	ldrd	r7, r3, [r4]
 8019108:	2100      	movs	r1, #0
 801910a:	4608      	mov	r0, r1
 801910c:	460a      	mov	r2, r1
 801910e:	fbb3 f9fc 	udiv	r9, r3, ip
 8019112:	fbb2 f3fc 	udiv	r3, r2, ip
 8019116:	fb0c 2313 	mls	r3, ip, r3, r2
 801911a:	b29b      	uxth	r3, r3
 801911c:	fb09 7303 	mla	r3, r9, r3, r7
 8019120:	3101      	adds	r1, #1
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	459e      	cmp	lr, r3
 8019126:	bf08      	it	eq
 8019128:	3001      	addeq	r0, #1
 801912a:	b28a      	uxth	r2, r1
 801912c:	bf08      	it	eq
 801912e:	b280      	uxtheq	r0, r0
 8019130:	4562      	cmp	r2, ip
 8019132:	d3ee      	bcc.n	8019112 <uxr_prepare_reliable_buffer_to_write+0x7e>
 8019134:	9b03      	ldr	r3, [sp, #12]
 8019136:	1f37      	subs	r7, r6, #4
 8019138:	b2bf      	uxth	r7, r7
 801913a:	eba7 0903 	sub.w	r9, r7, r3
 801913e:	fa1f f989 	uxth.w	r9, r9
 8019142:	eba7 070e 	sub.w	r7, r7, lr
 8019146:	b2bf      	uxth	r7, r7
 8019148:	eba8 0809 	sub.w	r8, r8, r9
 801914c:	fbb8 faf7 	udiv	sl, r8, r7
 8019150:	fb07 831a 	mls	r3, r7, sl, r8
 8019154:	9707      	str	r7, [sp, #28]
 8019156:	2b00      	cmp	r3, #0
 8019158:	f040 80bf 	bne.w	80192da <uxr_prepare_reliable_buffer_to_write+0x246>
 801915c:	fa1f fa8a 	uxth.w	sl, sl
 8019160:	4582      	cmp	sl, r0
 8019162:	f200 8095 	bhi.w	8019290 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8019166:	f10d 0b20 	add.w	fp, sp, #32
 801916a:	f1ba 0f00 	cmp.w	sl, #0
 801916e:	d03a      	beq.n	80191e6 <uxr_prepare_reliable_buffer_to_write+0x152>
 8019170:	f04f 0800 	mov.w	r8, #0
 8019174:	f10d 0b20 	add.w	fp, sp, #32
 8019178:	e000      	b.n	801917c <uxr_prepare_reliable_buffer_to_write+0xe8>
 801917a:	46b9      	mov	r9, r7
 801917c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8019180:	fbb5 f1fc 	udiv	r1, r5, ip
 8019184:	fb0c 5111 	mls	r1, ip, r1, r5
 8019188:	b289      	uxth	r1, r1
 801918a:	fbb2 f2fc 	udiv	r2, r2, ip
 801918e:	fb01 f102 	mul.w	r1, r1, r2
 8019192:	3104      	adds	r1, #4
 8019194:	4419      	add	r1, r3
 8019196:	4632      	mov	r2, r6
 8019198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801919c:	9300      	str	r3, [sp, #0]
 801919e:	4658      	mov	r0, fp
 80191a0:	2300      	movs	r3, #0
 80191a2:	f7f7 fd93 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 80191a6:	464a      	mov	r2, r9
 80191a8:	2300      	movs	r3, #0
 80191aa:	210d      	movs	r1, #13
 80191ac:	4658      	mov	r0, fp
 80191ae:	f7fa f8db 	bl	8013368 <uxr_buffer_submessage_header>
 80191b2:	8920      	ldrh	r0, [r4, #8]
 80191b4:	fbb5 f3f0 	udiv	r3, r5, r0
 80191b8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80191bc:	fb00 5313 	mls	r3, r0, r3, r5
 80191c0:	b29b      	uxth	r3, r3
 80191c2:	fbb1 f1f0 	udiv	r1, r1, r0
 80191c6:	fb03 f301 	mul.w	r3, r3, r1
 80191ca:	4628      	mov	r0, r5
 80191cc:	50d6      	str	r6, [r2, r3]
 80191ce:	2101      	movs	r1, #1
 80191d0:	f000 f9c4 	bl	801955c <uxr_seq_num_add>
 80191d4:	f108 0801 	add.w	r8, r8, #1
 80191d8:	fa1f f388 	uxth.w	r3, r8
 80191dc:	459a      	cmp	sl, r3
 80191de:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80191e2:	4605      	mov	r5, r0
 80191e4:	d8c9      	bhi.n	801917a <uxr_prepare_reliable_buffer_to_write+0xe6>
 80191e6:	fbb5 f1fc 	udiv	r1, r5, ip
 80191ea:	fb0c 5111 	mls	r1, ip, r1, r5
 80191ee:	b289      	uxth	r1, r1
 80191f0:	6863      	ldr	r3, [r4, #4]
 80191f2:	fbb3 fcfc 	udiv	ip, r3, ip
 80191f6:	6823      	ldr	r3, [r4, #0]
 80191f8:	fb01 f10c 	mul.w	r1, r1, ip
 80191fc:	3104      	adds	r1, #4
 80191fe:	4419      	add	r1, r3
 8019200:	4632      	mov	r2, r6
 8019202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019206:	9300      	str	r3, [sp, #0]
 8019208:	4658      	mov	r0, fp
 801920a:	2300      	movs	r3, #0
 801920c:	f7f7 fd5e 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 8019210:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019214:	4658      	mov	r0, fp
 8019216:	fa1f f288 	uxth.w	r2, r8
 801921a:	2302      	movs	r3, #2
 801921c:	210d      	movs	r1, #13
 801921e:	f7fa f8a3 	bl	8013368 <uxr_buffer_submessage_header>
 8019222:	e9d4 3200 	ldrd	r3, r2, [r4]
 8019226:	8921      	ldrh	r1, [r4, #8]
 8019228:	9f03      	ldr	r7, [sp, #12]
 801922a:	9307      	str	r3, [sp, #28]
 801922c:	9b05      	ldr	r3, [sp, #20]
 801922e:	7b26      	ldrb	r6, [r4, #12]
 8019230:	fbb5 f0f1 	udiv	r0, r5, r1
 8019234:	fbb2 f2f1 	udiv	r2, r2, r1
 8019238:	fb01 5010 	mls	r0, r1, r0, r5
 801923c:	1d39      	adds	r1, r7, #4
 801923e:	440b      	add	r3, r1
 8019240:	b280      	uxth	r0, r0
 8019242:	fb00 f002 	mul.w	r0, r0, r2
 8019246:	4619      	mov	r1, r3
 8019248:	3604      	adds	r6, #4
 801924a:	9b07      	ldr	r3, [sp, #28]
 801924c:	9a04      	ldr	r2, [sp, #16]
 801924e:	4446      	add	r6, r8
 8019250:	501e      	str	r6, [r3, r0]
 8019252:	9e06      	ldr	r6, [sp, #24]
 8019254:	3a08      	subs	r2, #8
 8019256:	1bd2      	subs	r2, r2, r7
 8019258:	4630      	mov	r0, r6
 801925a:	f7f7 fd49 	bl	8010cf0 <ucdr_init_buffer>
 801925e:	4630      	mov	r0, r6
 8019260:	493d      	ldr	r1, [pc, #244]	; (8019358 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8019262:	4622      	mov	r2, r4
 8019264:	f7f7 fd1a 	bl	8010c9c <ucdr_set_on_full_buffer_callback>
 8019268:	2001      	movs	r0, #1
 801926a:	81e5      	strh	r5, [r4, #14]
 801926c:	b011      	add	sp, #68	; 0x44
 801926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019272:	2101      	movs	r1, #1
 8019274:	89e0      	ldrh	r0, [r4, #14]
 8019276:	f000 f971 	bl	801955c <uxr_seq_num_add>
 801927a:	8921      	ldrh	r1, [r4, #8]
 801927c:	4605      	mov	r5, r0
 801927e:	8a60      	ldrh	r0, [r4, #18]
 8019280:	f000 f96c 	bl	801955c <uxr_seq_num_add>
 8019284:	4601      	mov	r1, r0
 8019286:	4628      	mov	r0, r5
 8019288:	f000 f970 	bl	801956c <uxr_seq_num_cmp>
 801928c:	2800      	cmp	r0, #0
 801928e:	dd2a      	ble.n	80192e6 <uxr_prepare_reliable_buffer_to_write+0x252>
 8019290:	2000      	movs	r0, #0
 8019292:	b011      	add	sp, #68	; 0x44
 8019294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019298:	8921      	ldrh	r1, [r4, #8]
 801929a:	8a60      	ldrh	r0, [r4, #18]
 801929c:	f000 f95e 	bl	801955c <uxr_seq_num_add>
 80192a0:	4601      	mov	r1, r0
 80192a2:	4628      	mov	r0, r5
 80192a4:	f000 f962 	bl	801956c <uxr_seq_num_cmp>
 80192a8:	2800      	cmp	r0, #0
 80192aa:	dcf1      	bgt.n	8019290 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 80192ac:	8921      	ldrh	r1, [r4, #8]
 80192ae:	fbb5 f3f1 	udiv	r3, r5, r1
 80192b2:	e9d4 4200 	ldrd	r4, r2, [r4]
 80192b6:	fb01 5313 	mls	r3, r1, r3, r5
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	fbb2 f2f1 	udiv	r2, r2, r1
 80192c0:	fb03 f302 	mul.w	r3, r3, r2
 80192c4:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 80192c8:	50e7      	str	r7, [r4, r3]
 80192ca:	9b03      	ldr	r3, [sp, #12]
 80192cc:	9300      	str	r3, [sp, #0]
 80192ce:	463a      	mov	r2, r7
 80192d0:	2300      	movs	r3, #0
 80192d2:	f7f7 fcfb 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 80192d6:	2001      	movs	r0, #1
 80192d8:	e7db      	b.n	8019292 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80192da:	f10a 0a01 	add.w	sl, sl, #1
 80192de:	fa1f fa8a 	uxth.w	sl, sl
 80192e2:	9307      	str	r3, [sp, #28]
 80192e4:	e73c      	b.n	8019160 <uxr_prepare_reliable_buffer_to_write+0xcc>
 80192e6:	8920      	ldrh	r0, [r4, #8]
 80192e8:	fbb5 f3f0 	udiv	r3, r5, r0
 80192ec:	fb00 5313 	mls	r3, r0, r3, r5
 80192f0:	b29b      	uxth	r3, r3
 80192f2:	6862      	ldr	r2, [r4, #4]
 80192f4:	6821      	ldr	r1, [r4, #0]
 80192f6:	fbb2 f0f0 	udiv	r0, r2, r0
 80192fa:	fb03 f300 	mul.w	r3, r3, r0
 80192fe:	7b22      	ldrb	r2, [r4, #12]
 8019300:	9806      	ldr	r0, [sp, #24]
 8019302:	3304      	adds	r3, #4
 8019304:	4419      	add	r1, r3
 8019306:	4442      	add	r2, r8
 8019308:	f841 2c04 	str.w	r2, [r1, #-4]
 801930c:	7b23      	ldrb	r3, [r4, #12]
 801930e:	9300      	str	r3, [sp, #0]
 8019310:	2300      	movs	r3, #0
 8019312:	f7f7 fcdb 	bl	8010ccc <ucdr_init_buffer_origin_offset>
 8019316:	81e5      	strh	r5, [r4, #14]
 8019318:	2001      	movs	r0, #1
 801931a:	e7ba      	b.n	8019292 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801931c:	4628      	mov	r0, r5
 801931e:	2101      	movs	r1, #1
 8019320:	f000 f91c 	bl	801955c <uxr_seq_num_add>
 8019324:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019328:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801932c:	fbb3 f1fc 	udiv	r1, r3, ip
 8019330:	fbb0 f3fc 	udiv	r3, r0, ip
 8019334:	fb0c 0313 	mls	r3, ip, r3, r0
 8019338:	b29b      	uxth	r3, r3
 801933a:	fb03 f301 	mul.w	r3, r3, r1
 801933e:	3304      	adds	r3, #4
 8019340:	18d3      	adds	r3, r2, r3
 8019342:	9305      	str	r3, [sp, #20]
 8019344:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019348:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801934c:	9303      	str	r3, [sp, #12]
 801934e:	4605      	mov	r5, r0
 8019350:	e6d4      	b.n	80190fc <uxr_prepare_reliable_buffer_to_write+0x68>
 8019352:	4660      	mov	r0, ip
 8019354:	e6ee      	b.n	8019134 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8019356:	bf00      	nop
 8019358:	08018f8d 	.word	0x08018f8d

0801935c <uxr_prepare_next_reliable_buffer_to_send>:
 801935c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019360:	4605      	mov	r5, r0
 8019362:	4688      	mov	r8, r1
 8019364:	8a00      	ldrh	r0, [r0, #16]
 8019366:	2101      	movs	r1, #1
 8019368:	4617      	mov	r7, r2
 801936a:	461e      	mov	r6, r3
 801936c:	f000 f8f6 	bl	801955c <uxr_seq_num_add>
 8019370:	8030      	strh	r0, [r6, #0]
 8019372:	892a      	ldrh	r2, [r5, #8]
 8019374:	fbb0 f3f2 	udiv	r3, r0, r2
 8019378:	fb02 0413 	mls	r4, r2, r3, r0
 801937c:	b2a4      	uxth	r4, r4
 801937e:	686b      	ldr	r3, [r5, #4]
 8019380:	fbb3 f2f2 	udiv	r2, r3, r2
 8019384:	682b      	ldr	r3, [r5, #0]
 8019386:	89e9      	ldrh	r1, [r5, #14]
 8019388:	fb04 f402 	mul.w	r4, r4, r2
 801938c:	3404      	adds	r4, #4
 801938e:	4423      	add	r3, r4
 8019390:	f8c8 3000 	str.w	r3, [r8]
 8019394:	682b      	ldr	r3, [r5, #0]
 8019396:	441c      	add	r4, r3
 8019398:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801939c:	603b      	str	r3, [r7, #0]
 801939e:	f000 f8e5 	bl	801956c <uxr_seq_num_cmp>
 80193a2:	2800      	cmp	r0, #0
 80193a4:	dd02      	ble.n	80193ac <uxr_prepare_next_reliable_buffer_to_send+0x50>
 80193a6:	2000      	movs	r0, #0
 80193a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193ac:	683a      	ldr	r2, [r7, #0]
 80193ae:	7b2b      	ldrb	r3, [r5, #12]
 80193b0:	429a      	cmp	r2, r3
 80193b2:	d9f8      	bls.n	80193a6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80193b4:	8a69      	ldrh	r1, [r5, #18]
 80193b6:	8a28      	ldrh	r0, [r5, #16]
 80193b8:	f000 f8d4 	bl	8019564 <uxr_seq_num_sub>
 80193bc:	892b      	ldrh	r3, [r5, #8]
 80193be:	4283      	cmp	r3, r0
 80193c0:	d0f1      	beq.n	80193a6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80193c2:	8830      	ldrh	r0, [r6, #0]
 80193c4:	89eb      	ldrh	r3, [r5, #14]
 80193c6:	8228      	strh	r0, [r5, #16]
 80193c8:	4298      	cmp	r0, r3
 80193ca:	d002      	beq.n	80193d2 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 80193cc:	2001      	movs	r0, #1
 80193ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193d2:	2101      	movs	r1, #1
 80193d4:	f000 f8c2 	bl	801955c <uxr_seq_num_add>
 80193d8:	81e8      	strh	r0, [r5, #14]
 80193da:	2001      	movs	r0, #1
 80193dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080193e0 <uxr_update_output_stream_heartbeat_timestamp>:
 80193e0:	b5d0      	push	{r4, r6, r7, lr}
 80193e2:	8a01      	ldrh	r1, [r0, #16]
 80193e4:	4604      	mov	r4, r0
 80193e6:	8a40      	ldrh	r0, [r0, #18]
 80193e8:	4616      	mov	r6, r2
 80193ea:	461f      	mov	r7, r3
 80193ec:	f000 f8be 	bl	801956c <uxr_seq_num_cmp>
 80193f0:	2800      	cmp	r0, #0
 80193f2:	db07      	blt.n	8019404 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80193f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80193f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80193fc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8019400:	2000      	movs	r0, #0
 8019402:	bdd0      	pop	{r4, r6, r7, pc}
 8019404:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019408:	b948      	cbnz	r0, 801941e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 801940a:	2301      	movs	r3, #1
 801940c:	f884 3020 	strb.w	r3, [r4, #32]
 8019410:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8019414:	f147 0200 	adc.w	r2, r7, #0
 8019418:	e9c4 3206 	strd	r3, r2, [r4, #24]
 801941c:	bdd0      	pop	{r4, r6, r7, pc}
 801941e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019422:	4296      	cmp	r6, r2
 8019424:	eb77 0303 	sbcs.w	r3, r7, r3
 8019428:	bfa5      	ittet	ge
 801942a:	3001      	addge	r0, #1
 801942c:	f884 0020 	strbge.w	r0, [r4, #32]
 8019430:	2000      	movlt	r0, #0
 8019432:	2001      	movge	r0, #1
 8019434:	e7ec      	b.n	8019410 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8019436:	bf00      	nop

08019438 <uxr_begin_output_nack_buffer_it>:
 8019438:	8a40      	ldrh	r0, [r0, #18]
 801943a:	4770      	bx	lr

0801943c <uxr_next_reliable_nack_buffer_to_send>:
 801943c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019440:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8019444:	f1b9 0f00 	cmp.w	r9, #0
 8019448:	d011      	beq.n	801946e <uxr_next_reliable_nack_buffer_to_send+0x32>
 801944a:	4605      	mov	r5, r0
 801944c:	8818      	ldrh	r0, [r3, #0]
 801944e:	460f      	mov	r7, r1
 8019450:	4690      	mov	r8, r2
 8019452:	461e      	mov	r6, r3
 8019454:	2101      	movs	r1, #1
 8019456:	f000 f881 	bl	801955c <uxr_seq_num_add>
 801945a:	8030      	strh	r0, [r6, #0]
 801945c:	8a29      	ldrh	r1, [r5, #16]
 801945e:	f000 f885 	bl	801956c <uxr_seq_num_cmp>
 8019462:	2800      	cmp	r0, #0
 8019464:	dd06      	ble.n	8019474 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8019466:	f04f 0900 	mov.w	r9, #0
 801946a:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 801946e:	4648      	mov	r0, r9
 8019470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019474:	892a      	ldrh	r2, [r5, #8]
 8019476:	8830      	ldrh	r0, [r6, #0]
 8019478:	fbb0 f4f2 	udiv	r4, r0, r2
 801947c:	fb02 0414 	mls	r4, r2, r4, r0
 8019480:	b2a4      	uxth	r4, r4
 8019482:	686b      	ldr	r3, [r5, #4]
 8019484:	fbb3 f2f2 	udiv	r2, r3, r2
 8019488:	682b      	ldr	r3, [r5, #0]
 801948a:	fb04 f402 	mul.w	r4, r4, r2
 801948e:	3404      	adds	r4, #4
 8019490:	4423      	add	r3, r4
 8019492:	603b      	str	r3, [r7, #0]
 8019494:	682b      	ldr	r3, [r5, #0]
 8019496:	441c      	add	r4, r3
 8019498:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801949c:	f8c8 3000 	str.w	r3, [r8]
 80194a0:	7b2a      	ldrb	r2, [r5, #12]
 80194a2:	429a      	cmp	r2, r3
 80194a4:	d0d6      	beq.n	8019454 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80194a6:	4648      	mov	r0, r9
 80194a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080194ac <uxr_process_acknack>:
 80194ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194ae:	4604      	mov	r4, r0
 80194b0:	460e      	mov	r6, r1
 80194b2:	4610      	mov	r0, r2
 80194b4:	2101      	movs	r1, #1
 80194b6:	f000 f855 	bl	8019564 <uxr_seq_num_sub>
 80194ba:	8a61      	ldrh	r1, [r4, #18]
 80194bc:	f000 f852 	bl	8019564 <uxr_seq_num_sub>
 80194c0:	b1c0      	cbz	r0, 80194f4 <uxr_process_acknack+0x48>
 80194c2:	4605      	mov	r5, r0
 80194c4:	2700      	movs	r7, #0
 80194c6:	2101      	movs	r1, #1
 80194c8:	8a60      	ldrh	r0, [r4, #18]
 80194ca:	f000 f847 	bl	801955c <uxr_seq_num_add>
 80194ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80194d2:	fbb0 f3fc 	udiv	r3, r0, ip
 80194d6:	e9d4 2100 	ldrd	r2, r1, [r4]
 80194da:	fb0c 0313 	mls	r3, ip, r3, r0
 80194de:	b29b      	uxth	r3, r3
 80194e0:	fbb1 f1fc 	udiv	r1, r1, ip
 80194e4:	3701      	adds	r7, #1
 80194e6:	fb03 f301 	mul.w	r3, r3, r1
 80194ea:	42bd      	cmp	r5, r7
 80194ec:	7b21      	ldrb	r1, [r4, #12]
 80194ee:	8260      	strh	r0, [r4, #18]
 80194f0:	50d1      	str	r1, [r2, r3]
 80194f2:	d1e8      	bne.n	80194c6 <uxr_process_acknack+0x1a>
 80194f4:	3e00      	subs	r6, #0
 80194f6:	f04f 0300 	mov.w	r3, #0
 80194fa:	bf18      	it	ne
 80194fc:	2601      	movne	r6, #1
 80194fe:	f884 3020 	strb.w	r3, [r4, #32]
 8019502:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8019506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019508 <uxr_is_output_up_to_date>:
 8019508:	8a01      	ldrh	r1, [r0, #16]
 801950a:	8a40      	ldrh	r0, [r0, #18]
 801950c:	b508      	push	{r3, lr}
 801950e:	f000 f82d 	bl	801956c <uxr_seq_num_cmp>
 8019512:	fab0 f080 	clz	r0, r0
 8019516:	0940      	lsrs	r0, r0, #5
 8019518:	bd08      	pop	{r3, pc}
 801951a:	bf00      	nop

0801951c <get_available_free_slots>:
 801951c:	8901      	ldrh	r1, [r0, #8]
 801951e:	b1d9      	cbz	r1, 8019558 <get_available_free_slots+0x3c>
 8019520:	b4f0      	push	{r4, r5, r6, r7}
 8019522:	2400      	movs	r4, #0
 8019524:	6845      	ldr	r5, [r0, #4]
 8019526:	6807      	ldr	r7, [r0, #0]
 8019528:	7b06      	ldrb	r6, [r0, #12]
 801952a:	fbb5 f5f1 	udiv	r5, r5, r1
 801952e:	4620      	mov	r0, r4
 8019530:	4622      	mov	r2, r4
 8019532:	fbb2 f3f1 	udiv	r3, r2, r1
 8019536:	fb01 2313 	mls	r3, r1, r3, r2
 801953a:	b29b      	uxth	r3, r3
 801953c:	fb05 7303 	mla	r3, r5, r3, r7
 8019540:	3401      	adds	r4, #1
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	429e      	cmp	r6, r3
 8019546:	bf08      	it	eq
 8019548:	3001      	addeq	r0, #1
 801954a:	b2a2      	uxth	r2, r4
 801954c:	bf08      	it	eq
 801954e:	b280      	uxtheq	r0, r0
 8019550:	428a      	cmp	r2, r1
 8019552:	d3ee      	bcc.n	8019532 <get_available_free_slots+0x16>
 8019554:	bcf0      	pop	{r4, r5, r6, r7}
 8019556:	4770      	bx	lr
 8019558:	4608      	mov	r0, r1
 801955a:	4770      	bx	lr

0801955c <uxr_seq_num_add>:
 801955c:	4408      	add	r0, r1
 801955e:	b280      	uxth	r0, r0
 8019560:	4770      	bx	lr
 8019562:	bf00      	nop

08019564 <uxr_seq_num_sub>:
 8019564:	1a40      	subs	r0, r0, r1
 8019566:	b280      	uxth	r0, r0
 8019568:	4770      	bx	lr
 801956a:	bf00      	nop

0801956c <uxr_seq_num_cmp>:
 801956c:	4288      	cmp	r0, r1
 801956e:	d011      	beq.n	8019594 <uxr_seq_num_cmp+0x28>
 8019570:	d309      	bcc.n	8019586 <uxr_seq_num_cmp+0x1a>
 8019572:	4288      	cmp	r0, r1
 8019574:	d910      	bls.n	8019598 <uxr_seq_num_cmp+0x2c>
 8019576:	1a40      	subs	r0, r0, r1
 8019578:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801957c:	bfd4      	ite	le
 801957e:	2001      	movle	r0, #1
 8019580:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8019584:	4770      	bx	lr
 8019586:	1a0b      	subs	r3, r1, r0
 8019588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801958c:	daf1      	bge.n	8019572 <uxr_seq_num_cmp+0x6>
 801958e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019592:	4770      	bx	lr
 8019594:	2000      	movs	r0, #0
 8019596:	4770      	bx	lr
 8019598:	2001      	movs	r0, #1
 801959a:	4770      	bx	lr

0801959c <rcl_get_default_domain_id>:
 801959c:	b530      	push	{r4, r5, lr}
 801959e:	b083      	sub	sp, #12
 80195a0:	2300      	movs	r3, #0
 80195a2:	9300      	str	r3, [sp, #0]
 80195a4:	b1d0      	cbz	r0, 80195dc <rcl_get_default_domain_id+0x40>
 80195a6:	4604      	mov	r4, r0
 80195a8:	4669      	mov	r1, sp
 80195aa:	4815      	ldr	r0, [pc, #84]	; (8019600 <rcl_get_default_domain_id+0x64>)
 80195ac:	f7fd faf0 	bl	8016b90 <rcutils_get_env>
 80195b0:	4602      	mov	r2, r0
 80195b2:	b110      	cbz	r0, 80195ba <rcl_get_default_domain_id+0x1e>
 80195b4:	2001      	movs	r0, #1
 80195b6:	b003      	add	sp, #12
 80195b8:	bd30      	pop	{r4, r5, pc}
 80195ba:	9b00      	ldr	r3, [sp, #0]
 80195bc:	b18b      	cbz	r3, 80195e2 <rcl_get_default_domain_id+0x46>
 80195be:	7818      	ldrb	r0, [r3, #0]
 80195c0:	2800      	cmp	r0, #0
 80195c2:	d0f8      	beq.n	80195b6 <rcl_get_default_domain_id+0x1a>
 80195c4:	4618      	mov	r0, r3
 80195c6:	a901      	add	r1, sp, #4
 80195c8:	9201      	str	r2, [sp, #4]
 80195ca:	f002 fbf1 	bl	801bdb0 <strtoul>
 80195ce:	4605      	mov	r5, r0
 80195d0:	b150      	cbz	r0, 80195e8 <rcl_get_default_domain_id+0x4c>
 80195d2:	1c43      	adds	r3, r0, #1
 80195d4:	d00d      	beq.n	80195f2 <rcl_get_default_domain_id+0x56>
 80195d6:	6025      	str	r5, [r4, #0]
 80195d8:	2000      	movs	r0, #0
 80195da:	e7ec      	b.n	80195b6 <rcl_get_default_domain_id+0x1a>
 80195dc:	200b      	movs	r0, #11
 80195de:	b003      	add	sp, #12
 80195e0:	bd30      	pop	{r4, r5, pc}
 80195e2:	4618      	mov	r0, r3
 80195e4:	b003      	add	sp, #12
 80195e6:	bd30      	pop	{r4, r5, pc}
 80195e8:	9b01      	ldr	r3, [sp, #4]
 80195ea:	781b      	ldrb	r3, [r3, #0]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d0f2      	beq.n	80195d6 <rcl_get_default_domain_id+0x3a>
 80195f0:	e7e0      	b.n	80195b4 <rcl_get_default_domain_id+0x18>
 80195f2:	f000 f8e3 	bl	80197bc <__errno>
 80195f6:	6803      	ldr	r3, [r0, #0]
 80195f8:	2b22      	cmp	r3, #34	; 0x22
 80195fa:	d1ec      	bne.n	80195d6 <rcl_get_default_domain_id+0x3a>
 80195fc:	e7da      	b.n	80195b4 <rcl_get_default_domain_id+0x18>
 80195fe:	bf00      	nop
 8019600:	0801f318 	.word	0x0801f318

08019604 <rcl_get_zero_initialized_guard_condition>:
 8019604:	4a03      	ldr	r2, [pc, #12]	; (8019614 <rcl_get_zero_initialized_guard_condition+0x10>)
 8019606:	4603      	mov	r3, r0
 8019608:	e892 0003 	ldmia.w	r2, {r0, r1}
 801960c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019610:	4618      	mov	r0, r3
 8019612:	4770      	bx	lr
 8019614:	0801f328 	.word	0x0801f328

08019618 <rcl_guard_condition_init_from_rmw>:
 8019618:	b082      	sub	sp, #8
 801961a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801961e:	b086      	sub	sp, #24
 8019620:	ac0c      	add	r4, sp, #48	; 0x30
 8019622:	4684      	mov	ip, r0
 8019624:	f844 3f04 	str.w	r3, [r4, #4]!
 8019628:	460f      	mov	r7, r1
 801962a:	4690      	mov	r8, r2
 801962c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801962e:	ad01      	add	r5, sp, #4
 8019630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019632:	6823      	ldr	r3, [r4, #0]
 8019634:	602b      	str	r3, [r5, #0]
 8019636:	a801      	add	r0, sp, #4
 8019638:	4664      	mov	r4, ip
 801963a:	f7f5 fe77 	bl	800f32c <rcutils_allocator_is_valid>
 801963e:	b328      	cbz	r0, 801968c <rcl_guard_condition_init_from_rmw+0x74>
 8019640:	b324      	cbz	r4, 801968c <rcl_guard_condition_init_from_rmw+0x74>
 8019642:	6866      	ldr	r6, [r4, #4]
 8019644:	b9e6      	cbnz	r6, 8019680 <rcl_guard_condition_init_from_rmw+0x68>
 8019646:	f1b8 0f00 	cmp.w	r8, #0
 801964a:	d01f      	beq.n	801968c <rcl_guard_condition_init_from_rmw+0x74>
 801964c:	4640      	mov	r0, r8
 801964e:	f7fb f95b 	bl	8014908 <rcl_context_is_valid>
 8019652:	b308      	cbz	r0, 8019698 <rcl_guard_condition_init_from_rmw+0x80>
 8019654:	9b01      	ldr	r3, [sp, #4]
 8019656:	9905      	ldr	r1, [sp, #20]
 8019658:	201c      	movs	r0, #28
 801965a:	4798      	blx	r3
 801965c:	4605      	mov	r5, r0
 801965e:	6060      	str	r0, [r4, #4]
 8019660:	b340      	cbz	r0, 80196b4 <rcl_guard_condition_init_from_rmw+0x9c>
 8019662:	b1df      	cbz	r7, 801969c <rcl_guard_condition_init_from_rmw+0x84>
 8019664:	6007      	str	r7, [r0, #0]
 8019666:	7106      	strb	r6, [r0, #4]
 8019668:	ac01      	add	r4, sp, #4
 801966a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801966c:	3508      	adds	r5, #8
 801966e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019670:	6823      	ldr	r3, [r4, #0]
 8019672:	602b      	str	r3, [r5, #0]
 8019674:	2000      	movs	r0, #0
 8019676:	b006      	add	sp, #24
 8019678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801967c:	b002      	add	sp, #8
 801967e:	4770      	bx	lr
 8019680:	2064      	movs	r0, #100	; 0x64
 8019682:	b006      	add	sp, #24
 8019684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019688:	b002      	add	sp, #8
 801968a:	4770      	bx	lr
 801968c:	200b      	movs	r0, #11
 801968e:	b006      	add	sp, #24
 8019690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019694:	b002      	add	sp, #8
 8019696:	4770      	bx	lr
 8019698:	2065      	movs	r0, #101	; 0x65
 801969a:	e7f2      	b.n	8019682 <rcl_guard_condition_init_from_rmw+0x6a>
 801969c:	f8d8 0000 	ldr.w	r0, [r8]
 80196a0:	3028      	adds	r0, #40	; 0x28
 80196a2:	f000 f857 	bl	8019754 <rmw_create_guard_condition>
 80196a6:	6028      	str	r0, [r5, #0]
 80196a8:	6865      	ldr	r5, [r4, #4]
 80196aa:	682e      	ldr	r6, [r5, #0]
 80196ac:	b126      	cbz	r6, 80196b8 <rcl_guard_condition_init_from_rmw+0xa0>
 80196ae:	2301      	movs	r3, #1
 80196b0:	712b      	strb	r3, [r5, #4]
 80196b2:	e7d9      	b.n	8019668 <rcl_guard_condition_init_from_rmw+0x50>
 80196b4:	200a      	movs	r0, #10
 80196b6:	e7e4      	b.n	8019682 <rcl_guard_condition_init_from_rmw+0x6a>
 80196b8:	4628      	mov	r0, r5
 80196ba:	9b02      	ldr	r3, [sp, #8]
 80196bc:	9905      	ldr	r1, [sp, #20]
 80196be:	4798      	blx	r3
 80196c0:	6066      	str	r6, [r4, #4]
 80196c2:	2001      	movs	r0, #1
 80196c4:	e7dd      	b.n	8019682 <rcl_guard_condition_init_from_rmw+0x6a>
 80196c6:	bf00      	nop

080196c8 <rcl_guard_condition_fini>:
 80196c8:	b570      	push	{r4, r5, r6, lr}
 80196ca:	b082      	sub	sp, #8
 80196cc:	b1f0      	cbz	r0, 801970c <rcl_guard_condition_fini+0x44>
 80196ce:	4604      	mov	r4, r0
 80196d0:	6840      	ldr	r0, [r0, #4]
 80196d2:	b158      	cbz	r0, 80196ec <rcl_guard_condition_fini+0x24>
 80196d4:	6803      	ldr	r3, [r0, #0]
 80196d6:	68c6      	ldr	r6, [r0, #12]
 80196d8:	6981      	ldr	r1, [r0, #24]
 80196da:	b15b      	cbz	r3, 80196f4 <rcl_guard_condition_fini+0x2c>
 80196dc:	7905      	ldrb	r5, [r0, #4]
 80196de:	b95d      	cbnz	r5, 80196f8 <rcl_guard_condition_fini+0x30>
 80196e0:	47b0      	blx	r6
 80196e2:	2300      	movs	r3, #0
 80196e4:	4628      	mov	r0, r5
 80196e6:	6063      	str	r3, [r4, #4]
 80196e8:	b002      	add	sp, #8
 80196ea:	bd70      	pop	{r4, r5, r6, pc}
 80196ec:	4605      	mov	r5, r0
 80196ee:	4628      	mov	r0, r5
 80196f0:	b002      	add	sp, #8
 80196f2:	bd70      	pop	{r4, r5, r6, pc}
 80196f4:	461d      	mov	r5, r3
 80196f6:	e7f3      	b.n	80196e0 <rcl_guard_condition_fini+0x18>
 80196f8:	4618      	mov	r0, r3
 80196fa:	9101      	str	r1, [sp, #4]
 80196fc:	f000 f83e 	bl	801977c <rmw_destroy_guard_condition>
 8019700:	1e05      	subs	r5, r0, #0
 8019702:	9901      	ldr	r1, [sp, #4]
 8019704:	6860      	ldr	r0, [r4, #4]
 8019706:	bf18      	it	ne
 8019708:	2501      	movne	r5, #1
 801970a:	e7e9      	b.n	80196e0 <rcl_guard_condition_fini+0x18>
 801970c:	250b      	movs	r5, #11
 801970e:	4628      	mov	r0, r5
 8019710:	b002      	add	sp, #8
 8019712:	bd70      	pop	{r4, r5, r6, pc}

08019714 <rcl_guard_condition_get_default_options>:
 8019714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019716:	b087      	sub	sp, #28
 8019718:	4607      	mov	r7, r0
 801971a:	466c      	mov	r4, sp
 801971c:	4668      	mov	r0, sp
 801971e:	f7f5 fdf7 	bl	800f310 <rcutils_get_default_allocator>
 8019722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019724:	4d07      	ldr	r5, [pc, #28]	; (8019744 <rcl_guard_condition_get_default_options+0x30>)
 8019726:	f8d4 c000 	ldr.w	ip, [r4]
 801972a:	462e      	mov	r6, r5
 801972c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801972e:	462c      	mov	r4, r5
 8019730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019732:	463c      	mov	r4, r7
 8019734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019736:	4638      	mov	r0, r7
 8019738:	f8c6 c000 	str.w	ip, [r6]
 801973c:	f8c4 c000 	str.w	ip, [r4]
 8019740:	b007      	add	sp, #28
 8019742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019744:	20009f68 	.word	0x20009f68

08019748 <rcl_guard_condition_get_rmw_handle>:
 8019748:	b110      	cbz	r0, 8019750 <rcl_guard_condition_get_rmw_handle+0x8>
 801974a:	6840      	ldr	r0, [r0, #4]
 801974c:	b100      	cbz	r0, 8019750 <rcl_guard_condition_get_rmw_handle+0x8>
 801974e:	6800      	ldr	r0, [r0, #0]
 8019750:	4770      	bx	lr
 8019752:	bf00      	nop

08019754 <rmw_create_guard_condition>:
 8019754:	b538      	push	{r3, r4, r5, lr}
 8019756:	4605      	mov	r5, r0
 8019758:	4807      	ldr	r0, [pc, #28]	; (8019778 <rmw_create_guard_condition+0x24>)
 801975a:	f7fd fd13 	bl	8017184 <get_memory>
 801975e:	b148      	cbz	r0, 8019774 <rmw_create_guard_condition+0x20>
 8019760:	68c4      	ldr	r4, [r0, #12]
 8019762:	2300      	movs	r3, #0
 8019764:	61e5      	str	r5, [r4, #28]
 8019766:	7423      	strb	r3, [r4, #16]
 8019768:	f7fd fd74 	bl	8017254 <rmw_get_implementation_identifier>
 801976c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019770:	f104 0014 	add.w	r0, r4, #20
 8019774:	bd38      	pop	{r3, r4, r5, pc}
 8019776:	bf00      	nop
 8019778:	2000d150 	.word	0x2000d150

0801977c <rmw_destroy_guard_condition>:
 801977c:	b508      	push	{r3, lr}
 801977e:	4b08      	ldr	r3, [pc, #32]	; (80197a0 <rmw_destroy_guard_condition+0x24>)
 8019780:	6819      	ldr	r1, [r3, #0]
 8019782:	b911      	cbnz	r1, 801978a <rmw_destroy_guard_condition+0xe>
 8019784:	e00a      	b.n	801979c <rmw_destroy_guard_condition+0x20>
 8019786:	6889      	ldr	r1, [r1, #8]
 8019788:	b141      	cbz	r1, 801979c <rmw_destroy_guard_condition+0x20>
 801978a:	68cb      	ldr	r3, [r1, #12]
 801978c:	3314      	adds	r3, #20
 801978e:	4298      	cmp	r0, r3
 8019790:	d1f9      	bne.n	8019786 <rmw_destroy_guard_condition+0xa>
 8019792:	4803      	ldr	r0, [pc, #12]	; (80197a0 <rmw_destroy_guard_condition+0x24>)
 8019794:	f7fd fd06 	bl	80171a4 <put_memory>
 8019798:	2000      	movs	r0, #0
 801979a:	bd08      	pop	{r3, pc}
 801979c:	2001      	movs	r0, #1
 801979e:	bd08      	pop	{r3, pc}
 80197a0:	2000d150 	.word	0x2000d150

080197a4 <atoi>:
 80197a4:	220a      	movs	r2, #10
 80197a6:	2100      	movs	r1, #0
 80197a8:	f002 ba86 	b.w	801bcb8 <strtol>

080197ac <calloc>:
 80197ac:	4b02      	ldr	r3, [pc, #8]	; (80197b8 <calloc+0xc>)
 80197ae:	460a      	mov	r2, r1
 80197b0:	4601      	mov	r1, r0
 80197b2:	6818      	ldr	r0, [r3, #0]
 80197b4:	f000 b9ae 	b.w	8019b14 <_calloc_r>
 80197b8:	2000008c 	.word	0x2000008c

080197bc <__errno>:
 80197bc:	4b01      	ldr	r3, [pc, #4]	; (80197c4 <__errno+0x8>)
 80197be:	6818      	ldr	r0, [r3, #0]
 80197c0:	4770      	bx	lr
 80197c2:	bf00      	nop
 80197c4:	2000008c 	.word	0x2000008c

080197c8 <std>:
 80197c8:	2300      	movs	r3, #0
 80197ca:	b510      	push	{r4, lr}
 80197cc:	4604      	mov	r4, r0
 80197ce:	e9c0 3300 	strd	r3, r3, [r0]
 80197d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80197d6:	6083      	str	r3, [r0, #8]
 80197d8:	8181      	strh	r1, [r0, #12]
 80197da:	6643      	str	r3, [r0, #100]	; 0x64
 80197dc:	81c2      	strh	r2, [r0, #14]
 80197de:	6183      	str	r3, [r0, #24]
 80197e0:	4619      	mov	r1, r3
 80197e2:	2208      	movs	r2, #8
 80197e4:	305c      	adds	r0, #92	; 0x5c
 80197e6:	f000 f98d 	bl	8019b04 <memset>
 80197ea:	4b05      	ldr	r3, [pc, #20]	; (8019800 <std+0x38>)
 80197ec:	6263      	str	r3, [r4, #36]	; 0x24
 80197ee:	4b05      	ldr	r3, [pc, #20]	; (8019804 <std+0x3c>)
 80197f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80197f2:	4b05      	ldr	r3, [pc, #20]	; (8019808 <std+0x40>)
 80197f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80197f6:	4b05      	ldr	r3, [pc, #20]	; (801980c <std+0x44>)
 80197f8:	6224      	str	r4, [r4, #32]
 80197fa:	6323      	str	r3, [r4, #48]	; 0x30
 80197fc:	bd10      	pop	{r4, pc}
 80197fe:	bf00      	nop
 8019800:	0801ada1 	.word	0x0801ada1
 8019804:	0801adc3 	.word	0x0801adc3
 8019808:	0801adfb 	.word	0x0801adfb
 801980c:	0801ae1f 	.word	0x0801ae1f

08019810 <_cleanup_r>:
 8019810:	4901      	ldr	r1, [pc, #4]	; (8019818 <_cleanup_r+0x8>)
 8019812:	f000 b8af 	b.w	8019974 <_fwalk_reent>
 8019816:	bf00      	nop
 8019818:	0801ce51 	.word	0x0801ce51

0801981c <__sfmoreglue>:
 801981c:	b570      	push	{r4, r5, r6, lr}
 801981e:	2268      	movs	r2, #104	; 0x68
 8019820:	1e4d      	subs	r5, r1, #1
 8019822:	4355      	muls	r5, r2
 8019824:	460e      	mov	r6, r1
 8019826:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801982a:	f000 f9f5 	bl	8019c18 <_malloc_r>
 801982e:	4604      	mov	r4, r0
 8019830:	b140      	cbz	r0, 8019844 <__sfmoreglue+0x28>
 8019832:	2100      	movs	r1, #0
 8019834:	e9c0 1600 	strd	r1, r6, [r0]
 8019838:	300c      	adds	r0, #12
 801983a:	60a0      	str	r0, [r4, #8]
 801983c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019840:	f000 f960 	bl	8019b04 <memset>
 8019844:	4620      	mov	r0, r4
 8019846:	bd70      	pop	{r4, r5, r6, pc}

08019848 <__sfp_lock_acquire>:
 8019848:	4801      	ldr	r0, [pc, #4]	; (8019850 <__sfp_lock_acquire+0x8>)
 801984a:	f000 b920 	b.w	8019a8e <__retarget_lock_acquire_recursive>
 801984e:	bf00      	nop
 8019850:	20009f7e 	.word	0x20009f7e

08019854 <__sfp_lock_release>:
 8019854:	4801      	ldr	r0, [pc, #4]	; (801985c <__sfp_lock_release+0x8>)
 8019856:	f000 b91b 	b.w	8019a90 <__retarget_lock_release_recursive>
 801985a:	bf00      	nop
 801985c:	20009f7e 	.word	0x20009f7e

08019860 <__sinit_lock_acquire>:
 8019860:	4801      	ldr	r0, [pc, #4]	; (8019868 <__sinit_lock_acquire+0x8>)
 8019862:	f000 b914 	b.w	8019a8e <__retarget_lock_acquire_recursive>
 8019866:	bf00      	nop
 8019868:	20009f7f 	.word	0x20009f7f

0801986c <__sinit_lock_release>:
 801986c:	4801      	ldr	r0, [pc, #4]	; (8019874 <__sinit_lock_release+0x8>)
 801986e:	f000 b90f 	b.w	8019a90 <__retarget_lock_release_recursive>
 8019872:	bf00      	nop
 8019874:	20009f7f 	.word	0x20009f7f

08019878 <__sinit>:
 8019878:	b510      	push	{r4, lr}
 801987a:	4604      	mov	r4, r0
 801987c:	f7ff fff0 	bl	8019860 <__sinit_lock_acquire>
 8019880:	69a3      	ldr	r3, [r4, #24]
 8019882:	b11b      	cbz	r3, 801988c <__sinit+0x14>
 8019884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019888:	f7ff bff0 	b.w	801986c <__sinit_lock_release>
 801988c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019890:	6523      	str	r3, [r4, #80]	; 0x50
 8019892:	4b13      	ldr	r3, [pc, #76]	; (80198e0 <__sinit+0x68>)
 8019894:	4a13      	ldr	r2, [pc, #76]	; (80198e4 <__sinit+0x6c>)
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	62a2      	str	r2, [r4, #40]	; 0x28
 801989a:	42a3      	cmp	r3, r4
 801989c:	bf04      	itt	eq
 801989e:	2301      	moveq	r3, #1
 80198a0:	61a3      	streq	r3, [r4, #24]
 80198a2:	4620      	mov	r0, r4
 80198a4:	f000 f820 	bl	80198e8 <__sfp>
 80198a8:	6060      	str	r0, [r4, #4]
 80198aa:	4620      	mov	r0, r4
 80198ac:	f000 f81c 	bl	80198e8 <__sfp>
 80198b0:	60a0      	str	r0, [r4, #8]
 80198b2:	4620      	mov	r0, r4
 80198b4:	f000 f818 	bl	80198e8 <__sfp>
 80198b8:	2200      	movs	r2, #0
 80198ba:	60e0      	str	r0, [r4, #12]
 80198bc:	2104      	movs	r1, #4
 80198be:	6860      	ldr	r0, [r4, #4]
 80198c0:	f7ff ff82 	bl	80197c8 <std>
 80198c4:	68a0      	ldr	r0, [r4, #8]
 80198c6:	2201      	movs	r2, #1
 80198c8:	2109      	movs	r1, #9
 80198ca:	f7ff ff7d 	bl	80197c8 <std>
 80198ce:	68e0      	ldr	r0, [r4, #12]
 80198d0:	2202      	movs	r2, #2
 80198d2:	2112      	movs	r1, #18
 80198d4:	f7ff ff78 	bl	80197c8 <std>
 80198d8:	2301      	movs	r3, #1
 80198da:	61a3      	str	r3, [r4, #24]
 80198dc:	e7d2      	b.n	8019884 <__sinit+0xc>
 80198de:	bf00      	nop
 80198e0:	0801f494 	.word	0x0801f494
 80198e4:	08019811 	.word	0x08019811

080198e8 <__sfp>:
 80198e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ea:	4607      	mov	r7, r0
 80198ec:	f7ff ffac 	bl	8019848 <__sfp_lock_acquire>
 80198f0:	4b1e      	ldr	r3, [pc, #120]	; (801996c <__sfp+0x84>)
 80198f2:	681e      	ldr	r6, [r3, #0]
 80198f4:	69b3      	ldr	r3, [r6, #24]
 80198f6:	b913      	cbnz	r3, 80198fe <__sfp+0x16>
 80198f8:	4630      	mov	r0, r6
 80198fa:	f7ff ffbd 	bl	8019878 <__sinit>
 80198fe:	3648      	adds	r6, #72	; 0x48
 8019900:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019904:	3b01      	subs	r3, #1
 8019906:	d503      	bpl.n	8019910 <__sfp+0x28>
 8019908:	6833      	ldr	r3, [r6, #0]
 801990a:	b30b      	cbz	r3, 8019950 <__sfp+0x68>
 801990c:	6836      	ldr	r6, [r6, #0]
 801990e:	e7f7      	b.n	8019900 <__sfp+0x18>
 8019910:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019914:	b9d5      	cbnz	r5, 801994c <__sfp+0x64>
 8019916:	4b16      	ldr	r3, [pc, #88]	; (8019970 <__sfp+0x88>)
 8019918:	60e3      	str	r3, [r4, #12]
 801991a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801991e:	6665      	str	r5, [r4, #100]	; 0x64
 8019920:	f000 f8b4 	bl	8019a8c <__retarget_lock_init_recursive>
 8019924:	f7ff ff96 	bl	8019854 <__sfp_lock_release>
 8019928:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801992c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019930:	6025      	str	r5, [r4, #0]
 8019932:	61a5      	str	r5, [r4, #24]
 8019934:	2208      	movs	r2, #8
 8019936:	4629      	mov	r1, r5
 8019938:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801993c:	f000 f8e2 	bl	8019b04 <memset>
 8019940:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019944:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019948:	4620      	mov	r0, r4
 801994a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801994c:	3468      	adds	r4, #104	; 0x68
 801994e:	e7d9      	b.n	8019904 <__sfp+0x1c>
 8019950:	2104      	movs	r1, #4
 8019952:	4638      	mov	r0, r7
 8019954:	f7ff ff62 	bl	801981c <__sfmoreglue>
 8019958:	4604      	mov	r4, r0
 801995a:	6030      	str	r0, [r6, #0]
 801995c:	2800      	cmp	r0, #0
 801995e:	d1d5      	bne.n	801990c <__sfp+0x24>
 8019960:	f7ff ff78 	bl	8019854 <__sfp_lock_release>
 8019964:	230c      	movs	r3, #12
 8019966:	603b      	str	r3, [r7, #0]
 8019968:	e7ee      	b.n	8019948 <__sfp+0x60>
 801996a:	bf00      	nop
 801996c:	0801f494 	.word	0x0801f494
 8019970:	ffff0001 	.word	0xffff0001

08019974 <_fwalk_reent>:
 8019974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019978:	4606      	mov	r6, r0
 801997a:	4688      	mov	r8, r1
 801997c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019980:	2700      	movs	r7, #0
 8019982:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019986:	f1b9 0901 	subs.w	r9, r9, #1
 801998a:	d505      	bpl.n	8019998 <_fwalk_reent+0x24>
 801998c:	6824      	ldr	r4, [r4, #0]
 801998e:	2c00      	cmp	r4, #0
 8019990:	d1f7      	bne.n	8019982 <_fwalk_reent+0xe>
 8019992:	4638      	mov	r0, r7
 8019994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019998:	89ab      	ldrh	r3, [r5, #12]
 801999a:	2b01      	cmp	r3, #1
 801999c:	d907      	bls.n	80199ae <_fwalk_reent+0x3a>
 801999e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80199a2:	3301      	adds	r3, #1
 80199a4:	d003      	beq.n	80199ae <_fwalk_reent+0x3a>
 80199a6:	4629      	mov	r1, r5
 80199a8:	4630      	mov	r0, r6
 80199aa:	47c0      	blx	r8
 80199ac:	4307      	orrs	r7, r0
 80199ae:	3568      	adds	r5, #104	; 0x68
 80199b0:	e7e9      	b.n	8019986 <_fwalk_reent+0x12>
	...

080199b4 <getenv>:
 80199b4:	b507      	push	{r0, r1, r2, lr}
 80199b6:	4b04      	ldr	r3, [pc, #16]	; (80199c8 <getenv+0x14>)
 80199b8:	4601      	mov	r1, r0
 80199ba:	aa01      	add	r2, sp, #4
 80199bc:	6818      	ldr	r0, [r3, #0]
 80199be:	f000 f805 	bl	80199cc <_findenv_r>
 80199c2:	b003      	add	sp, #12
 80199c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80199c8:	2000008c 	.word	0x2000008c

080199cc <_findenv_r>:
 80199cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199d0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019a40 <_findenv_r+0x74>
 80199d4:	4607      	mov	r7, r0
 80199d6:	4689      	mov	r9, r1
 80199d8:	4616      	mov	r6, r2
 80199da:	f003 f9a7 	bl	801cd2c <__env_lock>
 80199de:	f8da 4000 	ldr.w	r4, [sl]
 80199e2:	b134      	cbz	r4, 80199f2 <_findenv_r+0x26>
 80199e4:	464b      	mov	r3, r9
 80199e6:	4698      	mov	r8, r3
 80199e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80199ec:	b13a      	cbz	r2, 80199fe <_findenv_r+0x32>
 80199ee:	2a3d      	cmp	r2, #61	; 0x3d
 80199f0:	d1f9      	bne.n	80199e6 <_findenv_r+0x1a>
 80199f2:	4638      	mov	r0, r7
 80199f4:	f003 f9a0 	bl	801cd38 <__env_unlock>
 80199f8:	2000      	movs	r0, #0
 80199fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199fe:	eba8 0809 	sub.w	r8, r8, r9
 8019a02:	46a3      	mov	fp, r4
 8019a04:	f854 0b04 	ldr.w	r0, [r4], #4
 8019a08:	2800      	cmp	r0, #0
 8019a0a:	d0f2      	beq.n	80199f2 <_findenv_r+0x26>
 8019a0c:	4642      	mov	r2, r8
 8019a0e:	4649      	mov	r1, r9
 8019a10:	f001 fa1e 	bl	801ae50 <strncmp>
 8019a14:	2800      	cmp	r0, #0
 8019a16:	d1f4      	bne.n	8019a02 <_findenv_r+0x36>
 8019a18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019a1c:	eb03 0508 	add.w	r5, r3, r8
 8019a20:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019a24:	2b3d      	cmp	r3, #61	; 0x3d
 8019a26:	d1ec      	bne.n	8019a02 <_findenv_r+0x36>
 8019a28:	f8da 3000 	ldr.w	r3, [sl]
 8019a2c:	ebab 0303 	sub.w	r3, fp, r3
 8019a30:	109b      	asrs	r3, r3, #2
 8019a32:	4638      	mov	r0, r7
 8019a34:	6033      	str	r3, [r6, #0]
 8019a36:	f003 f97f 	bl	801cd38 <__env_unlock>
 8019a3a:	1c68      	adds	r0, r5, #1
 8019a3c:	e7dd      	b.n	80199fa <_findenv_r+0x2e>
 8019a3e:	bf00      	nop
 8019a40:	2000000c 	.word	0x2000000c

08019a44 <__libc_init_array>:
 8019a44:	b570      	push	{r4, r5, r6, lr}
 8019a46:	4d0d      	ldr	r5, [pc, #52]	; (8019a7c <__libc_init_array+0x38>)
 8019a48:	4c0d      	ldr	r4, [pc, #52]	; (8019a80 <__libc_init_array+0x3c>)
 8019a4a:	1b64      	subs	r4, r4, r5
 8019a4c:	10a4      	asrs	r4, r4, #2
 8019a4e:	2600      	movs	r6, #0
 8019a50:	42a6      	cmp	r6, r4
 8019a52:	d109      	bne.n	8019a68 <__libc_init_array+0x24>
 8019a54:	4d0b      	ldr	r5, [pc, #44]	; (8019a84 <__libc_init_array+0x40>)
 8019a56:	4c0c      	ldr	r4, [pc, #48]	; (8019a88 <__libc_init_array+0x44>)
 8019a58:	f004 fe94 	bl	801e784 <_init>
 8019a5c:	1b64      	subs	r4, r4, r5
 8019a5e:	10a4      	asrs	r4, r4, #2
 8019a60:	2600      	movs	r6, #0
 8019a62:	42a6      	cmp	r6, r4
 8019a64:	d105      	bne.n	8019a72 <__libc_init_array+0x2e>
 8019a66:	bd70      	pop	{r4, r5, r6, pc}
 8019a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a6c:	4798      	blx	r3
 8019a6e:	3601      	adds	r6, #1
 8019a70:	e7ee      	b.n	8019a50 <__libc_init_array+0xc>
 8019a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a76:	4798      	blx	r3
 8019a78:	3601      	adds	r6, #1
 8019a7a:	e7f2      	b.n	8019a62 <__libc_init_array+0x1e>
 8019a7c:	0801f898 	.word	0x0801f898
 8019a80:	0801f898 	.word	0x0801f898
 8019a84:	0801f898 	.word	0x0801f898
 8019a88:	0801f89c 	.word	0x0801f89c

08019a8c <__retarget_lock_init_recursive>:
 8019a8c:	4770      	bx	lr

08019a8e <__retarget_lock_acquire_recursive>:
 8019a8e:	4770      	bx	lr

08019a90 <__retarget_lock_release_recursive>:
 8019a90:	4770      	bx	lr
	...

08019a94 <malloc>:
 8019a94:	4b02      	ldr	r3, [pc, #8]	; (8019aa0 <malloc+0xc>)
 8019a96:	4601      	mov	r1, r0
 8019a98:	6818      	ldr	r0, [r3, #0]
 8019a9a:	f000 b8bd 	b.w	8019c18 <_malloc_r>
 8019a9e:	bf00      	nop
 8019aa0:	2000008c 	.word	0x2000008c

08019aa4 <free>:
 8019aa4:	4b02      	ldr	r3, [pc, #8]	; (8019ab0 <free+0xc>)
 8019aa6:	4601      	mov	r1, r0
 8019aa8:	6818      	ldr	r0, [r3, #0]
 8019aaa:	f000 b849 	b.w	8019b40 <_free_r>
 8019aae:	bf00      	nop
 8019ab0:	2000008c 	.word	0x2000008c

08019ab4 <memcpy>:
 8019ab4:	440a      	add	r2, r1
 8019ab6:	4291      	cmp	r1, r2
 8019ab8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019abc:	d100      	bne.n	8019ac0 <memcpy+0xc>
 8019abe:	4770      	bx	lr
 8019ac0:	b510      	push	{r4, lr}
 8019ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019aca:	4291      	cmp	r1, r2
 8019acc:	d1f9      	bne.n	8019ac2 <memcpy+0xe>
 8019ace:	bd10      	pop	{r4, pc}

08019ad0 <memmove>:
 8019ad0:	4288      	cmp	r0, r1
 8019ad2:	b510      	push	{r4, lr}
 8019ad4:	eb01 0402 	add.w	r4, r1, r2
 8019ad8:	d902      	bls.n	8019ae0 <memmove+0x10>
 8019ada:	4284      	cmp	r4, r0
 8019adc:	4623      	mov	r3, r4
 8019ade:	d807      	bhi.n	8019af0 <memmove+0x20>
 8019ae0:	1e43      	subs	r3, r0, #1
 8019ae2:	42a1      	cmp	r1, r4
 8019ae4:	d008      	beq.n	8019af8 <memmove+0x28>
 8019ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019aee:	e7f8      	b.n	8019ae2 <memmove+0x12>
 8019af0:	4402      	add	r2, r0
 8019af2:	4601      	mov	r1, r0
 8019af4:	428a      	cmp	r2, r1
 8019af6:	d100      	bne.n	8019afa <memmove+0x2a>
 8019af8:	bd10      	pop	{r4, pc}
 8019afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019b02:	e7f7      	b.n	8019af4 <memmove+0x24>

08019b04 <memset>:
 8019b04:	4402      	add	r2, r0
 8019b06:	4603      	mov	r3, r0
 8019b08:	4293      	cmp	r3, r2
 8019b0a:	d100      	bne.n	8019b0e <memset+0xa>
 8019b0c:	4770      	bx	lr
 8019b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8019b12:	e7f9      	b.n	8019b08 <memset+0x4>

08019b14 <_calloc_r>:
 8019b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b16:	fba1 2402 	umull	r2, r4, r1, r2
 8019b1a:	b94c      	cbnz	r4, 8019b30 <_calloc_r+0x1c>
 8019b1c:	4611      	mov	r1, r2
 8019b1e:	9201      	str	r2, [sp, #4]
 8019b20:	f000 f87a 	bl	8019c18 <_malloc_r>
 8019b24:	9a01      	ldr	r2, [sp, #4]
 8019b26:	4605      	mov	r5, r0
 8019b28:	b930      	cbnz	r0, 8019b38 <_calloc_r+0x24>
 8019b2a:	4628      	mov	r0, r5
 8019b2c:	b003      	add	sp, #12
 8019b2e:	bd30      	pop	{r4, r5, pc}
 8019b30:	220c      	movs	r2, #12
 8019b32:	6002      	str	r2, [r0, #0]
 8019b34:	2500      	movs	r5, #0
 8019b36:	e7f8      	b.n	8019b2a <_calloc_r+0x16>
 8019b38:	4621      	mov	r1, r4
 8019b3a:	f7ff ffe3 	bl	8019b04 <memset>
 8019b3e:	e7f4      	b.n	8019b2a <_calloc_r+0x16>

08019b40 <_free_r>:
 8019b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b42:	2900      	cmp	r1, #0
 8019b44:	d044      	beq.n	8019bd0 <_free_r+0x90>
 8019b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b4a:	9001      	str	r0, [sp, #4]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8019b52:	bfb8      	it	lt
 8019b54:	18e4      	addlt	r4, r4, r3
 8019b56:	f003 fdc7 	bl	801d6e8 <__malloc_lock>
 8019b5a:	4a1e      	ldr	r2, [pc, #120]	; (8019bd4 <_free_r+0x94>)
 8019b5c:	9801      	ldr	r0, [sp, #4]
 8019b5e:	6813      	ldr	r3, [r2, #0]
 8019b60:	b933      	cbnz	r3, 8019b70 <_free_r+0x30>
 8019b62:	6063      	str	r3, [r4, #4]
 8019b64:	6014      	str	r4, [r2, #0]
 8019b66:	b003      	add	sp, #12
 8019b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b6c:	f003 bdc2 	b.w	801d6f4 <__malloc_unlock>
 8019b70:	42a3      	cmp	r3, r4
 8019b72:	d908      	bls.n	8019b86 <_free_r+0x46>
 8019b74:	6825      	ldr	r5, [r4, #0]
 8019b76:	1961      	adds	r1, r4, r5
 8019b78:	428b      	cmp	r3, r1
 8019b7a:	bf01      	itttt	eq
 8019b7c:	6819      	ldreq	r1, [r3, #0]
 8019b7e:	685b      	ldreq	r3, [r3, #4]
 8019b80:	1949      	addeq	r1, r1, r5
 8019b82:	6021      	streq	r1, [r4, #0]
 8019b84:	e7ed      	b.n	8019b62 <_free_r+0x22>
 8019b86:	461a      	mov	r2, r3
 8019b88:	685b      	ldr	r3, [r3, #4]
 8019b8a:	b10b      	cbz	r3, 8019b90 <_free_r+0x50>
 8019b8c:	42a3      	cmp	r3, r4
 8019b8e:	d9fa      	bls.n	8019b86 <_free_r+0x46>
 8019b90:	6811      	ldr	r1, [r2, #0]
 8019b92:	1855      	adds	r5, r2, r1
 8019b94:	42a5      	cmp	r5, r4
 8019b96:	d10b      	bne.n	8019bb0 <_free_r+0x70>
 8019b98:	6824      	ldr	r4, [r4, #0]
 8019b9a:	4421      	add	r1, r4
 8019b9c:	1854      	adds	r4, r2, r1
 8019b9e:	42a3      	cmp	r3, r4
 8019ba0:	6011      	str	r1, [r2, #0]
 8019ba2:	d1e0      	bne.n	8019b66 <_free_r+0x26>
 8019ba4:	681c      	ldr	r4, [r3, #0]
 8019ba6:	685b      	ldr	r3, [r3, #4]
 8019ba8:	6053      	str	r3, [r2, #4]
 8019baa:	4421      	add	r1, r4
 8019bac:	6011      	str	r1, [r2, #0]
 8019bae:	e7da      	b.n	8019b66 <_free_r+0x26>
 8019bb0:	d902      	bls.n	8019bb8 <_free_r+0x78>
 8019bb2:	230c      	movs	r3, #12
 8019bb4:	6003      	str	r3, [r0, #0]
 8019bb6:	e7d6      	b.n	8019b66 <_free_r+0x26>
 8019bb8:	6825      	ldr	r5, [r4, #0]
 8019bba:	1961      	adds	r1, r4, r5
 8019bbc:	428b      	cmp	r3, r1
 8019bbe:	bf04      	itt	eq
 8019bc0:	6819      	ldreq	r1, [r3, #0]
 8019bc2:	685b      	ldreq	r3, [r3, #4]
 8019bc4:	6063      	str	r3, [r4, #4]
 8019bc6:	bf04      	itt	eq
 8019bc8:	1949      	addeq	r1, r1, r5
 8019bca:	6021      	streq	r1, [r4, #0]
 8019bcc:	6054      	str	r4, [r2, #4]
 8019bce:	e7ca      	b.n	8019b66 <_free_r+0x26>
 8019bd0:	b003      	add	sp, #12
 8019bd2:	bd30      	pop	{r4, r5, pc}
 8019bd4:	20009f80 	.word	0x20009f80

08019bd8 <sbrk_aligned>:
 8019bd8:	b570      	push	{r4, r5, r6, lr}
 8019bda:	4e0e      	ldr	r6, [pc, #56]	; (8019c14 <sbrk_aligned+0x3c>)
 8019bdc:	460c      	mov	r4, r1
 8019bde:	6831      	ldr	r1, [r6, #0]
 8019be0:	4605      	mov	r5, r0
 8019be2:	b911      	cbnz	r1, 8019bea <sbrk_aligned+0x12>
 8019be4:	f001 f872 	bl	801accc <_sbrk_r>
 8019be8:	6030      	str	r0, [r6, #0]
 8019bea:	4621      	mov	r1, r4
 8019bec:	4628      	mov	r0, r5
 8019bee:	f001 f86d 	bl	801accc <_sbrk_r>
 8019bf2:	1c43      	adds	r3, r0, #1
 8019bf4:	d00a      	beq.n	8019c0c <sbrk_aligned+0x34>
 8019bf6:	1cc4      	adds	r4, r0, #3
 8019bf8:	f024 0403 	bic.w	r4, r4, #3
 8019bfc:	42a0      	cmp	r0, r4
 8019bfe:	d007      	beq.n	8019c10 <sbrk_aligned+0x38>
 8019c00:	1a21      	subs	r1, r4, r0
 8019c02:	4628      	mov	r0, r5
 8019c04:	f001 f862 	bl	801accc <_sbrk_r>
 8019c08:	3001      	adds	r0, #1
 8019c0a:	d101      	bne.n	8019c10 <sbrk_aligned+0x38>
 8019c0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019c10:	4620      	mov	r0, r4
 8019c12:	bd70      	pop	{r4, r5, r6, pc}
 8019c14:	20009f84 	.word	0x20009f84

08019c18 <_malloc_r>:
 8019c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c1c:	1ccd      	adds	r5, r1, #3
 8019c1e:	f025 0503 	bic.w	r5, r5, #3
 8019c22:	3508      	adds	r5, #8
 8019c24:	2d0c      	cmp	r5, #12
 8019c26:	bf38      	it	cc
 8019c28:	250c      	movcc	r5, #12
 8019c2a:	2d00      	cmp	r5, #0
 8019c2c:	4607      	mov	r7, r0
 8019c2e:	db01      	blt.n	8019c34 <_malloc_r+0x1c>
 8019c30:	42a9      	cmp	r1, r5
 8019c32:	d905      	bls.n	8019c40 <_malloc_r+0x28>
 8019c34:	230c      	movs	r3, #12
 8019c36:	603b      	str	r3, [r7, #0]
 8019c38:	2600      	movs	r6, #0
 8019c3a:	4630      	mov	r0, r6
 8019c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c40:	4e2e      	ldr	r6, [pc, #184]	; (8019cfc <_malloc_r+0xe4>)
 8019c42:	f003 fd51 	bl	801d6e8 <__malloc_lock>
 8019c46:	6833      	ldr	r3, [r6, #0]
 8019c48:	461c      	mov	r4, r3
 8019c4a:	bb34      	cbnz	r4, 8019c9a <_malloc_r+0x82>
 8019c4c:	4629      	mov	r1, r5
 8019c4e:	4638      	mov	r0, r7
 8019c50:	f7ff ffc2 	bl	8019bd8 <sbrk_aligned>
 8019c54:	1c43      	adds	r3, r0, #1
 8019c56:	4604      	mov	r4, r0
 8019c58:	d14d      	bne.n	8019cf6 <_malloc_r+0xde>
 8019c5a:	6834      	ldr	r4, [r6, #0]
 8019c5c:	4626      	mov	r6, r4
 8019c5e:	2e00      	cmp	r6, #0
 8019c60:	d140      	bne.n	8019ce4 <_malloc_r+0xcc>
 8019c62:	6823      	ldr	r3, [r4, #0]
 8019c64:	4631      	mov	r1, r6
 8019c66:	4638      	mov	r0, r7
 8019c68:	eb04 0803 	add.w	r8, r4, r3
 8019c6c:	f001 f82e 	bl	801accc <_sbrk_r>
 8019c70:	4580      	cmp	r8, r0
 8019c72:	d13a      	bne.n	8019cea <_malloc_r+0xd2>
 8019c74:	6821      	ldr	r1, [r4, #0]
 8019c76:	3503      	adds	r5, #3
 8019c78:	1a6d      	subs	r5, r5, r1
 8019c7a:	f025 0503 	bic.w	r5, r5, #3
 8019c7e:	3508      	adds	r5, #8
 8019c80:	2d0c      	cmp	r5, #12
 8019c82:	bf38      	it	cc
 8019c84:	250c      	movcc	r5, #12
 8019c86:	4629      	mov	r1, r5
 8019c88:	4638      	mov	r0, r7
 8019c8a:	f7ff ffa5 	bl	8019bd8 <sbrk_aligned>
 8019c8e:	3001      	adds	r0, #1
 8019c90:	d02b      	beq.n	8019cea <_malloc_r+0xd2>
 8019c92:	6823      	ldr	r3, [r4, #0]
 8019c94:	442b      	add	r3, r5
 8019c96:	6023      	str	r3, [r4, #0]
 8019c98:	e00e      	b.n	8019cb8 <_malloc_r+0xa0>
 8019c9a:	6822      	ldr	r2, [r4, #0]
 8019c9c:	1b52      	subs	r2, r2, r5
 8019c9e:	d41e      	bmi.n	8019cde <_malloc_r+0xc6>
 8019ca0:	2a0b      	cmp	r2, #11
 8019ca2:	d916      	bls.n	8019cd2 <_malloc_r+0xba>
 8019ca4:	1961      	adds	r1, r4, r5
 8019ca6:	42a3      	cmp	r3, r4
 8019ca8:	6025      	str	r5, [r4, #0]
 8019caa:	bf18      	it	ne
 8019cac:	6059      	strne	r1, [r3, #4]
 8019cae:	6863      	ldr	r3, [r4, #4]
 8019cb0:	bf08      	it	eq
 8019cb2:	6031      	streq	r1, [r6, #0]
 8019cb4:	5162      	str	r2, [r4, r5]
 8019cb6:	604b      	str	r3, [r1, #4]
 8019cb8:	4638      	mov	r0, r7
 8019cba:	f104 060b 	add.w	r6, r4, #11
 8019cbe:	f003 fd19 	bl	801d6f4 <__malloc_unlock>
 8019cc2:	f026 0607 	bic.w	r6, r6, #7
 8019cc6:	1d23      	adds	r3, r4, #4
 8019cc8:	1af2      	subs	r2, r6, r3
 8019cca:	d0b6      	beq.n	8019c3a <_malloc_r+0x22>
 8019ccc:	1b9b      	subs	r3, r3, r6
 8019cce:	50a3      	str	r3, [r4, r2]
 8019cd0:	e7b3      	b.n	8019c3a <_malloc_r+0x22>
 8019cd2:	6862      	ldr	r2, [r4, #4]
 8019cd4:	42a3      	cmp	r3, r4
 8019cd6:	bf0c      	ite	eq
 8019cd8:	6032      	streq	r2, [r6, #0]
 8019cda:	605a      	strne	r2, [r3, #4]
 8019cdc:	e7ec      	b.n	8019cb8 <_malloc_r+0xa0>
 8019cde:	4623      	mov	r3, r4
 8019ce0:	6864      	ldr	r4, [r4, #4]
 8019ce2:	e7b2      	b.n	8019c4a <_malloc_r+0x32>
 8019ce4:	4634      	mov	r4, r6
 8019ce6:	6876      	ldr	r6, [r6, #4]
 8019ce8:	e7b9      	b.n	8019c5e <_malloc_r+0x46>
 8019cea:	230c      	movs	r3, #12
 8019cec:	603b      	str	r3, [r7, #0]
 8019cee:	4638      	mov	r0, r7
 8019cf0:	f003 fd00 	bl	801d6f4 <__malloc_unlock>
 8019cf4:	e7a1      	b.n	8019c3a <_malloc_r+0x22>
 8019cf6:	6025      	str	r5, [r4, #0]
 8019cf8:	e7de      	b.n	8019cb8 <_malloc_r+0xa0>
 8019cfa:	bf00      	nop
 8019cfc:	20009f80 	.word	0x20009f80

08019d00 <__cvt>:
 8019d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d04:	ec55 4b10 	vmov	r4, r5, d0
 8019d08:	2d00      	cmp	r5, #0
 8019d0a:	460e      	mov	r6, r1
 8019d0c:	4619      	mov	r1, r3
 8019d0e:	462b      	mov	r3, r5
 8019d10:	bfbb      	ittet	lt
 8019d12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019d16:	461d      	movlt	r5, r3
 8019d18:	2300      	movge	r3, #0
 8019d1a:	232d      	movlt	r3, #45	; 0x2d
 8019d1c:	700b      	strb	r3, [r1, #0]
 8019d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019d24:	4691      	mov	r9, r2
 8019d26:	f023 0820 	bic.w	r8, r3, #32
 8019d2a:	bfbc      	itt	lt
 8019d2c:	4622      	movlt	r2, r4
 8019d2e:	4614      	movlt	r4, r2
 8019d30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019d34:	d005      	beq.n	8019d42 <__cvt+0x42>
 8019d36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019d3a:	d100      	bne.n	8019d3e <__cvt+0x3e>
 8019d3c:	3601      	adds	r6, #1
 8019d3e:	2102      	movs	r1, #2
 8019d40:	e000      	b.n	8019d44 <__cvt+0x44>
 8019d42:	2103      	movs	r1, #3
 8019d44:	ab03      	add	r3, sp, #12
 8019d46:	9301      	str	r3, [sp, #4]
 8019d48:	ab02      	add	r3, sp, #8
 8019d4a:	9300      	str	r3, [sp, #0]
 8019d4c:	ec45 4b10 	vmov	d0, r4, r5
 8019d50:	4653      	mov	r3, sl
 8019d52:	4632      	mov	r2, r6
 8019d54:	f002 f9fc 	bl	801c150 <_dtoa_r>
 8019d58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019d5c:	4607      	mov	r7, r0
 8019d5e:	d102      	bne.n	8019d66 <__cvt+0x66>
 8019d60:	f019 0f01 	tst.w	r9, #1
 8019d64:	d022      	beq.n	8019dac <__cvt+0xac>
 8019d66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019d6a:	eb07 0906 	add.w	r9, r7, r6
 8019d6e:	d110      	bne.n	8019d92 <__cvt+0x92>
 8019d70:	783b      	ldrb	r3, [r7, #0]
 8019d72:	2b30      	cmp	r3, #48	; 0x30
 8019d74:	d10a      	bne.n	8019d8c <__cvt+0x8c>
 8019d76:	2200      	movs	r2, #0
 8019d78:	2300      	movs	r3, #0
 8019d7a:	4620      	mov	r0, r4
 8019d7c:	4629      	mov	r1, r5
 8019d7e:	f7e6 febb 	bl	8000af8 <__aeabi_dcmpeq>
 8019d82:	b918      	cbnz	r0, 8019d8c <__cvt+0x8c>
 8019d84:	f1c6 0601 	rsb	r6, r6, #1
 8019d88:	f8ca 6000 	str.w	r6, [sl]
 8019d8c:	f8da 3000 	ldr.w	r3, [sl]
 8019d90:	4499      	add	r9, r3
 8019d92:	2200      	movs	r2, #0
 8019d94:	2300      	movs	r3, #0
 8019d96:	4620      	mov	r0, r4
 8019d98:	4629      	mov	r1, r5
 8019d9a:	f7e6 fead 	bl	8000af8 <__aeabi_dcmpeq>
 8019d9e:	b108      	cbz	r0, 8019da4 <__cvt+0xa4>
 8019da0:	f8cd 900c 	str.w	r9, [sp, #12]
 8019da4:	2230      	movs	r2, #48	; 0x30
 8019da6:	9b03      	ldr	r3, [sp, #12]
 8019da8:	454b      	cmp	r3, r9
 8019daa:	d307      	bcc.n	8019dbc <__cvt+0xbc>
 8019dac:	9b03      	ldr	r3, [sp, #12]
 8019dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019db0:	1bdb      	subs	r3, r3, r7
 8019db2:	4638      	mov	r0, r7
 8019db4:	6013      	str	r3, [r2, #0]
 8019db6:	b004      	add	sp, #16
 8019db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dbc:	1c59      	adds	r1, r3, #1
 8019dbe:	9103      	str	r1, [sp, #12]
 8019dc0:	701a      	strb	r2, [r3, #0]
 8019dc2:	e7f0      	b.n	8019da6 <__cvt+0xa6>

08019dc4 <__exponent>:
 8019dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	2900      	cmp	r1, #0
 8019dca:	bfb8      	it	lt
 8019dcc:	4249      	neglt	r1, r1
 8019dce:	f803 2b02 	strb.w	r2, [r3], #2
 8019dd2:	bfb4      	ite	lt
 8019dd4:	222d      	movlt	r2, #45	; 0x2d
 8019dd6:	222b      	movge	r2, #43	; 0x2b
 8019dd8:	2909      	cmp	r1, #9
 8019dda:	7042      	strb	r2, [r0, #1]
 8019ddc:	dd2a      	ble.n	8019e34 <__exponent+0x70>
 8019dde:	f10d 0407 	add.w	r4, sp, #7
 8019de2:	46a4      	mov	ip, r4
 8019de4:	270a      	movs	r7, #10
 8019de6:	46a6      	mov	lr, r4
 8019de8:	460a      	mov	r2, r1
 8019dea:	fb91 f6f7 	sdiv	r6, r1, r7
 8019dee:	fb07 1516 	mls	r5, r7, r6, r1
 8019df2:	3530      	adds	r5, #48	; 0x30
 8019df4:	2a63      	cmp	r2, #99	; 0x63
 8019df6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019dfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019dfe:	4631      	mov	r1, r6
 8019e00:	dcf1      	bgt.n	8019de6 <__exponent+0x22>
 8019e02:	3130      	adds	r1, #48	; 0x30
 8019e04:	f1ae 0502 	sub.w	r5, lr, #2
 8019e08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019e0c:	1c44      	adds	r4, r0, #1
 8019e0e:	4629      	mov	r1, r5
 8019e10:	4561      	cmp	r1, ip
 8019e12:	d30a      	bcc.n	8019e2a <__exponent+0x66>
 8019e14:	f10d 0209 	add.w	r2, sp, #9
 8019e18:	eba2 020e 	sub.w	r2, r2, lr
 8019e1c:	4565      	cmp	r5, ip
 8019e1e:	bf88      	it	hi
 8019e20:	2200      	movhi	r2, #0
 8019e22:	4413      	add	r3, r2
 8019e24:	1a18      	subs	r0, r3, r0
 8019e26:	b003      	add	sp, #12
 8019e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019e2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019e32:	e7ed      	b.n	8019e10 <__exponent+0x4c>
 8019e34:	2330      	movs	r3, #48	; 0x30
 8019e36:	3130      	adds	r1, #48	; 0x30
 8019e38:	7083      	strb	r3, [r0, #2]
 8019e3a:	70c1      	strb	r1, [r0, #3]
 8019e3c:	1d03      	adds	r3, r0, #4
 8019e3e:	e7f1      	b.n	8019e24 <__exponent+0x60>

08019e40 <_printf_float>:
 8019e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e44:	ed2d 8b02 	vpush	{d8}
 8019e48:	b08d      	sub	sp, #52	; 0x34
 8019e4a:	460c      	mov	r4, r1
 8019e4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019e50:	4616      	mov	r6, r2
 8019e52:	461f      	mov	r7, r3
 8019e54:	4605      	mov	r5, r0
 8019e56:	f003 fbb9 	bl	801d5cc <_localeconv_r>
 8019e5a:	f8d0 a000 	ldr.w	sl, [r0]
 8019e5e:	4650      	mov	r0, sl
 8019e60:	f7e6 f9c8 	bl	80001f4 <strlen>
 8019e64:	2300      	movs	r3, #0
 8019e66:	930a      	str	r3, [sp, #40]	; 0x28
 8019e68:	6823      	ldr	r3, [r4, #0]
 8019e6a:	9305      	str	r3, [sp, #20]
 8019e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8019e70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019e74:	3307      	adds	r3, #7
 8019e76:	f023 0307 	bic.w	r3, r3, #7
 8019e7a:	f103 0208 	add.w	r2, r3, #8
 8019e7e:	f8c8 2000 	str.w	r2, [r8]
 8019e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019e8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019e8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019e92:	9307      	str	r3, [sp, #28]
 8019e94:	f8cd 8018 	str.w	r8, [sp, #24]
 8019e98:	ee08 0a10 	vmov	s16, r0
 8019e9c:	4b9f      	ldr	r3, [pc, #636]	; (801a11c <_printf_float+0x2dc>)
 8019e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019ea6:	f7e6 fe59 	bl	8000b5c <__aeabi_dcmpun>
 8019eaa:	bb88      	cbnz	r0, 8019f10 <_printf_float+0xd0>
 8019eac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019eb0:	4b9a      	ldr	r3, [pc, #616]	; (801a11c <_printf_float+0x2dc>)
 8019eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019eb6:	f7e6 fe33 	bl	8000b20 <__aeabi_dcmple>
 8019eba:	bb48      	cbnz	r0, 8019f10 <_printf_float+0xd0>
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	4640      	mov	r0, r8
 8019ec2:	4649      	mov	r1, r9
 8019ec4:	f7e6 fe22 	bl	8000b0c <__aeabi_dcmplt>
 8019ec8:	b110      	cbz	r0, 8019ed0 <_printf_float+0x90>
 8019eca:	232d      	movs	r3, #45	; 0x2d
 8019ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ed0:	4b93      	ldr	r3, [pc, #588]	; (801a120 <_printf_float+0x2e0>)
 8019ed2:	4894      	ldr	r0, [pc, #592]	; (801a124 <_printf_float+0x2e4>)
 8019ed4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019ed8:	bf94      	ite	ls
 8019eda:	4698      	movls	r8, r3
 8019edc:	4680      	movhi	r8, r0
 8019ede:	2303      	movs	r3, #3
 8019ee0:	6123      	str	r3, [r4, #16]
 8019ee2:	9b05      	ldr	r3, [sp, #20]
 8019ee4:	f023 0204 	bic.w	r2, r3, #4
 8019ee8:	6022      	str	r2, [r4, #0]
 8019eea:	f04f 0900 	mov.w	r9, #0
 8019eee:	9700      	str	r7, [sp, #0]
 8019ef0:	4633      	mov	r3, r6
 8019ef2:	aa0b      	add	r2, sp, #44	; 0x2c
 8019ef4:	4621      	mov	r1, r4
 8019ef6:	4628      	mov	r0, r5
 8019ef8:	f000 f9d8 	bl	801a2ac <_printf_common>
 8019efc:	3001      	adds	r0, #1
 8019efe:	f040 8090 	bne.w	801a022 <_printf_float+0x1e2>
 8019f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f06:	b00d      	add	sp, #52	; 0x34
 8019f08:	ecbd 8b02 	vpop	{d8}
 8019f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f10:	4642      	mov	r2, r8
 8019f12:	464b      	mov	r3, r9
 8019f14:	4640      	mov	r0, r8
 8019f16:	4649      	mov	r1, r9
 8019f18:	f7e6 fe20 	bl	8000b5c <__aeabi_dcmpun>
 8019f1c:	b140      	cbz	r0, 8019f30 <_printf_float+0xf0>
 8019f1e:	464b      	mov	r3, r9
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	bfbc      	itt	lt
 8019f24:	232d      	movlt	r3, #45	; 0x2d
 8019f26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019f2a:	487f      	ldr	r0, [pc, #508]	; (801a128 <_printf_float+0x2e8>)
 8019f2c:	4b7f      	ldr	r3, [pc, #508]	; (801a12c <_printf_float+0x2ec>)
 8019f2e:	e7d1      	b.n	8019ed4 <_printf_float+0x94>
 8019f30:	6863      	ldr	r3, [r4, #4]
 8019f32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019f36:	9206      	str	r2, [sp, #24]
 8019f38:	1c5a      	adds	r2, r3, #1
 8019f3a:	d13f      	bne.n	8019fbc <_printf_float+0x17c>
 8019f3c:	2306      	movs	r3, #6
 8019f3e:	6063      	str	r3, [r4, #4]
 8019f40:	9b05      	ldr	r3, [sp, #20]
 8019f42:	6861      	ldr	r1, [r4, #4]
 8019f44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019f48:	2300      	movs	r3, #0
 8019f4a:	9303      	str	r3, [sp, #12]
 8019f4c:	ab0a      	add	r3, sp, #40	; 0x28
 8019f4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019f52:	ab09      	add	r3, sp, #36	; 0x24
 8019f54:	ec49 8b10 	vmov	d0, r8, r9
 8019f58:	9300      	str	r3, [sp, #0]
 8019f5a:	6022      	str	r2, [r4, #0]
 8019f5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019f60:	4628      	mov	r0, r5
 8019f62:	f7ff fecd 	bl	8019d00 <__cvt>
 8019f66:	9b06      	ldr	r3, [sp, #24]
 8019f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019f6a:	2b47      	cmp	r3, #71	; 0x47
 8019f6c:	4680      	mov	r8, r0
 8019f6e:	d108      	bne.n	8019f82 <_printf_float+0x142>
 8019f70:	1cc8      	adds	r0, r1, #3
 8019f72:	db02      	blt.n	8019f7a <_printf_float+0x13a>
 8019f74:	6863      	ldr	r3, [r4, #4]
 8019f76:	4299      	cmp	r1, r3
 8019f78:	dd41      	ble.n	8019ffe <_printf_float+0x1be>
 8019f7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8019f7e:	fa5f fb8b 	uxtb.w	fp, fp
 8019f82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019f86:	d820      	bhi.n	8019fca <_printf_float+0x18a>
 8019f88:	3901      	subs	r1, #1
 8019f8a:	465a      	mov	r2, fp
 8019f8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019f90:	9109      	str	r1, [sp, #36]	; 0x24
 8019f92:	f7ff ff17 	bl	8019dc4 <__exponent>
 8019f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019f98:	1813      	adds	r3, r2, r0
 8019f9a:	2a01      	cmp	r2, #1
 8019f9c:	4681      	mov	r9, r0
 8019f9e:	6123      	str	r3, [r4, #16]
 8019fa0:	dc02      	bgt.n	8019fa8 <_printf_float+0x168>
 8019fa2:	6822      	ldr	r2, [r4, #0]
 8019fa4:	07d2      	lsls	r2, r2, #31
 8019fa6:	d501      	bpl.n	8019fac <_printf_float+0x16c>
 8019fa8:	3301      	adds	r3, #1
 8019faa:	6123      	str	r3, [r4, #16]
 8019fac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d09c      	beq.n	8019eee <_printf_float+0xae>
 8019fb4:	232d      	movs	r3, #45	; 0x2d
 8019fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fba:	e798      	b.n	8019eee <_printf_float+0xae>
 8019fbc:	9a06      	ldr	r2, [sp, #24]
 8019fbe:	2a47      	cmp	r2, #71	; 0x47
 8019fc0:	d1be      	bne.n	8019f40 <_printf_float+0x100>
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d1bc      	bne.n	8019f40 <_printf_float+0x100>
 8019fc6:	2301      	movs	r3, #1
 8019fc8:	e7b9      	b.n	8019f3e <_printf_float+0xfe>
 8019fca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019fce:	d118      	bne.n	801a002 <_printf_float+0x1c2>
 8019fd0:	2900      	cmp	r1, #0
 8019fd2:	6863      	ldr	r3, [r4, #4]
 8019fd4:	dd0b      	ble.n	8019fee <_printf_float+0x1ae>
 8019fd6:	6121      	str	r1, [r4, #16]
 8019fd8:	b913      	cbnz	r3, 8019fe0 <_printf_float+0x1a0>
 8019fda:	6822      	ldr	r2, [r4, #0]
 8019fdc:	07d0      	lsls	r0, r2, #31
 8019fde:	d502      	bpl.n	8019fe6 <_printf_float+0x1a6>
 8019fe0:	3301      	adds	r3, #1
 8019fe2:	440b      	add	r3, r1
 8019fe4:	6123      	str	r3, [r4, #16]
 8019fe6:	65a1      	str	r1, [r4, #88]	; 0x58
 8019fe8:	f04f 0900 	mov.w	r9, #0
 8019fec:	e7de      	b.n	8019fac <_printf_float+0x16c>
 8019fee:	b913      	cbnz	r3, 8019ff6 <_printf_float+0x1b6>
 8019ff0:	6822      	ldr	r2, [r4, #0]
 8019ff2:	07d2      	lsls	r2, r2, #31
 8019ff4:	d501      	bpl.n	8019ffa <_printf_float+0x1ba>
 8019ff6:	3302      	adds	r3, #2
 8019ff8:	e7f4      	b.n	8019fe4 <_printf_float+0x1a4>
 8019ffa:	2301      	movs	r3, #1
 8019ffc:	e7f2      	b.n	8019fe4 <_printf_float+0x1a4>
 8019ffe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a004:	4299      	cmp	r1, r3
 801a006:	db05      	blt.n	801a014 <_printf_float+0x1d4>
 801a008:	6823      	ldr	r3, [r4, #0]
 801a00a:	6121      	str	r1, [r4, #16]
 801a00c:	07d8      	lsls	r0, r3, #31
 801a00e:	d5ea      	bpl.n	8019fe6 <_printf_float+0x1a6>
 801a010:	1c4b      	adds	r3, r1, #1
 801a012:	e7e7      	b.n	8019fe4 <_printf_float+0x1a4>
 801a014:	2900      	cmp	r1, #0
 801a016:	bfd4      	ite	le
 801a018:	f1c1 0202 	rsble	r2, r1, #2
 801a01c:	2201      	movgt	r2, #1
 801a01e:	4413      	add	r3, r2
 801a020:	e7e0      	b.n	8019fe4 <_printf_float+0x1a4>
 801a022:	6823      	ldr	r3, [r4, #0]
 801a024:	055a      	lsls	r2, r3, #21
 801a026:	d407      	bmi.n	801a038 <_printf_float+0x1f8>
 801a028:	6923      	ldr	r3, [r4, #16]
 801a02a:	4642      	mov	r2, r8
 801a02c:	4631      	mov	r1, r6
 801a02e:	4628      	mov	r0, r5
 801a030:	47b8      	blx	r7
 801a032:	3001      	adds	r0, #1
 801a034:	d12c      	bne.n	801a090 <_printf_float+0x250>
 801a036:	e764      	b.n	8019f02 <_printf_float+0xc2>
 801a038:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a03c:	f240 80e0 	bls.w	801a200 <_printf_float+0x3c0>
 801a040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a044:	2200      	movs	r2, #0
 801a046:	2300      	movs	r3, #0
 801a048:	f7e6 fd56 	bl	8000af8 <__aeabi_dcmpeq>
 801a04c:	2800      	cmp	r0, #0
 801a04e:	d034      	beq.n	801a0ba <_printf_float+0x27a>
 801a050:	4a37      	ldr	r2, [pc, #220]	; (801a130 <_printf_float+0x2f0>)
 801a052:	2301      	movs	r3, #1
 801a054:	4631      	mov	r1, r6
 801a056:	4628      	mov	r0, r5
 801a058:	47b8      	blx	r7
 801a05a:	3001      	adds	r0, #1
 801a05c:	f43f af51 	beq.w	8019f02 <_printf_float+0xc2>
 801a060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a064:	429a      	cmp	r2, r3
 801a066:	db02      	blt.n	801a06e <_printf_float+0x22e>
 801a068:	6823      	ldr	r3, [r4, #0]
 801a06a:	07d8      	lsls	r0, r3, #31
 801a06c:	d510      	bpl.n	801a090 <_printf_float+0x250>
 801a06e:	ee18 3a10 	vmov	r3, s16
 801a072:	4652      	mov	r2, sl
 801a074:	4631      	mov	r1, r6
 801a076:	4628      	mov	r0, r5
 801a078:	47b8      	blx	r7
 801a07a:	3001      	adds	r0, #1
 801a07c:	f43f af41 	beq.w	8019f02 <_printf_float+0xc2>
 801a080:	f04f 0800 	mov.w	r8, #0
 801a084:	f104 091a 	add.w	r9, r4, #26
 801a088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a08a:	3b01      	subs	r3, #1
 801a08c:	4543      	cmp	r3, r8
 801a08e:	dc09      	bgt.n	801a0a4 <_printf_float+0x264>
 801a090:	6823      	ldr	r3, [r4, #0]
 801a092:	079b      	lsls	r3, r3, #30
 801a094:	f100 8105 	bmi.w	801a2a2 <_printf_float+0x462>
 801a098:	68e0      	ldr	r0, [r4, #12]
 801a09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a09c:	4298      	cmp	r0, r3
 801a09e:	bfb8      	it	lt
 801a0a0:	4618      	movlt	r0, r3
 801a0a2:	e730      	b.n	8019f06 <_printf_float+0xc6>
 801a0a4:	2301      	movs	r3, #1
 801a0a6:	464a      	mov	r2, r9
 801a0a8:	4631      	mov	r1, r6
 801a0aa:	4628      	mov	r0, r5
 801a0ac:	47b8      	blx	r7
 801a0ae:	3001      	adds	r0, #1
 801a0b0:	f43f af27 	beq.w	8019f02 <_printf_float+0xc2>
 801a0b4:	f108 0801 	add.w	r8, r8, #1
 801a0b8:	e7e6      	b.n	801a088 <_printf_float+0x248>
 801a0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	dc39      	bgt.n	801a134 <_printf_float+0x2f4>
 801a0c0:	4a1b      	ldr	r2, [pc, #108]	; (801a130 <_printf_float+0x2f0>)
 801a0c2:	2301      	movs	r3, #1
 801a0c4:	4631      	mov	r1, r6
 801a0c6:	4628      	mov	r0, r5
 801a0c8:	47b8      	blx	r7
 801a0ca:	3001      	adds	r0, #1
 801a0cc:	f43f af19 	beq.w	8019f02 <_printf_float+0xc2>
 801a0d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a0d4:	4313      	orrs	r3, r2
 801a0d6:	d102      	bne.n	801a0de <_printf_float+0x29e>
 801a0d8:	6823      	ldr	r3, [r4, #0]
 801a0da:	07d9      	lsls	r1, r3, #31
 801a0dc:	d5d8      	bpl.n	801a090 <_printf_float+0x250>
 801a0de:	ee18 3a10 	vmov	r3, s16
 801a0e2:	4652      	mov	r2, sl
 801a0e4:	4631      	mov	r1, r6
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	47b8      	blx	r7
 801a0ea:	3001      	adds	r0, #1
 801a0ec:	f43f af09 	beq.w	8019f02 <_printf_float+0xc2>
 801a0f0:	f04f 0900 	mov.w	r9, #0
 801a0f4:	f104 0a1a 	add.w	sl, r4, #26
 801a0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0fa:	425b      	negs	r3, r3
 801a0fc:	454b      	cmp	r3, r9
 801a0fe:	dc01      	bgt.n	801a104 <_printf_float+0x2c4>
 801a100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a102:	e792      	b.n	801a02a <_printf_float+0x1ea>
 801a104:	2301      	movs	r3, #1
 801a106:	4652      	mov	r2, sl
 801a108:	4631      	mov	r1, r6
 801a10a:	4628      	mov	r0, r5
 801a10c:	47b8      	blx	r7
 801a10e:	3001      	adds	r0, #1
 801a110:	f43f aef7 	beq.w	8019f02 <_printf_float+0xc2>
 801a114:	f109 0901 	add.w	r9, r9, #1
 801a118:	e7ee      	b.n	801a0f8 <_printf_float+0x2b8>
 801a11a:	bf00      	nop
 801a11c:	7fefffff 	.word	0x7fefffff
 801a120:	0801f498 	.word	0x0801f498
 801a124:	0801f49c 	.word	0x0801f49c
 801a128:	0801f4a4 	.word	0x0801f4a4
 801a12c:	0801f4a0 	.word	0x0801f4a0
 801a130:	0801f4a8 	.word	0x0801f4a8
 801a134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a138:	429a      	cmp	r2, r3
 801a13a:	bfa8      	it	ge
 801a13c:	461a      	movge	r2, r3
 801a13e:	2a00      	cmp	r2, #0
 801a140:	4691      	mov	r9, r2
 801a142:	dc37      	bgt.n	801a1b4 <_printf_float+0x374>
 801a144:	f04f 0b00 	mov.w	fp, #0
 801a148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a14c:	f104 021a 	add.w	r2, r4, #26
 801a150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a152:	9305      	str	r3, [sp, #20]
 801a154:	eba3 0309 	sub.w	r3, r3, r9
 801a158:	455b      	cmp	r3, fp
 801a15a:	dc33      	bgt.n	801a1c4 <_printf_float+0x384>
 801a15c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a160:	429a      	cmp	r2, r3
 801a162:	db3b      	blt.n	801a1dc <_printf_float+0x39c>
 801a164:	6823      	ldr	r3, [r4, #0]
 801a166:	07da      	lsls	r2, r3, #31
 801a168:	d438      	bmi.n	801a1dc <_printf_float+0x39c>
 801a16a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a16c:	9a05      	ldr	r2, [sp, #20]
 801a16e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a170:	1a9a      	subs	r2, r3, r2
 801a172:	eba3 0901 	sub.w	r9, r3, r1
 801a176:	4591      	cmp	r9, r2
 801a178:	bfa8      	it	ge
 801a17a:	4691      	movge	r9, r2
 801a17c:	f1b9 0f00 	cmp.w	r9, #0
 801a180:	dc35      	bgt.n	801a1ee <_printf_float+0x3ae>
 801a182:	f04f 0800 	mov.w	r8, #0
 801a186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a18a:	f104 0a1a 	add.w	sl, r4, #26
 801a18e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a192:	1a9b      	subs	r3, r3, r2
 801a194:	eba3 0309 	sub.w	r3, r3, r9
 801a198:	4543      	cmp	r3, r8
 801a19a:	f77f af79 	ble.w	801a090 <_printf_float+0x250>
 801a19e:	2301      	movs	r3, #1
 801a1a0:	4652      	mov	r2, sl
 801a1a2:	4631      	mov	r1, r6
 801a1a4:	4628      	mov	r0, r5
 801a1a6:	47b8      	blx	r7
 801a1a8:	3001      	adds	r0, #1
 801a1aa:	f43f aeaa 	beq.w	8019f02 <_printf_float+0xc2>
 801a1ae:	f108 0801 	add.w	r8, r8, #1
 801a1b2:	e7ec      	b.n	801a18e <_printf_float+0x34e>
 801a1b4:	4613      	mov	r3, r2
 801a1b6:	4631      	mov	r1, r6
 801a1b8:	4642      	mov	r2, r8
 801a1ba:	4628      	mov	r0, r5
 801a1bc:	47b8      	blx	r7
 801a1be:	3001      	adds	r0, #1
 801a1c0:	d1c0      	bne.n	801a144 <_printf_float+0x304>
 801a1c2:	e69e      	b.n	8019f02 <_printf_float+0xc2>
 801a1c4:	2301      	movs	r3, #1
 801a1c6:	4631      	mov	r1, r6
 801a1c8:	4628      	mov	r0, r5
 801a1ca:	9205      	str	r2, [sp, #20]
 801a1cc:	47b8      	blx	r7
 801a1ce:	3001      	adds	r0, #1
 801a1d0:	f43f ae97 	beq.w	8019f02 <_printf_float+0xc2>
 801a1d4:	9a05      	ldr	r2, [sp, #20]
 801a1d6:	f10b 0b01 	add.w	fp, fp, #1
 801a1da:	e7b9      	b.n	801a150 <_printf_float+0x310>
 801a1dc:	ee18 3a10 	vmov	r3, s16
 801a1e0:	4652      	mov	r2, sl
 801a1e2:	4631      	mov	r1, r6
 801a1e4:	4628      	mov	r0, r5
 801a1e6:	47b8      	blx	r7
 801a1e8:	3001      	adds	r0, #1
 801a1ea:	d1be      	bne.n	801a16a <_printf_float+0x32a>
 801a1ec:	e689      	b.n	8019f02 <_printf_float+0xc2>
 801a1ee:	9a05      	ldr	r2, [sp, #20]
 801a1f0:	464b      	mov	r3, r9
 801a1f2:	4442      	add	r2, r8
 801a1f4:	4631      	mov	r1, r6
 801a1f6:	4628      	mov	r0, r5
 801a1f8:	47b8      	blx	r7
 801a1fa:	3001      	adds	r0, #1
 801a1fc:	d1c1      	bne.n	801a182 <_printf_float+0x342>
 801a1fe:	e680      	b.n	8019f02 <_printf_float+0xc2>
 801a200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a202:	2a01      	cmp	r2, #1
 801a204:	dc01      	bgt.n	801a20a <_printf_float+0x3ca>
 801a206:	07db      	lsls	r3, r3, #31
 801a208:	d538      	bpl.n	801a27c <_printf_float+0x43c>
 801a20a:	2301      	movs	r3, #1
 801a20c:	4642      	mov	r2, r8
 801a20e:	4631      	mov	r1, r6
 801a210:	4628      	mov	r0, r5
 801a212:	47b8      	blx	r7
 801a214:	3001      	adds	r0, #1
 801a216:	f43f ae74 	beq.w	8019f02 <_printf_float+0xc2>
 801a21a:	ee18 3a10 	vmov	r3, s16
 801a21e:	4652      	mov	r2, sl
 801a220:	4631      	mov	r1, r6
 801a222:	4628      	mov	r0, r5
 801a224:	47b8      	blx	r7
 801a226:	3001      	adds	r0, #1
 801a228:	f43f ae6b 	beq.w	8019f02 <_printf_float+0xc2>
 801a22c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a230:	2200      	movs	r2, #0
 801a232:	2300      	movs	r3, #0
 801a234:	f7e6 fc60 	bl	8000af8 <__aeabi_dcmpeq>
 801a238:	b9d8      	cbnz	r0, 801a272 <_printf_float+0x432>
 801a23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a23c:	f108 0201 	add.w	r2, r8, #1
 801a240:	3b01      	subs	r3, #1
 801a242:	4631      	mov	r1, r6
 801a244:	4628      	mov	r0, r5
 801a246:	47b8      	blx	r7
 801a248:	3001      	adds	r0, #1
 801a24a:	d10e      	bne.n	801a26a <_printf_float+0x42a>
 801a24c:	e659      	b.n	8019f02 <_printf_float+0xc2>
 801a24e:	2301      	movs	r3, #1
 801a250:	4652      	mov	r2, sl
 801a252:	4631      	mov	r1, r6
 801a254:	4628      	mov	r0, r5
 801a256:	47b8      	blx	r7
 801a258:	3001      	adds	r0, #1
 801a25a:	f43f ae52 	beq.w	8019f02 <_printf_float+0xc2>
 801a25e:	f108 0801 	add.w	r8, r8, #1
 801a262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a264:	3b01      	subs	r3, #1
 801a266:	4543      	cmp	r3, r8
 801a268:	dcf1      	bgt.n	801a24e <_printf_float+0x40e>
 801a26a:	464b      	mov	r3, r9
 801a26c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a270:	e6dc      	b.n	801a02c <_printf_float+0x1ec>
 801a272:	f04f 0800 	mov.w	r8, #0
 801a276:	f104 0a1a 	add.w	sl, r4, #26
 801a27a:	e7f2      	b.n	801a262 <_printf_float+0x422>
 801a27c:	2301      	movs	r3, #1
 801a27e:	4642      	mov	r2, r8
 801a280:	e7df      	b.n	801a242 <_printf_float+0x402>
 801a282:	2301      	movs	r3, #1
 801a284:	464a      	mov	r2, r9
 801a286:	4631      	mov	r1, r6
 801a288:	4628      	mov	r0, r5
 801a28a:	47b8      	blx	r7
 801a28c:	3001      	adds	r0, #1
 801a28e:	f43f ae38 	beq.w	8019f02 <_printf_float+0xc2>
 801a292:	f108 0801 	add.w	r8, r8, #1
 801a296:	68e3      	ldr	r3, [r4, #12]
 801a298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a29a:	1a5b      	subs	r3, r3, r1
 801a29c:	4543      	cmp	r3, r8
 801a29e:	dcf0      	bgt.n	801a282 <_printf_float+0x442>
 801a2a0:	e6fa      	b.n	801a098 <_printf_float+0x258>
 801a2a2:	f04f 0800 	mov.w	r8, #0
 801a2a6:	f104 0919 	add.w	r9, r4, #25
 801a2aa:	e7f4      	b.n	801a296 <_printf_float+0x456>

0801a2ac <_printf_common>:
 801a2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2b0:	4616      	mov	r6, r2
 801a2b2:	4699      	mov	r9, r3
 801a2b4:	688a      	ldr	r2, [r1, #8]
 801a2b6:	690b      	ldr	r3, [r1, #16]
 801a2b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a2bc:	4293      	cmp	r3, r2
 801a2be:	bfb8      	it	lt
 801a2c0:	4613      	movlt	r3, r2
 801a2c2:	6033      	str	r3, [r6, #0]
 801a2c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a2c8:	4607      	mov	r7, r0
 801a2ca:	460c      	mov	r4, r1
 801a2cc:	b10a      	cbz	r2, 801a2d2 <_printf_common+0x26>
 801a2ce:	3301      	adds	r3, #1
 801a2d0:	6033      	str	r3, [r6, #0]
 801a2d2:	6823      	ldr	r3, [r4, #0]
 801a2d4:	0699      	lsls	r1, r3, #26
 801a2d6:	bf42      	ittt	mi
 801a2d8:	6833      	ldrmi	r3, [r6, #0]
 801a2da:	3302      	addmi	r3, #2
 801a2dc:	6033      	strmi	r3, [r6, #0]
 801a2de:	6825      	ldr	r5, [r4, #0]
 801a2e0:	f015 0506 	ands.w	r5, r5, #6
 801a2e4:	d106      	bne.n	801a2f4 <_printf_common+0x48>
 801a2e6:	f104 0a19 	add.w	sl, r4, #25
 801a2ea:	68e3      	ldr	r3, [r4, #12]
 801a2ec:	6832      	ldr	r2, [r6, #0]
 801a2ee:	1a9b      	subs	r3, r3, r2
 801a2f0:	42ab      	cmp	r3, r5
 801a2f2:	dc26      	bgt.n	801a342 <_printf_common+0x96>
 801a2f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a2f8:	1e13      	subs	r3, r2, #0
 801a2fa:	6822      	ldr	r2, [r4, #0]
 801a2fc:	bf18      	it	ne
 801a2fe:	2301      	movne	r3, #1
 801a300:	0692      	lsls	r2, r2, #26
 801a302:	d42b      	bmi.n	801a35c <_printf_common+0xb0>
 801a304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a308:	4649      	mov	r1, r9
 801a30a:	4638      	mov	r0, r7
 801a30c:	47c0      	blx	r8
 801a30e:	3001      	adds	r0, #1
 801a310:	d01e      	beq.n	801a350 <_printf_common+0xa4>
 801a312:	6823      	ldr	r3, [r4, #0]
 801a314:	68e5      	ldr	r5, [r4, #12]
 801a316:	6832      	ldr	r2, [r6, #0]
 801a318:	f003 0306 	and.w	r3, r3, #6
 801a31c:	2b04      	cmp	r3, #4
 801a31e:	bf08      	it	eq
 801a320:	1aad      	subeq	r5, r5, r2
 801a322:	68a3      	ldr	r3, [r4, #8]
 801a324:	6922      	ldr	r2, [r4, #16]
 801a326:	bf0c      	ite	eq
 801a328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a32c:	2500      	movne	r5, #0
 801a32e:	4293      	cmp	r3, r2
 801a330:	bfc4      	itt	gt
 801a332:	1a9b      	subgt	r3, r3, r2
 801a334:	18ed      	addgt	r5, r5, r3
 801a336:	2600      	movs	r6, #0
 801a338:	341a      	adds	r4, #26
 801a33a:	42b5      	cmp	r5, r6
 801a33c:	d11a      	bne.n	801a374 <_printf_common+0xc8>
 801a33e:	2000      	movs	r0, #0
 801a340:	e008      	b.n	801a354 <_printf_common+0xa8>
 801a342:	2301      	movs	r3, #1
 801a344:	4652      	mov	r2, sl
 801a346:	4649      	mov	r1, r9
 801a348:	4638      	mov	r0, r7
 801a34a:	47c0      	blx	r8
 801a34c:	3001      	adds	r0, #1
 801a34e:	d103      	bne.n	801a358 <_printf_common+0xac>
 801a350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a358:	3501      	adds	r5, #1
 801a35a:	e7c6      	b.n	801a2ea <_printf_common+0x3e>
 801a35c:	18e1      	adds	r1, r4, r3
 801a35e:	1c5a      	adds	r2, r3, #1
 801a360:	2030      	movs	r0, #48	; 0x30
 801a362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a366:	4422      	add	r2, r4
 801a368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a36c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a370:	3302      	adds	r3, #2
 801a372:	e7c7      	b.n	801a304 <_printf_common+0x58>
 801a374:	2301      	movs	r3, #1
 801a376:	4622      	mov	r2, r4
 801a378:	4649      	mov	r1, r9
 801a37a:	4638      	mov	r0, r7
 801a37c:	47c0      	blx	r8
 801a37e:	3001      	adds	r0, #1
 801a380:	d0e6      	beq.n	801a350 <_printf_common+0xa4>
 801a382:	3601      	adds	r6, #1
 801a384:	e7d9      	b.n	801a33a <_printf_common+0x8e>
	...

0801a388 <_printf_i>:
 801a388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a38c:	7e0f      	ldrb	r7, [r1, #24]
 801a38e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a390:	2f78      	cmp	r7, #120	; 0x78
 801a392:	4691      	mov	r9, r2
 801a394:	4680      	mov	r8, r0
 801a396:	460c      	mov	r4, r1
 801a398:	469a      	mov	sl, r3
 801a39a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a39e:	d807      	bhi.n	801a3b0 <_printf_i+0x28>
 801a3a0:	2f62      	cmp	r7, #98	; 0x62
 801a3a2:	d80a      	bhi.n	801a3ba <_printf_i+0x32>
 801a3a4:	2f00      	cmp	r7, #0
 801a3a6:	f000 80d8 	beq.w	801a55a <_printf_i+0x1d2>
 801a3aa:	2f58      	cmp	r7, #88	; 0x58
 801a3ac:	f000 80a3 	beq.w	801a4f6 <_printf_i+0x16e>
 801a3b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a3b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a3b8:	e03a      	b.n	801a430 <_printf_i+0xa8>
 801a3ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a3be:	2b15      	cmp	r3, #21
 801a3c0:	d8f6      	bhi.n	801a3b0 <_printf_i+0x28>
 801a3c2:	a101      	add	r1, pc, #4	; (adr r1, 801a3c8 <_printf_i+0x40>)
 801a3c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a3c8:	0801a421 	.word	0x0801a421
 801a3cc:	0801a435 	.word	0x0801a435
 801a3d0:	0801a3b1 	.word	0x0801a3b1
 801a3d4:	0801a3b1 	.word	0x0801a3b1
 801a3d8:	0801a3b1 	.word	0x0801a3b1
 801a3dc:	0801a3b1 	.word	0x0801a3b1
 801a3e0:	0801a435 	.word	0x0801a435
 801a3e4:	0801a3b1 	.word	0x0801a3b1
 801a3e8:	0801a3b1 	.word	0x0801a3b1
 801a3ec:	0801a3b1 	.word	0x0801a3b1
 801a3f0:	0801a3b1 	.word	0x0801a3b1
 801a3f4:	0801a541 	.word	0x0801a541
 801a3f8:	0801a465 	.word	0x0801a465
 801a3fc:	0801a523 	.word	0x0801a523
 801a400:	0801a3b1 	.word	0x0801a3b1
 801a404:	0801a3b1 	.word	0x0801a3b1
 801a408:	0801a563 	.word	0x0801a563
 801a40c:	0801a3b1 	.word	0x0801a3b1
 801a410:	0801a465 	.word	0x0801a465
 801a414:	0801a3b1 	.word	0x0801a3b1
 801a418:	0801a3b1 	.word	0x0801a3b1
 801a41c:	0801a52b 	.word	0x0801a52b
 801a420:	682b      	ldr	r3, [r5, #0]
 801a422:	1d1a      	adds	r2, r3, #4
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	602a      	str	r2, [r5, #0]
 801a428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a42c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a430:	2301      	movs	r3, #1
 801a432:	e0a3      	b.n	801a57c <_printf_i+0x1f4>
 801a434:	6820      	ldr	r0, [r4, #0]
 801a436:	6829      	ldr	r1, [r5, #0]
 801a438:	0606      	lsls	r6, r0, #24
 801a43a:	f101 0304 	add.w	r3, r1, #4
 801a43e:	d50a      	bpl.n	801a456 <_printf_i+0xce>
 801a440:	680e      	ldr	r6, [r1, #0]
 801a442:	602b      	str	r3, [r5, #0]
 801a444:	2e00      	cmp	r6, #0
 801a446:	da03      	bge.n	801a450 <_printf_i+0xc8>
 801a448:	232d      	movs	r3, #45	; 0x2d
 801a44a:	4276      	negs	r6, r6
 801a44c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a450:	485e      	ldr	r0, [pc, #376]	; (801a5cc <_printf_i+0x244>)
 801a452:	230a      	movs	r3, #10
 801a454:	e019      	b.n	801a48a <_printf_i+0x102>
 801a456:	680e      	ldr	r6, [r1, #0]
 801a458:	602b      	str	r3, [r5, #0]
 801a45a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a45e:	bf18      	it	ne
 801a460:	b236      	sxthne	r6, r6
 801a462:	e7ef      	b.n	801a444 <_printf_i+0xbc>
 801a464:	682b      	ldr	r3, [r5, #0]
 801a466:	6820      	ldr	r0, [r4, #0]
 801a468:	1d19      	adds	r1, r3, #4
 801a46a:	6029      	str	r1, [r5, #0]
 801a46c:	0601      	lsls	r1, r0, #24
 801a46e:	d501      	bpl.n	801a474 <_printf_i+0xec>
 801a470:	681e      	ldr	r6, [r3, #0]
 801a472:	e002      	b.n	801a47a <_printf_i+0xf2>
 801a474:	0646      	lsls	r6, r0, #25
 801a476:	d5fb      	bpl.n	801a470 <_printf_i+0xe8>
 801a478:	881e      	ldrh	r6, [r3, #0]
 801a47a:	4854      	ldr	r0, [pc, #336]	; (801a5cc <_printf_i+0x244>)
 801a47c:	2f6f      	cmp	r7, #111	; 0x6f
 801a47e:	bf0c      	ite	eq
 801a480:	2308      	moveq	r3, #8
 801a482:	230a      	movne	r3, #10
 801a484:	2100      	movs	r1, #0
 801a486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a48a:	6865      	ldr	r5, [r4, #4]
 801a48c:	60a5      	str	r5, [r4, #8]
 801a48e:	2d00      	cmp	r5, #0
 801a490:	bfa2      	ittt	ge
 801a492:	6821      	ldrge	r1, [r4, #0]
 801a494:	f021 0104 	bicge.w	r1, r1, #4
 801a498:	6021      	strge	r1, [r4, #0]
 801a49a:	b90e      	cbnz	r6, 801a4a0 <_printf_i+0x118>
 801a49c:	2d00      	cmp	r5, #0
 801a49e:	d04d      	beq.n	801a53c <_printf_i+0x1b4>
 801a4a0:	4615      	mov	r5, r2
 801a4a2:	fbb6 f1f3 	udiv	r1, r6, r3
 801a4a6:	fb03 6711 	mls	r7, r3, r1, r6
 801a4aa:	5dc7      	ldrb	r7, [r0, r7]
 801a4ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a4b0:	4637      	mov	r7, r6
 801a4b2:	42bb      	cmp	r3, r7
 801a4b4:	460e      	mov	r6, r1
 801a4b6:	d9f4      	bls.n	801a4a2 <_printf_i+0x11a>
 801a4b8:	2b08      	cmp	r3, #8
 801a4ba:	d10b      	bne.n	801a4d4 <_printf_i+0x14c>
 801a4bc:	6823      	ldr	r3, [r4, #0]
 801a4be:	07de      	lsls	r6, r3, #31
 801a4c0:	d508      	bpl.n	801a4d4 <_printf_i+0x14c>
 801a4c2:	6923      	ldr	r3, [r4, #16]
 801a4c4:	6861      	ldr	r1, [r4, #4]
 801a4c6:	4299      	cmp	r1, r3
 801a4c8:	bfde      	ittt	le
 801a4ca:	2330      	movle	r3, #48	; 0x30
 801a4cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a4d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a4d4:	1b52      	subs	r2, r2, r5
 801a4d6:	6122      	str	r2, [r4, #16]
 801a4d8:	f8cd a000 	str.w	sl, [sp]
 801a4dc:	464b      	mov	r3, r9
 801a4de:	aa03      	add	r2, sp, #12
 801a4e0:	4621      	mov	r1, r4
 801a4e2:	4640      	mov	r0, r8
 801a4e4:	f7ff fee2 	bl	801a2ac <_printf_common>
 801a4e8:	3001      	adds	r0, #1
 801a4ea:	d14c      	bne.n	801a586 <_printf_i+0x1fe>
 801a4ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a4f0:	b004      	add	sp, #16
 801a4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4f6:	4835      	ldr	r0, [pc, #212]	; (801a5cc <_printf_i+0x244>)
 801a4f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a4fc:	6829      	ldr	r1, [r5, #0]
 801a4fe:	6823      	ldr	r3, [r4, #0]
 801a500:	f851 6b04 	ldr.w	r6, [r1], #4
 801a504:	6029      	str	r1, [r5, #0]
 801a506:	061d      	lsls	r5, r3, #24
 801a508:	d514      	bpl.n	801a534 <_printf_i+0x1ac>
 801a50a:	07df      	lsls	r7, r3, #31
 801a50c:	bf44      	itt	mi
 801a50e:	f043 0320 	orrmi.w	r3, r3, #32
 801a512:	6023      	strmi	r3, [r4, #0]
 801a514:	b91e      	cbnz	r6, 801a51e <_printf_i+0x196>
 801a516:	6823      	ldr	r3, [r4, #0]
 801a518:	f023 0320 	bic.w	r3, r3, #32
 801a51c:	6023      	str	r3, [r4, #0]
 801a51e:	2310      	movs	r3, #16
 801a520:	e7b0      	b.n	801a484 <_printf_i+0xfc>
 801a522:	6823      	ldr	r3, [r4, #0]
 801a524:	f043 0320 	orr.w	r3, r3, #32
 801a528:	6023      	str	r3, [r4, #0]
 801a52a:	2378      	movs	r3, #120	; 0x78
 801a52c:	4828      	ldr	r0, [pc, #160]	; (801a5d0 <_printf_i+0x248>)
 801a52e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a532:	e7e3      	b.n	801a4fc <_printf_i+0x174>
 801a534:	0659      	lsls	r1, r3, #25
 801a536:	bf48      	it	mi
 801a538:	b2b6      	uxthmi	r6, r6
 801a53a:	e7e6      	b.n	801a50a <_printf_i+0x182>
 801a53c:	4615      	mov	r5, r2
 801a53e:	e7bb      	b.n	801a4b8 <_printf_i+0x130>
 801a540:	682b      	ldr	r3, [r5, #0]
 801a542:	6826      	ldr	r6, [r4, #0]
 801a544:	6961      	ldr	r1, [r4, #20]
 801a546:	1d18      	adds	r0, r3, #4
 801a548:	6028      	str	r0, [r5, #0]
 801a54a:	0635      	lsls	r5, r6, #24
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	d501      	bpl.n	801a554 <_printf_i+0x1cc>
 801a550:	6019      	str	r1, [r3, #0]
 801a552:	e002      	b.n	801a55a <_printf_i+0x1d2>
 801a554:	0670      	lsls	r0, r6, #25
 801a556:	d5fb      	bpl.n	801a550 <_printf_i+0x1c8>
 801a558:	8019      	strh	r1, [r3, #0]
 801a55a:	2300      	movs	r3, #0
 801a55c:	6123      	str	r3, [r4, #16]
 801a55e:	4615      	mov	r5, r2
 801a560:	e7ba      	b.n	801a4d8 <_printf_i+0x150>
 801a562:	682b      	ldr	r3, [r5, #0]
 801a564:	1d1a      	adds	r2, r3, #4
 801a566:	602a      	str	r2, [r5, #0]
 801a568:	681d      	ldr	r5, [r3, #0]
 801a56a:	6862      	ldr	r2, [r4, #4]
 801a56c:	2100      	movs	r1, #0
 801a56e:	4628      	mov	r0, r5
 801a570:	f7e5 fe4e 	bl	8000210 <memchr>
 801a574:	b108      	cbz	r0, 801a57a <_printf_i+0x1f2>
 801a576:	1b40      	subs	r0, r0, r5
 801a578:	6060      	str	r0, [r4, #4]
 801a57a:	6863      	ldr	r3, [r4, #4]
 801a57c:	6123      	str	r3, [r4, #16]
 801a57e:	2300      	movs	r3, #0
 801a580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a584:	e7a8      	b.n	801a4d8 <_printf_i+0x150>
 801a586:	6923      	ldr	r3, [r4, #16]
 801a588:	462a      	mov	r2, r5
 801a58a:	4649      	mov	r1, r9
 801a58c:	4640      	mov	r0, r8
 801a58e:	47d0      	blx	sl
 801a590:	3001      	adds	r0, #1
 801a592:	d0ab      	beq.n	801a4ec <_printf_i+0x164>
 801a594:	6823      	ldr	r3, [r4, #0]
 801a596:	079b      	lsls	r3, r3, #30
 801a598:	d413      	bmi.n	801a5c2 <_printf_i+0x23a>
 801a59a:	68e0      	ldr	r0, [r4, #12]
 801a59c:	9b03      	ldr	r3, [sp, #12]
 801a59e:	4298      	cmp	r0, r3
 801a5a0:	bfb8      	it	lt
 801a5a2:	4618      	movlt	r0, r3
 801a5a4:	e7a4      	b.n	801a4f0 <_printf_i+0x168>
 801a5a6:	2301      	movs	r3, #1
 801a5a8:	4632      	mov	r2, r6
 801a5aa:	4649      	mov	r1, r9
 801a5ac:	4640      	mov	r0, r8
 801a5ae:	47d0      	blx	sl
 801a5b0:	3001      	adds	r0, #1
 801a5b2:	d09b      	beq.n	801a4ec <_printf_i+0x164>
 801a5b4:	3501      	adds	r5, #1
 801a5b6:	68e3      	ldr	r3, [r4, #12]
 801a5b8:	9903      	ldr	r1, [sp, #12]
 801a5ba:	1a5b      	subs	r3, r3, r1
 801a5bc:	42ab      	cmp	r3, r5
 801a5be:	dcf2      	bgt.n	801a5a6 <_printf_i+0x21e>
 801a5c0:	e7eb      	b.n	801a59a <_printf_i+0x212>
 801a5c2:	2500      	movs	r5, #0
 801a5c4:	f104 0619 	add.w	r6, r4, #25
 801a5c8:	e7f5      	b.n	801a5b6 <_printf_i+0x22e>
 801a5ca:	bf00      	nop
 801a5cc:	0801f4aa 	.word	0x0801f4aa
 801a5d0:	0801f4bb 	.word	0x0801f4bb

0801a5d4 <_scanf_float>:
 801a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5d8:	b087      	sub	sp, #28
 801a5da:	4617      	mov	r7, r2
 801a5dc:	9303      	str	r3, [sp, #12]
 801a5de:	688b      	ldr	r3, [r1, #8]
 801a5e0:	1e5a      	subs	r2, r3, #1
 801a5e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a5e6:	bf83      	ittte	hi
 801a5e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a5ec:	195b      	addhi	r3, r3, r5
 801a5ee:	9302      	strhi	r3, [sp, #8]
 801a5f0:	2300      	movls	r3, #0
 801a5f2:	bf86      	itte	hi
 801a5f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a5f8:	608b      	strhi	r3, [r1, #8]
 801a5fa:	9302      	strls	r3, [sp, #8]
 801a5fc:	680b      	ldr	r3, [r1, #0]
 801a5fe:	468b      	mov	fp, r1
 801a600:	2500      	movs	r5, #0
 801a602:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a606:	f84b 3b1c 	str.w	r3, [fp], #28
 801a60a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a60e:	4680      	mov	r8, r0
 801a610:	460c      	mov	r4, r1
 801a612:	465e      	mov	r6, fp
 801a614:	46aa      	mov	sl, r5
 801a616:	46a9      	mov	r9, r5
 801a618:	9501      	str	r5, [sp, #4]
 801a61a:	68a2      	ldr	r2, [r4, #8]
 801a61c:	b152      	cbz	r2, 801a634 <_scanf_float+0x60>
 801a61e:	683b      	ldr	r3, [r7, #0]
 801a620:	781b      	ldrb	r3, [r3, #0]
 801a622:	2b4e      	cmp	r3, #78	; 0x4e
 801a624:	d864      	bhi.n	801a6f0 <_scanf_float+0x11c>
 801a626:	2b40      	cmp	r3, #64	; 0x40
 801a628:	d83c      	bhi.n	801a6a4 <_scanf_float+0xd0>
 801a62a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a62e:	b2c8      	uxtb	r0, r1
 801a630:	280e      	cmp	r0, #14
 801a632:	d93a      	bls.n	801a6aa <_scanf_float+0xd6>
 801a634:	f1b9 0f00 	cmp.w	r9, #0
 801a638:	d003      	beq.n	801a642 <_scanf_float+0x6e>
 801a63a:	6823      	ldr	r3, [r4, #0]
 801a63c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a640:	6023      	str	r3, [r4, #0]
 801a642:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a646:	f1ba 0f01 	cmp.w	sl, #1
 801a64a:	f200 8113 	bhi.w	801a874 <_scanf_float+0x2a0>
 801a64e:	455e      	cmp	r6, fp
 801a650:	f200 8105 	bhi.w	801a85e <_scanf_float+0x28a>
 801a654:	2501      	movs	r5, #1
 801a656:	4628      	mov	r0, r5
 801a658:	b007      	add	sp, #28
 801a65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a65e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a662:	2a0d      	cmp	r2, #13
 801a664:	d8e6      	bhi.n	801a634 <_scanf_float+0x60>
 801a666:	a101      	add	r1, pc, #4	; (adr r1, 801a66c <_scanf_float+0x98>)
 801a668:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a66c:	0801a7ab 	.word	0x0801a7ab
 801a670:	0801a635 	.word	0x0801a635
 801a674:	0801a635 	.word	0x0801a635
 801a678:	0801a635 	.word	0x0801a635
 801a67c:	0801a80b 	.word	0x0801a80b
 801a680:	0801a7e3 	.word	0x0801a7e3
 801a684:	0801a635 	.word	0x0801a635
 801a688:	0801a635 	.word	0x0801a635
 801a68c:	0801a7b9 	.word	0x0801a7b9
 801a690:	0801a635 	.word	0x0801a635
 801a694:	0801a635 	.word	0x0801a635
 801a698:	0801a635 	.word	0x0801a635
 801a69c:	0801a635 	.word	0x0801a635
 801a6a0:	0801a771 	.word	0x0801a771
 801a6a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a6a8:	e7db      	b.n	801a662 <_scanf_float+0x8e>
 801a6aa:	290e      	cmp	r1, #14
 801a6ac:	d8c2      	bhi.n	801a634 <_scanf_float+0x60>
 801a6ae:	a001      	add	r0, pc, #4	; (adr r0, 801a6b4 <_scanf_float+0xe0>)
 801a6b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a6b4:	0801a763 	.word	0x0801a763
 801a6b8:	0801a635 	.word	0x0801a635
 801a6bc:	0801a763 	.word	0x0801a763
 801a6c0:	0801a7f7 	.word	0x0801a7f7
 801a6c4:	0801a635 	.word	0x0801a635
 801a6c8:	0801a711 	.word	0x0801a711
 801a6cc:	0801a74d 	.word	0x0801a74d
 801a6d0:	0801a74d 	.word	0x0801a74d
 801a6d4:	0801a74d 	.word	0x0801a74d
 801a6d8:	0801a74d 	.word	0x0801a74d
 801a6dc:	0801a74d 	.word	0x0801a74d
 801a6e0:	0801a74d 	.word	0x0801a74d
 801a6e4:	0801a74d 	.word	0x0801a74d
 801a6e8:	0801a74d 	.word	0x0801a74d
 801a6ec:	0801a74d 	.word	0x0801a74d
 801a6f0:	2b6e      	cmp	r3, #110	; 0x6e
 801a6f2:	d809      	bhi.n	801a708 <_scanf_float+0x134>
 801a6f4:	2b60      	cmp	r3, #96	; 0x60
 801a6f6:	d8b2      	bhi.n	801a65e <_scanf_float+0x8a>
 801a6f8:	2b54      	cmp	r3, #84	; 0x54
 801a6fa:	d077      	beq.n	801a7ec <_scanf_float+0x218>
 801a6fc:	2b59      	cmp	r3, #89	; 0x59
 801a6fe:	d199      	bne.n	801a634 <_scanf_float+0x60>
 801a700:	2d07      	cmp	r5, #7
 801a702:	d197      	bne.n	801a634 <_scanf_float+0x60>
 801a704:	2508      	movs	r5, #8
 801a706:	e029      	b.n	801a75c <_scanf_float+0x188>
 801a708:	2b74      	cmp	r3, #116	; 0x74
 801a70a:	d06f      	beq.n	801a7ec <_scanf_float+0x218>
 801a70c:	2b79      	cmp	r3, #121	; 0x79
 801a70e:	e7f6      	b.n	801a6fe <_scanf_float+0x12a>
 801a710:	6821      	ldr	r1, [r4, #0]
 801a712:	05c8      	lsls	r0, r1, #23
 801a714:	d51a      	bpl.n	801a74c <_scanf_float+0x178>
 801a716:	9b02      	ldr	r3, [sp, #8]
 801a718:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a71c:	6021      	str	r1, [r4, #0]
 801a71e:	f109 0901 	add.w	r9, r9, #1
 801a722:	b11b      	cbz	r3, 801a72c <_scanf_float+0x158>
 801a724:	3b01      	subs	r3, #1
 801a726:	3201      	adds	r2, #1
 801a728:	9302      	str	r3, [sp, #8]
 801a72a:	60a2      	str	r2, [r4, #8]
 801a72c:	68a3      	ldr	r3, [r4, #8]
 801a72e:	3b01      	subs	r3, #1
 801a730:	60a3      	str	r3, [r4, #8]
 801a732:	6923      	ldr	r3, [r4, #16]
 801a734:	3301      	adds	r3, #1
 801a736:	6123      	str	r3, [r4, #16]
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	3b01      	subs	r3, #1
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	607b      	str	r3, [r7, #4]
 801a740:	f340 8084 	ble.w	801a84c <_scanf_float+0x278>
 801a744:	683b      	ldr	r3, [r7, #0]
 801a746:	3301      	adds	r3, #1
 801a748:	603b      	str	r3, [r7, #0]
 801a74a:	e766      	b.n	801a61a <_scanf_float+0x46>
 801a74c:	eb1a 0f05 	cmn.w	sl, r5
 801a750:	f47f af70 	bne.w	801a634 <_scanf_float+0x60>
 801a754:	6822      	ldr	r2, [r4, #0]
 801a756:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a75a:	6022      	str	r2, [r4, #0]
 801a75c:	f806 3b01 	strb.w	r3, [r6], #1
 801a760:	e7e4      	b.n	801a72c <_scanf_float+0x158>
 801a762:	6822      	ldr	r2, [r4, #0]
 801a764:	0610      	lsls	r0, r2, #24
 801a766:	f57f af65 	bpl.w	801a634 <_scanf_float+0x60>
 801a76a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a76e:	e7f4      	b.n	801a75a <_scanf_float+0x186>
 801a770:	f1ba 0f00 	cmp.w	sl, #0
 801a774:	d10e      	bne.n	801a794 <_scanf_float+0x1c0>
 801a776:	f1b9 0f00 	cmp.w	r9, #0
 801a77a:	d10e      	bne.n	801a79a <_scanf_float+0x1c6>
 801a77c:	6822      	ldr	r2, [r4, #0]
 801a77e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a782:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a786:	d108      	bne.n	801a79a <_scanf_float+0x1c6>
 801a788:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a78c:	6022      	str	r2, [r4, #0]
 801a78e:	f04f 0a01 	mov.w	sl, #1
 801a792:	e7e3      	b.n	801a75c <_scanf_float+0x188>
 801a794:	f1ba 0f02 	cmp.w	sl, #2
 801a798:	d055      	beq.n	801a846 <_scanf_float+0x272>
 801a79a:	2d01      	cmp	r5, #1
 801a79c:	d002      	beq.n	801a7a4 <_scanf_float+0x1d0>
 801a79e:	2d04      	cmp	r5, #4
 801a7a0:	f47f af48 	bne.w	801a634 <_scanf_float+0x60>
 801a7a4:	3501      	adds	r5, #1
 801a7a6:	b2ed      	uxtb	r5, r5
 801a7a8:	e7d8      	b.n	801a75c <_scanf_float+0x188>
 801a7aa:	f1ba 0f01 	cmp.w	sl, #1
 801a7ae:	f47f af41 	bne.w	801a634 <_scanf_float+0x60>
 801a7b2:	f04f 0a02 	mov.w	sl, #2
 801a7b6:	e7d1      	b.n	801a75c <_scanf_float+0x188>
 801a7b8:	b97d      	cbnz	r5, 801a7da <_scanf_float+0x206>
 801a7ba:	f1b9 0f00 	cmp.w	r9, #0
 801a7be:	f47f af3c 	bne.w	801a63a <_scanf_float+0x66>
 801a7c2:	6822      	ldr	r2, [r4, #0]
 801a7c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a7c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a7cc:	f47f af39 	bne.w	801a642 <_scanf_float+0x6e>
 801a7d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a7d4:	6022      	str	r2, [r4, #0]
 801a7d6:	2501      	movs	r5, #1
 801a7d8:	e7c0      	b.n	801a75c <_scanf_float+0x188>
 801a7da:	2d03      	cmp	r5, #3
 801a7dc:	d0e2      	beq.n	801a7a4 <_scanf_float+0x1d0>
 801a7de:	2d05      	cmp	r5, #5
 801a7e0:	e7de      	b.n	801a7a0 <_scanf_float+0x1cc>
 801a7e2:	2d02      	cmp	r5, #2
 801a7e4:	f47f af26 	bne.w	801a634 <_scanf_float+0x60>
 801a7e8:	2503      	movs	r5, #3
 801a7ea:	e7b7      	b.n	801a75c <_scanf_float+0x188>
 801a7ec:	2d06      	cmp	r5, #6
 801a7ee:	f47f af21 	bne.w	801a634 <_scanf_float+0x60>
 801a7f2:	2507      	movs	r5, #7
 801a7f4:	e7b2      	b.n	801a75c <_scanf_float+0x188>
 801a7f6:	6822      	ldr	r2, [r4, #0]
 801a7f8:	0591      	lsls	r1, r2, #22
 801a7fa:	f57f af1b 	bpl.w	801a634 <_scanf_float+0x60>
 801a7fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a802:	6022      	str	r2, [r4, #0]
 801a804:	f8cd 9004 	str.w	r9, [sp, #4]
 801a808:	e7a8      	b.n	801a75c <_scanf_float+0x188>
 801a80a:	6822      	ldr	r2, [r4, #0]
 801a80c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a810:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a814:	d006      	beq.n	801a824 <_scanf_float+0x250>
 801a816:	0550      	lsls	r0, r2, #21
 801a818:	f57f af0c 	bpl.w	801a634 <_scanf_float+0x60>
 801a81c:	f1b9 0f00 	cmp.w	r9, #0
 801a820:	f43f af0f 	beq.w	801a642 <_scanf_float+0x6e>
 801a824:	0591      	lsls	r1, r2, #22
 801a826:	bf58      	it	pl
 801a828:	9901      	ldrpl	r1, [sp, #4]
 801a82a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a82e:	bf58      	it	pl
 801a830:	eba9 0101 	subpl.w	r1, r9, r1
 801a834:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a838:	bf58      	it	pl
 801a83a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a83e:	6022      	str	r2, [r4, #0]
 801a840:	f04f 0900 	mov.w	r9, #0
 801a844:	e78a      	b.n	801a75c <_scanf_float+0x188>
 801a846:	f04f 0a03 	mov.w	sl, #3
 801a84a:	e787      	b.n	801a75c <_scanf_float+0x188>
 801a84c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a850:	4639      	mov	r1, r7
 801a852:	4640      	mov	r0, r8
 801a854:	4798      	blx	r3
 801a856:	2800      	cmp	r0, #0
 801a858:	f43f aedf 	beq.w	801a61a <_scanf_float+0x46>
 801a85c:	e6ea      	b.n	801a634 <_scanf_float+0x60>
 801a85e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a866:	463a      	mov	r2, r7
 801a868:	4640      	mov	r0, r8
 801a86a:	4798      	blx	r3
 801a86c:	6923      	ldr	r3, [r4, #16]
 801a86e:	3b01      	subs	r3, #1
 801a870:	6123      	str	r3, [r4, #16]
 801a872:	e6ec      	b.n	801a64e <_scanf_float+0x7a>
 801a874:	1e6b      	subs	r3, r5, #1
 801a876:	2b06      	cmp	r3, #6
 801a878:	d825      	bhi.n	801a8c6 <_scanf_float+0x2f2>
 801a87a:	2d02      	cmp	r5, #2
 801a87c:	d836      	bhi.n	801a8ec <_scanf_float+0x318>
 801a87e:	455e      	cmp	r6, fp
 801a880:	f67f aee8 	bls.w	801a654 <_scanf_float+0x80>
 801a884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a888:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a88c:	463a      	mov	r2, r7
 801a88e:	4640      	mov	r0, r8
 801a890:	4798      	blx	r3
 801a892:	6923      	ldr	r3, [r4, #16]
 801a894:	3b01      	subs	r3, #1
 801a896:	6123      	str	r3, [r4, #16]
 801a898:	e7f1      	b.n	801a87e <_scanf_float+0x2aa>
 801a89a:	9802      	ldr	r0, [sp, #8]
 801a89c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a8a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a8a4:	9002      	str	r0, [sp, #8]
 801a8a6:	463a      	mov	r2, r7
 801a8a8:	4640      	mov	r0, r8
 801a8aa:	4798      	blx	r3
 801a8ac:	6923      	ldr	r3, [r4, #16]
 801a8ae:	3b01      	subs	r3, #1
 801a8b0:	6123      	str	r3, [r4, #16]
 801a8b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a8b6:	fa5f fa8a 	uxtb.w	sl, sl
 801a8ba:	f1ba 0f02 	cmp.w	sl, #2
 801a8be:	d1ec      	bne.n	801a89a <_scanf_float+0x2c6>
 801a8c0:	3d03      	subs	r5, #3
 801a8c2:	b2ed      	uxtb	r5, r5
 801a8c4:	1b76      	subs	r6, r6, r5
 801a8c6:	6823      	ldr	r3, [r4, #0]
 801a8c8:	05da      	lsls	r2, r3, #23
 801a8ca:	d52f      	bpl.n	801a92c <_scanf_float+0x358>
 801a8cc:	055b      	lsls	r3, r3, #21
 801a8ce:	d510      	bpl.n	801a8f2 <_scanf_float+0x31e>
 801a8d0:	455e      	cmp	r6, fp
 801a8d2:	f67f aebf 	bls.w	801a654 <_scanf_float+0x80>
 801a8d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a8da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a8de:	463a      	mov	r2, r7
 801a8e0:	4640      	mov	r0, r8
 801a8e2:	4798      	blx	r3
 801a8e4:	6923      	ldr	r3, [r4, #16]
 801a8e6:	3b01      	subs	r3, #1
 801a8e8:	6123      	str	r3, [r4, #16]
 801a8ea:	e7f1      	b.n	801a8d0 <_scanf_float+0x2fc>
 801a8ec:	46aa      	mov	sl, r5
 801a8ee:	9602      	str	r6, [sp, #8]
 801a8f0:	e7df      	b.n	801a8b2 <_scanf_float+0x2de>
 801a8f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a8f6:	6923      	ldr	r3, [r4, #16]
 801a8f8:	2965      	cmp	r1, #101	; 0x65
 801a8fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801a8fe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801a902:	6123      	str	r3, [r4, #16]
 801a904:	d00c      	beq.n	801a920 <_scanf_float+0x34c>
 801a906:	2945      	cmp	r1, #69	; 0x45
 801a908:	d00a      	beq.n	801a920 <_scanf_float+0x34c>
 801a90a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a90e:	463a      	mov	r2, r7
 801a910:	4640      	mov	r0, r8
 801a912:	4798      	blx	r3
 801a914:	6923      	ldr	r3, [r4, #16]
 801a916:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a91a:	3b01      	subs	r3, #1
 801a91c:	1eb5      	subs	r5, r6, #2
 801a91e:	6123      	str	r3, [r4, #16]
 801a920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a924:	463a      	mov	r2, r7
 801a926:	4640      	mov	r0, r8
 801a928:	4798      	blx	r3
 801a92a:	462e      	mov	r6, r5
 801a92c:	6825      	ldr	r5, [r4, #0]
 801a92e:	f015 0510 	ands.w	r5, r5, #16
 801a932:	d159      	bne.n	801a9e8 <_scanf_float+0x414>
 801a934:	7035      	strb	r5, [r6, #0]
 801a936:	6823      	ldr	r3, [r4, #0]
 801a938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a93c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a940:	d11b      	bne.n	801a97a <_scanf_float+0x3a6>
 801a942:	9b01      	ldr	r3, [sp, #4]
 801a944:	454b      	cmp	r3, r9
 801a946:	eba3 0209 	sub.w	r2, r3, r9
 801a94a:	d123      	bne.n	801a994 <_scanf_float+0x3c0>
 801a94c:	2200      	movs	r2, #0
 801a94e:	4659      	mov	r1, fp
 801a950:	4640      	mov	r0, r8
 801a952:	f001 f8cb 	bl	801baec <_strtod_r>
 801a956:	6822      	ldr	r2, [r4, #0]
 801a958:	9b03      	ldr	r3, [sp, #12]
 801a95a:	f012 0f02 	tst.w	r2, #2
 801a95e:	ec57 6b10 	vmov	r6, r7, d0
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	d021      	beq.n	801a9aa <_scanf_float+0x3d6>
 801a966:	9903      	ldr	r1, [sp, #12]
 801a968:	1d1a      	adds	r2, r3, #4
 801a96a:	600a      	str	r2, [r1, #0]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	e9c3 6700 	strd	r6, r7, [r3]
 801a972:	68e3      	ldr	r3, [r4, #12]
 801a974:	3301      	adds	r3, #1
 801a976:	60e3      	str	r3, [r4, #12]
 801a978:	e66d      	b.n	801a656 <_scanf_float+0x82>
 801a97a:	9b04      	ldr	r3, [sp, #16]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d0e5      	beq.n	801a94c <_scanf_float+0x378>
 801a980:	9905      	ldr	r1, [sp, #20]
 801a982:	230a      	movs	r3, #10
 801a984:	462a      	mov	r2, r5
 801a986:	3101      	adds	r1, #1
 801a988:	4640      	mov	r0, r8
 801a98a:	f001 f993 	bl	801bcb4 <_strtol_r>
 801a98e:	9b04      	ldr	r3, [sp, #16]
 801a990:	9e05      	ldr	r6, [sp, #20]
 801a992:	1ac2      	subs	r2, r0, r3
 801a994:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a998:	429e      	cmp	r6, r3
 801a99a:	bf28      	it	cs
 801a99c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a9a0:	4912      	ldr	r1, [pc, #72]	; (801a9ec <_scanf_float+0x418>)
 801a9a2:	4630      	mov	r0, r6
 801a9a4:	f000 f9dc 	bl	801ad60 <siprintf>
 801a9a8:	e7d0      	b.n	801a94c <_scanf_float+0x378>
 801a9aa:	9903      	ldr	r1, [sp, #12]
 801a9ac:	f012 0f04 	tst.w	r2, #4
 801a9b0:	f103 0204 	add.w	r2, r3, #4
 801a9b4:	600a      	str	r2, [r1, #0]
 801a9b6:	d1d9      	bne.n	801a96c <_scanf_float+0x398>
 801a9b8:	f8d3 8000 	ldr.w	r8, [r3]
 801a9bc:	ee10 2a10 	vmov	r2, s0
 801a9c0:	ee10 0a10 	vmov	r0, s0
 801a9c4:	463b      	mov	r3, r7
 801a9c6:	4639      	mov	r1, r7
 801a9c8:	f7e6 f8c8 	bl	8000b5c <__aeabi_dcmpun>
 801a9cc:	b128      	cbz	r0, 801a9da <_scanf_float+0x406>
 801a9ce:	4808      	ldr	r0, [pc, #32]	; (801a9f0 <_scanf_float+0x41c>)
 801a9d0:	f000 f98c 	bl	801acec <nanf>
 801a9d4:	ed88 0a00 	vstr	s0, [r8]
 801a9d8:	e7cb      	b.n	801a972 <_scanf_float+0x39e>
 801a9da:	4630      	mov	r0, r6
 801a9dc:	4639      	mov	r1, r7
 801a9de:	f7e6 f91b 	bl	8000c18 <__aeabi_d2f>
 801a9e2:	f8c8 0000 	str.w	r0, [r8]
 801a9e6:	e7c4      	b.n	801a972 <_scanf_float+0x39e>
 801a9e8:	2500      	movs	r5, #0
 801a9ea:	e634      	b.n	801a656 <_scanf_float+0x82>
 801a9ec:	0801f4cc 	.word	0x0801f4cc
 801a9f0:	0801f630 	.word	0x0801f630

0801a9f4 <iprintf>:
 801a9f4:	b40f      	push	{r0, r1, r2, r3}
 801a9f6:	4b0a      	ldr	r3, [pc, #40]	; (801aa20 <iprintf+0x2c>)
 801a9f8:	b513      	push	{r0, r1, r4, lr}
 801a9fa:	681c      	ldr	r4, [r3, #0]
 801a9fc:	b124      	cbz	r4, 801aa08 <iprintf+0x14>
 801a9fe:	69a3      	ldr	r3, [r4, #24]
 801aa00:	b913      	cbnz	r3, 801aa08 <iprintf+0x14>
 801aa02:	4620      	mov	r0, r4
 801aa04:	f7fe ff38 	bl	8019878 <__sinit>
 801aa08:	ab05      	add	r3, sp, #20
 801aa0a:	9a04      	ldr	r2, [sp, #16]
 801aa0c:	68a1      	ldr	r1, [r4, #8]
 801aa0e:	9301      	str	r3, [sp, #4]
 801aa10:	4620      	mov	r0, r4
 801aa12:	f003 fceb 	bl	801e3ec <_vfiprintf_r>
 801aa16:	b002      	add	sp, #8
 801aa18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa1c:	b004      	add	sp, #16
 801aa1e:	4770      	bx	lr
 801aa20:	2000008c 	.word	0x2000008c

0801aa24 <_puts_r>:
 801aa24:	b570      	push	{r4, r5, r6, lr}
 801aa26:	460e      	mov	r6, r1
 801aa28:	4605      	mov	r5, r0
 801aa2a:	b118      	cbz	r0, 801aa34 <_puts_r+0x10>
 801aa2c:	6983      	ldr	r3, [r0, #24]
 801aa2e:	b90b      	cbnz	r3, 801aa34 <_puts_r+0x10>
 801aa30:	f7fe ff22 	bl	8019878 <__sinit>
 801aa34:	69ab      	ldr	r3, [r5, #24]
 801aa36:	68ac      	ldr	r4, [r5, #8]
 801aa38:	b913      	cbnz	r3, 801aa40 <_puts_r+0x1c>
 801aa3a:	4628      	mov	r0, r5
 801aa3c:	f7fe ff1c 	bl	8019878 <__sinit>
 801aa40:	4b2c      	ldr	r3, [pc, #176]	; (801aaf4 <_puts_r+0xd0>)
 801aa42:	429c      	cmp	r4, r3
 801aa44:	d120      	bne.n	801aa88 <_puts_r+0x64>
 801aa46:	686c      	ldr	r4, [r5, #4]
 801aa48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aa4a:	07db      	lsls	r3, r3, #31
 801aa4c:	d405      	bmi.n	801aa5a <_puts_r+0x36>
 801aa4e:	89a3      	ldrh	r3, [r4, #12]
 801aa50:	0598      	lsls	r0, r3, #22
 801aa52:	d402      	bmi.n	801aa5a <_puts_r+0x36>
 801aa54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aa56:	f7ff f81a 	bl	8019a8e <__retarget_lock_acquire_recursive>
 801aa5a:	89a3      	ldrh	r3, [r4, #12]
 801aa5c:	0719      	lsls	r1, r3, #28
 801aa5e:	d51d      	bpl.n	801aa9c <_puts_r+0x78>
 801aa60:	6923      	ldr	r3, [r4, #16]
 801aa62:	b1db      	cbz	r3, 801aa9c <_puts_r+0x78>
 801aa64:	3e01      	subs	r6, #1
 801aa66:	68a3      	ldr	r3, [r4, #8]
 801aa68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801aa6c:	3b01      	subs	r3, #1
 801aa6e:	60a3      	str	r3, [r4, #8]
 801aa70:	bb39      	cbnz	r1, 801aac2 <_puts_r+0x9e>
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	da38      	bge.n	801aae8 <_puts_r+0xc4>
 801aa76:	4622      	mov	r2, r4
 801aa78:	210a      	movs	r1, #10
 801aa7a:	4628      	mov	r0, r5
 801aa7c:	f001 f9dc 	bl	801be38 <__swbuf_r>
 801aa80:	3001      	adds	r0, #1
 801aa82:	d011      	beq.n	801aaa8 <_puts_r+0x84>
 801aa84:	250a      	movs	r5, #10
 801aa86:	e011      	b.n	801aaac <_puts_r+0x88>
 801aa88:	4b1b      	ldr	r3, [pc, #108]	; (801aaf8 <_puts_r+0xd4>)
 801aa8a:	429c      	cmp	r4, r3
 801aa8c:	d101      	bne.n	801aa92 <_puts_r+0x6e>
 801aa8e:	68ac      	ldr	r4, [r5, #8]
 801aa90:	e7da      	b.n	801aa48 <_puts_r+0x24>
 801aa92:	4b1a      	ldr	r3, [pc, #104]	; (801aafc <_puts_r+0xd8>)
 801aa94:	429c      	cmp	r4, r3
 801aa96:	bf08      	it	eq
 801aa98:	68ec      	ldreq	r4, [r5, #12]
 801aa9a:	e7d5      	b.n	801aa48 <_puts_r+0x24>
 801aa9c:	4621      	mov	r1, r4
 801aa9e:	4628      	mov	r0, r5
 801aaa0:	f001 fa2e 	bl	801bf00 <__swsetup_r>
 801aaa4:	2800      	cmp	r0, #0
 801aaa6:	d0dd      	beq.n	801aa64 <_puts_r+0x40>
 801aaa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801aaac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aaae:	07da      	lsls	r2, r3, #31
 801aab0:	d405      	bmi.n	801aabe <_puts_r+0x9a>
 801aab2:	89a3      	ldrh	r3, [r4, #12]
 801aab4:	059b      	lsls	r3, r3, #22
 801aab6:	d402      	bmi.n	801aabe <_puts_r+0x9a>
 801aab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aaba:	f7fe ffe9 	bl	8019a90 <__retarget_lock_release_recursive>
 801aabe:	4628      	mov	r0, r5
 801aac0:	bd70      	pop	{r4, r5, r6, pc}
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	da04      	bge.n	801aad0 <_puts_r+0xac>
 801aac6:	69a2      	ldr	r2, [r4, #24]
 801aac8:	429a      	cmp	r2, r3
 801aaca:	dc06      	bgt.n	801aada <_puts_r+0xb6>
 801aacc:	290a      	cmp	r1, #10
 801aace:	d004      	beq.n	801aada <_puts_r+0xb6>
 801aad0:	6823      	ldr	r3, [r4, #0]
 801aad2:	1c5a      	adds	r2, r3, #1
 801aad4:	6022      	str	r2, [r4, #0]
 801aad6:	7019      	strb	r1, [r3, #0]
 801aad8:	e7c5      	b.n	801aa66 <_puts_r+0x42>
 801aada:	4622      	mov	r2, r4
 801aadc:	4628      	mov	r0, r5
 801aade:	f001 f9ab 	bl	801be38 <__swbuf_r>
 801aae2:	3001      	adds	r0, #1
 801aae4:	d1bf      	bne.n	801aa66 <_puts_r+0x42>
 801aae6:	e7df      	b.n	801aaa8 <_puts_r+0x84>
 801aae8:	6823      	ldr	r3, [r4, #0]
 801aaea:	250a      	movs	r5, #10
 801aaec:	1c5a      	adds	r2, r3, #1
 801aaee:	6022      	str	r2, [r4, #0]
 801aaf0:	701d      	strb	r5, [r3, #0]
 801aaf2:	e7db      	b.n	801aaac <_puts_r+0x88>
 801aaf4:	0801f454 	.word	0x0801f454
 801aaf8:	0801f474 	.word	0x0801f474
 801aafc:	0801f434 	.word	0x0801f434

0801ab00 <puts>:
 801ab00:	4b02      	ldr	r3, [pc, #8]	; (801ab0c <puts+0xc>)
 801ab02:	4601      	mov	r1, r0
 801ab04:	6818      	ldr	r0, [r3, #0]
 801ab06:	f7ff bf8d 	b.w	801aa24 <_puts_r>
 801ab0a:	bf00      	nop
 801ab0c:	2000008c 	.word	0x2000008c

0801ab10 <srand>:
 801ab10:	b538      	push	{r3, r4, r5, lr}
 801ab12:	4b10      	ldr	r3, [pc, #64]	; (801ab54 <srand+0x44>)
 801ab14:	681d      	ldr	r5, [r3, #0]
 801ab16:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801ab18:	4604      	mov	r4, r0
 801ab1a:	b9b3      	cbnz	r3, 801ab4a <srand+0x3a>
 801ab1c:	2018      	movs	r0, #24
 801ab1e:	f7fe ffb9 	bl	8019a94 <malloc>
 801ab22:	4602      	mov	r2, r0
 801ab24:	63a8      	str	r0, [r5, #56]	; 0x38
 801ab26:	b920      	cbnz	r0, 801ab32 <srand+0x22>
 801ab28:	4b0b      	ldr	r3, [pc, #44]	; (801ab58 <srand+0x48>)
 801ab2a:	480c      	ldr	r0, [pc, #48]	; (801ab5c <srand+0x4c>)
 801ab2c:	2142      	movs	r1, #66	; 0x42
 801ab2e:	f001 fa55 	bl	801bfdc <__assert_func>
 801ab32:	490b      	ldr	r1, [pc, #44]	; (801ab60 <srand+0x50>)
 801ab34:	4b0b      	ldr	r3, [pc, #44]	; (801ab64 <srand+0x54>)
 801ab36:	e9c0 1300 	strd	r1, r3, [r0]
 801ab3a:	4b0b      	ldr	r3, [pc, #44]	; (801ab68 <srand+0x58>)
 801ab3c:	6083      	str	r3, [r0, #8]
 801ab3e:	230b      	movs	r3, #11
 801ab40:	8183      	strh	r3, [r0, #12]
 801ab42:	2100      	movs	r1, #0
 801ab44:	2001      	movs	r0, #1
 801ab46:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ab4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801ab4c:	2200      	movs	r2, #0
 801ab4e:	611c      	str	r4, [r3, #16]
 801ab50:	615a      	str	r2, [r3, #20]
 801ab52:	bd38      	pop	{r3, r4, r5, pc}
 801ab54:	2000008c 	.word	0x2000008c
 801ab58:	0801f4d1 	.word	0x0801f4d1
 801ab5c:	0801f4e8 	.word	0x0801f4e8
 801ab60:	abcd330e 	.word	0xabcd330e
 801ab64:	e66d1234 	.word	0xe66d1234
 801ab68:	0005deec 	.word	0x0005deec

0801ab6c <rand>:
 801ab6c:	4b16      	ldr	r3, [pc, #88]	; (801abc8 <rand+0x5c>)
 801ab6e:	b510      	push	{r4, lr}
 801ab70:	681c      	ldr	r4, [r3, #0]
 801ab72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ab74:	b9b3      	cbnz	r3, 801aba4 <rand+0x38>
 801ab76:	2018      	movs	r0, #24
 801ab78:	f7fe ff8c 	bl	8019a94 <malloc>
 801ab7c:	63a0      	str	r0, [r4, #56]	; 0x38
 801ab7e:	b928      	cbnz	r0, 801ab8c <rand+0x20>
 801ab80:	4602      	mov	r2, r0
 801ab82:	4b12      	ldr	r3, [pc, #72]	; (801abcc <rand+0x60>)
 801ab84:	4812      	ldr	r0, [pc, #72]	; (801abd0 <rand+0x64>)
 801ab86:	214e      	movs	r1, #78	; 0x4e
 801ab88:	f001 fa28 	bl	801bfdc <__assert_func>
 801ab8c:	4a11      	ldr	r2, [pc, #68]	; (801abd4 <rand+0x68>)
 801ab8e:	4b12      	ldr	r3, [pc, #72]	; (801abd8 <rand+0x6c>)
 801ab90:	e9c0 2300 	strd	r2, r3, [r0]
 801ab94:	4b11      	ldr	r3, [pc, #68]	; (801abdc <rand+0x70>)
 801ab96:	6083      	str	r3, [r0, #8]
 801ab98:	230b      	movs	r3, #11
 801ab9a:	8183      	strh	r3, [r0, #12]
 801ab9c:	2201      	movs	r2, #1
 801ab9e:	2300      	movs	r3, #0
 801aba0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801aba4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801aba6:	4a0e      	ldr	r2, [pc, #56]	; (801abe0 <rand+0x74>)
 801aba8:	6920      	ldr	r0, [r4, #16]
 801abaa:	6963      	ldr	r3, [r4, #20]
 801abac:	490d      	ldr	r1, [pc, #52]	; (801abe4 <rand+0x78>)
 801abae:	4342      	muls	r2, r0
 801abb0:	fb01 2203 	mla	r2, r1, r3, r2
 801abb4:	fba0 0101 	umull	r0, r1, r0, r1
 801abb8:	1c43      	adds	r3, r0, #1
 801abba:	eb42 0001 	adc.w	r0, r2, r1
 801abbe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801abc2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801abc6:	bd10      	pop	{r4, pc}
 801abc8:	2000008c 	.word	0x2000008c
 801abcc:	0801f4d1 	.word	0x0801f4d1
 801abd0:	0801f4e8 	.word	0x0801f4e8
 801abd4:	abcd330e 	.word	0xabcd330e
 801abd8:	e66d1234 	.word	0xe66d1234
 801abdc:	0005deec 	.word	0x0005deec
 801abe0:	5851f42d 	.word	0x5851f42d
 801abe4:	4c957f2d 	.word	0x4c957f2d

0801abe8 <realloc>:
 801abe8:	4b02      	ldr	r3, [pc, #8]	; (801abf4 <realloc+0xc>)
 801abea:	460a      	mov	r2, r1
 801abec:	4601      	mov	r1, r0
 801abee:	6818      	ldr	r0, [r3, #0]
 801abf0:	f003 ba47 	b.w	801e082 <_realloc_r>
 801abf4:	2000008c 	.word	0x2000008c

0801abf8 <cleanup_glue>:
 801abf8:	b538      	push	{r3, r4, r5, lr}
 801abfa:	460c      	mov	r4, r1
 801abfc:	6809      	ldr	r1, [r1, #0]
 801abfe:	4605      	mov	r5, r0
 801ac00:	b109      	cbz	r1, 801ac06 <cleanup_glue+0xe>
 801ac02:	f7ff fff9 	bl	801abf8 <cleanup_glue>
 801ac06:	4621      	mov	r1, r4
 801ac08:	4628      	mov	r0, r5
 801ac0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac0e:	f7fe bf97 	b.w	8019b40 <_free_r>
	...

0801ac14 <_reclaim_reent>:
 801ac14:	4b2c      	ldr	r3, [pc, #176]	; (801acc8 <_reclaim_reent+0xb4>)
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	4283      	cmp	r3, r0
 801ac1a:	b570      	push	{r4, r5, r6, lr}
 801ac1c:	4604      	mov	r4, r0
 801ac1e:	d051      	beq.n	801acc4 <_reclaim_reent+0xb0>
 801ac20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ac22:	b143      	cbz	r3, 801ac36 <_reclaim_reent+0x22>
 801ac24:	68db      	ldr	r3, [r3, #12]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d14a      	bne.n	801acc0 <_reclaim_reent+0xac>
 801ac2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac2c:	6819      	ldr	r1, [r3, #0]
 801ac2e:	b111      	cbz	r1, 801ac36 <_reclaim_reent+0x22>
 801ac30:	4620      	mov	r0, r4
 801ac32:	f7fe ff85 	bl	8019b40 <_free_r>
 801ac36:	6961      	ldr	r1, [r4, #20]
 801ac38:	b111      	cbz	r1, 801ac40 <_reclaim_reent+0x2c>
 801ac3a:	4620      	mov	r0, r4
 801ac3c:	f7fe ff80 	bl	8019b40 <_free_r>
 801ac40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ac42:	b111      	cbz	r1, 801ac4a <_reclaim_reent+0x36>
 801ac44:	4620      	mov	r0, r4
 801ac46:	f7fe ff7b 	bl	8019b40 <_free_r>
 801ac4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ac4c:	b111      	cbz	r1, 801ac54 <_reclaim_reent+0x40>
 801ac4e:	4620      	mov	r0, r4
 801ac50:	f7fe ff76 	bl	8019b40 <_free_r>
 801ac54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ac56:	b111      	cbz	r1, 801ac5e <_reclaim_reent+0x4a>
 801ac58:	4620      	mov	r0, r4
 801ac5a:	f7fe ff71 	bl	8019b40 <_free_r>
 801ac5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ac60:	b111      	cbz	r1, 801ac68 <_reclaim_reent+0x54>
 801ac62:	4620      	mov	r0, r4
 801ac64:	f7fe ff6c 	bl	8019b40 <_free_r>
 801ac68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ac6a:	b111      	cbz	r1, 801ac72 <_reclaim_reent+0x5e>
 801ac6c:	4620      	mov	r0, r4
 801ac6e:	f7fe ff67 	bl	8019b40 <_free_r>
 801ac72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ac74:	b111      	cbz	r1, 801ac7c <_reclaim_reent+0x68>
 801ac76:	4620      	mov	r0, r4
 801ac78:	f7fe ff62 	bl	8019b40 <_free_r>
 801ac7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac7e:	b111      	cbz	r1, 801ac86 <_reclaim_reent+0x72>
 801ac80:	4620      	mov	r0, r4
 801ac82:	f7fe ff5d 	bl	8019b40 <_free_r>
 801ac86:	69a3      	ldr	r3, [r4, #24]
 801ac88:	b1e3      	cbz	r3, 801acc4 <_reclaim_reent+0xb0>
 801ac8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ac8c:	4620      	mov	r0, r4
 801ac8e:	4798      	blx	r3
 801ac90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ac92:	b1b9      	cbz	r1, 801acc4 <_reclaim_reent+0xb0>
 801ac94:	4620      	mov	r0, r4
 801ac96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac9a:	f7ff bfad 	b.w	801abf8 <cleanup_glue>
 801ac9e:	5949      	ldr	r1, [r1, r5]
 801aca0:	b941      	cbnz	r1, 801acb4 <_reclaim_reent+0xa0>
 801aca2:	3504      	adds	r5, #4
 801aca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aca6:	2d80      	cmp	r5, #128	; 0x80
 801aca8:	68d9      	ldr	r1, [r3, #12]
 801acaa:	d1f8      	bne.n	801ac9e <_reclaim_reent+0x8a>
 801acac:	4620      	mov	r0, r4
 801acae:	f7fe ff47 	bl	8019b40 <_free_r>
 801acb2:	e7ba      	b.n	801ac2a <_reclaim_reent+0x16>
 801acb4:	680e      	ldr	r6, [r1, #0]
 801acb6:	4620      	mov	r0, r4
 801acb8:	f7fe ff42 	bl	8019b40 <_free_r>
 801acbc:	4631      	mov	r1, r6
 801acbe:	e7ef      	b.n	801aca0 <_reclaim_reent+0x8c>
 801acc0:	2500      	movs	r5, #0
 801acc2:	e7ef      	b.n	801aca4 <_reclaim_reent+0x90>
 801acc4:	bd70      	pop	{r4, r5, r6, pc}
 801acc6:	bf00      	nop
 801acc8:	2000008c 	.word	0x2000008c

0801accc <_sbrk_r>:
 801accc:	b538      	push	{r3, r4, r5, lr}
 801acce:	4d06      	ldr	r5, [pc, #24]	; (801ace8 <_sbrk_r+0x1c>)
 801acd0:	2300      	movs	r3, #0
 801acd2:	4604      	mov	r4, r0
 801acd4:	4608      	mov	r0, r1
 801acd6:	602b      	str	r3, [r5, #0]
 801acd8:	f7e9 fb04 	bl	80042e4 <_sbrk>
 801acdc:	1c43      	adds	r3, r0, #1
 801acde:	d102      	bne.n	801ace6 <_sbrk_r+0x1a>
 801ace0:	682b      	ldr	r3, [r5, #0]
 801ace2:	b103      	cbz	r3, 801ace6 <_sbrk_r+0x1a>
 801ace4:	6023      	str	r3, [r4, #0]
 801ace6:	bd38      	pop	{r3, r4, r5, pc}
 801ace8:	20009f88 	.word	0x20009f88

0801acec <nanf>:
 801acec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801acf4 <nanf+0x8>
 801acf0:	4770      	bx	lr
 801acf2:	bf00      	nop
 801acf4:	7fc00000 	.word	0x7fc00000

0801acf8 <sniprintf>:
 801acf8:	b40c      	push	{r2, r3}
 801acfa:	b530      	push	{r4, r5, lr}
 801acfc:	4b17      	ldr	r3, [pc, #92]	; (801ad5c <sniprintf+0x64>)
 801acfe:	1e0c      	subs	r4, r1, #0
 801ad00:	681d      	ldr	r5, [r3, #0]
 801ad02:	b09d      	sub	sp, #116	; 0x74
 801ad04:	da08      	bge.n	801ad18 <sniprintf+0x20>
 801ad06:	238b      	movs	r3, #139	; 0x8b
 801ad08:	602b      	str	r3, [r5, #0]
 801ad0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ad0e:	b01d      	add	sp, #116	; 0x74
 801ad10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ad14:	b002      	add	sp, #8
 801ad16:	4770      	bx	lr
 801ad18:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ad1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ad20:	bf14      	ite	ne
 801ad22:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801ad26:	4623      	moveq	r3, r4
 801ad28:	9304      	str	r3, [sp, #16]
 801ad2a:	9307      	str	r3, [sp, #28]
 801ad2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad30:	9002      	str	r0, [sp, #8]
 801ad32:	9006      	str	r0, [sp, #24]
 801ad34:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ad38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ad3a:	ab21      	add	r3, sp, #132	; 0x84
 801ad3c:	a902      	add	r1, sp, #8
 801ad3e:	4628      	mov	r0, r5
 801ad40:	9301      	str	r3, [sp, #4]
 801ad42:	f003 fa29 	bl	801e198 <_svfiprintf_r>
 801ad46:	1c43      	adds	r3, r0, #1
 801ad48:	bfbc      	itt	lt
 801ad4a:	238b      	movlt	r3, #139	; 0x8b
 801ad4c:	602b      	strlt	r3, [r5, #0]
 801ad4e:	2c00      	cmp	r4, #0
 801ad50:	d0dd      	beq.n	801ad0e <sniprintf+0x16>
 801ad52:	9b02      	ldr	r3, [sp, #8]
 801ad54:	2200      	movs	r2, #0
 801ad56:	701a      	strb	r2, [r3, #0]
 801ad58:	e7d9      	b.n	801ad0e <sniprintf+0x16>
 801ad5a:	bf00      	nop
 801ad5c:	2000008c 	.word	0x2000008c

0801ad60 <siprintf>:
 801ad60:	b40e      	push	{r1, r2, r3}
 801ad62:	b500      	push	{lr}
 801ad64:	b09c      	sub	sp, #112	; 0x70
 801ad66:	ab1d      	add	r3, sp, #116	; 0x74
 801ad68:	9002      	str	r0, [sp, #8]
 801ad6a:	9006      	str	r0, [sp, #24]
 801ad6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ad70:	4809      	ldr	r0, [pc, #36]	; (801ad98 <siprintf+0x38>)
 801ad72:	9107      	str	r1, [sp, #28]
 801ad74:	9104      	str	r1, [sp, #16]
 801ad76:	4909      	ldr	r1, [pc, #36]	; (801ad9c <siprintf+0x3c>)
 801ad78:	f853 2b04 	ldr.w	r2, [r3], #4
 801ad7c:	9105      	str	r1, [sp, #20]
 801ad7e:	6800      	ldr	r0, [r0, #0]
 801ad80:	9301      	str	r3, [sp, #4]
 801ad82:	a902      	add	r1, sp, #8
 801ad84:	f003 fa08 	bl	801e198 <_svfiprintf_r>
 801ad88:	9b02      	ldr	r3, [sp, #8]
 801ad8a:	2200      	movs	r2, #0
 801ad8c:	701a      	strb	r2, [r3, #0]
 801ad8e:	b01c      	add	sp, #112	; 0x70
 801ad90:	f85d eb04 	ldr.w	lr, [sp], #4
 801ad94:	b003      	add	sp, #12
 801ad96:	4770      	bx	lr
 801ad98:	2000008c 	.word	0x2000008c
 801ad9c:	ffff0208 	.word	0xffff0208

0801ada0 <__sread>:
 801ada0:	b510      	push	{r4, lr}
 801ada2:	460c      	mov	r4, r1
 801ada4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ada8:	f003 fc50 	bl	801e64c <_read_r>
 801adac:	2800      	cmp	r0, #0
 801adae:	bfab      	itete	ge
 801adb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801adb2:	89a3      	ldrhlt	r3, [r4, #12]
 801adb4:	181b      	addge	r3, r3, r0
 801adb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801adba:	bfac      	ite	ge
 801adbc:	6563      	strge	r3, [r4, #84]	; 0x54
 801adbe:	81a3      	strhlt	r3, [r4, #12]
 801adc0:	bd10      	pop	{r4, pc}

0801adc2 <__swrite>:
 801adc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adc6:	461f      	mov	r7, r3
 801adc8:	898b      	ldrh	r3, [r1, #12]
 801adca:	05db      	lsls	r3, r3, #23
 801adcc:	4605      	mov	r5, r0
 801adce:	460c      	mov	r4, r1
 801add0:	4616      	mov	r6, r2
 801add2:	d505      	bpl.n	801ade0 <__swrite+0x1e>
 801add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801add8:	2302      	movs	r3, #2
 801adda:	2200      	movs	r2, #0
 801addc:	f002 fbfa 	bl	801d5d4 <_lseek_r>
 801ade0:	89a3      	ldrh	r3, [r4, #12]
 801ade2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ade6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801adea:	81a3      	strh	r3, [r4, #12]
 801adec:	4632      	mov	r2, r6
 801adee:	463b      	mov	r3, r7
 801adf0:	4628      	mov	r0, r5
 801adf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801adf6:	f001 b871 	b.w	801bedc <_write_r>

0801adfa <__sseek>:
 801adfa:	b510      	push	{r4, lr}
 801adfc:	460c      	mov	r4, r1
 801adfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae02:	f002 fbe7 	bl	801d5d4 <_lseek_r>
 801ae06:	1c43      	adds	r3, r0, #1
 801ae08:	89a3      	ldrh	r3, [r4, #12]
 801ae0a:	bf15      	itete	ne
 801ae0c:	6560      	strne	r0, [r4, #84]	; 0x54
 801ae0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ae12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ae16:	81a3      	strheq	r3, [r4, #12]
 801ae18:	bf18      	it	ne
 801ae1a:	81a3      	strhne	r3, [r4, #12]
 801ae1c:	bd10      	pop	{r4, pc}

0801ae1e <__sclose>:
 801ae1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae22:	f001 b8f9 	b.w	801c018 <_close_r>

0801ae26 <strchr>:
 801ae26:	b2c9      	uxtb	r1, r1
 801ae28:	4603      	mov	r3, r0
 801ae2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae2e:	b11a      	cbz	r2, 801ae38 <strchr+0x12>
 801ae30:	428a      	cmp	r2, r1
 801ae32:	d1f9      	bne.n	801ae28 <strchr+0x2>
 801ae34:	4618      	mov	r0, r3
 801ae36:	4770      	bx	lr
 801ae38:	2900      	cmp	r1, #0
 801ae3a:	bf18      	it	ne
 801ae3c:	2300      	movne	r3, #0
 801ae3e:	e7f9      	b.n	801ae34 <strchr+0xe>

0801ae40 <strcpy>:
 801ae40:	4603      	mov	r3, r0
 801ae42:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae46:	f803 2b01 	strb.w	r2, [r3], #1
 801ae4a:	2a00      	cmp	r2, #0
 801ae4c:	d1f9      	bne.n	801ae42 <strcpy+0x2>
 801ae4e:	4770      	bx	lr

0801ae50 <strncmp>:
 801ae50:	b510      	push	{r4, lr}
 801ae52:	b17a      	cbz	r2, 801ae74 <strncmp+0x24>
 801ae54:	4603      	mov	r3, r0
 801ae56:	3901      	subs	r1, #1
 801ae58:	1884      	adds	r4, r0, r2
 801ae5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ae5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ae62:	4290      	cmp	r0, r2
 801ae64:	d101      	bne.n	801ae6a <strncmp+0x1a>
 801ae66:	42a3      	cmp	r3, r4
 801ae68:	d101      	bne.n	801ae6e <strncmp+0x1e>
 801ae6a:	1a80      	subs	r0, r0, r2
 801ae6c:	bd10      	pop	{r4, pc}
 801ae6e:	2800      	cmp	r0, #0
 801ae70:	d1f3      	bne.n	801ae5a <strncmp+0xa>
 801ae72:	e7fa      	b.n	801ae6a <strncmp+0x1a>
 801ae74:	4610      	mov	r0, r2
 801ae76:	e7f9      	b.n	801ae6c <strncmp+0x1c>

0801ae78 <strstr>:
 801ae78:	780a      	ldrb	r2, [r1, #0]
 801ae7a:	b570      	push	{r4, r5, r6, lr}
 801ae7c:	b96a      	cbnz	r2, 801ae9a <strstr+0x22>
 801ae7e:	bd70      	pop	{r4, r5, r6, pc}
 801ae80:	429a      	cmp	r2, r3
 801ae82:	d109      	bne.n	801ae98 <strstr+0x20>
 801ae84:	460c      	mov	r4, r1
 801ae86:	4605      	mov	r5, r0
 801ae88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d0f6      	beq.n	801ae7e <strstr+0x6>
 801ae90:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801ae94:	429e      	cmp	r6, r3
 801ae96:	d0f7      	beq.n	801ae88 <strstr+0x10>
 801ae98:	3001      	adds	r0, #1
 801ae9a:	7803      	ldrb	r3, [r0, #0]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d1ef      	bne.n	801ae80 <strstr+0x8>
 801aea0:	4618      	mov	r0, r3
 801aea2:	e7ec      	b.n	801ae7e <strstr+0x6>

0801aea4 <sulp>:
 801aea4:	b570      	push	{r4, r5, r6, lr}
 801aea6:	4604      	mov	r4, r0
 801aea8:	460d      	mov	r5, r1
 801aeaa:	ec45 4b10 	vmov	d0, r4, r5
 801aeae:	4616      	mov	r6, r2
 801aeb0:	f002 ff98 	bl	801dde4 <__ulp>
 801aeb4:	ec51 0b10 	vmov	r0, r1, d0
 801aeb8:	b17e      	cbz	r6, 801aeda <sulp+0x36>
 801aeba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801aebe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	dd09      	ble.n	801aeda <sulp+0x36>
 801aec6:	051b      	lsls	r3, r3, #20
 801aec8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801aecc:	2400      	movs	r4, #0
 801aece:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801aed2:	4622      	mov	r2, r4
 801aed4:	462b      	mov	r3, r5
 801aed6:	f7e5 fba7 	bl	8000628 <__aeabi_dmul>
 801aeda:	bd70      	pop	{r4, r5, r6, pc}
 801aedc:	0000      	movs	r0, r0
	...

0801aee0 <_strtod_l>:
 801aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aee4:	ed2d 8b02 	vpush	{d8}
 801aee8:	b09d      	sub	sp, #116	; 0x74
 801aeea:	461f      	mov	r7, r3
 801aeec:	2300      	movs	r3, #0
 801aeee:	9318      	str	r3, [sp, #96]	; 0x60
 801aef0:	4ba2      	ldr	r3, [pc, #648]	; (801b17c <_strtod_l+0x29c>)
 801aef2:	9213      	str	r2, [sp, #76]	; 0x4c
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	9305      	str	r3, [sp, #20]
 801aef8:	4604      	mov	r4, r0
 801aefa:	4618      	mov	r0, r3
 801aefc:	4688      	mov	r8, r1
 801aefe:	f7e5 f979 	bl	80001f4 <strlen>
 801af02:	f04f 0a00 	mov.w	sl, #0
 801af06:	4605      	mov	r5, r0
 801af08:	f04f 0b00 	mov.w	fp, #0
 801af0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801af10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801af12:	781a      	ldrb	r2, [r3, #0]
 801af14:	2a2b      	cmp	r2, #43	; 0x2b
 801af16:	d04e      	beq.n	801afb6 <_strtod_l+0xd6>
 801af18:	d83b      	bhi.n	801af92 <_strtod_l+0xb2>
 801af1a:	2a0d      	cmp	r2, #13
 801af1c:	d834      	bhi.n	801af88 <_strtod_l+0xa8>
 801af1e:	2a08      	cmp	r2, #8
 801af20:	d834      	bhi.n	801af8c <_strtod_l+0xac>
 801af22:	2a00      	cmp	r2, #0
 801af24:	d03e      	beq.n	801afa4 <_strtod_l+0xc4>
 801af26:	2300      	movs	r3, #0
 801af28:	930a      	str	r3, [sp, #40]	; 0x28
 801af2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801af2c:	7833      	ldrb	r3, [r6, #0]
 801af2e:	2b30      	cmp	r3, #48	; 0x30
 801af30:	f040 80b0 	bne.w	801b094 <_strtod_l+0x1b4>
 801af34:	7873      	ldrb	r3, [r6, #1]
 801af36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801af3a:	2b58      	cmp	r3, #88	; 0x58
 801af3c:	d168      	bne.n	801b010 <_strtod_l+0x130>
 801af3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af40:	9301      	str	r3, [sp, #4]
 801af42:	ab18      	add	r3, sp, #96	; 0x60
 801af44:	9702      	str	r7, [sp, #8]
 801af46:	9300      	str	r3, [sp, #0]
 801af48:	4a8d      	ldr	r2, [pc, #564]	; (801b180 <_strtod_l+0x2a0>)
 801af4a:	ab19      	add	r3, sp, #100	; 0x64
 801af4c:	a917      	add	r1, sp, #92	; 0x5c
 801af4e:	4620      	mov	r0, r4
 801af50:	f002 f834 	bl	801cfbc <__gethex>
 801af54:	f010 0707 	ands.w	r7, r0, #7
 801af58:	4605      	mov	r5, r0
 801af5a:	d005      	beq.n	801af68 <_strtod_l+0x88>
 801af5c:	2f06      	cmp	r7, #6
 801af5e:	d12c      	bne.n	801afba <_strtod_l+0xda>
 801af60:	3601      	adds	r6, #1
 801af62:	2300      	movs	r3, #0
 801af64:	9617      	str	r6, [sp, #92]	; 0x5c
 801af66:	930a      	str	r3, [sp, #40]	; 0x28
 801af68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	f040 8590 	bne.w	801ba90 <_strtod_l+0xbb0>
 801af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af72:	b1eb      	cbz	r3, 801afb0 <_strtod_l+0xd0>
 801af74:	4652      	mov	r2, sl
 801af76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801af7a:	ec43 2b10 	vmov	d0, r2, r3
 801af7e:	b01d      	add	sp, #116	; 0x74
 801af80:	ecbd 8b02 	vpop	{d8}
 801af84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af88:	2a20      	cmp	r2, #32
 801af8a:	d1cc      	bne.n	801af26 <_strtod_l+0x46>
 801af8c:	3301      	adds	r3, #1
 801af8e:	9317      	str	r3, [sp, #92]	; 0x5c
 801af90:	e7be      	b.n	801af10 <_strtod_l+0x30>
 801af92:	2a2d      	cmp	r2, #45	; 0x2d
 801af94:	d1c7      	bne.n	801af26 <_strtod_l+0x46>
 801af96:	2201      	movs	r2, #1
 801af98:	920a      	str	r2, [sp, #40]	; 0x28
 801af9a:	1c5a      	adds	r2, r3, #1
 801af9c:	9217      	str	r2, [sp, #92]	; 0x5c
 801af9e:	785b      	ldrb	r3, [r3, #1]
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	d1c2      	bne.n	801af2a <_strtod_l+0x4a>
 801afa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801afa6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801afaa:	2b00      	cmp	r3, #0
 801afac:	f040 856e 	bne.w	801ba8c <_strtod_l+0xbac>
 801afb0:	4652      	mov	r2, sl
 801afb2:	465b      	mov	r3, fp
 801afb4:	e7e1      	b.n	801af7a <_strtod_l+0x9a>
 801afb6:	2200      	movs	r2, #0
 801afb8:	e7ee      	b.n	801af98 <_strtod_l+0xb8>
 801afba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801afbc:	b13a      	cbz	r2, 801afce <_strtod_l+0xee>
 801afbe:	2135      	movs	r1, #53	; 0x35
 801afc0:	a81a      	add	r0, sp, #104	; 0x68
 801afc2:	f003 f81a 	bl	801dffa <__copybits>
 801afc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801afc8:	4620      	mov	r0, r4
 801afca:	f002 fbd9 	bl	801d780 <_Bfree>
 801afce:	3f01      	subs	r7, #1
 801afd0:	2f04      	cmp	r7, #4
 801afd2:	d806      	bhi.n	801afe2 <_strtod_l+0x102>
 801afd4:	e8df f007 	tbb	[pc, r7]
 801afd8:	1714030a 	.word	0x1714030a
 801afdc:	0a          	.byte	0x0a
 801afdd:	00          	.byte	0x00
 801afde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801afe2:	0728      	lsls	r0, r5, #28
 801afe4:	d5c0      	bpl.n	801af68 <_strtod_l+0x88>
 801afe6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801afea:	e7bd      	b.n	801af68 <_strtod_l+0x88>
 801afec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801aff0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801aff2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801aff6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801affa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801affe:	e7f0      	b.n	801afe2 <_strtod_l+0x102>
 801b000:	f8df b180 	ldr.w	fp, [pc, #384]	; 801b184 <_strtod_l+0x2a4>
 801b004:	e7ed      	b.n	801afe2 <_strtod_l+0x102>
 801b006:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b00a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b00e:	e7e8      	b.n	801afe2 <_strtod_l+0x102>
 801b010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b012:	1c5a      	adds	r2, r3, #1
 801b014:	9217      	str	r2, [sp, #92]	; 0x5c
 801b016:	785b      	ldrb	r3, [r3, #1]
 801b018:	2b30      	cmp	r3, #48	; 0x30
 801b01a:	d0f9      	beq.n	801b010 <_strtod_l+0x130>
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d0a3      	beq.n	801af68 <_strtod_l+0x88>
 801b020:	2301      	movs	r3, #1
 801b022:	f04f 0900 	mov.w	r9, #0
 801b026:	9304      	str	r3, [sp, #16]
 801b028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b02a:	9308      	str	r3, [sp, #32]
 801b02c:	f8cd 901c 	str.w	r9, [sp, #28]
 801b030:	464f      	mov	r7, r9
 801b032:	220a      	movs	r2, #10
 801b034:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b036:	7806      	ldrb	r6, [r0, #0]
 801b038:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b03c:	b2d9      	uxtb	r1, r3
 801b03e:	2909      	cmp	r1, #9
 801b040:	d92a      	bls.n	801b098 <_strtod_l+0x1b8>
 801b042:	9905      	ldr	r1, [sp, #20]
 801b044:	462a      	mov	r2, r5
 801b046:	f7ff ff03 	bl	801ae50 <strncmp>
 801b04a:	b398      	cbz	r0, 801b0b4 <_strtod_l+0x1d4>
 801b04c:	2000      	movs	r0, #0
 801b04e:	4632      	mov	r2, r6
 801b050:	463d      	mov	r5, r7
 801b052:	9005      	str	r0, [sp, #20]
 801b054:	4603      	mov	r3, r0
 801b056:	2a65      	cmp	r2, #101	; 0x65
 801b058:	d001      	beq.n	801b05e <_strtod_l+0x17e>
 801b05a:	2a45      	cmp	r2, #69	; 0x45
 801b05c:	d118      	bne.n	801b090 <_strtod_l+0x1b0>
 801b05e:	b91d      	cbnz	r5, 801b068 <_strtod_l+0x188>
 801b060:	9a04      	ldr	r2, [sp, #16]
 801b062:	4302      	orrs	r2, r0
 801b064:	d09e      	beq.n	801afa4 <_strtod_l+0xc4>
 801b066:	2500      	movs	r5, #0
 801b068:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801b06c:	f108 0201 	add.w	r2, r8, #1
 801b070:	9217      	str	r2, [sp, #92]	; 0x5c
 801b072:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b076:	2a2b      	cmp	r2, #43	; 0x2b
 801b078:	d075      	beq.n	801b166 <_strtod_l+0x286>
 801b07a:	2a2d      	cmp	r2, #45	; 0x2d
 801b07c:	d07b      	beq.n	801b176 <_strtod_l+0x296>
 801b07e:	f04f 0c00 	mov.w	ip, #0
 801b082:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801b086:	2909      	cmp	r1, #9
 801b088:	f240 8082 	bls.w	801b190 <_strtod_l+0x2b0>
 801b08c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801b090:	2600      	movs	r6, #0
 801b092:	e09d      	b.n	801b1d0 <_strtod_l+0x2f0>
 801b094:	2300      	movs	r3, #0
 801b096:	e7c4      	b.n	801b022 <_strtod_l+0x142>
 801b098:	2f08      	cmp	r7, #8
 801b09a:	bfd8      	it	le
 801b09c:	9907      	ldrle	r1, [sp, #28]
 801b09e:	f100 0001 	add.w	r0, r0, #1
 801b0a2:	bfda      	itte	le
 801b0a4:	fb02 3301 	mlale	r3, r2, r1, r3
 801b0a8:	9307      	strle	r3, [sp, #28]
 801b0aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b0ae:	3701      	adds	r7, #1
 801b0b0:	9017      	str	r0, [sp, #92]	; 0x5c
 801b0b2:	e7bf      	b.n	801b034 <_strtod_l+0x154>
 801b0b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b0b6:	195a      	adds	r2, r3, r5
 801b0b8:	9217      	str	r2, [sp, #92]	; 0x5c
 801b0ba:	5d5a      	ldrb	r2, [r3, r5]
 801b0bc:	2f00      	cmp	r7, #0
 801b0be:	d037      	beq.n	801b130 <_strtod_l+0x250>
 801b0c0:	9005      	str	r0, [sp, #20]
 801b0c2:	463d      	mov	r5, r7
 801b0c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801b0c8:	2b09      	cmp	r3, #9
 801b0ca:	d912      	bls.n	801b0f2 <_strtod_l+0x212>
 801b0cc:	2301      	movs	r3, #1
 801b0ce:	e7c2      	b.n	801b056 <_strtod_l+0x176>
 801b0d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b0d2:	1c5a      	adds	r2, r3, #1
 801b0d4:	9217      	str	r2, [sp, #92]	; 0x5c
 801b0d6:	785a      	ldrb	r2, [r3, #1]
 801b0d8:	3001      	adds	r0, #1
 801b0da:	2a30      	cmp	r2, #48	; 0x30
 801b0dc:	d0f8      	beq.n	801b0d0 <_strtod_l+0x1f0>
 801b0de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801b0e2:	2b08      	cmp	r3, #8
 801b0e4:	f200 84d9 	bhi.w	801ba9a <_strtod_l+0xbba>
 801b0e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b0ea:	9005      	str	r0, [sp, #20]
 801b0ec:	2000      	movs	r0, #0
 801b0ee:	9308      	str	r3, [sp, #32]
 801b0f0:	4605      	mov	r5, r0
 801b0f2:	3a30      	subs	r2, #48	; 0x30
 801b0f4:	f100 0301 	add.w	r3, r0, #1
 801b0f8:	d014      	beq.n	801b124 <_strtod_l+0x244>
 801b0fa:	9905      	ldr	r1, [sp, #20]
 801b0fc:	4419      	add	r1, r3
 801b0fe:	9105      	str	r1, [sp, #20]
 801b100:	462b      	mov	r3, r5
 801b102:	eb00 0e05 	add.w	lr, r0, r5
 801b106:	210a      	movs	r1, #10
 801b108:	4573      	cmp	r3, lr
 801b10a:	d113      	bne.n	801b134 <_strtod_l+0x254>
 801b10c:	182b      	adds	r3, r5, r0
 801b10e:	2b08      	cmp	r3, #8
 801b110:	f105 0501 	add.w	r5, r5, #1
 801b114:	4405      	add	r5, r0
 801b116:	dc1c      	bgt.n	801b152 <_strtod_l+0x272>
 801b118:	9907      	ldr	r1, [sp, #28]
 801b11a:	230a      	movs	r3, #10
 801b11c:	fb03 2301 	mla	r3, r3, r1, r2
 801b120:	9307      	str	r3, [sp, #28]
 801b122:	2300      	movs	r3, #0
 801b124:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b126:	1c51      	adds	r1, r2, #1
 801b128:	9117      	str	r1, [sp, #92]	; 0x5c
 801b12a:	7852      	ldrb	r2, [r2, #1]
 801b12c:	4618      	mov	r0, r3
 801b12e:	e7c9      	b.n	801b0c4 <_strtod_l+0x1e4>
 801b130:	4638      	mov	r0, r7
 801b132:	e7d2      	b.n	801b0da <_strtod_l+0x1fa>
 801b134:	2b08      	cmp	r3, #8
 801b136:	dc04      	bgt.n	801b142 <_strtod_l+0x262>
 801b138:	9e07      	ldr	r6, [sp, #28]
 801b13a:	434e      	muls	r6, r1
 801b13c:	9607      	str	r6, [sp, #28]
 801b13e:	3301      	adds	r3, #1
 801b140:	e7e2      	b.n	801b108 <_strtod_l+0x228>
 801b142:	f103 0c01 	add.w	ip, r3, #1
 801b146:	f1bc 0f10 	cmp.w	ip, #16
 801b14a:	bfd8      	it	le
 801b14c:	fb01 f909 	mulle.w	r9, r1, r9
 801b150:	e7f5      	b.n	801b13e <_strtod_l+0x25e>
 801b152:	2d10      	cmp	r5, #16
 801b154:	bfdc      	itt	le
 801b156:	230a      	movle	r3, #10
 801b158:	fb03 2909 	mlale	r9, r3, r9, r2
 801b15c:	e7e1      	b.n	801b122 <_strtod_l+0x242>
 801b15e:	2300      	movs	r3, #0
 801b160:	9305      	str	r3, [sp, #20]
 801b162:	2301      	movs	r3, #1
 801b164:	e77c      	b.n	801b060 <_strtod_l+0x180>
 801b166:	f04f 0c00 	mov.w	ip, #0
 801b16a:	f108 0202 	add.w	r2, r8, #2
 801b16e:	9217      	str	r2, [sp, #92]	; 0x5c
 801b170:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b174:	e785      	b.n	801b082 <_strtod_l+0x1a2>
 801b176:	f04f 0c01 	mov.w	ip, #1
 801b17a:	e7f6      	b.n	801b16a <_strtod_l+0x28a>
 801b17c:	0801f710 	.word	0x0801f710
 801b180:	0801f544 	.word	0x0801f544
 801b184:	7ff00000 	.word	0x7ff00000
 801b188:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b18a:	1c51      	adds	r1, r2, #1
 801b18c:	9117      	str	r1, [sp, #92]	; 0x5c
 801b18e:	7852      	ldrb	r2, [r2, #1]
 801b190:	2a30      	cmp	r2, #48	; 0x30
 801b192:	d0f9      	beq.n	801b188 <_strtod_l+0x2a8>
 801b194:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801b198:	2908      	cmp	r1, #8
 801b19a:	f63f af79 	bhi.w	801b090 <_strtod_l+0x1b0>
 801b19e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801b1a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b1a4:	9206      	str	r2, [sp, #24]
 801b1a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b1a8:	1c51      	adds	r1, r2, #1
 801b1aa:	9117      	str	r1, [sp, #92]	; 0x5c
 801b1ac:	7852      	ldrb	r2, [r2, #1]
 801b1ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801b1b2:	2e09      	cmp	r6, #9
 801b1b4:	d937      	bls.n	801b226 <_strtod_l+0x346>
 801b1b6:	9e06      	ldr	r6, [sp, #24]
 801b1b8:	1b89      	subs	r1, r1, r6
 801b1ba:	2908      	cmp	r1, #8
 801b1bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b1c0:	dc02      	bgt.n	801b1c8 <_strtod_l+0x2e8>
 801b1c2:	4576      	cmp	r6, lr
 801b1c4:	bfa8      	it	ge
 801b1c6:	4676      	movge	r6, lr
 801b1c8:	f1bc 0f00 	cmp.w	ip, #0
 801b1cc:	d000      	beq.n	801b1d0 <_strtod_l+0x2f0>
 801b1ce:	4276      	negs	r6, r6
 801b1d0:	2d00      	cmp	r5, #0
 801b1d2:	d14d      	bne.n	801b270 <_strtod_l+0x390>
 801b1d4:	9904      	ldr	r1, [sp, #16]
 801b1d6:	4301      	orrs	r1, r0
 801b1d8:	f47f aec6 	bne.w	801af68 <_strtod_l+0x88>
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	f47f aee1 	bne.w	801afa4 <_strtod_l+0xc4>
 801b1e2:	2a69      	cmp	r2, #105	; 0x69
 801b1e4:	d027      	beq.n	801b236 <_strtod_l+0x356>
 801b1e6:	dc24      	bgt.n	801b232 <_strtod_l+0x352>
 801b1e8:	2a49      	cmp	r2, #73	; 0x49
 801b1ea:	d024      	beq.n	801b236 <_strtod_l+0x356>
 801b1ec:	2a4e      	cmp	r2, #78	; 0x4e
 801b1ee:	f47f aed9 	bne.w	801afa4 <_strtod_l+0xc4>
 801b1f2:	499f      	ldr	r1, [pc, #636]	; (801b470 <_strtod_l+0x590>)
 801b1f4:	a817      	add	r0, sp, #92	; 0x5c
 801b1f6:	f002 f939 	bl	801d46c <__match>
 801b1fa:	2800      	cmp	r0, #0
 801b1fc:	f43f aed2 	beq.w	801afa4 <_strtod_l+0xc4>
 801b200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b202:	781b      	ldrb	r3, [r3, #0]
 801b204:	2b28      	cmp	r3, #40	; 0x28
 801b206:	d12d      	bne.n	801b264 <_strtod_l+0x384>
 801b208:	499a      	ldr	r1, [pc, #616]	; (801b474 <_strtod_l+0x594>)
 801b20a:	aa1a      	add	r2, sp, #104	; 0x68
 801b20c:	a817      	add	r0, sp, #92	; 0x5c
 801b20e:	f002 f941 	bl	801d494 <__hexnan>
 801b212:	2805      	cmp	r0, #5
 801b214:	d126      	bne.n	801b264 <_strtod_l+0x384>
 801b216:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b218:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801b21c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b220:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b224:	e6a0      	b.n	801af68 <_strtod_l+0x88>
 801b226:	210a      	movs	r1, #10
 801b228:	fb01 2e0e 	mla	lr, r1, lr, r2
 801b22c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b230:	e7b9      	b.n	801b1a6 <_strtod_l+0x2c6>
 801b232:	2a6e      	cmp	r2, #110	; 0x6e
 801b234:	e7db      	b.n	801b1ee <_strtod_l+0x30e>
 801b236:	4990      	ldr	r1, [pc, #576]	; (801b478 <_strtod_l+0x598>)
 801b238:	a817      	add	r0, sp, #92	; 0x5c
 801b23a:	f002 f917 	bl	801d46c <__match>
 801b23e:	2800      	cmp	r0, #0
 801b240:	f43f aeb0 	beq.w	801afa4 <_strtod_l+0xc4>
 801b244:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b246:	498d      	ldr	r1, [pc, #564]	; (801b47c <_strtod_l+0x59c>)
 801b248:	3b01      	subs	r3, #1
 801b24a:	a817      	add	r0, sp, #92	; 0x5c
 801b24c:	9317      	str	r3, [sp, #92]	; 0x5c
 801b24e:	f002 f90d 	bl	801d46c <__match>
 801b252:	b910      	cbnz	r0, 801b25a <_strtod_l+0x37a>
 801b254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b256:	3301      	adds	r3, #1
 801b258:	9317      	str	r3, [sp, #92]	; 0x5c
 801b25a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801b48c <_strtod_l+0x5ac>
 801b25e:	f04f 0a00 	mov.w	sl, #0
 801b262:	e681      	b.n	801af68 <_strtod_l+0x88>
 801b264:	4886      	ldr	r0, [pc, #536]	; (801b480 <_strtod_l+0x5a0>)
 801b266:	f003 fa03 	bl	801e670 <nan>
 801b26a:	ec5b ab10 	vmov	sl, fp, d0
 801b26e:	e67b      	b.n	801af68 <_strtod_l+0x88>
 801b270:	9b05      	ldr	r3, [sp, #20]
 801b272:	9807      	ldr	r0, [sp, #28]
 801b274:	1af3      	subs	r3, r6, r3
 801b276:	2f00      	cmp	r7, #0
 801b278:	bf08      	it	eq
 801b27a:	462f      	moveq	r7, r5
 801b27c:	2d10      	cmp	r5, #16
 801b27e:	9306      	str	r3, [sp, #24]
 801b280:	46a8      	mov	r8, r5
 801b282:	bfa8      	it	ge
 801b284:	f04f 0810 	movge.w	r8, #16
 801b288:	f7e5 f954 	bl	8000534 <__aeabi_ui2d>
 801b28c:	2d09      	cmp	r5, #9
 801b28e:	4682      	mov	sl, r0
 801b290:	468b      	mov	fp, r1
 801b292:	dd13      	ble.n	801b2bc <_strtod_l+0x3dc>
 801b294:	4b7b      	ldr	r3, [pc, #492]	; (801b484 <_strtod_l+0x5a4>)
 801b296:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b29a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b29e:	f7e5 f9c3 	bl	8000628 <__aeabi_dmul>
 801b2a2:	4682      	mov	sl, r0
 801b2a4:	4648      	mov	r0, r9
 801b2a6:	468b      	mov	fp, r1
 801b2a8:	f7e5 f944 	bl	8000534 <__aeabi_ui2d>
 801b2ac:	4602      	mov	r2, r0
 801b2ae:	460b      	mov	r3, r1
 801b2b0:	4650      	mov	r0, sl
 801b2b2:	4659      	mov	r1, fp
 801b2b4:	f7e5 f802 	bl	80002bc <__adddf3>
 801b2b8:	4682      	mov	sl, r0
 801b2ba:	468b      	mov	fp, r1
 801b2bc:	2d0f      	cmp	r5, #15
 801b2be:	dc38      	bgt.n	801b332 <_strtod_l+0x452>
 801b2c0:	9b06      	ldr	r3, [sp, #24]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	f43f ae50 	beq.w	801af68 <_strtod_l+0x88>
 801b2c8:	dd24      	ble.n	801b314 <_strtod_l+0x434>
 801b2ca:	2b16      	cmp	r3, #22
 801b2cc:	dc0b      	bgt.n	801b2e6 <_strtod_l+0x406>
 801b2ce:	496d      	ldr	r1, [pc, #436]	; (801b484 <_strtod_l+0x5a4>)
 801b2d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b2d8:	4652      	mov	r2, sl
 801b2da:	465b      	mov	r3, fp
 801b2dc:	f7e5 f9a4 	bl	8000628 <__aeabi_dmul>
 801b2e0:	4682      	mov	sl, r0
 801b2e2:	468b      	mov	fp, r1
 801b2e4:	e640      	b.n	801af68 <_strtod_l+0x88>
 801b2e6:	9a06      	ldr	r2, [sp, #24]
 801b2e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b2ec:	4293      	cmp	r3, r2
 801b2ee:	db20      	blt.n	801b332 <_strtod_l+0x452>
 801b2f0:	4c64      	ldr	r4, [pc, #400]	; (801b484 <_strtod_l+0x5a4>)
 801b2f2:	f1c5 050f 	rsb	r5, r5, #15
 801b2f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b2fa:	4652      	mov	r2, sl
 801b2fc:	465b      	mov	r3, fp
 801b2fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b302:	f7e5 f991 	bl	8000628 <__aeabi_dmul>
 801b306:	9b06      	ldr	r3, [sp, #24]
 801b308:	1b5d      	subs	r5, r3, r5
 801b30a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b30e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b312:	e7e3      	b.n	801b2dc <_strtod_l+0x3fc>
 801b314:	9b06      	ldr	r3, [sp, #24]
 801b316:	3316      	adds	r3, #22
 801b318:	db0b      	blt.n	801b332 <_strtod_l+0x452>
 801b31a:	9b05      	ldr	r3, [sp, #20]
 801b31c:	1b9e      	subs	r6, r3, r6
 801b31e:	4b59      	ldr	r3, [pc, #356]	; (801b484 <_strtod_l+0x5a4>)
 801b320:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801b324:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b328:	4650      	mov	r0, sl
 801b32a:	4659      	mov	r1, fp
 801b32c:	f7e5 faa6 	bl	800087c <__aeabi_ddiv>
 801b330:	e7d6      	b.n	801b2e0 <_strtod_l+0x400>
 801b332:	9b06      	ldr	r3, [sp, #24]
 801b334:	eba5 0808 	sub.w	r8, r5, r8
 801b338:	4498      	add	r8, r3
 801b33a:	f1b8 0f00 	cmp.w	r8, #0
 801b33e:	dd74      	ble.n	801b42a <_strtod_l+0x54a>
 801b340:	f018 030f 	ands.w	r3, r8, #15
 801b344:	d00a      	beq.n	801b35c <_strtod_l+0x47c>
 801b346:	494f      	ldr	r1, [pc, #316]	; (801b484 <_strtod_l+0x5a4>)
 801b348:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b34c:	4652      	mov	r2, sl
 801b34e:	465b      	mov	r3, fp
 801b350:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b354:	f7e5 f968 	bl	8000628 <__aeabi_dmul>
 801b358:	4682      	mov	sl, r0
 801b35a:	468b      	mov	fp, r1
 801b35c:	f038 080f 	bics.w	r8, r8, #15
 801b360:	d04f      	beq.n	801b402 <_strtod_l+0x522>
 801b362:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b366:	dd22      	ble.n	801b3ae <_strtod_l+0x4ce>
 801b368:	2500      	movs	r5, #0
 801b36a:	462e      	mov	r6, r5
 801b36c:	9507      	str	r5, [sp, #28]
 801b36e:	9505      	str	r5, [sp, #20]
 801b370:	2322      	movs	r3, #34	; 0x22
 801b372:	f8df b118 	ldr.w	fp, [pc, #280]	; 801b48c <_strtod_l+0x5ac>
 801b376:	6023      	str	r3, [r4, #0]
 801b378:	f04f 0a00 	mov.w	sl, #0
 801b37c:	9b07      	ldr	r3, [sp, #28]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	f43f adf2 	beq.w	801af68 <_strtod_l+0x88>
 801b384:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b386:	4620      	mov	r0, r4
 801b388:	f002 f9fa 	bl	801d780 <_Bfree>
 801b38c:	9905      	ldr	r1, [sp, #20]
 801b38e:	4620      	mov	r0, r4
 801b390:	f002 f9f6 	bl	801d780 <_Bfree>
 801b394:	4631      	mov	r1, r6
 801b396:	4620      	mov	r0, r4
 801b398:	f002 f9f2 	bl	801d780 <_Bfree>
 801b39c:	9907      	ldr	r1, [sp, #28]
 801b39e:	4620      	mov	r0, r4
 801b3a0:	f002 f9ee 	bl	801d780 <_Bfree>
 801b3a4:	4629      	mov	r1, r5
 801b3a6:	4620      	mov	r0, r4
 801b3a8:	f002 f9ea 	bl	801d780 <_Bfree>
 801b3ac:	e5dc      	b.n	801af68 <_strtod_l+0x88>
 801b3ae:	4b36      	ldr	r3, [pc, #216]	; (801b488 <_strtod_l+0x5a8>)
 801b3b0:	9304      	str	r3, [sp, #16]
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b3b8:	4650      	mov	r0, sl
 801b3ba:	4659      	mov	r1, fp
 801b3bc:	4699      	mov	r9, r3
 801b3be:	f1b8 0f01 	cmp.w	r8, #1
 801b3c2:	dc21      	bgt.n	801b408 <_strtod_l+0x528>
 801b3c4:	b10b      	cbz	r3, 801b3ca <_strtod_l+0x4ea>
 801b3c6:	4682      	mov	sl, r0
 801b3c8:	468b      	mov	fp, r1
 801b3ca:	4b2f      	ldr	r3, [pc, #188]	; (801b488 <_strtod_l+0x5a8>)
 801b3cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b3d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b3d4:	4652      	mov	r2, sl
 801b3d6:	465b      	mov	r3, fp
 801b3d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b3dc:	f7e5 f924 	bl	8000628 <__aeabi_dmul>
 801b3e0:	4b2a      	ldr	r3, [pc, #168]	; (801b48c <_strtod_l+0x5ac>)
 801b3e2:	460a      	mov	r2, r1
 801b3e4:	400b      	ands	r3, r1
 801b3e6:	492a      	ldr	r1, [pc, #168]	; (801b490 <_strtod_l+0x5b0>)
 801b3e8:	428b      	cmp	r3, r1
 801b3ea:	4682      	mov	sl, r0
 801b3ec:	d8bc      	bhi.n	801b368 <_strtod_l+0x488>
 801b3ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b3f2:	428b      	cmp	r3, r1
 801b3f4:	bf86      	itte	hi
 801b3f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801b494 <_strtod_l+0x5b4>
 801b3fa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801b3fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b402:	2300      	movs	r3, #0
 801b404:	9304      	str	r3, [sp, #16]
 801b406:	e084      	b.n	801b512 <_strtod_l+0x632>
 801b408:	f018 0f01 	tst.w	r8, #1
 801b40c:	d005      	beq.n	801b41a <_strtod_l+0x53a>
 801b40e:	9b04      	ldr	r3, [sp, #16]
 801b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b414:	f7e5 f908 	bl	8000628 <__aeabi_dmul>
 801b418:	2301      	movs	r3, #1
 801b41a:	9a04      	ldr	r2, [sp, #16]
 801b41c:	3208      	adds	r2, #8
 801b41e:	f109 0901 	add.w	r9, r9, #1
 801b422:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b426:	9204      	str	r2, [sp, #16]
 801b428:	e7c9      	b.n	801b3be <_strtod_l+0x4de>
 801b42a:	d0ea      	beq.n	801b402 <_strtod_l+0x522>
 801b42c:	f1c8 0800 	rsb	r8, r8, #0
 801b430:	f018 020f 	ands.w	r2, r8, #15
 801b434:	d00a      	beq.n	801b44c <_strtod_l+0x56c>
 801b436:	4b13      	ldr	r3, [pc, #76]	; (801b484 <_strtod_l+0x5a4>)
 801b438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b43c:	4650      	mov	r0, sl
 801b43e:	4659      	mov	r1, fp
 801b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b444:	f7e5 fa1a 	bl	800087c <__aeabi_ddiv>
 801b448:	4682      	mov	sl, r0
 801b44a:	468b      	mov	fp, r1
 801b44c:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b450:	d0d7      	beq.n	801b402 <_strtod_l+0x522>
 801b452:	f1b8 0f1f 	cmp.w	r8, #31
 801b456:	dd1f      	ble.n	801b498 <_strtod_l+0x5b8>
 801b458:	2500      	movs	r5, #0
 801b45a:	462e      	mov	r6, r5
 801b45c:	9507      	str	r5, [sp, #28]
 801b45e:	9505      	str	r5, [sp, #20]
 801b460:	2322      	movs	r3, #34	; 0x22
 801b462:	f04f 0a00 	mov.w	sl, #0
 801b466:	f04f 0b00 	mov.w	fp, #0
 801b46a:	6023      	str	r3, [r4, #0]
 801b46c:	e786      	b.n	801b37c <_strtod_l+0x49c>
 801b46e:	bf00      	nop
 801b470:	0801f4a5 	.word	0x0801f4a5
 801b474:	0801f558 	.word	0x0801f558
 801b478:	0801f49d 	.word	0x0801f49d
 801b47c:	0801f634 	.word	0x0801f634
 801b480:	0801f630 	.word	0x0801f630
 801b484:	0801f7a8 	.word	0x0801f7a8
 801b488:	0801f780 	.word	0x0801f780
 801b48c:	7ff00000 	.word	0x7ff00000
 801b490:	7ca00000 	.word	0x7ca00000
 801b494:	7fefffff 	.word	0x7fefffff
 801b498:	f018 0310 	ands.w	r3, r8, #16
 801b49c:	bf18      	it	ne
 801b49e:	236a      	movne	r3, #106	; 0x6a
 801b4a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801b850 <_strtod_l+0x970>
 801b4a4:	9304      	str	r3, [sp, #16]
 801b4a6:	4650      	mov	r0, sl
 801b4a8:	4659      	mov	r1, fp
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	f018 0f01 	tst.w	r8, #1
 801b4b0:	d004      	beq.n	801b4bc <_strtod_l+0x5dc>
 801b4b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b4b6:	f7e5 f8b7 	bl	8000628 <__aeabi_dmul>
 801b4ba:	2301      	movs	r3, #1
 801b4bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b4c0:	f109 0908 	add.w	r9, r9, #8
 801b4c4:	d1f2      	bne.n	801b4ac <_strtod_l+0x5cc>
 801b4c6:	b10b      	cbz	r3, 801b4cc <_strtod_l+0x5ec>
 801b4c8:	4682      	mov	sl, r0
 801b4ca:	468b      	mov	fp, r1
 801b4cc:	9b04      	ldr	r3, [sp, #16]
 801b4ce:	b1c3      	cbz	r3, 801b502 <_strtod_l+0x622>
 801b4d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801b4d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	4659      	mov	r1, fp
 801b4dc:	dd11      	ble.n	801b502 <_strtod_l+0x622>
 801b4de:	2b1f      	cmp	r3, #31
 801b4e0:	f340 8124 	ble.w	801b72c <_strtod_l+0x84c>
 801b4e4:	2b34      	cmp	r3, #52	; 0x34
 801b4e6:	bfde      	ittt	le
 801b4e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801b4ec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 801b4f0:	fa03 f202 	lslle.w	r2, r3, r2
 801b4f4:	f04f 0a00 	mov.w	sl, #0
 801b4f8:	bfcc      	ite	gt
 801b4fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b4fe:	ea02 0b01 	andle.w	fp, r2, r1
 801b502:	2200      	movs	r2, #0
 801b504:	2300      	movs	r3, #0
 801b506:	4650      	mov	r0, sl
 801b508:	4659      	mov	r1, fp
 801b50a:	f7e5 faf5 	bl	8000af8 <__aeabi_dcmpeq>
 801b50e:	2800      	cmp	r0, #0
 801b510:	d1a2      	bne.n	801b458 <_strtod_l+0x578>
 801b512:	9b07      	ldr	r3, [sp, #28]
 801b514:	9300      	str	r3, [sp, #0]
 801b516:	9908      	ldr	r1, [sp, #32]
 801b518:	462b      	mov	r3, r5
 801b51a:	463a      	mov	r2, r7
 801b51c:	4620      	mov	r0, r4
 801b51e:	f002 f997 	bl	801d850 <__s2b>
 801b522:	9007      	str	r0, [sp, #28]
 801b524:	2800      	cmp	r0, #0
 801b526:	f43f af1f 	beq.w	801b368 <_strtod_l+0x488>
 801b52a:	9b05      	ldr	r3, [sp, #20]
 801b52c:	1b9e      	subs	r6, r3, r6
 801b52e:	9b06      	ldr	r3, [sp, #24]
 801b530:	2b00      	cmp	r3, #0
 801b532:	bfb4      	ite	lt
 801b534:	4633      	movlt	r3, r6
 801b536:	2300      	movge	r3, #0
 801b538:	930c      	str	r3, [sp, #48]	; 0x30
 801b53a:	9b06      	ldr	r3, [sp, #24]
 801b53c:	2500      	movs	r5, #0
 801b53e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b542:	9312      	str	r3, [sp, #72]	; 0x48
 801b544:	462e      	mov	r6, r5
 801b546:	9b07      	ldr	r3, [sp, #28]
 801b548:	4620      	mov	r0, r4
 801b54a:	6859      	ldr	r1, [r3, #4]
 801b54c:	f002 f8d8 	bl	801d700 <_Balloc>
 801b550:	9005      	str	r0, [sp, #20]
 801b552:	2800      	cmp	r0, #0
 801b554:	f43f af0c 	beq.w	801b370 <_strtod_l+0x490>
 801b558:	9b07      	ldr	r3, [sp, #28]
 801b55a:	691a      	ldr	r2, [r3, #16]
 801b55c:	3202      	adds	r2, #2
 801b55e:	f103 010c 	add.w	r1, r3, #12
 801b562:	0092      	lsls	r2, r2, #2
 801b564:	300c      	adds	r0, #12
 801b566:	f7fe faa5 	bl	8019ab4 <memcpy>
 801b56a:	ec4b ab10 	vmov	d0, sl, fp
 801b56e:	aa1a      	add	r2, sp, #104	; 0x68
 801b570:	a919      	add	r1, sp, #100	; 0x64
 801b572:	4620      	mov	r0, r4
 801b574:	f002 fcb2 	bl	801dedc <__d2b>
 801b578:	ec4b ab18 	vmov	d8, sl, fp
 801b57c:	9018      	str	r0, [sp, #96]	; 0x60
 801b57e:	2800      	cmp	r0, #0
 801b580:	f43f aef6 	beq.w	801b370 <_strtod_l+0x490>
 801b584:	2101      	movs	r1, #1
 801b586:	4620      	mov	r0, r4
 801b588:	f002 f9fc 	bl	801d984 <__i2b>
 801b58c:	4606      	mov	r6, r0
 801b58e:	2800      	cmp	r0, #0
 801b590:	f43f aeee 	beq.w	801b370 <_strtod_l+0x490>
 801b594:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b596:	9904      	ldr	r1, [sp, #16]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	bfab      	itete	ge
 801b59c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801b59e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801b5a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801b5a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801b5a6:	bfac      	ite	ge
 801b5a8:	eb03 0902 	addge.w	r9, r3, r2
 801b5ac:	1ad7      	sublt	r7, r2, r3
 801b5ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b5b0:	eba3 0801 	sub.w	r8, r3, r1
 801b5b4:	4490      	add	r8, r2
 801b5b6:	4ba1      	ldr	r3, [pc, #644]	; (801b83c <_strtod_l+0x95c>)
 801b5b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801b5bc:	4598      	cmp	r8, r3
 801b5be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b5c2:	f280 80c7 	bge.w	801b754 <_strtod_l+0x874>
 801b5c6:	eba3 0308 	sub.w	r3, r3, r8
 801b5ca:	2b1f      	cmp	r3, #31
 801b5cc:	eba2 0203 	sub.w	r2, r2, r3
 801b5d0:	f04f 0101 	mov.w	r1, #1
 801b5d4:	f300 80b1 	bgt.w	801b73a <_strtod_l+0x85a>
 801b5d8:	fa01 f303 	lsl.w	r3, r1, r3
 801b5dc:	930d      	str	r3, [sp, #52]	; 0x34
 801b5de:	2300      	movs	r3, #0
 801b5e0:	9308      	str	r3, [sp, #32]
 801b5e2:	eb09 0802 	add.w	r8, r9, r2
 801b5e6:	9b04      	ldr	r3, [sp, #16]
 801b5e8:	45c1      	cmp	r9, r8
 801b5ea:	4417      	add	r7, r2
 801b5ec:	441f      	add	r7, r3
 801b5ee:	464b      	mov	r3, r9
 801b5f0:	bfa8      	it	ge
 801b5f2:	4643      	movge	r3, r8
 801b5f4:	42bb      	cmp	r3, r7
 801b5f6:	bfa8      	it	ge
 801b5f8:	463b      	movge	r3, r7
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	bfc2      	ittt	gt
 801b5fe:	eba8 0803 	subgt.w	r8, r8, r3
 801b602:	1aff      	subgt	r7, r7, r3
 801b604:	eba9 0903 	subgt.w	r9, r9, r3
 801b608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	dd17      	ble.n	801b63e <_strtod_l+0x75e>
 801b60e:	4631      	mov	r1, r6
 801b610:	461a      	mov	r2, r3
 801b612:	4620      	mov	r0, r4
 801b614:	f002 fa76 	bl	801db04 <__pow5mult>
 801b618:	4606      	mov	r6, r0
 801b61a:	2800      	cmp	r0, #0
 801b61c:	f43f aea8 	beq.w	801b370 <_strtod_l+0x490>
 801b620:	4601      	mov	r1, r0
 801b622:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b624:	4620      	mov	r0, r4
 801b626:	f002 f9c3 	bl	801d9b0 <__multiply>
 801b62a:	900b      	str	r0, [sp, #44]	; 0x2c
 801b62c:	2800      	cmp	r0, #0
 801b62e:	f43f ae9f 	beq.w	801b370 <_strtod_l+0x490>
 801b632:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b634:	4620      	mov	r0, r4
 801b636:	f002 f8a3 	bl	801d780 <_Bfree>
 801b63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b63c:	9318      	str	r3, [sp, #96]	; 0x60
 801b63e:	f1b8 0f00 	cmp.w	r8, #0
 801b642:	f300 808c 	bgt.w	801b75e <_strtod_l+0x87e>
 801b646:	9b06      	ldr	r3, [sp, #24]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	dd08      	ble.n	801b65e <_strtod_l+0x77e>
 801b64c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b64e:	9905      	ldr	r1, [sp, #20]
 801b650:	4620      	mov	r0, r4
 801b652:	f002 fa57 	bl	801db04 <__pow5mult>
 801b656:	9005      	str	r0, [sp, #20]
 801b658:	2800      	cmp	r0, #0
 801b65a:	f43f ae89 	beq.w	801b370 <_strtod_l+0x490>
 801b65e:	2f00      	cmp	r7, #0
 801b660:	dd08      	ble.n	801b674 <_strtod_l+0x794>
 801b662:	9905      	ldr	r1, [sp, #20]
 801b664:	463a      	mov	r2, r7
 801b666:	4620      	mov	r0, r4
 801b668:	f002 faa6 	bl	801dbb8 <__lshift>
 801b66c:	9005      	str	r0, [sp, #20]
 801b66e:	2800      	cmp	r0, #0
 801b670:	f43f ae7e 	beq.w	801b370 <_strtod_l+0x490>
 801b674:	f1b9 0f00 	cmp.w	r9, #0
 801b678:	dd08      	ble.n	801b68c <_strtod_l+0x7ac>
 801b67a:	4631      	mov	r1, r6
 801b67c:	464a      	mov	r2, r9
 801b67e:	4620      	mov	r0, r4
 801b680:	f002 fa9a 	bl	801dbb8 <__lshift>
 801b684:	4606      	mov	r6, r0
 801b686:	2800      	cmp	r0, #0
 801b688:	f43f ae72 	beq.w	801b370 <_strtod_l+0x490>
 801b68c:	9a05      	ldr	r2, [sp, #20]
 801b68e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b690:	4620      	mov	r0, r4
 801b692:	f002 fb1d 	bl	801dcd0 <__mdiff>
 801b696:	4605      	mov	r5, r0
 801b698:	2800      	cmp	r0, #0
 801b69a:	f43f ae69 	beq.w	801b370 <_strtod_l+0x490>
 801b69e:	68c3      	ldr	r3, [r0, #12]
 801b6a0:	930b      	str	r3, [sp, #44]	; 0x2c
 801b6a2:	2300      	movs	r3, #0
 801b6a4:	60c3      	str	r3, [r0, #12]
 801b6a6:	4631      	mov	r1, r6
 801b6a8:	f002 faf6 	bl	801dc98 <__mcmp>
 801b6ac:	2800      	cmp	r0, #0
 801b6ae:	da60      	bge.n	801b772 <_strtod_l+0x892>
 801b6b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6b2:	ea53 030a 	orrs.w	r3, r3, sl
 801b6b6:	f040 8082 	bne.w	801b7be <_strtod_l+0x8de>
 801b6ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d17d      	bne.n	801b7be <_strtod_l+0x8de>
 801b6c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b6c6:	0d1b      	lsrs	r3, r3, #20
 801b6c8:	051b      	lsls	r3, r3, #20
 801b6ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b6ce:	d976      	bls.n	801b7be <_strtod_l+0x8de>
 801b6d0:	696b      	ldr	r3, [r5, #20]
 801b6d2:	b913      	cbnz	r3, 801b6da <_strtod_l+0x7fa>
 801b6d4:	692b      	ldr	r3, [r5, #16]
 801b6d6:	2b01      	cmp	r3, #1
 801b6d8:	dd71      	ble.n	801b7be <_strtod_l+0x8de>
 801b6da:	4629      	mov	r1, r5
 801b6dc:	2201      	movs	r2, #1
 801b6de:	4620      	mov	r0, r4
 801b6e0:	f002 fa6a 	bl	801dbb8 <__lshift>
 801b6e4:	4631      	mov	r1, r6
 801b6e6:	4605      	mov	r5, r0
 801b6e8:	f002 fad6 	bl	801dc98 <__mcmp>
 801b6ec:	2800      	cmp	r0, #0
 801b6ee:	dd66      	ble.n	801b7be <_strtod_l+0x8de>
 801b6f0:	9904      	ldr	r1, [sp, #16]
 801b6f2:	4a53      	ldr	r2, [pc, #332]	; (801b840 <_strtod_l+0x960>)
 801b6f4:	465b      	mov	r3, fp
 801b6f6:	2900      	cmp	r1, #0
 801b6f8:	f000 8081 	beq.w	801b7fe <_strtod_l+0x91e>
 801b6fc:	ea02 010b 	and.w	r1, r2, fp
 801b700:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b704:	dc7b      	bgt.n	801b7fe <_strtod_l+0x91e>
 801b706:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b70a:	f77f aea9 	ble.w	801b460 <_strtod_l+0x580>
 801b70e:	4b4d      	ldr	r3, [pc, #308]	; (801b844 <_strtod_l+0x964>)
 801b710:	4650      	mov	r0, sl
 801b712:	4659      	mov	r1, fp
 801b714:	2200      	movs	r2, #0
 801b716:	f7e4 ff87 	bl	8000628 <__aeabi_dmul>
 801b71a:	460b      	mov	r3, r1
 801b71c:	4303      	orrs	r3, r0
 801b71e:	bf08      	it	eq
 801b720:	2322      	moveq	r3, #34	; 0x22
 801b722:	4682      	mov	sl, r0
 801b724:	468b      	mov	fp, r1
 801b726:	bf08      	it	eq
 801b728:	6023      	streq	r3, [r4, #0]
 801b72a:	e62b      	b.n	801b384 <_strtod_l+0x4a4>
 801b72c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b730:	fa02 f303 	lsl.w	r3, r2, r3
 801b734:	ea03 0a0a 	and.w	sl, r3, sl
 801b738:	e6e3      	b.n	801b502 <_strtod_l+0x622>
 801b73a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b73e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b742:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b746:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b74a:	fa01 f308 	lsl.w	r3, r1, r8
 801b74e:	9308      	str	r3, [sp, #32]
 801b750:	910d      	str	r1, [sp, #52]	; 0x34
 801b752:	e746      	b.n	801b5e2 <_strtod_l+0x702>
 801b754:	2300      	movs	r3, #0
 801b756:	9308      	str	r3, [sp, #32]
 801b758:	2301      	movs	r3, #1
 801b75a:	930d      	str	r3, [sp, #52]	; 0x34
 801b75c:	e741      	b.n	801b5e2 <_strtod_l+0x702>
 801b75e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b760:	4642      	mov	r2, r8
 801b762:	4620      	mov	r0, r4
 801b764:	f002 fa28 	bl	801dbb8 <__lshift>
 801b768:	9018      	str	r0, [sp, #96]	; 0x60
 801b76a:	2800      	cmp	r0, #0
 801b76c:	f47f af6b 	bne.w	801b646 <_strtod_l+0x766>
 801b770:	e5fe      	b.n	801b370 <_strtod_l+0x490>
 801b772:	465f      	mov	r7, fp
 801b774:	d16e      	bne.n	801b854 <_strtod_l+0x974>
 801b776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b778:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b77c:	b342      	cbz	r2, 801b7d0 <_strtod_l+0x8f0>
 801b77e:	4a32      	ldr	r2, [pc, #200]	; (801b848 <_strtod_l+0x968>)
 801b780:	4293      	cmp	r3, r2
 801b782:	d128      	bne.n	801b7d6 <_strtod_l+0x8f6>
 801b784:	9b04      	ldr	r3, [sp, #16]
 801b786:	4651      	mov	r1, sl
 801b788:	b1eb      	cbz	r3, 801b7c6 <_strtod_l+0x8e6>
 801b78a:	4b2d      	ldr	r3, [pc, #180]	; (801b840 <_strtod_l+0x960>)
 801b78c:	403b      	ands	r3, r7
 801b78e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b796:	d819      	bhi.n	801b7cc <_strtod_l+0x8ec>
 801b798:	0d1b      	lsrs	r3, r3, #20
 801b79a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b79e:	fa02 f303 	lsl.w	r3, r2, r3
 801b7a2:	4299      	cmp	r1, r3
 801b7a4:	d117      	bne.n	801b7d6 <_strtod_l+0x8f6>
 801b7a6:	4b29      	ldr	r3, [pc, #164]	; (801b84c <_strtod_l+0x96c>)
 801b7a8:	429f      	cmp	r7, r3
 801b7aa:	d102      	bne.n	801b7b2 <_strtod_l+0x8d2>
 801b7ac:	3101      	adds	r1, #1
 801b7ae:	f43f addf 	beq.w	801b370 <_strtod_l+0x490>
 801b7b2:	4b23      	ldr	r3, [pc, #140]	; (801b840 <_strtod_l+0x960>)
 801b7b4:	403b      	ands	r3, r7
 801b7b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b7ba:	f04f 0a00 	mov.w	sl, #0
 801b7be:	9b04      	ldr	r3, [sp, #16]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d1a4      	bne.n	801b70e <_strtod_l+0x82e>
 801b7c4:	e5de      	b.n	801b384 <_strtod_l+0x4a4>
 801b7c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b7ca:	e7ea      	b.n	801b7a2 <_strtod_l+0x8c2>
 801b7cc:	4613      	mov	r3, r2
 801b7ce:	e7e8      	b.n	801b7a2 <_strtod_l+0x8c2>
 801b7d0:	ea53 030a 	orrs.w	r3, r3, sl
 801b7d4:	d08c      	beq.n	801b6f0 <_strtod_l+0x810>
 801b7d6:	9b08      	ldr	r3, [sp, #32]
 801b7d8:	b1db      	cbz	r3, 801b812 <_strtod_l+0x932>
 801b7da:	423b      	tst	r3, r7
 801b7dc:	d0ef      	beq.n	801b7be <_strtod_l+0x8de>
 801b7de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b7e0:	9a04      	ldr	r2, [sp, #16]
 801b7e2:	4650      	mov	r0, sl
 801b7e4:	4659      	mov	r1, fp
 801b7e6:	b1c3      	cbz	r3, 801b81a <_strtod_l+0x93a>
 801b7e8:	f7ff fb5c 	bl	801aea4 <sulp>
 801b7ec:	4602      	mov	r2, r0
 801b7ee:	460b      	mov	r3, r1
 801b7f0:	ec51 0b18 	vmov	r0, r1, d8
 801b7f4:	f7e4 fd62 	bl	80002bc <__adddf3>
 801b7f8:	4682      	mov	sl, r0
 801b7fa:	468b      	mov	fp, r1
 801b7fc:	e7df      	b.n	801b7be <_strtod_l+0x8de>
 801b7fe:	4013      	ands	r3, r2
 801b800:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b804:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b808:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b80c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b810:	e7d5      	b.n	801b7be <_strtod_l+0x8de>
 801b812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b814:	ea13 0f0a 	tst.w	r3, sl
 801b818:	e7e0      	b.n	801b7dc <_strtod_l+0x8fc>
 801b81a:	f7ff fb43 	bl	801aea4 <sulp>
 801b81e:	4602      	mov	r2, r0
 801b820:	460b      	mov	r3, r1
 801b822:	ec51 0b18 	vmov	r0, r1, d8
 801b826:	f7e4 fd47 	bl	80002b8 <__aeabi_dsub>
 801b82a:	2200      	movs	r2, #0
 801b82c:	2300      	movs	r3, #0
 801b82e:	4682      	mov	sl, r0
 801b830:	468b      	mov	fp, r1
 801b832:	f7e5 f961 	bl	8000af8 <__aeabi_dcmpeq>
 801b836:	2800      	cmp	r0, #0
 801b838:	d0c1      	beq.n	801b7be <_strtod_l+0x8de>
 801b83a:	e611      	b.n	801b460 <_strtod_l+0x580>
 801b83c:	fffffc02 	.word	0xfffffc02
 801b840:	7ff00000 	.word	0x7ff00000
 801b844:	39500000 	.word	0x39500000
 801b848:	000fffff 	.word	0x000fffff
 801b84c:	7fefffff 	.word	0x7fefffff
 801b850:	0801f570 	.word	0x0801f570
 801b854:	4631      	mov	r1, r6
 801b856:	4628      	mov	r0, r5
 801b858:	f002 fb9c 	bl	801df94 <__ratio>
 801b85c:	ec59 8b10 	vmov	r8, r9, d0
 801b860:	ee10 0a10 	vmov	r0, s0
 801b864:	2200      	movs	r2, #0
 801b866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b86a:	4649      	mov	r1, r9
 801b86c:	f7e5 f958 	bl	8000b20 <__aeabi_dcmple>
 801b870:	2800      	cmp	r0, #0
 801b872:	d07a      	beq.n	801b96a <_strtod_l+0xa8a>
 801b874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b876:	2b00      	cmp	r3, #0
 801b878:	d04a      	beq.n	801b910 <_strtod_l+0xa30>
 801b87a:	4b95      	ldr	r3, [pc, #596]	; (801bad0 <_strtod_l+0xbf0>)
 801b87c:	2200      	movs	r2, #0
 801b87e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b882:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801bad0 <_strtod_l+0xbf0>
 801b886:	f04f 0800 	mov.w	r8, #0
 801b88a:	4b92      	ldr	r3, [pc, #584]	; (801bad4 <_strtod_l+0xbf4>)
 801b88c:	403b      	ands	r3, r7
 801b88e:	930d      	str	r3, [sp, #52]	; 0x34
 801b890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b892:	4b91      	ldr	r3, [pc, #580]	; (801bad8 <_strtod_l+0xbf8>)
 801b894:	429a      	cmp	r2, r3
 801b896:	f040 80b0 	bne.w	801b9fa <_strtod_l+0xb1a>
 801b89a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b89e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b8a2:	ec4b ab10 	vmov	d0, sl, fp
 801b8a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b8aa:	f002 fa9b 	bl	801dde4 <__ulp>
 801b8ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b8b2:	ec53 2b10 	vmov	r2, r3, d0
 801b8b6:	f7e4 feb7 	bl	8000628 <__aeabi_dmul>
 801b8ba:	4652      	mov	r2, sl
 801b8bc:	465b      	mov	r3, fp
 801b8be:	f7e4 fcfd 	bl	80002bc <__adddf3>
 801b8c2:	460b      	mov	r3, r1
 801b8c4:	4983      	ldr	r1, [pc, #524]	; (801bad4 <_strtod_l+0xbf4>)
 801b8c6:	4a85      	ldr	r2, [pc, #532]	; (801badc <_strtod_l+0xbfc>)
 801b8c8:	4019      	ands	r1, r3
 801b8ca:	4291      	cmp	r1, r2
 801b8cc:	4682      	mov	sl, r0
 801b8ce:	d960      	bls.n	801b992 <_strtod_l+0xab2>
 801b8d0:	ee18 3a90 	vmov	r3, s17
 801b8d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b8d8:	4293      	cmp	r3, r2
 801b8da:	d104      	bne.n	801b8e6 <_strtod_l+0xa06>
 801b8dc:	ee18 3a10 	vmov	r3, s16
 801b8e0:	3301      	adds	r3, #1
 801b8e2:	f43f ad45 	beq.w	801b370 <_strtod_l+0x490>
 801b8e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 801bae8 <_strtod_l+0xc08>
 801b8ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b8ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b8f0:	4620      	mov	r0, r4
 801b8f2:	f001 ff45 	bl	801d780 <_Bfree>
 801b8f6:	9905      	ldr	r1, [sp, #20]
 801b8f8:	4620      	mov	r0, r4
 801b8fa:	f001 ff41 	bl	801d780 <_Bfree>
 801b8fe:	4631      	mov	r1, r6
 801b900:	4620      	mov	r0, r4
 801b902:	f001 ff3d 	bl	801d780 <_Bfree>
 801b906:	4629      	mov	r1, r5
 801b908:	4620      	mov	r0, r4
 801b90a:	f001 ff39 	bl	801d780 <_Bfree>
 801b90e:	e61a      	b.n	801b546 <_strtod_l+0x666>
 801b910:	f1ba 0f00 	cmp.w	sl, #0
 801b914:	d11b      	bne.n	801b94e <_strtod_l+0xa6e>
 801b916:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b91a:	b9f3      	cbnz	r3, 801b95a <_strtod_l+0xa7a>
 801b91c:	4b6c      	ldr	r3, [pc, #432]	; (801bad0 <_strtod_l+0xbf0>)
 801b91e:	2200      	movs	r2, #0
 801b920:	4640      	mov	r0, r8
 801b922:	4649      	mov	r1, r9
 801b924:	f7e5 f8f2 	bl	8000b0c <__aeabi_dcmplt>
 801b928:	b9d0      	cbnz	r0, 801b960 <_strtod_l+0xa80>
 801b92a:	4640      	mov	r0, r8
 801b92c:	4649      	mov	r1, r9
 801b92e:	4b6c      	ldr	r3, [pc, #432]	; (801bae0 <_strtod_l+0xc00>)
 801b930:	2200      	movs	r2, #0
 801b932:	f7e4 fe79 	bl	8000628 <__aeabi_dmul>
 801b936:	4680      	mov	r8, r0
 801b938:	4689      	mov	r9, r1
 801b93a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b93e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b942:	9315      	str	r3, [sp, #84]	; 0x54
 801b944:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b948:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b94c:	e79d      	b.n	801b88a <_strtod_l+0x9aa>
 801b94e:	f1ba 0f01 	cmp.w	sl, #1
 801b952:	d102      	bne.n	801b95a <_strtod_l+0xa7a>
 801b954:	2f00      	cmp	r7, #0
 801b956:	f43f ad83 	beq.w	801b460 <_strtod_l+0x580>
 801b95a:	4b62      	ldr	r3, [pc, #392]	; (801bae4 <_strtod_l+0xc04>)
 801b95c:	2200      	movs	r2, #0
 801b95e:	e78e      	b.n	801b87e <_strtod_l+0x99e>
 801b960:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801bae0 <_strtod_l+0xc00>
 801b964:	f04f 0800 	mov.w	r8, #0
 801b968:	e7e7      	b.n	801b93a <_strtod_l+0xa5a>
 801b96a:	4b5d      	ldr	r3, [pc, #372]	; (801bae0 <_strtod_l+0xc00>)
 801b96c:	4640      	mov	r0, r8
 801b96e:	4649      	mov	r1, r9
 801b970:	2200      	movs	r2, #0
 801b972:	f7e4 fe59 	bl	8000628 <__aeabi_dmul>
 801b976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b978:	4680      	mov	r8, r0
 801b97a:	4689      	mov	r9, r1
 801b97c:	b933      	cbnz	r3, 801b98c <_strtod_l+0xaac>
 801b97e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b982:	900e      	str	r0, [sp, #56]	; 0x38
 801b984:	930f      	str	r3, [sp, #60]	; 0x3c
 801b986:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b98a:	e7dd      	b.n	801b948 <_strtod_l+0xa68>
 801b98c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b990:	e7f9      	b.n	801b986 <_strtod_l+0xaa6>
 801b992:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b996:	9b04      	ldr	r3, [sp, #16]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d1a8      	bne.n	801b8ee <_strtod_l+0xa0e>
 801b99c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b9a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b9a2:	0d1b      	lsrs	r3, r3, #20
 801b9a4:	051b      	lsls	r3, r3, #20
 801b9a6:	429a      	cmp	r2, r3
 801b9a8:	d1a1      	bne.n	801b8ee <_strtod_l+0xa0e>
 801b9aa:	4640      	mov	r0, r8
 801b9ac:	4649      	mov	r1, r9
 801b9ae:	f7e5 f9eb 	bl	8000d88 <__aeabi_d2lz>
 801b9b2:	f7e4 fe0b 	bl	80005cc <__aeabi_l2d>
 801b9b6:	4602      	mov	r2, r0
 801b9b8:	460b      	mov	r3, r1
 801b9ba:	4640      	mov	r0, r8
 801b9bc:	4649      	mov	r1, r9
 801b9be:	f7e4 fc7b 	bl	80002b8 <__aeabi_dsub>
 801b9c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b9c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b9c8:	ea43 030a 	orr.w	r3, r3, sl
 801b9cc:	4313      	orrs	r3, r2
 801b9ce:	4680      	mov	r8, r0
 801b9d0:	4689      	mov	r9, r1
 801b9d2:	d055      	beq.n	801ba80 <_strtod_l+0xba0>
 801b9d4:	a336      	add	r3, pc, #216	; (adr r3, 801bab0 <_strtod_l+0xbd0>)
 801b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9da:	f7e5 f897 	bl	8000b0c <__aeabi_dcmplt>
 801b9de:	2800      	cmp	r0, #0
 801b9e0:	f47f acd0 	bne.w	801b384 <_strtod_l+0x4a4>
 801b9e4:	a334      	add	r3, pc, #208	; (adr r3, 801bab8 <_strtod_l+0xbd8>)
 801b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ea:	4640      	mov	r0, r8
 801b9ec:	4649      	mov	r1, r9
 801b9ee:	f7e5 f8ab 	bl	8000b48 <__aeabi_dcmpgt>
 801b9f2:	2800      	cmp	r0, #0
 801b9f4:	f43f af7b 	beq.w	801b8ee <_strtod_l+0xa0e>
 801b9f8:	e4c4      	b.n	801b384 <_strtod_l+0x4a4>
 801b9fa:	9b04      	ldr	r3, [sp, #16]
 801b9fc:	b333      	cbz	r3, 801ba4c <_strtod_l+0xb6c>
 801b9fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ba04:	d822      	bhi.n	801ba4c <_strtod_l+0xb6c>
 801ba06:	a32e      	add	r3, pc, #184	; (adr r3, 801bac0 <_strtod_l+0xbe0>)
 801ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba0c:	4640      	mov	r0, r8
 801ba0e:	4649      	mov	r1, r9
 801ba10:	f7e5 f886 	bl	8000b20 <__aeabi_dcmple>
 801ba14:	b1a0      	cbz	r0, 801ba40 <_strtod_l+0xb60>
 801ba16:	4649      	mov	r1, r9
 801ba18:	4640      	mov	r0, r8
 801ba1a:	f7e5 f8dd 	bl	8000bd8 <__aeabi_d2uiz>
 801ba1e:	2801      	cmp	r0, #1
 801ba20:	bf38      	it	cc
 801ba22:	2001      	movcc	r0, #1
 801ba24:	f7e4 fd86 	bl	8000534 <__aeabi_ui2d>
 801ba28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba2a:	4680      	mov	r8, r0
 801ba2c:	4689      	mov	r9, r1
 801ba2e:	bb23      	cbnz	r3, 801ba7a <_strtod_l+0xb9a>
 801ba30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ba34:	9010      	str	r0, [sp, #64]	; 0x40
 801ba36:	9311      	str	r3, [sp, #68]	; 0x44
 801ba38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ba3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ba40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ba44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801ba48:	1a9b      	subs	r3, r3, r2
 801ba4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ba4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ba50:	eeb0 0a48 	vmov.f32	s0, s16
 801ba54:	eef0 0a68 	vmov.f32	s1, s17
 801ba58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ba5c:	f002 f9c2 	bl	801dde4 <__ulp>
 801ba60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ba64:	ec53 2b10 	vmov	r2, r3, d0
 801ba68:	f7e4 fdde 	bl	8000628 <__aeabi_dmul>
 801ba6c:	ec53 2b18 	vmov	r2, r3, d8
 801ba70:	f7e4 fc24 	bl	80002bc <__adddf3>
 801ba74:	4682      	mov	sl, r0
 801ba76:	468b      	mov	fp, r1
 801ba78:	e78d      	b.n	801b996 <_strtod_l+0xab6>
 801ba7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801ba7e:	e7db      	b.n	801ba38 <_strtod_l+0xb58>
 801ba80:	a311      	add	r3, pc, #68	; (adr r3, 801bac8 <_strtod_l+0xbe8>)
 801ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba86:	f7e5 f841 	bl	8000b0c <__aeabi_dcmplt>
 801ba8a:	e7b2      	b.n	801b9f2 <_strtod_l+0xb12>
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	930a      	str	r3, [sp, #40]	; 0x28
 801ba90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ba94:	6013      	str	r3, [r2, #0]
 801ba96:	f7ff ba6b 	b.w	801af70 <_strtod_l+0x90>
 801ba9a:	2a65      	cmp	r2, #101	; 0x65
 801ba9c:	f43f ab5f 	beq.w	801b15e <_strtod_l+0x27e>
 801baa0:	2a45      	cmp	r2, #69	; 0x45
 801baa2:	f43f ab5c 	beq.w	801b15e <_strtod_l+0x27e>
 801baa6:	2301      	movs	r3, #1
 801baa8:	f7ff bb94 	b.w	801b1d4 <_strtod_l+0x2f4>
 801baac:	f3af 8000 	nop.w
 801bab0:	94a03595 	.word	0x94a03595
 801bab4:	3fdfffff 	.word	0x3fdfffff
 801bab8:	35afe535 	.word	0x35afe535
 801babc:	3fe00000 	.word	0x3fe00000
 801bac0:	ffc00000 	.word	0xffc00000
 801bac4:	41dfffff 	.word	0x41dfffff
 801bac8:	94a03595 	.word	0x94a03595
 801bacc:	3fcfffff 	.word	0x3fcfffff
 801bad0:	3ff00000 	.word	0x3ff00000
 801bad4:	7ff00000 	.word	0x7ff00000
 801bad8:	7fe00000 	.word	0x7fe00000
 801badc:	7c9fffff 	.word	0x7c9fffff
 801bae0:	3fe00000 	.word	0x3fe00000
 801bae4:	bff00000 	.word	0xbff00000
 801bae8:	7fefffff 	.word	0x7fefffff

0801baec <_strtod_r>:
 801baec:	4b01      	ldr	r3, [pc, #4]	; (801baf4 <_strtod_r+0x8>)
 801baee:	f7ff b9f7 	b.w	801aee0 <_strtod_l>
 801baf2:	bf00      	nop
 801baf4:	200000f4 	.word	0x200000f4

0801baf8 <strtok>:
 801baf8:	4b16      	ldr	r3, [pc, #88]	; (801bb54 <strtok+0x5c>)
 801bafa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bafc:	681e      	ldr	r6, [r3, #0]
 801bafe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801bb00:	4605      	mov	r5, r0
 801bb02:	b9fc      	cbnz	r4, 801bb44 <strtok+0x4c>
 801bb04:	2050      	movs	r0, #80	; 0x50
 801bb06:	9101      	str	r1, [sp, #4]
 801bb08:	f7fd ffc4 	bl	8019a94 <malloc>
 801bb0c:	9901      	ldr	r1, [sp, #4]
 801bb0e:	65b0      	str	r0, [r6, #88]	; 0x58
 801bb10:	4602      	mov	r2, r0
 801bb12:	b920      	cbnz	r0, 801bb1e <strtok+0x26>
 801bb14:	4b10      	ldr	r3, [pc, #64]	; (801bb58 <strtok+0x60>)
 801bb16:	4811      	ldr	r0, [pc, #68]	; (801bb5c <strtok+0x64>)
 801bb18:	2157      	movs	r1, #87	; 0x57
 801bb1a:	f000 fa5f 	bl	801bfdc <__assert_func>
 801bb1e:	e9c0 4400 	strd	r4, r4, [r0]
 801bb22:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801bb26:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801bb2a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801bb2e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801bb32:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801bb36:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801bb3a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801bb3e:	6184      	str	r4, [r0, #24]
 801bb40:	7704      	strb	r4, [r0, #28]
 801bb42:	6244      	str	r4, [r0, #36]	; 0x24
 801bb44:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801bb46:	2301      	movs	r3, #1
 801bb48:	4628      	mov	r0, r5
 801bb4a:	b002      	add	sp, #8
 801bb4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb50:	f000 b806 	b.w	801bb60 <__strtok_r>
 801bb54:	2000008c 	.word	0x2000008c
 801bb58:	0801f4d1 	.word	0x0801f4d1
 801bb5c:	0801f598 	.word	0x0801f598

0801bb60 <__strtok_r>:
 801bb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb62:	b908      	cbnz	r0, 801bb68 <__strtok_r+0x8>
 801bb64:	6810      	ldr	r0, [r2, #0]
 801bb66:	b188      	cbz	r0, 801bb8c <__strtok_r+0x2c>
 801bb68:	4604      	mov	r4, r0
 801bb6a:	4620      	mov	r0, r4
 801bb6c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801bb70:	460f      	mov	r7, r1
 801bb72:	f817 6b01 	ldrb.w	r6, [r7], #1
 801bb76:	b91e      	cbnz	r6, 801bb80 <__strtok_r+0x20>
 801bb78:	b965      	cbnz	r5, 801bb94 <__strtok_r+0x34>
 801bb7a:	6015      	str	r5, [r2, #0]
 801bb7c:	4628      	mov	r0, r5
 801bb7e:	e005      	b.n	801bb8c <__strtok_r+0x2c>
 801bb80:	42b5      	cmp	r5, r6
 801bb82:	d1f6      	bne.n	801bb72 <__strtok_r+0x12>
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d1f0      	bne.n	801bb6a <__strtok_r+0xa>
 801bb88:	6014      	str	r4, [r2, #0]
 801bb8a:	7003      	strb	r3, [r0, #0]
 801bb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb8e:	461c      	mov	r4, r3
 801bb90:	e00c      	b.n	801bbac <__strtok_r+0x4c>
 801bb92:	b915      	cbnz	r5, 801bb9a <__strtok_r+0x3a>
 801bb94:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bb98:	460e      	mov	r6, r1
 801bb9a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801bb9e:	42ab      	cmp	r3, r5
 801bba0:	d1f7      	bne.n	801bb92 <__strtok_r+0x32>
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d0f3      	beq.n	801bb8e <__strtok_r+0x2e>
 801bba6:	2300      	movs	r3, #0
 801bba8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801bbac:	6014      	str	r4, [r2, #0]
 801bbae:	e7ed      	b.n	801bb8c <__strtok_r+0x2c>

0801bbb0 <_strtol_l.constprop.0>:
 801bbb0:	2b01      	cmp	r3, #1
 801bbb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bbb6:	d001      	beq.n	801bbbc <_strtol_l.constprop.0+0xc>
 801bbb8:	2b24      	cmp	r3, #36	; 0x24
 801bbba:	d906      	bls.n	801bbca <_strtol_l.constprop.0+0x1a>
 801bbbc:	f7fd fdfe 	bl	80197bc <__errno>
 801bbc0:	2316      	movs	r3, #22
 801bbc2:	6003      	str	r3, [r0, #0]
 801bbc4:	2000      	movs	r0, #0
 801bbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801bcb0 <_strtol_l.constprop.0+0x100>
 801bbce:	460d      	mov	r5, r1
 801bbd0:	462e      	mov	r6, r5
 801bbd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bbd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 801bbda:	f017 0708 	ands.w	r7, r7, #8
 801bbde:	d1f7      	bne.n	801bbd0 <_strtol_l.constprop.0+0x20>
 801bbe0:	2c2d      	cmp	r4, #45	; 0x2d
 801bbe2:	d132      	bne.n	801bc4a <_strtol_l.constprop.0+0x9a>
 801bbe4:	782c      	ldrb	r4, [r5, #0]
 801bbe6:	2701      	movs	r7, #1
 801bbe8:	1cb5      	adds	r5, r6, #2
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d05b      	beq.n	801bca6 <_strtol_l.constprop.0+0xf6>
 801bbee:	2b10      	cmp	r3, #16
 801bbf0:	d109      	bne.n	801bc06 <_strtol_l.constprop.0+0x56>
 801bbf2:	2c30      	cmp	r4, #48	; 0x30
 801bbf4:	d107      	bne.n	801bc06 <_strtol_l.constprop.0+0x56>
 801bbf6:	782c      	ldrb	r4, [r5, #0]
 801bbf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801bbfc:	2c58      	cmp	r4, #88	; 0x58
 801bbfe:	d14d      	bne.n	801bc9c <_strtol_l.constprop.0+0xec>
 801bc00:	786c      	ldrb	r4, [r5, #1]
 801bc02:	2310      	movs	r3, #16
 801bc04:	3502      	adds	r5, #2
 801bc06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801bc0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801bc0e:	f04f 0c00 	mov.w	ip, #0
 801bc12:	fbb8 f9f3 	udiv	r9, r8, r3
 801bc16:	4666      	mov	r6, ip
 801bc18:	fb03 8a19 	mls	sl, r3, r9, r8
 801bc1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801bc20:	f1be 0f09 	cmp.w	lr, #9
 801bc24:	d816      	bhi.n	801bc54 <_strtol_l.constprop.0+0xa4>
 801bc26:	4674      	mov	r4, lr
 801bc28:	42a3      	cmp	r3, r4
 801bc2a:	dd24      	ble.n	801bc76 <_strtol_l.constprop.0+0xc6>
 801bc2c:	f1bc 0f00 	cmp.w	ip, #0
 801bc30:	db1e      	blt.n	801bc70 <_strtol_l.constprop.0+0xc0>
 801bc32:	45b1      	cmp	r9, r6
 801bc34:	d31c      	bcc.n	801bc70 <_strtol_l.constprop.0+0xc0>
 801bc36:	d101      	bne.n	801bc3c <_strtol_l.constprop.0+0x8c>
 801bc38:	45a2      	cmp	sl, r4
 801bc3a:	db19      	blt.n	801bc70 <_strtol_l.constprop.0+0xc0>
 801bc3c:	fb06 4603 	mla	r6, r6, r3, r4
 801bc40:	f04f 0c01 	mov.w	ip, #1
 801bc44:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bc48:	e7e8      	b.n	801bc1c <_strtol_l.constprop.0+0x6c>
 801bc4a:	2c2b      	cmp	r4, #43	; 0x2b
 801bc4c:	bf04      	itt	eq
 801bc4e:	782c      	ldrbeq	r4, [r5, #0]
 801bc50:	1cb5      	addeq	r5, r6, #2
 801bc52:	e7ca      	b.n	801bbea <_strtol_l.constprop.0+0x3a>
 801bc54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801bc58:	f1be 0f19 	cmp.w	lr, #25
 801bc5c:	d801      	bhi.n	801bc62 <_strtol_l.constprop.0+0xb2>
 801bc5e:	3c37      	subs	r4, #55	; 0x37
 801bc60:	e7e2      	b.n	801bc28 <_strtol_l.constprop.0+0x78>
 801bc62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801bc66:	f1be 0f19 	cmp.w	lr, #25
 801bc6a:	d804      	bhi.n	801bc76 <_strtol_l.constprop.0+0xc6>
 801bc6c:	3c57      	subs	r4, #87	; 0x57
 801bc6e:	e7db      	b.n	801bc28 <_strtol_l.constprop.0+0x78>
 801bc70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801bc74:	e7e6      	b.n	801bc44 <_strtol_l.constprop.0+0x94>
 801bc76:	f1bc 0f00 	cmp.w	ip, #0
 801bc7a:	da05      	bge.n	801bc88 <_strtol_l.constprop.0+0xd8>
 801bc7c:	2322      	movs	r3, #34	; 0x22
 801bc7e:	6003      	str	r3, [r0, #0]
 801bc80:	4646      	mov	r6, r8
 801bc82:	b942      	cbnz	r2, 801bc96 <_strtol_l.constprop.0+0xe6>
 801bc84:	4630      	mov	r0, r6
 801bc86:	e79e      	b.n	801bbc6 <_strtol_l.constprop.0+0x16>
 801bc88:	b107      	cbz	r7, 801bc8c <_strtol_l.constprop.0+0xdc>
 801bc8a:	4276      	negs	r6, r6
 801bc8c:	2a00      	cmp	r2, #0
 801bc8e:	d0f9      	beq.n	801bc84 <_strtol_l.constprop.0+0xd4>
 801bc90:	f1bc 0f00 	cmp.w	ip, #0
 801bc94:	d000      	beq.n	801bc98 <_strtol_l.constprop.0+0xe8>
 801bc96:	1e69      	subs	r1, r5, #1
 801bc98:	6011      	str	r1, [r2, #0]
 801bc9a:	e7f3      	b.n	801bc84 <_strtol_l.constprop.0+0xd4>
 801bc9c:	2430      	movs	r4, #48	; 0x30
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d1b1      	bne.n	801bc06 <_strtol_l.constprop.0+0x56>
 801bca2:	2308      	movs	r3, #8
 801bca4:	e7af      	b.n	801bc06 <_strtol_l.constprop.0+0x56>
 801bca6:	2c30      	cmp	r4, #48	; 0x30
 801bca8:	d0a5      	beq.n	801bbf6 <_strtol_l.constprop.0+0x46>
 801bcaa:	230a      	movs	r3, #10
 801bcac:	e7ab      	b.n	801bc06 <_strtol_l.constprop.0+0x56>
 801bcae:	bf00      	nop
 801bcb0:	0801f331 	.word	0x0801f331

0801bcb4 <_strtol_r>:
 801bcb4:	f7ff bf7c 	b.w	801bbb0 <_strtol_l.constprop.0>

0801bcb8 <strtol>:
 801bcb8:	4613      	mov	r3, r2
 801bcba:	460a      	mov	r2, r1
 801bcbc:	4601      	mov	r1, r0
 801bcbe:	4802      	ldr	r0, [pc, #8]	; (801bcc8 <strtol+0x10>)
 801bcc0:	6800      	ldr	r0, [r0, #0]
 801bcc2:	f7ff bf75 	b.w	801bbb0 <_strtol_l.constprop.0>
 801bcc6:	bf00      	nop
 801bcc8:	2000008c 	.word	0x2000008c

0801bccc <_strtoul_l.constprop.0>:
 801bccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bcd0:	4f36      	ldr	r7, [pc, #216]	; (801bdac <_strtoul_l.constprop.0+0xe0>)
 801bcd2:	4686      	mov	lr, r0
 801bcd4:	460d      	mov	r5, r1
 801bcd6:	4628      	mov	r0, r5
 801bcd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bcdc:	5de6      	ldrb	r6, [r4, r7]
 801bcde:	f016 0608 	ands.w	r6, r6, #8
 801bce2:	d1f8      	bne.n	801bcd6 <_strtoul_l.constprop.0+0xa>
 801bce4:	2c2d      	cmp	r4, #45	; 0x2d
 801bce6:	d12f      	bne.n	801bd48 <_strtoul_l.constprop.0+0x7c>
 801bce8:	782c      	ldrb	r4, [r5, #0]
 801bcea:	2601      	movs	r6, #1
 801bcec:	1c85      	adds	r5, r0, #2
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d057      	beq.n	801bda2 <_strtoul_l.constprop.0+0xd6>
 801bcf2:	2b10      	cmp	r3, #16
 801bcf4:	d109      	bne.n	801bd0a <_strtoul_l.constprop.0+0x3e>
 801bcf6:	2c30      	cmp	r4, #48	; 0x30
 801bcf8:	d107      	bne.n	801bd0a <_strtoul_l.constprop.0+0x3e>
 801bcfa:	7828      	ldrb	r0, [r5, #0]
 801bcfc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bd00:	2858      	cmp	r0, #88	; 0x58
 801bd02:	d149      	bne.n	801bd98 <_strtoul_l.constprop.0+0xcc>
 801bd04:	786c      	ldrb	r4, [r5, #1]
 801bd06:	2310      	movs	r3, #16
 801bd08:	3502      	adds	r5, #2
 801bd0a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801bd0e:	2700      	movs	r7, #0
 801bd10:	fbb8 f8f3 	udiv	r8, r8, r3
 801bd14:	fb03 f908 	mul.w	r9, r3, r8
 801bd18:	ea6f 0909 	mvn.w	r9, r9
 801bd1c:	4638      	mov	r0, r7
 801bd1e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bd22:	f1bc 0f09 	cmp.w	ip, #9
 801bd26:	d814      	bhi.n	801bd52 <_strtoul_l.constprop.0+0x86>
 801bd28:	4664      	mov	r4, ip
 801bd2a:	42a3      	cmp	r3, r4
 801bd2c:	dd22      	ble.n	801bd74 <_strtoul_l.constprop.0+0xa8>
 801bd2e:	2f00      	cmp	r7, #0
 801bd30:	db1d      	blt.n	801bd6e <_strtoul_l.constprop.0+0xa2>
 801bd32:	4580      	cmp	r8, r0
 801bd34:	d31b      	bcc.n	801bd6e <_strtoul_l.constprop.0+0xa2>
 801bd36:	d101      	bne.n	801bd3c <_strtoul_l.constprop.0+0x70>
 801bd38:	45a1      	cmp	r9, r4
 801bd3a:	db18      	blt.n	801bd6e <_strtoul_l.constprop.0+0xa2>
 801bd3c:	fb00 4003 	mla	r0, r0, r3, r4
 801bd40:	2701      	movs	r7, #1
 801bd42:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bd46:	e7ea      	b.n	801bd1e <_strtoul_l.constprop.0+0x52>
 801bd48:	2c2b      	cmp	r4, #43	; 0x2b
 801bd4a:	bf04      	itt	eq
 801bd4c:	782c      	ldrbeq	r4, [r5, #0]
 801bd4e:	1c85      	addeq	r5, r0, #2
 801bd50:	e7cd      	b.n	801bcee <_strtoul_l.constprop.0+0x22>
 801bd52:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801bd56:	f1bc 0f19 	cmp.w	ip, #25
 801bd5a:	d801      	bhi.n	801bd60 <_strtoul_l.constprop.0+0x94>
 801bd5c:	3c37      	subs	r4, #55	; 0x37
 801bd5e:	e7e4      	b.n	801bd2a <_strtoul_l.constprop.0+0x5e>
 801bd60:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801bd64:	f1bc 0f19 	cmp.w	ip, #25
 801bd68:	d804      	bhi.n	801bd74 <_strtoul_l.constprop.0+0xa8>
 801bd6a:	3c57      	subs	r4, #87	; 0x57
 801bd6c:	e7dd      	b.n	801bd2a <_strtoul_l.constprop.0+0x5e>
 801bd6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bd72:	e7e6      	b.n	801bd42 <_strtoul_l.constprop.0+0x76>
 801bd74:	2f00      	cmp	r7, #0
 801bd76:	da07      	bge.n	801bd88 <_strtoul_l.constprop.0+0xbc>
 801bd78:	2322      	movs	r3, #34	; 0x22
 801bd7a:	f8ce 3000 	str.w	r3, [lr]
 801bd7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd82:	b932      	cbnz	r2, 801bd92 <_strtoul_l.constprop.0+0xc6>
 801bd84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd88:	b106      	cbz	r6, 801bd8c <_strtoul_l.constprop.0+0xc0>
 801bd8a:	4240      	negs	r0, r0
 801bd8c:	2a00      	cmp	r2, #0
 801bd8e:	d0f9      	beq.n	801bd84 <_strtoul_l.constprop.0+0xb8>
 801bd90:	b107      	cbz	r7, 801bd94 <_strtoul_l.constprop.0+0xc8>
 801bd92:	1e69      	subs	r1, r5, #1
 801bd94:	6011      	str	r1, [r2, #0]
 801bd96:	e7f5      	b.n	801bd84 <_strtoul_l.constprop.0+0xb8>
 801bd98:	2430      	movs	r4, #48	; 0x30
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d1b5      	bne.n	801bd0a <_strtoul_l.constprop.0+0x3e>
 801bd9e:	2308      	movs	r3, #8
 801bda0:	e7b3      	b.n	801bd0a <_strtoul_l.constprop.0+0x3e>
 801bda2:	2c30      	cmp	r4, #48	; 0x30
 801bda4:	d0a9      	beq.n	801bcfa <_strtoul_l.constprop.0+0x2e>
 801bda6:	230a      	movs	r3, #10
 801bda8:	e7af      	b.n	801bd0a <_strtoul_l.constprop.0+0x3e>
 801bdaa:	bf00      	nop
 801bdac:	0801f331 	.word	0x0801f331

0801bdb0 <strtoul>:
 801bdb0:	4613      	mov	r3, r2
 801bdb2:	460a      	mov	r2, r1
 801bdb4:	4601      	mov	r1, r0
 801bdb6:	4802      	ldr	r0, [pc, #8]	; (801bdc0 <strtoul+0x10>)
 801bdb8:	6800      	ldr	r0, [r0, #0]
 801bdba:	f7ff bf87 	b.w	801bccc <_strtoul_l.constprop.0>
 801bdbe:	bf00      	nop
 801bdc0:	2000008c 	.word	0x2000008c

0801bdc4 <_vsniprintf_r>:
 801bdc4:	b530      	push	{r4, r5, lr}
 801bdc6:	4614      	mov	r4, r2
 801bdc8:	2c00      	cmp	r4, #0
 801bdca:	b09b      	sub	sp, #108	; 0x6c
 801bdcc:	4605      	mov	r5, r0
 801bdce:	461a      	mov	r2, r3
 801bdd0:	da05      	bge.n	801bdde <_vsniprintf_r+0x1a>
 801bdd2:	238b      	movs	r3, #139	; 0x8b
 801bdd4:	6003      	str	r3, [r0, #0]
 801bdd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bdda:	b01b      	add	sp, #108	; 0x6c
 801bddc:	bd30      	pop	{r4, r5, pc}
 801bdde:	f44f 7302 	mov.w	r3, #520	; 0x208
 801bde2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bde6:	bf14      	ite	ne
 801bde8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801bdec:	4623      	moveq	r3, r4
 801bdee:	9302      	str	r3, [sp, #8]
 801bdf0:	9305      	str	r3, [sp, #20]
 801bdf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bdf6:	9100      	str	r1, [sp, #0]
 801bdf8:	9104      	str	r1, [sp, #16]
 801bdfa:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bdfe:	4669      	mov	r1, sp
 801be00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801be02:	f002 f9c9 	bl	801e198 <_svfiprintf_r>
 801be06:	1c43      	adds	r3, r0, #1
 801be08:	bfbc      	itt	lt
 801be0a:	238b      	movlt	r3, #139	; 0x8b
 801be0c:	602b      	strlt	r3, [r5, #0]
 801be0e:	2c00      	cmp	r4, #0
 801be10:	d0e3      	beq.n	801bdda <_vsniprintf_r+0x16>
 801be12:	9b00      	ldr	r3, [sp, #0]
 801be14:	2200      	movs	r2, #0
 801be16:	701a      	strb	r2, [r3, #0]
 801be18:	e7df      	b.n	801bdda <_vsniprintf_r+0x16>
	...

0801be1c <vsniprintf>:
 801be1c:	b507      	push	{r0, r1, r2, lr}
 801be1e:	9300      	str	r3, [sp, #0]
 801be20:	4613      	mov	r3, r2
 801be22:	460a      	mov	r2, r1
 801be24:	4601      	mov	r1, r0
 801be26:	4803      	ldr	r0, [pc, #12]	; (801be34 <vsniprintf+0x18>)
 801be28:	6800      	ldr	r0, [r0, #0]
 801be2a:	f7ff ffcb 	bl	801bdc4 <_vsniprintf_r>
 801be2e:	b003      	add	sp, #12
 801be30:	f85d fb04 	ldr.w	pc, [sp], #4
 801be34:	2000008c 	.word	0x2000008c

0801be38 <__swbuf_r>:
 801be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be3a:	460e      	mov	r6, r1
 801be3c:	4614      	mov	r4, r2
 801be3e:	4605      	mov	r5, r0
 801be40:	b118      	cbz	r0, 801be4a <__swbuf_r+0x12>
 801be42:	6983      	ldr	r3, [r0, #24]
 801be44:	b90b      	cbnz	r3, 801be4a <__swbuf_r+0x12>
 801be46:	f7fd fd17 	bl	8019878 <__sinit>
 801be4a:	4b21      	ldr	r3, [pc, #132]	; (801bed0 <__swbuf_r+0x98>)
 801be4c:	429c      	cmp	r4, r3
 801be4e:	d12b      	bne.n	801bea8 <__swbuf_r+0x70>
 801be50:	686c      	ldr	r4, [r5, #4]
 801be52:	69a3      	ldr	r3, [r4, #24]
 801be54:	60a3      	str	r3, [r4, #8]
 801be56:	89a3      	ldrh	r3, [r4, #12]
 801be58:	071a      	lsls	r2, r3, #28
 801be5a:	d52f      	bpl.n	801bebc <__swbuf_r+0x84>
 801be5c:	6923      	ldr	r3, [r4, #16]
 801be5e:	b36b      	cbz	r3, 801bebc <__swbuf_r+0x84>
 801be60:	6923      	ldr	r3, [r4, #16]
 801be62:	6820      	ldr	r0, [r4, #0]
 801be64:	1ac0      	subs	r0, r0, r3
 801be66:	6963      	ldr	r3, [r4, #20]
 801be68:	b2f6      	uxtb	r6, r6
 801be6a:	4283      	cmp	r3, r0
 801be6c:	4637      	mov	r7, r6
 801be6e:	dc04      	bgt.n	801be7a <__swbuf_r+0x42>
 801be70:	4621      	mov	r1, r4
 801be72:	4628      	mov	r0, r5
 801be74:	f000 ffec 	bl	801ce50 <_fflush_r>
 801be78:	bb30      	cbnz	r0, 801bec8 <__swbuf_r+0x90>
 801be7a:	68a3      	ldr	r3, [r4, #8]
 801be7c:	3b01      	subs	r3, #1
 801be7e:	60a3      	str	r3, [r4, #8]
 801be80:	6823      	ldr	r3, [r4, #0]
 801be82:	1c5a      	adds	r2, r3, #1
 801be84:	6022      	str	r2, [r4, #0]
 801be86:	701e      	strb	r6, [r3, #0]
 801be88:	6963      	ldr	r3, [r4, #20]
 801be8a:	3001      	adds	r0, #1
 801be8c:	4283      	cmp	r3, r0
 801be8e:	d004      	beq.n	801be9a <__swbuf_r+0x62>
 801be90:	89a3      	ldrh	r3, [r4, #12]
 801be92:	07db      	lsls	r3, r3, #31
 801be94:	d506      	bpl.n	801bea4 <__swbuf_r+0x6c>
 801be96:	2e0a      	cmp	r6, #10
 801be98:	d104      	bne.n	801bea4 <__swbuf_r+0x6c>
 801be9a:	4621      	mov	r1, r4
 801be9c:	4628      	mov	r0, r5
 801be9e:	f000 ffd7 	bl	801ce50 <_fflush_r>
 801bea2:	b988      	cbnz	r0, 801bec8 <__swbuf_r+0x90>
 801bea4:	4638      	mov	r0, r7
 801bea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bea8:	4b0a      	ldr	r3, [pc, #40]	; (801bed4 <__swbuf_r+0x9c>)
 801beaa:	429c      	cmp	r4, r3
 801beac:	d101      	bne.n	801beb2 <__swbuf_r+0x7a>
 801beae:	68ac      	ldr	r4, [r5, #8]
 801beb0:	e7cf      	b.n	801be52 <__swbuf_r+0x1a>
 801beb2:	4b09      	ldr	r3, [pc, #36]	; (801bed8 <__swbuf_r+0xa0>)
 801beb4:	429c      	cmp	r4, r3
 801beb6:	bf08      	it	eq
 801beb8:	68ec      	ldreq	r4, [r5, #12]
 801beba:	e7ca      	b.n	801be52 <__swbuf_r+0x1a>
 801bebc:	4621      	mov	r1, r4
 801bebe:	4628      	mov	r0, r5
 801bec0:	f000 f81e 	bl	801bf00 <__swsetup_r>
 801bec4:	2800      	cmp	r0, #0
 801bec6:	d0cb      	beq.n	801be60 <__swbuf_r+0x28>
 801bec8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801becc:	e7ea      	b.n	801bea4 <__swbuf_r+0x6c>
 801bece:	bf00      	nop
 801bed0:	0801f454 	.word	0x0801f454
 801bed4:	0801f474 	.word	0x0801f474
 801bed8:	0801f434 	.word	0x0801f434

0801bedc <_write_r>:
 801bedc:	b538      	push	{r3, r4, r5, lr}
 801bede:	4d07      	ldr	r5, [pc, #28]	; (801befc <_write_r+0x20>)
 801bee0:	4604      	mov	r4, r0
 801bee2:	4608      	mov	r0, r1
 801bee4:	4611      	mov	r1, r2
 801bee6:	2200      	movs	r2, #0
 801bee8:	602a      	str	r2, [r5, #0]
 801beea:	461a      	mov	r2, r3
 801beec:	f7e8 f9a9 	bl	8004242 <_write>
 801bef0:	1c43      	adds	r3, r0, #1
 801bef2:	d102      	bne.n	801befa <_write_r+0x1e>
 801bef4:	682b      	ldr	r3, [r5, #0]
 801bef6:	b103      	cbz	r3, 801befa <_write_r+0x1e>
 801bef8:	6023      	str	r3, [r4, #0]
 801befa:	bd38      	pop	{r3, r4, r5, pc}
 801befc:	20009f88 	.word	0x20009f88

0801bf00 <__swsetup_r>:
 801bf00:	4b32      	ldr	r3, [pc, #200]	; (801bfcc <__swsetup_r+0xcc>)
 801bf02:	b570      	push	{r4, r5, r6, lr}
 801bf04:	681d      	ldr	r5, [r3, #0]
 801bf06:	4606      	mov	r6, r0
 801bf08:	460c      	mov	r4, r1
 801bf0a:	b125      	cbz	r5, 801bf16 <__swsetup_r+0x16>
 801bf0c:	69ab      	ldr	r3, [r5, #24]
 801bf0e:	b913      	cbnz	r3, 801bf16 <__swsetup_r+0x16>
 801bf10:	4628      	mov	r0, r5
 801bf12:	f7fd fcb1 	bl	8019878 <__sinit>
 801bf16:	4b2e      	ldr	r3, [pc, #184]	; (801bfd0 <__swsetup_r+0xd0>)
 801bf18:	429c      	cmp	r4, r3
 801bf1a:	d10f      	bne.n	801bf3c <__swsetup_r+0x3c>
 801bf1c:	686c      	ldr	r4, [r5, #4]
 801bf1e:	89a3      	ldrh	r3, [r4, #12]
 801bf20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bf24:	0719      	lsls	r1, r3, #28
 801bf26:	d42c      	bmi.n	801bf82 <__swsetup_r+0x82>
 801bf28:	06dd      	lsls	r5, r3, #27
 801bf2a:	d411      	bmi.n	801bf50 <__swsetup_r+0x50>
 801bf2c:	2309      	movs	r3, #9
 801bf2e:	6033      	str	r3, [r6, #0]
 801bf30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bf34:	81a3      	strh	r3, [r4, #12]
 801bf36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bf3a:	e03e      	b.n	801bfba <__swsetup_r+0xba>
 801bf3c:	4b25      	ldr	r3, [pc, #148]	; (801bfd4 <__swsetup_r+0xd4>)
 801bf3e:	429c      	cmp	r4, r3
 801bf40:	d101      	bne.n	801bf46 <__swsetup_r+0x46>
 801bf42:	68ac      	ldr	r4, [r5, #8]
 801bf44:	e7eb      	b.n	801bf1e <__swsetup_r+0x1e>
 801bf46:	4b24      	ldr	r3, [pc, #144]	; (801bfd8 <__swsetup_r+0xd8>)
 801bf48:	429c      	cmp	r4, r3
 801bf4a:	bf08      	it	eq
 801bf4c:	68ec      	ldreq	r4, [r5, #12]
 801bf4e:	e7e6      	b.n	801bf1e <__swsetup_r+0x1e>
 801bf50:	0758      	lsls	r0, r3, #29
 801bf52:	d512      	bpl.n	801bf7a <__swsetup_r+0x7a>
 801bf54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bf56:	b141      	cbz	r1, 801bf6a <__swsetup_r+0x6a>
 801bf58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bf5c:	4299      	cmp	r1, r3
 801bf5e:	d002      	beq.n	801bf66 <__swsetup_r+0x66>
 801bf60:	4630      	mov	r0, r6
 801bf62:	f7fd fded 	bl	8019b40 <_free_r>
 801bf66:	2300      	movs	r3, #0
 801bf68:	6363      	str	r3, [r4, #52]	; 0x34
 801bf6a:	89a3      	ldrh	r3, [r4, #12]
 801bf6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bf70:	81a3      	strh	r3, [r4, #12]
 801bf72:	2300      	movs	r3, #0
 801bf74:	6063      	str	r3, [r4, #4]
 801bf76:	6923      	ldr	r3, [r4, #16]
 801bf78:	6023      	str	r3, [r4, #0]
 801bf7a:	89a3      	ldrh	r3, [r4, #12]
 801bf7c:	f043 0308 	orr.w	r3, r3, #8
 801bf80:	81a3      	strh	r3, [r4, #12]
 801bf82:	6923      	ldr	r3, [r4, #16]
 801bf84:	b94b      	cbnz	r3, 801bf9a <__swsetup_r+0x9a>
 801bf86:	89a3      	ldrh	r3, [r4, #12]
 801bf88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bf8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf90:	d003      	beq.n	801bf9a <__swsetup_r+0x9a>
 801bf92:	4621      	mov	r1, r4
 801bf94:	4630      	mov	r0, r6
 801bf96:	f001 fb55 	bl	801d644 <__smakebuf_r>
 801bf9a:	89a0      	ldrh	r0, [r4, #12]
 801bf9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bfa0:	f010 0301 	ands.w	r3, r0, #1
 801bfa4:	d00a      	beq.n	801bfbc <__swsetup_r+0xbc>
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	60a3      	str	r3, [r4, #8]
 801bfaa:	6963      	ldr	r3, [r4, #20]
 801bfac:	425b      	negs	r3, r3
 801bfae:	61a3      	str	r3, [r4, #24]
 801bfb0:	6923      	ldr	r3, [r4, #16]
 801bfb2:	b943      	cbnz	r3, 801bfc6 <__swsetup_r+0xc6>
 801bfb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bfb8:	d1ba      	bne.n	801bf30 <__swsetup_r+0x30>
 801bfba:	bd70      	pop	{r4, r5, r6, pc}
 801bfbc:	0781      	lsls	r1, r0, #30
 801bfbe:	bf58      	it	pl
 801bfc0:	6963      	ldrpl	r3, [r4, #20]
 801bfc2:	60a3      	str	r3, [r4, #8]
 801bfc4:	e7f4      	b.n	801bfb0 <__swsetup_r+0xb0>
 801bfc6:	2000      	movs	r0, #0
 801bfc8:	e7f7      	b.n	801bfba <__swsetup_r+0xba>
 801bfca:	bf00      	nop
 801bfcc:	2000008c 	.word	0x2000008c
 801bfd0:	0801f454 	.word	0x0801f454
 801bfd4:	0801f474 	.word	0x0801f474
 801bfd8:	0801f434 	.word	0x0801f434

0801bfdc <__assert_func>:
 801bfdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bfde:	4614      	mov	r4, r2
 801bfe0:	461a      	mov	r2, r3
 801bfe2:	4b09      	ldr	r3, [pc, #36]	; (801c008 <__assert_func+0x2c>)
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	4605      	mov	r5, r0
 801bfe8:	68d8      	ldr	r0, [r3, #12]
 801bfea:	b14c      	cbz	r4, 801c000 <__assert_func+0x24>
 801bfec:	4b07      	ldr	r3, [pc, #28]	; (801c00c <__assert_func+0x30>)
 801bfee:	9100      	str	r1, [sp, #0]
 801bff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bff4:	4906      	ldr	r1, [pc, #24]	; (801c010 <__assert_func+0x34>)
 801bff6:	462b      	mov	r3, r5
 801bff8:	f000 ff66 	bl	801cec8 <fiprintf>
 801bffc:	f002 fb4d 	bl	801e69a <abort>
 801c000:	4b04      	ldr	r3, [pc, #16]	; (801c014 <__assert_func+0x38>)
 801c002:	461c      	mov	r4, r3
 801c004:	e7f3      	b.n	801bfee <__assert_func+0x12>
 801c006:	bf00      	nop
 801c008:	2000008c 	.word	0x2000008c
 801c00c:	0801f5f5 	.word	0x0801f5f5
 801c010:	0801f602 	.word	0x0801f602
 801c014:	0801f630 	.word	0x0801f630

0801c018 <_close_r>:
 801c018:	b538      	push	{r3, r4, r5, lr}
 801c01a:	4d06      	ldr	r5, [pc, #24]	; (801c034 <_close_r+0x1c>)
 801c01c:	2300      	movs	r3, #0
 801c01e:	4604      	mov	r4, r0
 801c020:	4608      	mov	r0, r1
 801c022:	602b      	str	r3, [r5, #0]
 801c024:	f7e8 f929 	bl	800427a <_close>
 801c028:	1c43      	adds	r3, r0, #1
 801c02a:	d102      	bne.n	801c032 <_close_r+0x1a>
 801c02c:	682b      	ldr	r3, [r5, #0]
 801c02e:	b103      	cbz	r3, 801c032 <_close_r+0x1a>
 801c030:	6023      	str	r3, [r4, #0]
 801c032:	bd38      	pop	{r3, r4, r5, pc}
 801c034:	20009f88 	.word	0x20009f88

0801c038 <quorem>:
 801c038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c03c:	6903      	ldr	r3, [r0, #16]
 801c03e:	690c      	ldr	r4, [r1, #16]
 801c040:	42a3      	cmp	r3, r4
 801c042:	4607      	mov	r7, r0
 801c044:	f2c0 8081 	blt.w	801c14a <quorem+0x112>
 801c048:	3c01      	subs	r4, #1
 801c04a:	f101 0814 	add.w	r8, r1, #20
 801c04e:	f100 0514 	add.w	r5, r0, #20
 801c052:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c056:	9301      	str	r3, [sp, #4]
 801c058:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c05c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c060:	3301      	adds	r3, #1
 801c062:	429a      	cmp	r2, r3
 801c064:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c068:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c06c:	fbb2 f6f3 	udiv	r6, r2, r3
 801c070:	d331      	bcc.n	801c0d6 <quorem+0x9e>
 801c072:	f04f 0e00 	mov.w	lr, #0
 801c076:	4640      	mov	r0, r8
 801c078:	46ac      	mov	ip, r5
 801c07a:	46f2      	mov	sl, lr
 801c07c:	f850 2b04 	ldr.w	r2, [r0], #4
 801c080:	b293      	uxth	r3, r2
 801c082:	fb06 e303 	mla	r3, r6, r3, lr
 801c086:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c08a:	b29b      	uxth	r3, r3
 801c08c:	ebaa 0303 	sub.w	r3, sl, r3
 801c090:	f8dc a000 	ldr.w	sl, [ip]
 801c094:	0c12      	lsrs	r2, r2, #16
 801c096:	fa13 f38a 	uxtah	r3, r3, sl
 801c09a:	fb06 e202 	mla	r2, r6, r2, lr
 801c09e:	9300      	str	r3, [sp, #0]
 801c0a0:	9b00      	ldr	r3, [sp, #0]
 801c0a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c0a6:	b292      	uxth	r2, r2
 801c0a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c0ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c0b0:	f8bd 3000 	ldrh.w	r3, [sp]
 801c0b4:	4581      	cmp	r9, r0
 801c0b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c0ba:	f84c 3b04 	str.w	r3, [ip], #4
 801c0be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c0c2:	d2db      	bcs.n	801c07c <quorem+0x44>
 801c0c4:	f855 300b 	ldr.w	r3, [r5, fp]
 801c0c8:	b92b      	cbnz	r3, 801c0d6 <quorem+0x9e>
 801c0ca:	9b01      	ldr	r3, [sp, #4]
 801c0cc:	3b04      	subs	r3, #4
 801c0ce:	429d      	cmp	r5, r3
 801c0d0:	461a      	mov	r2, r3
 801c0d2:	d32e      	bcc.n	801c132 <quorem+0xfa>
 801c0d4:	613c      	str	r4, [r7, #16]
 801c0d6:	4638      	mov	r0, r7
 801c0d8:	f001 fdde 	bl	801dc98 <__mcmp>
 801c0dc:	2800      	cmp	r0, #0
 801c0de:	db24      	blt.n	801c12a <quorem+0xf2>
 801c0e0:	3601      	adds	r6, #1
 801c0e2:	4628      	mov	r0, r5
 801c0e4:	f04f 0c00 	mov.w	ip, #0
 801c0e8:	f858 2b04 	ldr.w	r2, [r8], #4
 801c0ec:	f8d0 e000 	ldr.w	lr, [r0]
 801c0f0:	b293      	uxth	r3, r2
 801c0f2:	ebac 0303 	sub.w	r3, ip, r3
 801c0f6:	0c12      	lsrs	r2, r2, #16
 801c0f8:	fa13 f38e 	uxtah	r3, r3, lr
 801c0fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c100:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c104:	b29b      	uxth	r3, r3
 801c106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c10a:	45c1      	cmp	r9, r8
 801c10c:	f840 3b04 	str.w	r3, [r0], #4
 801c110:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c114:	d2e8      	bcs.n	801c0e8 <quorem+0xb0>
 801c116:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c11a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c11e:	b922      	cbnz	r2, 801c12a <quorem+0xf2>
 801c120:	3b04      	subs	r3, #4
 801c122:	429d      	cmp	r5, r3
 801c124:	461a      	mov	r2, r3
 801c126:	d30a      	bcc.n	801c13e <quorem+0x106>
 801c128:	613c      	str	r4, [r7, #16]
 801c12a:	4630      	mov	r0, r6
 801c12c:	b003      	add	sp, #12
 801c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c132:	6812      	ldr	r2, [r2, #0]
 801c134:	3b04      	subs	r3, #4
 801c136:	2a00      	cmp	r2, #0
 801c138:	d1cc      	bne.n	801c0d4 <quorem+0x9c>
 801c13a:	3c01      	subs	r4, #1
 801c13c:	e7c7      	b.n	801c0ce <quorem+0x96>
 801c13e:	6812      	ldr	r2, [r2, #0]
 801c140:	3b04      	subs	r3, #4
 801c142:	2a00      	cmp	r2, #0
 801c144:	d1f0      	bne.n	801c128 <quorem+0xf0>
 801c146:	3c01      	subs	r4, #1
 801c148:	e7eb      	b.n	801c122 <quorem+0xea>
 801c14a:	2000      	movs	r0, #0
 801c14c:	e7ee      	b.n	801c12c <quorem+0xf4>
	...

0801c150 <_dtoa_r>:
 801c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c154:	ed2d 8b04 	vpush	{d8-d9}
 801c158:	ec57 6b10 	vmov	r6, r7, d0
 801c15c:	b093      	sub	sp, #76	; 0x4c
 801c15e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c160:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c164:	9106      	str	r1, [sp, #24]
 801c166:	ee10 aa10 	vmov	sl, s0
 801c16a:	4604      	mov	r4, r0
 801c16c:	9209      	str	r2, [sp, #36]	; 0x24
 801c16e:	930c      	str	r3, [sp, #48]	; 0x30
 801c170:	46bb      	mov	fp, r7
 801c172:	b975      	cbnz	r5, 801c192 <_dtoa_r+0x42>
 801c174:	2010      	movs	r0, #16
 801c176:	f7fd fc8d 	bl	8019a94 <malloc>
 801c17a:	4602      	mov	r2, r0
 801c17c:	6260      	str	r0, [r4, #36]	; 0x24
 801c17e:	b920      	cbnz	r0, 801c18a <_dtoa_r+0x3a>
 801c180:	4ba7      	ldr	r3, [pc, #668]	; (801c420 <_dtoa_r+0x2d0>)
 801c182:	21ea      	movs	r1, #234	; 0xea
 801c184:	48a7      	ldr	r0, [pc, #668]	; (801c424 <_dtoa_r+0x2d4>)
 801c186:	f7ff ff29 	bl	801bfdc <__assert_func>
 801c18a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c18e:	6005      	str	r5, [r0, #0]
 801c190:	60c5      	str	r5, [r0, #12]
 801c192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c194:	6819      	ldr	r1, [r3, #0]
 801c196:	b151      	cbz	r1, 801c1ae <_dtoa_r+0x5e>
 801c198:	685a      	ldr	r2, [r3, #4]
 801c19a:	604a      	str	r2, [r1, #4]
 801c19c:	2301      	movs	r3, #1
 801c19e:	4093      	lsls	r3, r2
 801c1a0:	608b      	str	r3, [r1, #8]
 801c1a2:	4620      	mov	r0, r4
 801c1a4:	f001 faec 	bl	801d780 <_Bfree>
 801c1a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c1aa:	2200      	movs	r2, #0
 801c1ac:	601a      	str	r2, [r3, #0]
 801c1ae:	1e3b      	subs	r3, r7, #0
 801c1b0:	bfaa      	itet	ge
 801c1b2:	2300      	movge	r3, #0
 801c1b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801c1b8:	f8c8 3000 	strge.w	r3, [r8]
 801c1bc:	4b9a      	ldr	r3, [pc, #616]	; (801c428 <_dtoa_r+0x2d8>)
 801c1be:	bfbc      	itt	lt
 801c1c0:	2201      	movlt	r2, #1
 801c1c2:	f8c8 2000 	strlt.w	r2, [r8]
 801c1c6:	ea33 030b 	bics.w	r3, r3, fp
 801c1ca:	d11b      	bne.n	801c204 <_dtoa_r+0xb4>
 801c1cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c1ce:	f242 730f 	movw	r3, #9999	; 0x270f
 801c1d2:	6013      	str	r3, [r2, #0]
 801c1d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c1d8:	4333      	orrs	r3, r6
 801c1da:	f000 8592 	beq.w	801cd02 <_dtoa_r+0xbb2>
 801c1de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c1e0:	b963      	cbnz	r3, 801c1fc <_dtoa_r+0xac>
 801c1e2:	4b92      	ldr	r3, [pc, #584]	; (801c42c <_dtoa_r+0x2dc>)
 801c1e4:	e022      	b.n	801c22c <_dtoa_r+0xdc>
 801c1e6:	4b92      	ldr	r3, [pc, #584]	; (801c430 <_dtoa_r+0x2e0>)
 801c1e8:	9301      	str	r3, [sp, #4]
 801c1ea:	3308      	adds	r3, #8
 801c1ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c1ee:	6013      	str	r3, [r2, #0]
 801c1f0:	9801      	ldr	r0, [sp, #4]
 801c1f2:	b013      	add	sp, #76	; 0x4c
 801c1f4:	ecbd 8b04 	vpop	{d8-d9}
 801c1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1fc:	4b8b      	ldr	r3, [pc, #556]	; (801c42c <_dtoa_r+0x2dc>)
 801c1fe:	9301      	str	r3, [sp, #4]
 801c200:	3303      	adds	r3, #3
 801c202:	e7f3      	b.n	801c1ec <_dtoa_r+0x9c>
 801c204:	2200      	movs	r2, #0
 801c206:	2300      	movs	r3, #0
 801c208:	4650      	mov	r0, sl
 801c20a:	4659      	mov	r1, fp
 801c20c:	f7e4 fc74 	bl	8000af8 <__aeabi_dcmpeq>
 801c210:	ec4b ab19 	vmov	d9, sl, fp
 801c214:	4680      	mov	r8, r0
 801c216:	b158      	cbz	r0, 801c230 <_dtoa_r+0xe0>
 801c218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c21a:	2301      	movs	r3, #1
 801c21c:	6013      	str	r3, [r2, #0]
 801c21e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c220:	2b00      	cmp	r3, #0
 801c222:	f000 856b 	beq.w	801ccfc <_dtoa_r+0xbac>
 801c226:	4883      	ldr	r0, [pc, #524]	; (801c434 <_dtoa_r+0x2e4>)
 801c228:	6018      	str	r0, [r3, #0]
 801c22a:	1e43      	subs	r3, r0, #1
 801c22c:	9301      	str	r3, [sp, #4]
 801c22e:	e7df      	b.n	801c1f0 <_dtoa_r+0xa0>
 801c230:	ec4b ab10 	vmov	d0, sl, fp
 801c234:	aa10      	add	r2, sp, #64	; 0x40
 801c236:	a911      	add	r1, sp, #68	; 0x44
 801c238:	4620      	mov	r0, r4
 801c23a:	f001 fe4f 	bl	801dedc <__d2b>
 801c23e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801c242:	ee08 0a10 	vmov	s16, r0
 801c246:	2d00      	cmp	r5, #0
 801c248:	f000 8084 	beq.w	801c354 <_dtoa_r+0x204>
 801c24c:	ee19 3a90 	vmov	r3, s19
 801c250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c254:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c258:	4656      	mov	r6, sl
 801c25a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c25e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c262:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c266:	4b74      	ldr	r3, [pc, #464]	; (801c438 <_dtoa_r+0x2e8>)
 801c268:	2200      	movs	r2, #0
 801c26a:	4630      	mov	r0, r6
 801c26c:	4639      	mov	r1, r7
 801c26e:	f7e4 f823 	bl	80002b8 <__aeabi_dsub>
 801c272:	a365      	add	r3, pc, #404	; (adr r3, 801c408 <_dtoa_r+0x2b8>)
 801c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c278:	f7e4 f9d6 	bl	8000628 <__aeabi_dmul>
 801c27c:	a364      	add	r3, pc, #400	; (adr r3, 801c410 <_dtoa_r+0x2c0>)
 801c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c282:	f7e4 f81b 	bl	80002bc <__adddf3>
 801c286:	4606      	mov	r6, r0
 801c288:	4628      	mov	r0, r5
 801c28a:	460f      	mov	r7, r1
 801c28c:	f7e4 f962 	bl	8000554 <__aeabi_i2d>
 801c290:	a361      	add	r3, pc, #388	; (adr r3, 801c418 <_dtoa_r+0x2c8>)
 801c292:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c296:	f7e4 f9c7 	bl	8000628 <__aeabi_dmul>
 801c29a:	4602      	mov	r2, r0
 801c29c:	460b      	mov	r3, r1
 801c29e:	4630      	mov	r0, r6
 801c2a0:	4639      	mov	r1, r7
 801c2a2:	f7e4 f80b 	bl	80002bc <__adddf3>
 801c2a6:	4606      	mov	r6, r0
 801c2a8:	460f      	mov	r7, r1
 801c2aa:	f7e4 fc6d 	bl	8000b88 <__aeabi_d2iz>
 801c2ae:	2200      	movs	r2, #0
 801c2b0:	9000      	str	r0, [sp, #0]
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	4630      	mov	r0, r6
 801c2b6:	4639      	mov	r1, r7
 801c2b8:	f7e4 fc28 	bl	8000b0c <__aeabi_dcmplt>
 801c2bc:	b150      	cbz	r0, 801c2d4 <_dtoa_r+0x184>
 801c2be:	9800      	ldr	r0, [sp, #0]
 801c2c0:	f7e4 f948 	bl	8000554 <__aeabi_i2d>
 801c2c4:	4632      	mov	r2, r6
 801c2c6:	463b      	mov	r3, r7
 801c2c8:	f7e4 fc16 	bl	8000af8 <__aeabi_dcmpeq>
 801c2cc:	b910      	cbnz	r0, 801c2d4 <_dtoa_r+0x184>
 801c2ce:	9b00      	ldr	r3, [sp, #0]
 801c2d0:	3b01      	subs	r3, #1
 801c2d2:	9300      	str	r3, [sp, #0]
 801c2d4:	9b00      	ldr	r3, [sp, #0]
 801c2d6:	2b16      	cmp	r3, #22
 801c2d8:	d85a      	bhi.n	801c390 <_dtoa_r+0x240>
 801c2da:	9a00      	ldr	r2, [sp, #0]
 801c2dc:	4b57      	ldr	r3, [pc, #348]	; (801c43c <_dtoa_r+0x2ec>)
 801c2de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2e6:	ec51 0b19 	vmov	r0, r1, d9
 801c2ea:	f7e4 fc0f 	bl	8000b0c <__aeabi_dcmplt>
 801c2ee:	2800      	cmp	r0, #0
 801c2f0:	d050      	beq.n	801c394 <_dtoa_r+0x244>
 801c2f2:	9b00      	ldr	r3, [sp, #0]
 801c2f4:	3b01      	subs	r3, #1
 801c2f6:	9300      	str	r3, [sp, #0]
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	930b      	str	r3, [sp, #44]	; 0x2c
 801c2fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c2fe:	1b5d      	subs	r5, r3, r5
 801c300:	1e6b      	subs	r3, r5, #1
 801c302:	9305      	str	r3, [sp, #20]
 801c304:	bf45      	ittet	mi
 801c306:	f1c5 0301 	rsbmi	r3, r5, #1
 801c30a:	9304      	strmi	r3, [sp, #16]
 801c30c:	2300      	movpl	r3, #0
 801c30e:	2300      	movmi	r3, #0
 801c310:	bf4c      	ite	mi
 801c312:	9305      	strmi	r3, [sp, #20]
 801c314:	9304      	strpl	r3, [sp, #16]
 801c316:	9b00      	ldr	r3, [sp, #0]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	db3d      	blt.n	801c398 <_dtoa_r+0x248>
 801c31c:	9b05      	ldr	r3, [sp, #20]
 801c31e:	9a00      	ldr	r2, [sp, #0]
 801c320:	920a      	str	r2, [sp, #40]	; 0x28
 801c322:	4413      	add	r3, r2
 801c324:	9305      	str	r3, [sp, #20]
 801c326:	2300      	movs	r3, #0
 801c328:	9307      	str	r3, [sp, #28]
 801c32a:	9b06      	ldr	r3, [sp, #24]
 801c32c:	2b09      	cmp	r3, #9
 801c32e:	f200 8089 	bhi.w	801c444 <_dtoa_r+0x2f4>
 801c332:	2b05      	cmp	r3, #5
 801c334:	bfc4      	itt	gt
 801c336:	3b04      	subgt	r3, #4
 801c338:	9306      	strgt	r3, [sp, #24]
 801c33a:	9b06      	ldr	r3, [sp, #24]
 801c33c:	f1a3 0302 	sub.w	r3, r3, #2
 801c340:	bfcc      	ite	gt
 801c342:	2500      	movgt	r5, #0
 801c344:	2501      	movle	r5, #1
 801c346:	2b03      	cmp	r3, #3
 801c348:	f200 8087 	bhi.w	801c45a <_dtoa_r+0x30a>
 801c34c:	e8df f003 	tbb	[pc, r3]
 801c350:	59383a2d 	.word	0x59383a2d
 801c354:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801c358:	441d      	add	r5, r3
 801c35a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c35e:	2b20      	cmp	r3, #32
 801c360:	bfc1      	itttt	gt
 801c362:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c366:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c36a:	fa0b f303 	lslgt.w	r3, fp, r3
 801c36e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c372:	bfda      	itte	le
 801c374:	f1c3 0320 	rsble	r3, r3, #32
 801c378:	fa06 f003 	lslle.w	r0, r6, r3
 801c37c:	4318      	orrgt	r0, r3
 801c37e:	f7e4 f8d9 	bl	8000534 <__aeabi_ui2d>
 801c382:	2301      	movs	r3, #1
 801c384:	4606      	mov	r6, r0
 801c386:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c38a:	3d01      	subs	r5, #1
 801c38c:	930e      	str	r3, [sp, #56]	; 0x38
 801c38e:	e76a      	b.n	801c266 <_dtoa_r+0x116>
 801c390:	2301      	movs	r3, #1
 801c392:	e7b2      	b.n	801c2fa <_dtoa_r+0x1aa>
 801c394:	900b      	str	r0, [sp, #44]	; 0x2c
 801c396:	e7b1      	b.n	801c2fc <_dtoa_r+0x1ac>
 801c398:	9b04      	ldr	r3, [sp, #16]
 801c39a:	9a00      	ldr	r2, [sp, #0]
 801c39c:	1a9b      	subs	r3, r3, r2
 801c39e:	9304      	str	r3, [sp, #16]
 801c3a0:	4253      	negs	r3, r2
 801c3a2:	9307      	str	r3, [sp, #28]
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	930a      	str	r3, [sp, #40]	; 0x28
 801c3a8:	e7bf      	b.n	801c32a <_dtoa_r+0x1da>
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	9308      	str	r3, [sp, #32]
 801c3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	dc55      	bgt.n	801c460 <_dtoa_r+0x310>
 801c3b4:	2301      	movs	r3, #1
 801c3b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c3ba:	461a      	mov	r2, r3
 801c3bc:	9209      	str	r2, [sp, #36]	; 0x24
 801c3be:	e00c      	b.n	801c3da <_dtoa_r+0x28a>
 801c3c0:	2301      	movs	r3, #1
 801c3c2:	e7f3      	b.n	801c3ac <_dtoa_r+0x25c>
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3c8:	9308      	str	r3, [sp, #32]
 801c3ca:	9b00      	ldr	r3, [sp, #0]
 801c3cc:	4413      	add	r3, r2
 801c3ce:	9302      	str	r3, [sp, #8]
 801c3d0:	3301      	adds	r3, #1
 801c3d2:	2b01      	cmp	r3, #1
 801c3d4:	9303      	str	r3, [sp, #12]
 801c3d6:	bfb8      	it	lt
 801c3d8:	2301      	movlt	r3, #1
 801c3da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c3dc:	2200      	movs	r2, #0
 801c3de:	6042      	str	r2, [r0, #4]
 801c3e0:	2204      	movs	r2, #4
 801c3e2:	f102 0614 	add.w	r6, r2, #20
 801c3e6:	429e      	cmp	r6, r3
 801c3e8:	6841      	ldr	r1, [r0, #4]
 801c3ea:	d93d      	bls.n	801c468 <_dtoa_r+0x318>
 801c3ec:	4620      	mov	r0, r4
 801c3ee:	f001 f987 	bl	801d700 <_Balloc>
 801c3f2:	9001      	str	r0, [sp, #4]
 801c3f4:	2800      	cmp	r0, #0
 801c3f6:	d13b      	bne.n	801c470 <_dtoa_r+0x320>
 801c3f8:	4b11      	ldr	r3, [pc, #68]	; (801c440 <_dtoa_r+0x2f0>)
 801c3fa:	4602      	mov	r2, r0
 801c3fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c400:	e6c0      	b.n	801c184 <_dtoa_r+0x34>
 801c402:	2301      	movs	r3, #1
 801c404:	e7df      	b.n	801c3c6 <_dtoa_r+0x276>
 801c406:	bf00      	nop
 801c408:	636f4361 	.word	0x636f4361
 801c40c:	3fd287a7 	.word	0x3fd287a7
 801c410:	8b60c8b3 	.word	0x8b60c8b3
 801c414:	3fc68a28 	.word	0x3fc68a28
 801c418:	509f79fb 	.word	0x509f79fb
 801c41c:	3fd34413 	.word	0x3fd34413
 801c420:	0801f4d1 	.word	0x0801f4d1
 801c424:	0801f63e 	.word	0x0801f63e
 801c428:	7ff00000 	.word	0x7ff00000
 801c42c:	0801f63a 	.word	0x0801f63a
 801c430:	0801f631 	.word	0x0801f631
 801c434:	0801f4a9 	.word	0x0801f4a9
 801c438:	3ff80000 	.word	0x3ff80000
 801c43c:	0801f7a8 	.word	0x0801f7a8
 801c440:	0801f699 	.word	0x0801f699
 801c444:	2501      	movs	r5, #1
 801c446:	2300      	movs	r3, #0
 801c448:	9306      	str	r3, [sp, #24]
 801c44a:	9508      	str	r5, [sp, #32]
 801c44c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c450:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c454:	2200      	movs	r2, #0
 801c456:	2312      	movs	r3, #18
 801c458:	e7b0      	b.n	801c3bc <_dtoa_r+0x26c>
 801c45a:	2301      	movs	r3, #1
 801c45c:	9308      	str	r3, [sp, #32]
 801c45e:	e7f5      	b.n	801c44c <_dtoa_r+0x2fc>
 801c460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c462:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c466:	e7b8      	b.n	801c3da <_dtoa_r+0x28a>
 801c468:	3101      	adds	r1, #1
 801c46a:	6041      	str	r1, [r0, #4]
 801c46c:	0052      	lsls	r2, r2, #1
 801c46e:	e7b8      	b.n	801c3e2 <_dtoa_r+0x292>
 801c470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c472:	9a01      	ldr	r2, [sp, #4]
 801c474:	601a      	str	r2, [r3, #0]
 801c476:	9b03      	ldr	r3, [sp, #12]
 801c478:	2b0e      	cmp	r3, #14
 801c47a:	f200 809d 	bhi.w	801c5b8 <_dtoa_r+0x468>
 801c47e:	2d00      	cmp	r5, #0
 801c480:	f000 809a 	beq.w	801c5b8 <_dtoa_r+0x468>
 801c484:	9b00      	ldr	r3, [sp, #0]
 801c486:	2b00      	cmp	r3, #0
 801c488:	dd32      	ble.n	801c4f0 <_dtoa_r+0x3a0>
 801c48a:	4ab7      	ldr	r2, [pc, #732]	; (801c768 <_dtoa_r+0x618>)
 801c48c:	f003 030f 	and.w	r3, r3, #15
 801c490:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c494:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c498:	9b00      	ldr	r3, [sp, #0]
 801c49a:	05d8      	lsls	r0, r3, #23
 801c49c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801c4a0:	d516      	bpl.n	801c4d0 <_dtoa_r+0x380>
 801c4a2:	4bb2      	ldr	r3, [pc, #712]	; (801c76c <_dtoa_r+0x61c>)
 801c4a4:	ec51 0b19 	vmov	r0, r1, d9
 801c4a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c4ac:	f7e4 f9e6 	bl	800087c <__aeabi_ddiv>
 801c4b0:	f007 070f 	and.w	r7, r7, #15
 801c4b4:	4682      	mov	sl, r0
 801c4b6:	468b      	mov	fp, r1
 801c4b8:	2503      	movs	r5, #3
 801c4ba:	4eac      	ldr	r6, [pc, #688]	; (801c76c <_dtoa_r+0x61c>)
 801c4bc:	b957      	cbnz	r7, 801c4d4 <_dtoa_r+0x384>
 801c4be:	4642      	mov	r2, r8
 801c4c0:	464b      	mov	r3, r9
 801c4c2:	4650      	mov	r0, sl
 801c4c4:	4659      	mov	r1, fp
 801c4c6:	f7e4 f9d9 	bl	800087c <__aeabi_ddiv>
 801c4ca:	4682      	mov	sl, r0
 801c4cc:	468b      	mov	fp, r1
 801c4ce:	e028      	b.n	801c522 <_dtoa_r+0x3d2>
 801c4d0:	2502      	movs	r5, #2
 801c4d2:	e7f2      	b.n	801c4ba <_dtoa_r+0x36a>
 801c4d4:	07f9      	lsls	r1, r7, #31
 801c4d6:	d508      	bpl.n	801c4ea <_dtoa_r+0x39a>
 801c4d8:	4640      	mov	r0, r8
 801c4da:	4649      	mov	r1, r9
 801c4dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c4e0:	f7e4 f8a2 	bl	8000628 <__aeabi_dmul>
 801c4e4:	3501      	adds	r5, #1
 801c4e6:	4680      	mov	r8, r0
 801c4e8:	4689      	mov	r9, r1
 801c4ea:	107f      	asrs	r7, r7, #1
 801c4ec:	3608      	adds	r6, #8
 801c4ee:	e7e5      	b.n	801c4bc <_dtoa_r+0x36c>
 801c4f0:	f000 809b 	beq.w	801c62a <_dtoa_r+0x4da>
 801c4f4:	9b00      	ldr	r3, [sp, #0]
 801c4f6:	4f9d      	ldr	r7, [pc, #628]	; (801c76c <_dtoa_r+0x61c>)
 801c4f8:	425e      	negs	r6, r3
 801c4fa:	4b9b      	ldr	r3, [pc, #620]	; (801c768 <_dtoa_r+0x618>)
 801c4fc:	f006 020f 	and.w	r2, r6, #15
 801c500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c508:	ec51 0b19 	vmov	r0, r1, d9
 801c50c:	f7e4 f88c 	bl	8000628 <__aeabi_dmul>
 801c510:	1136      	asrs	r6, r6, #4
 801c512:	4682      	mov	sl, r0
 801c514:	468b      	mov	fp, r1
 801c516:	2300      	movs	r3, #0
 801c518:	2502      	movs	r5, #2
 801c51a:	2e00      	cmp	r6, #0
 801c51c:	d17a      	bne.n	801c614 <_dtoa_r+0x4c4>
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d1d3      	bne.n	801c4ca <_dtoa_r+0x37a>
 801c522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c524:	2b00      	cmp	r3, #0
 801c526:	f000 8082 	beq.w	801c62e <_dtoa_r+0x4de>
 801c52a:	4b91      	ldr	r3, [pc, #580]	; (801c770 <_dtoa_r+0x620>)
 801c52c:	2200      	movs	r2, #0
 801c52e:	4650      	mov	r0, sl
 801c530:	4659      	mov	r1, fp
 801c532:	f7e4 faeb 	bl	8000b0c <__aeabi_dcmplt>
 801c536:	2800      	cmp	r0, #0
 801c538:	d079      	beq.n	801c62e <_dtoa_r+0x4de>
 801c53a:	9b03      	ldr	r3, [sp, #12]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d076      	beq.n	801c62e <_dtoa_r+0x4de>
 801c540:	9b02      	ldr	r3, [sp, #8]
 801c542:	2b00      	cmp	r3, #0
 801c544:	dd36      	ble.n	801c5b4 <_dtoa_r+0x464>
 801c546:	9b00      	ldr	r3, [sp, #0]
 801c548:	4650      	mov	r0, sl
 801c54a:	4659      	mov	r1, fp
 801c54c:	1e5f      	subs	r7, r3, #1
 801c54e:	2200      	movs	r2, #0
 801c550:	4b88      	ldr	r3, [pc, #544]	; (801c774 <_dtoa_r+0x624>)
 801c552:	f7e4 f869 	bl	8000628 <__aeabi_dmul>
 801c556:	9e02      	ldr	r6, [sp, #8]
 801c558:	4682      	mov	sl, r0
 801c55a:	468b      	mov	fp, r1
 801c55c:	3501      	adds	r5, #1
 801c55e:	4628      	mov	r0, r5
 801c560:	f7e3 fff8 	bl	8000554 <__aeabi_i2d>
 801c564:	4652      	mov	r2, sl
 801c566:	465b      	mov	r3, fp
 801c568:	f7e4 f85e 	bl	8000628 <__aeabi_dmul>
 801c56c:	4b82      	ldr	r3, [pc, #520]	; (801c778 <_dtoa_r+0x628>)
 801c56e:	2200      	movs	r2, #0
 801c570:	f7e3 fea4 	bl	80002bc <__adddf3>
 801c574:	46d0      	mov	r8, sl
 801c576:	46d9      	mov	r9, fp
 801c578:	4682      	mov	sl, r0
 801c57a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801c57e:	2e00      	cmp	r6, #0
 801c580:	d158      	bne.n	801c634 <_dtoa_r+0x4e4>
 801c582:	4b7e      	ldr	r3, [pc, #504]	; (801c77c <_dtoa_r+0x62c>)
 801c584:	2200      	movs	r2, #0
 801c586:	4640      	mov	r0, r8
 801c588:	4649      	mov	r1, r9
 801c58a:	f7e3 fe95 	bl	80002b8 <__aeabi_dsub>
 801c58e:	4652      	mov	r2, sl
 801c590:	465b      	mov	r3, fp
 801c592:	4680      	mov	r8, r0
 801c594:	4689      	mov	r9, r1
 801c596:	f7e4 fad7 	bl	8000b48 <__aeabi_dcmpgt>
 801c59a:	2800      	cmp	r0, #0
 801c59c:	f040 8295 	bne.w	801caca <_dtoa_r+0x97a>
 801c5a0:	4652      	mov	r2, sl
 801c5a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c5a6:	4640      	mov	r0, r8
 801c5a8:	4649      	mov	r1, r9
 801c5aa:	f7e4 faaf 	bl	8000b0c <__aeabi_dcmplt>
 801c5ae:	2800      	cmp	r0, #0
 801c5b0:	f040 8289 	bne.w	801cac6 <_dtoa_r+0x976>
 801c5b4:	ec5b ab19 	vmov	sl, fp, d9
 801c5b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	f2c0 8148 	blt.w	801c850 <_dtoa_r+0x700>
 801c5c0:	9a00      	ldr	r2, [sp, #0]
 801c5c2:	2a0e      	cmp	r2, #14
 801c5c4:	f300 8144 	bgt.w	801c850 <_dtoa_r+0x700>
 801c5c8:	4b67      	ldr	r3, [pc, #412]	; (801c768 <_dtoa_r+0x618>)
 801c5ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c5ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	f280 80d5 	bge.w	801c784 <_dtoa_r+0x634>
 801c5da:	9b03      	ldr	r3, [sp, #12]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	f300 80d1 	bgt.w	801c784 <_dtoa_r+0x634>
 801c5e2:	f040 826f 	bne.w	801cac4 <_dtoa_r+0x974>
 801c5e6:	4b65      	ldr	r3, [pc, #404]	; (801c77c <_dtoa_r+0x62c>)
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	4640      	mov	r0, r8
 801c5ec:	4649      	mov	r1, r9
 801c5ee:	f7e4 f81b 	bl	8000628 <__aeabi_dmul>
 801c5f2:	4652      	mov	r2, sl
 801c5f4:	465b      	mov	r3, fp
 801c5f6:	f7e4 fa9d 	bl	8000b34 <__aeabi_dcmpge>
 801c5fa:	9e03      	ldr	r6, [sp, #12]
 801c5fc:	4637      	mov	r7, r6
 801c5fe:	2800      	cmp	r0, #0
 801c600:	f040 8245 	bne.w	801ca8e <_dtoa_r+0x93e>
 801c604:	9d01      	ldr	r5, [sp, #4]
 801c606:	2331      	movs	r3, #49	; 0x31
 801c608:	f805 3b01 	strb.w	r3, [r5], #1
 801c60c:	9b00      	ldr	r3, [sp, #0]
 801c60e:	3301      	adds	r3, #1
 801c610:	9300      	str	r3, [sp, #0]
 801c612:	e240      	b.n	801ca96 <_dtoa_r+0x946>
 801c614:	07f2      	lsls	r2, r6, #31
 801c616:	d505      	bpl.n	801c624 <_dtoa_r+0x4d4>
 801c618:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c61c:	f7e4 f804 	bl	8000628 <__aeabi_dmul>
 801c620:	3501      	adds	r5, #1
 801c622:	2301      	movs	r3, #1
 801c624:	1076      	asrs	r6, r6, #1
 801c626:	3708      	adds	r7, #8
 801c628:	e777      	b.n	801c51a <_dtoa_r+0x3ca>
 801c62a:	2502      	movs	r5, #2
 801c62c:	e779      	b.n	801c522 <_dtoa_r+0x3d2>
 801c62e:	9f00      	ldr	r7, [sp, #0]
 801c630:	9e03      	ldr	r6, [sp, #12]
 801c632:	e794      	b.n	801c55e <_dtoa_r+0x40e>
 801c634:	9901      	ldr	r1, [sp, #4]
 801c636:	4b4c      	ldr	r3, [pc, #304]	; (801c768 <_dtoa_r+0x618>)
 801c638:	4431      	add	r1, r6
 801c63a:	910d      	str	r1, [sp, #52]	; 0x34
 801c63c:	9908      	ldr	r1, [sp, #32]
 801c63e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c642:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c646:	2900      	cmp	r1, #0
 801c648:	d043      	beq.n	801c6d2 <_dtoa_r+0x582>
 801c64a:	494d      	ldr	r1, [pc, #308]	; (801c780 <_dtoa_r+0x630>)
 801c64c:	2000      	movs	r0, #0
 801c64e:	f7e4 f915 	bl	800087c <__aeabi_ddiv>
 801c652:	4652      	mov	r2, sl
 801c654:	465b      	mov	r3, fp
 801c656:	f7e3 fe2f 	bl	80002b8 <__aeabi_dsub>
 801c65a:	9d01      	ldr	r5, [sp, #4]
 801c65c:	4682      	mov	sl, r0
 801c65e:	468b      	mov	fp, r1
 801c660:	4649      	mov	r1, r9
 801c662:	4640      	mov	r0, r8
 801c664:	f7e4 fa90 	bl	8000b88 <__aeabi_d2iz>
 801c668:	4606      	mov	r6, r0
 801c66a:	f7e3 ff73 	bl	8000554 <__aeabi_i2d>
 801c66e:	4602      	mov	r2, r0
 801c670:	460b      	mov	r3, r1
 801c672:	4640      	mov	r0, r8
 801c674:	4649      	mov	r1, r9
 801c676:	f7e3 fe1f 	bl	80002b8 <__aeabi_dsub>
 801c67a:	3630      	adds	r6, #48	; 0x30
 801c67c:	f805 6b01 	strb.w	r6, [r5], #1
 801c680:	4652      	mov	r2, sl
 801c682:	465b      	mov	r3, fp
 801c684:	4680      	mov	r8, r0
 801c686:	4689      	mov	r9, r1
 801c688:	f7e4 fa40 	bl	8000b0c <__aeabi_dcmplt>
 801c68c:	2800      	cmp	r0, #0
 801c68e:	d163      	bne.n	801c758 <_dtoa_r+0x608>
 801c690:	4642      	mov	r2, r8
 801c692:	464b      	mov	r3, r9
 801c694:	4936      	ldr	r1, [pc, #216]	; (801c770 <_dtoa_r+0x620>)
 801c696:	2000      	movs	r0, #0
 801c698:	f7e3 fe0e 	bl	80002b8 <__aeabi_dsub>
 801c69c:	4652      	mov	r2, sl
 801c69e:	465b      	mov	r3, fp
 801c6a0:	f7e4 fa34 	bl	8000b0c <__aeabi_dcmplt>
 801c6a4:	2800      	cmp	r0, #0
 801c6a6:	f040 80b5 	bne.w	801c814 <_dtoa_r+0x6c4>
 801c6aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c6ac:	429d      	cmp	r5, r3
 801c6ae:	d081      	beq.n	801c5b4 <_dtoa_r+0x464>
 801c6b0:	4b30      	ldr	r3, [pc, #192]	; (801c774 <_dtoa_r+0x624>)
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	4650      	mov	r0, sl
 801c6b6:	4659      	mov	r1, fp
 801c6b8:	f7e3 ffb6 	bl	8000628 <__aeabi_dmul>
 801c6bc:	4b2d      	ldr	r3, [pc, #180]	; (801c774 <_dtoa_r+0x624>)
 801c6be:	4682      	mov	sl, r0
 801c6c0:	468b      	mov	fp, r1
 801c6c2:	4640      	mov	r0, r8
 801c6c4:	4649      	mov	r1, r9
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	f7e3 ffae 	bl	8000628 <__aeabi_dmul>
 801c6cc:	4680      	mov	r8, r0
 801c6ce:	4689      	mov	r9, r1
 801c6d0:	e7c6      	b.n	801c660 <_dtoa_r+0x510>
 801c6d2:	4650      	mov	r0, sl
 801c6d4:	4659      	mov	r1, fp
 801c6d6:	f7e3 ffa7 	bl	8000628 <__aeabi_dmul>
 801c6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c6dc:	9d01      	ldr	r5, [sp, #4]
 801c6de:	930f      	str	r3, [sp, #60]	; 0x3c
 801c6e0:	4682      	mov	sl, r0
 801c6e2:	468b      	mov	fp, r1
 801c6e4:	4649      	mov	r1, r9
 801c6e6:	4640      	mov	r0, r8
 801c6e8:	f7e4 fa4e 	bl	8000b88 <__aeabi_d2iz>
 801c6ec:	4606      	mov	r6, r0
 801c6ee:	f7e3 ff31 	bl	8000554 <__aeabi_i2d>
 801c6f2:	3630      	adds	r6, #48	; 0x30
 801c6f4:	4602      	mov	r2, r0
 801c6f6:	460b      	mov	r3, r1
 801c6f8:	4640      	mov	r0, r8
 801c6fa:	4649      	mov	r1, r9
 801c6fc:	f7e3 fddc 	bl	80002b8 <__aeabi_dsub>
 801c700:	f805 6b01 	strb.w	r6, [r5], #1
 801c704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c706:	429d      	cmp	r5, r3
 801c708:	4680      	mov	r8, r0
 801c70a:	4689      	mov	r9, r1
 801c70c:	f04f 0200 	mov.w	r2, #0
 801c710:	d124      	bne.n	801c75c <_dtoa_r+0x60c>
 801c712:	4b1b      	ldr	r3, [pc, #108]	; (801c780 <_dtoa_r+0x630>)
 801c714:	4650      	mov	r0, sl
 801c716:	4659      	mov	r1, fp
 801c718:	f7e3 fdd0 	bl	80002bc <__adddf3>
 801c71c:	4602      	mov	r2, r0
 801c71e:	460b      	mov	r3, r1
 801c720:	4640      	mov	r0, r8
 801c722:	4649      	mov	r1, r9
 801c724:	f7e4 fa10 	bl	8000b48 <__aeabi_dcmpgt>
 801c728:	2800      	cmp	r0, #0
 801c72a:	d173      	bne.n	801c814 <_dtoa_r+0x6c4>
 801c72c:	4652      	mov	r2, sl
 801c72e:	465b      	mov	r3, fp
 801c730:	4913      	ldr	r1, [pc, #76]	; (801c780 <_dtoa_r+0x630>)
 801c732:	2000      	movs	r0, #0
 801c734:	f7e3 fdc0 	bl	80002b8 <__aeabi_dsub>
 801c738:	4602      	mov	r2, r0
 801c73a:	460b      	mov	r3, r1
 801c73c:	4640      	mov	r0, r8
 801c73e:	4649      	mov	r1, r9
 801c740:	f7e4 f9e4 	bl	8000b0c <__aeabi_dcmplt>
 801c744:	2800      	cmp	r0, #0
 801c746:	f43f af35 	beq.w	801c5b4 <_dtoa_r+0x464>
 801c74a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c74c:	1e6b      	subs	r3, r5, #1
 801c74e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c750:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c754:	2b30      	cmp	r3, #48	; 0x30
 801c756:	d0f8      	beq.n	801c74a <_dtoa_r+0x5fa>
 801c758:	9700      	str	r7, [sp, #0]
 801c75a:	e049      	b.n	801c7f0 <_dtoa_r+0x6a0>
 801c75c:	4b05      	ldr	r3, [pc, #20]	; (801c774 <_dtoa_r+0x624>)
 801c75e:	f7e3 ff63 	bl	8000628 <__aeabi_dmul>
 801c762:	4680      	mov	r8, r0
 801c764:	4689      	mov	r9, r1
 801c766:	e7bd      	b.n	801c6e4 <_dtoa_r+0x594>
 801c768:	0801f7a8 	.word	0x0801f7a8
 801c76c:	0801f780 	.word	0x0801f780
 801c770:	3ff00000 	.word	0x3ff00000
 801c774:	40240000 	.word	0x40240000
 801c778:	401c0000 	.word	0x401c0000
 801c77c:	40140000 	.word	0x40140000
 801c780:	3fe00000 	.word	0x3fe00000
 801c784:	9d01      	ldr	r5, [sp, #4]
 801c786:	4656      	mov	r6, sl
 801c788:	465f      	mov	r7, fp
 801c78a:	4642      	mov	r2, r8
 801c78c:	464b      	mov	r3, r9
 801c78e:	4630      	mov	r0, r6
 801c790:	4639      	mov	r1, r7
 801c792:	f7e4 f873 	bl	800087c <__aeabi_ddiv>
 801c796:	f7e4 f9f7 	bl	8000b88 <__aeabi_d2iz>
 801c79a:	4682      	mov	sl, r0
 801c79c:	f7e3 feda 	bl	8000554 <__aeabi_i2d>
 801c7a0:	4642      	mov	r2, r8
 801c7a2:	464b      	mov	r3, r9
 801c7a4:	f7e3 ff40 	bl	8000628 <__aeabi_dmul>
 801c7a8:	4602      	mov	r2, r0
 801c7aa:	460b      	mov	r3, r1
 801c7ac:	4630      	mov	r0, r6
 801c7ae:	4639      	mov	r1, r7
 801c7b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801c7b4:	f7e3 fd80 	bl	80002b8 <__aeabi_dsub>
 801c7b8:	f805 6b01 	strb.w	r6, [r5], #1
 801c7bc:	9e01      	ldr	r6, [sp, #4]
 801c7be:	9f03      	ldr	r7, [sp, #12]
 801c7c0:	1bae      	subs	r6, r5, r6
 801c7c2:	42b7      	cmp	r7, r6
 801c7c4:	4602      	mov	r2, r0
 801c7c6:	460b      	mov	r3, r1
 801c7c8:	d135      	bne.n	801c836 <_dtoa_r+0x6e6>
 801c7ca:	f7e3 fd77 	bl	80002bc <__adddf3>
 801c7ce:	4642      	mov	r2, r8
 801c7d0:	464b      	mov	r3, r9
 801c7d2:	4606      	mov	r6, r0
 801c7d4:	460f      	mov	r7, r1
 801c7d6:	f7e4 f9b7 	bl	8000b48 <__aeabi_dcmpgt>
 801c7da:	b9d0      	cbnz	r0, 801c812 <_dtoa_r+0x6c2>
 801c7dc:	4642      	mov	r2, r8
 801c7de:	464b      	mov	r3, r9
 801c7e0:	4630      	mov	r0, r6
 801c7e2:	4639      	mov	r1, r7
 801c7e4:	f7e4 f988 	bl	8000af8 <__aeabi_dcmpeq>
 801c7e8:	b110      	cbz	r0, 801c7f0 <_dtoa_r+0x6a0>
 801c7ea:	f01a 0f01 	tst.w	sl, #1
 801c7ee:	d110      	bne.n	801c812 <_dtoa_r+0x6c2>
 801c7f0:	4620      	mov	r0, r4
 801c7f2:	ee18 1a10 	vmov	r1, s16
 801c7f6:	f000 ffc3 	bl	801d780 <_Bfree>
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	9800      	ldr	r0, [sp, #0]
 801c7fe:	702b      	strb	r3, [r5, #0]
 801c800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c802:	3001      	adds	r0, #1
 801c804:	6018      	str	r0, [r3, #0]
 801c806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c808:	2b00      	cmp	r3, #0
 801c80a:	f43f acf1 	beq.w	801c1f0 <_dtoa_r+0xa0>
 801c80e:	601d      	str	r5, [r3, #0]
 801c810:	e4ee      	b.n	801c1f0 <_dtoa_r+0xa0>
 801c812:	9f00      	ldr	r7, [sp, #0]
 801c814:	462b      	mov	r3, r5
 801c816:	461d      	mov	r5, r3
 801c818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c81c:	2a39      	cmp	r2, #57	; 0x39
 801c81e:	d106      	bne.n	801c82e <_dtoa_r+0x6de>
 801c820:	9a01      	ldr	r2, [sp, #4]
 801c822:	429a      	cmp	r2, r3
 801c824:	d1f7      	bne.n	801c816 <_dtoa_r+0x6c6>
 801c826:	9901      	ldr	r1, [sp, #4]
 801c828:	2230      	movs	r2, #48	; 0x30
 801c82a:	3701      	adds	r7, #1
 801c82c:	700a      	strb	r2, [r1, #0]
 801c82e:	781a      	ldrb	r2, [r3, #0]
 801c830:	3201      	adds	r2, #1
 801c832:	701a      	strb	r2, [r3, #0]
 801c834:	e790      	b.n	801c758 <_dtoa_r+0x608>
 801c836:	4ba6      	ldr	r3, [pc, #664]	; (801cad0 <_dtoa_r+0x980>)
 801c838:	2200      	movs	r2, #0
 801c83a:	f7e3 fef5 	bl	8000628 <__aeabi_dmul>
 801c83e:	2200      	movs	r2, #0
 801c840:	2300      	movs	r3, #0
 801c842:	4606      	mov	r6, r0
 801c844:	460f      	mov	r7, r1
 801c846:	f7e4 f957 	bl	8000af8 <__aeabi_dcmpeq>
 801c84a:	2800      	cmp	r0, #0
 801c84c:	d09d      	beq.n	801c78a <_dtoa_r+0x63a>
 801c84e:	e7cf      	b.n	801c7f0 <_dtoa_r+0x6a0>
 801c850:	9a08      	ldr	r2, [sp, #32]
 801c852:	2a00      	cmp	r2, #0
 801c854:	f000 80d7 	beq.w	801ca06 <_dtoa_r+0x8b6>
 801c858:	9a06      	ldr	r2, [sp, #24]
 801c85a:	2a01      	cmp	r2, #1
 801c85c:	f300 80ba 	bgt.w	801c9d4 <_dtoa_r+0x884>
 801c860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c862:	2a00      	cmp	r2, #0
 801c864:	f000 80b2 	beq.w	801c9cc <_dtoa_r+0x87c>
 801c868:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c86c:	9e07      	ldr	r6, [sp, #28]
 801c86e:	9d04      	ldr	r5, [sp, #16]
 801c870:	9a04      	ldr	r2, [sp, #16]
 801c872:	441a      	add	r2, r3
 801c874:	9204      	str	r2, [sp, #16]
 801c876:	9a05      	ldr	r2, [sp, #20]
 801c878:	2101      	movs	r1, #1
 801c87a:	441a      	add	r2, r3
 801c87c:	4620      	mov	r0, r4
 801c87e:	9205      	str	r2, [sp, #20]
 801c880:	f001 f880 	bl	801d984 <__i2b>
 801c884:	4607      	mov	r7, r0
 801c886:	2d00      	cmp	r5, #0
 801c888:	dd0c      	ble.n	801c8a4 <_dtoa_r+0x754>
 801c88a:	9b05      	ldr	r3, [sp, #20]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	dd09      	ble.n	801c8a4 <_dtoa_r+0x754>
 801c890:	42ab      	cmp	r3, r5
 801c892:	9a04      	ldr	r2, [sp, #16]
 801c894:	bfa8      	it	ge
 801c896:	462b      	movge	r3, r5
 801c898:	1ad2      	subs	r2, r2, r3
 801c89a:	9204      	str	r2, [sp, #16]
 801c89c:	9a05      	ldr	r2, [sp, #20]
 801c89e:	1aed      	subs	r5, r5, r3
 801c8a0:	1ad3      	subs	r3, r2, r3
 801c8a2:	9305      	str	r3, [sp, #20]
 801c8a4:	9b07      	ldr	r3, [sp, #28]
 801c8a6:	b31b      	cbz	r3, 801c8f0 <_dtoa_r+0x7a0>
 801c8a8:	9b08      	ldr	r3, [sp, #32]
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	f000 80af 	beq.w	801ca0e <_dtoa_r+0x8be>
 801c8b0:	2e00      	cmp	r6, #0
 801c8b2:	dd13      	ble.n	801c8dc <_dtoa_r+0x78c>
 801c8b4:	4639      	mov	r1, r7
 801c8b6:	4632      	mov	r2, r6
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	f001 f923 	bl	801db04 <__pow5mult>
 801c8be:	ee18 2a10 	vmov	r2, s16
 801c8c2:	4601      	mov	r1, r0
 801c8c4:	4607      	mov	r7, r0
 801c8c6:	4620      	mov	r0, r4
 801c8c8:	f001 f872 	bl	801d9b0 <__multiply>
 801c8cc:	ee18 1a10 	vmov	r1, s16
 801c8d0:	4680      	mov	r8, r0
 801c8d2:	4620      	mov	r0, r4
 801c8d4:	f000 ff54 	bl	801d780 <_Bfree>
 801c8d8:	ee08 8a10 	vmov	s16, r8
 801c8dc:	9b07      	ldr	r3, [sp, #28]
 801c8de:	1b9a      	subs	r2, r3, r6
 801c8e0:	d006      	beq.n	801c8f0 <_dtoa_r+0x7a0>
 801c8e2:	ee18 1a10 	vmov	r1, s16
 801c8e6:	4620      	mov	r0, r4
 801c8e8:	f001 f90c 	bl	801db04 <__pow5mult>
 801c8ec:	ee08 0a10 	vmov	s16, r0
 801c8f0:	2101      	movs	r1, #1
 801c8f2:	4620      	mov	r0, r4
 801c8f4:	f001 f846 	bl	801d984 <__i2b>
 801c8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	4606      	mov	r6, r0
 801c8fe:	f340 8088 	ble.w	801ca12 <_dtoa_r+0x8c2>
 801c902:	461a      	mov	r2, r3
 801c904:	4601      	mov	r1, r0
 801c906:	4620      	mov	r0, r4
 801c908:	f001 f8fc 	bl	801db04 <__pow5mult>
 801c90c:	9b06      	ldr	r3, [sp, #24]
 801c90e:	2b01      	cmp	r3, #1
 801c910:	4606      	mov	r6, r0
 801c912:	f340 8081 	ble.w	801ca18 <_dtoa_r+0x8c8>
 801c916:	f04f 0800 	mov.w	r8, #0
 801c91a:	6933      	ldr	r3, [r6, #16]
 801c91c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c920:	6918      	ldr	r0, [r3, #16]
 801c922:	f000 ffdf 	bl	801d8e4 <__hi0bits>
 801c926:	f1c0 0020 	rsb	r0, r0, #32
 801c92a:	9b05      	ldr	r3, [sp, #20]
 801c92c:	4418      	add	r0, r3
 801c92e:	f010 001f 	ands.w	r0, r0, #31
 801c932:	f000 8092 	beq.w	801ca5a <_dtoa_r+0x90a>
 801c936:	f1c0 0320 	rsb	r3, r0, #32
 801c93a:	2b04      	cmp	r3, #4
 801c93c:	f340 808a 	ble.w	801ca54 <_dtoa_r+0x904>
 801c940:	f1c0 001c 	rsb	r0, r0, #28
 801c944:	9b04      	ldr	r3, [sp, #16]
 801c946:	4403      	add	r3, r0
 801c948:	9304      	str	r3, [sp, #16]
 801c94a:	9b05      	ldr	r3, [sp, #20]
 801c94c:	4403      	add	r3, r0
 801c94e:	4405      	add	r5, r0
 801c950:	9305      	str	r3, [sp, #20]
 801c952:	9b04      	ldr	r3, [sp, #16]
 801c954:	2b00      	cmp	r3, #0
 801c956:	dd07      	ble.n	801c968 <_dtoa_r+0x818>
 801c958:	ee18 1a10 	vmov	r1, s16
 801c95c:	461a      	mov	r2, r3
 801c95e:	4620      	mov	r0, r4
 801c960:	f001 f92a 	bl	801dbb8 <__lshift>
 801c964:	ee08 0a10 	vmov	s16, r0
 801c968:	9b05      	ldr	r3, [sp, #20]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	dd05      	ble.n	801c97a <_dtoa_r+0x82a>
 801c96e:	4631      	mov	r1, r6
 801c970:	461a      	mov	r2, r3
 801c972:	4620      	mov	r0, r4
 801c974:	f001 f920 	bl	801dbb8 <__lshift>
 801c978:	4606      	mov	r6, r0
 801c97a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d06e      	beq.n	801ca5e <_dtoa_r+0x90e>
 801c980:	ee18 0a10 	vmov	r0, s16
 801c984:	4631      	mov	r1, r6
 801c986:	f001 f987 	bl	801dc98 <__mcmp>
 801c98a:	2800      	cmp	r0, #0
 801c98c:	da67      	bge.n	801ca5e <_dtoa_r+0x90e>
 801c98e:	9b00      	ldr	r3, [sp, #0]
 801c990:	3b01      	subs	r3, #1
 801c992:	ee18 1a10 	vmov	r1, s16
 801c996:	9300      	str	r3, [sp, #0]
 801c998:	220a      	movs	r2, #10
 801c99a:	2300      	movs	r3, #0
 801c99c:	4620      	mov	r0, r4
 801c99e:	f000 ff11 	bl	801d7c4 <__multadd>
 801c9a2:	9b08      	ldr	r3, [sp, #32]
 801c9a4:	ee08 0a10 	vmov	s16, r0
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	f000 81b1 	beq.w	801cd10 <_dtoa_r+0xbc0>
 801c9ae:	2300      	movs	r3, #0
 801c9b0:	4639      	mov	r1, r7
 801c9b2:	220a      	movs	r2, #10
 801c9b4:	4620      	mov	r0, r4
 801c9b6:	f000 ff05 	bl	801d7c4 <__multadd>
 801c9ba:	9b02      	ldr	r3, [sp, #8]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	4607      	mov	r7, r0
 801c9c0:	f300 808e 	bgt.w	801cae0 <_dtoa_r+0x990>
 801c9c4:	9b06      	ldr	r3, [sp, #24]
 801c9c6:	2b02      	cmp	r3, #2
 801c9c8:	dc51      	bgt.n	801ca6e <_dtoa_r+0x91e>
 801c9ca:	e089      	b.n	801cae0 <_dtoa_r+0x990>
 801c9cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c9ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c9d2:	e74b      	b.n	801c86c <_dtoa_r+0x71c>
 801c9d4:	9b03      	ldr	r3, [sp, #12]
 801c9d6:	1e5e      	subs	r6, r3, #1
 801c9d8:	9b07      	ldr	r3, [sp, #28]
 801c9da:	42b3      	cmp	r3, r6
 801c9dc:	bfbf      	itttt	lt
 801c9de:	9b07      	ldrlt	r3, [sp, #28]
 801c9e0:	9607      	strlt	r6, [sp, #28]
 801c9e2:	1af2      	sublt	r2, r6, r3
 801c9e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c9e6:	bfb6      	itet	lt
 801c9e8:	189b      	addlt	r3, r3, r2
 801c9ea:	1b9e      	subge	r6, r3, r6
 801c9ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c9ee:	9b03      	ldr	r3, [sp, #12]
 801c9f0:	bfb8      	it	lt
 801c9f2:	2600      	movlt	r6, #0
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	bfb7      	itett	lt
 801c9f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c9fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801ca00:	1a9d      	sublt	r5, r3, r2
 801ca02:	2300      	movlt	r3, #0
 801ca04:	e734      	b.n	801c870 <_dtoa_r+0x720>
 801ca06:	9e07      	ldr	r6, [sp, #28]
 801ca08:	9d04      	ldr	r5, [sp, #16]
 801ca0a:	9f08      	ldr	r7, [sp, #32]
 801ca0c:	e73b      	b.n	801c886 <_dtoa_r+0x736>
 801ca0e:	9a07      	ldr	r2, [sp, #28]
 801ca10:	e767      	b.n	801c8e2 <_dtoa_r+0x792>
 801ca12:	9b06      	ldr	r3, [sp, #24]
 801ca14:	2b01      	cmp	r3, #1
 801ca16:	dc18      	bgt.n	801ca4a <_dtoa_r+0x8fa>
 801ca18:	f1ba 0f00 	cmp.w	sl, #0
 801ca1c:	d115      	bne.n	801ca4a <_dtoa_r+0x8fa>
 801ca1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ca22:	b993      	cbnz	r3, 801ca4a <_dtoa_r+0x8fa>
 801ca24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ca28:	0d1b      	lsrs	r3, r3, #20
 801ca2a:	051b      	lsls	r3, r3, #20
 801ca2c:	b183      	cbz	r3, 801ca50 <_dtoa_r+0x900>
 801ca2e:	9b04      	ldr	r3, [sp, #16]
 801ca30:	3301      	adds	r3, #1
 801ca32:	9304      	str	r3, [sp, #16]
 801ca34:	9b05      	ldr	r3, [sp, #20]
 801ca36:	3301      	adds	r3, #1
 801ca38:	9305      	str	r3, [sp, #20]
 801ca3a:	f04f 0801 	mov.w	r8, #1
 801ca3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	f47f af6a 	bne.w	801c91a <_dtoa_r+0x7ca>
 801ca46:	2001      	movs	r0, #1
 801ca48:	e76f      	b.n	801c92a <_dtoa_r+0x7da>
 801ca4a:	f04f 0800 	mov.w	r8, #0
 801ca4e:	e7f6      	b.n	801ca3e <_dtoa_r+0x8ee>
 801ca50:	4698      	mov	r8, r3
 801ca52:	e7f4      	b.n	801ca3e <_dtoa_r+0x8ee>
 801ca54:	f43f af7d 	beq.w	801c952 <_dtoa_r+0x802>
 801ca58:	4618      	mov	r0, r3
 801ca5a:	301c      	adds	r0, #28
 801ca5c:	e772      	b.n	801c944 <_dtoa_r+0x7f4>
 801ca5e:	9b03      	ldr	r3, [sp, #12]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	dc37      	bgt.n	801cad4 <_dtoa_r+0x984>
 801ca64:	9b06      	ldr	r3, [sp, #24]
 801ca66:	2b02      	cmp	r3, #2
 801ca68:	dd34      	ble.n	801cad4 <_dtoa_r+0x984>
 801ca6a:	9b03      	ldr	r3, [sp, #12]
 801ca6c:	9302      	str	r3, [sp, #8]
 801ca6e:	9b02      	ldr	r3, [sp, #8]
 801ca70:	b96b      	cbnz	r3, 801ca8e <_dtoa_r+0x93e>
 801ca72:	4631      	mov	r1, r6
 801ca74:	2205      	movs	r2, #5
 801ca76:	4620      	mov	r0, r4
 801ca78:	f000 fea4 	bl	801d7c4 <__multadd>
 801ca7c:	4601      	mov	r1, r0
 801ca7e:	4606      	mov	r6, r0
 801ca80:	ee18 0a10 	vmov	r0, s16
 801ca84:	f001 f908 	bl	801dc98 <__mcmp>
 801ca88:	2800      	cmp	r0, #0
 801ca8a:	f73f adbb 	bgt.w	801c604 <_dtoa_r+0x4b4>
 801ca8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca90:	9d01      	ldr	r5, [sp, #4]
 801ca92:	43db      	mvns	r3, r3
 801ca94:	9300      	str	r3, [sp, #0]
 801ca96:	f04f 0800 	mov.w	r8, #0
 801ca9a:	4631      	mov	r1, r6
 801ca9c:	4620      	mov	r0, r4
 801ca9e:	f000 fe6f 	bl	801d780 <_Bfree>
 801caa2:	2f00      	cmp	r7, #0
 801caa4:	f43f aea4 	beq.w	801c7f0 <_dtoa_r+0x6a0>
 801caa8:	f1b8 0f00 	cmp.w	r8, #0
 801caac:	d005      	beq.n	801caba <_dtoa_r+0x96a>
 801caae:	45b8      	cmp	r8, r7
 801cab0:	d003      	beq.n	801caba <_dtoa_r+0x96a>
 801cab2:	4641      	mov	r1, r8
 801cab4:	4620      	mov	r0, r4
 801cab6:	f000 fe63 	bl	801d780 <_Bfree>
 801caba:	4639      	mov	r1, r7
 801cabc:	4620      	mov	r0, r4
 801cabe:	f000 fe5f 	bl	801d780 <_Bfree>
 801cac2:	e695      	b.n	801c7f0 <_dtoa_r+0x6a0>
 801cac4:	2600      	movs	r6, #0
 801cac6:	4637      	mov	r7, r6
 801cac8:	e7e1      	b.n	801ca8e <_dtoa_r+0x93e>
 801caca:	9700      	str	r7, [sp, #0]
 801cacc:	4637      	mov	r7, r6
 801cace:	e599      	b.n	801c604 <_dtoa_r+0x4b4>
 801cad0:	40240000 	.word	0x40240000
 801cad4:	9b08      	ldr	r3, [sp, #32]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	f000 80ca 	beq.w	801cc70 <_dtoa_r+0xb20>
 801cadc:	9b03      	ldr	r3, [sp, #12]
 801cade:	9302      	str	r3, [sp, #8]
 801cae0:	2d00      	cmp	r5, #0
 801cae2:	dd05      	ble.n	801caf0 <_dtoa_r+0x9a0>
 801cae4:	4639      	mov	r1, r7
 801cae6:	462a      	mov	r2, r5
 801cae8:	4620      	mov	r0, r4
 801caea:	f001 f865 	bl	801dbb8 <__lshift>
 801caee:	4607      	mov	r7, r0
 801caf0:	f1b8 0f00 	cmp.w	r8, #0
 801caf4:	d05b      	beq.n	801cbae <_dtoa_r+0xa5e>
 801caf6:	6879      	ldr	r1, [r7, #4]
 801caf8:	4620      	mov	r0, r4
 801cafa:	f000 fe01 	bl	801d700 <_Balloc>
 801cafe:	4605      	mov	r5, r0
 801cb00:	b928      	cbnz	r0, 801cb0e <_dtoa_r+0x9be>
 801cb02:	4b87      	ldr	r3, [pc, #540]	; (801cd20 <_dtoa_r+0xbd0>)
 801cb04:	4602      	mov	r2, r0
 801cb06:	f240 21ea 	movw	r1, #746	; 0x2ea
 801cb0a:	f7ff bb3b 	b.w	801c184 <_dtoa_r+0x34>
 801cb0e:	693a      	ldr	r2, [r7, #16]
 801cb10:	3202      	adds	r2, #2
 801cb12:	0092      	lsls	r2, r2, #2
 801cb14:	f107 010c 	add.w	r1, r7, #12
 801cb18:	300c      	adds	r0, #12
 801cb1a:	f7fc ffcb 	bl	8019ab4 <memcpy>
 801cb1e:	2201      	movs	r2, #1
 801cb20:	4629      	mov	r1, r5
 801cb22:	4620      	mov	r0, r4
 801cb24:	f001 f848 	bl	801dbb8 <__lshift>
 801cb28:	9b01      	ldr	r3, [sp, #4]
 801cb2a:	f103 0901 	add.w	r9, r3, #1
 801cb2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801cb32:	4413      	add	r3, r2
 801cb34:	9305      	str	r3, [sp, #20]
 801cb36:	f00a 0301 	and.w	r3, sl, #1
 801cb3a:	46b8      	mov	r8, r7
 801cb3c:	9304      	str	r3, [sp, #16]
 801cb3e:	4607      	mov	r7, r0
 801cb40:	4631      	mov	r1, r6
 801cb42:	ee18 0a10 	vmov	r0, s16
 801cb46:	f7ff fa77 	bl	801c038 <quorem>
 801cb4a:	4641      	mov	r1, r8
 801cb4c:	9002      	str	r0, [sp, #8]
 801cb4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801cb52:	ee18 0a10 	vmov	r0, s16
 801cb56:	f001 f89f 	bl	801dc98 <__mcmp>
 801cb5a:	463a      	mov	r2, r7
 801cb5c:	9003      	str	r0, [sp, #12]
 801cb5e:	4631      	mov	r1, r6
 801cb60:	4620      	mov	r0, r4
 801cb62:	f001 f8b5 	bl	801dcd0 <__mdiff>
 801cb66:	68c2      	ldr	r2, [r0, #12]
 801cb68:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801cb6c:	4605      	mov	r5, r0
 801cb6e:	bb02      	cbnz	r2, 801cbb2 <_dtoa_r+0xa62>
 801cb70:	4601      	mov	r1, r0
 801cb72:	ee18 0a10 	vmov	r0, s16
 801cb76:	f001 f88f 	bl	801dc98 <__mcmp>
 801cb7a:	4602      	mov	r2, r0
 801cb7c:	4629      	mov	r1, r5
 801cb7e:	4620      	mov	r0, r4
 801cb80:	9207      	str	r2, [sp, #28]
 801cb82:	f000 fdfd 	bl	801d780 <_Bfree>
 801cb86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801cb8a:	ea43 0102 	orr.w	r1, r3, r2
 801cb8e:	9b04      	ldr	r3, [sp, #16]
 801cb90:	430b      	orrs	r3, r1
 801cb92:	464d      	mov	r5, r9
 801cb94:	d10f      	bne.n	801cbb6 <_dtoa_r+0xa66>
 801cb96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801cb9a:	d02a      	beq.n	801cbf2 <_dtoa_r+0xaa2>
 801cb9c:	9b03      	ldr	r3, [sp, #12]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	dd02      	ble.n	801cba8 <_dtoa_r+0xa58>
 801cba2:	9b02      	ldr	r3, [sp, #8]
 801cba4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801cba8:	f88b a000 	strb.w	sl, [fp]
 801cbac:	e775      	b.n	801ca9a <_dtoa_r+0x94a>
 801cbae:	4638      	mov	r0, r7
 801cbb0:	e7ba      	b.n	801cb28 <_dtoa_r+0x9d8>
 801cbb2:	2201      	movs	r2, #1
 801cbb4:	e7e2      	b.n	801cb7c <_dtoa_r+0xa2c>
 801cbb6:	9b03      	ldr	r3, [sp, #12]
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	db04      	blt.n	801cbc6 <_dtoa_r+0xa76>
 801cbbc:	9906      	ldr	r1, [sp, #24]
 801cbbe:	430b      	orrs	r3, r1
 801cbc0:	9904      	ldr	r1, [sp, #16]
 801cbc2:	430b      	orrs	r3, r1
 801cbc4:	d122      	bne.n	801cc0c <_dtoa_r+0xabc>
 801cbc6:	2a00      	cmp	r2, #0
 801cbc8:	ddee      	ble.n	801cba8 <_dtoa_r+0xa58>
 801cbca:	ee18 1a10 	vmov	r1, s16
 801cbce:	2201      	movs	r2, #1
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	f000 fff1 	bl	801dbb8 <__lshift>
 801cbd6:	4631      	mov	r1, r6
 801cbd8:	ee08 0a10 	vmov	s16, r0
 801cbdc:	f001 f85c 	bl	801dc98 <__mcmp>
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	dc03      	bgt.n	801cbec <_dtoa_r+0xa9c>
 801cbe4:	d1e0      	bne.n	801cba8 <_dtoa_r+0xa58>
 801cbe6:	f01a 0f01 	tst.w	sl, #1
 801cbea:	d0dd      	beq.n	801cba8 <_dtoa_r+0xa58>
 801cbec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801cbf0:	d1d7      	bne.n	801cba2 <_dtoa_r+0xa52>
 801cbf2:	2339      	movs	r3, #57	; 0x39
 801cbf4:	f88b 3000 	strb.w	r3, [fp]
 801cbf8:	462b      	mov	r3, r5
 801cbfa:	461d      	mov	r5, r3
 801cbfc:	3b01      	subs	r3, #1
 801cbfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801cc02:	2a39      	cmp	r2, #57	; 0x39
 801cc04:	d071      	beq.n	801ccea <_dtoa_r+0xb9a>
 801cc06:	3201      	adds	r2, #1
 801cc08:	701a      	strb	r2, [r3, #0]
 801cc0a:	e746      	b.n	801ca9a <_dtoa_r+0x94a>
 801cc0c:	2a00      	cmp	r2, #0
 801cc0e:	dd07      	ble.n	801cc20 <_dtoa_r+0xad0>
 801cc10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801cc14:	d0ed      	beq.n	801cbf2 <_dtoa_r+0xaa2>
 801cc16:	f10a 0301 	add.w	r3, sl, #1
 801cc1a:	f88b 3000 	strb.w	r3, [fp]
 801cc1e:	e73c      	b.n	801ca9a <_dtoa_r+0x94a>
 801cc20:	9b05      	ldr	r3, [sp, #20]
 801cc22:	f809 ac01 	strb.w	sl, [r9, #-1]
 801cc26:	4599      	cmp	r9, r3
 801cc28:	d047      	beq.n	801ccba <_dtoa_r+0xb6a>
 801cc2a:	ee18 1a10 	vmov	r1, s16
 801cc2e:	2300      	movs	r3, #0
 801cc30:	220a      	movs	r2, #10
 801cc32:	4620      	mov	r0, r4
 801cc34:	f000 fdc6 	bl	801d7c4 <__multadd>
 801cc38:	45b8      	cmp	r8, r7
 801cc3a:	ee08 0a10 	vmov	s16, r0
 801cc3e:	f04f 0300 	mov.w	r3, #0
 801cc42:	f04f 020a 	mov.w	r2, #10
 801cc46:	4641      	mov	r1, r8
 801cc48:	4620      	mov	r0, r4
 801cc4a:	d106      	bne.n	801cc5a <_dtoa_r+0xb0a>
 801cc4c:	f000 fdba 	bl	801d7c4 <__multadd>
 801cc50:	4680      	mov	r8, r0
 801cc52:	4607      	mov	r7, r0
 801cc54:	f109 0901 	add.w	r9, r9, #1
 801cc58:	e772      	b.n	801cb40 <_dtoa_r+0x9f0>
 801cc5a:	f000 fdb3 	bl	801d7c4 <__multadd>
 801cc5e:	4639      	mov	r1, r7
 801cc60:	4680      	mov	r8, r0
 801cc62:	2300      	movs	r3, #0
 801cc64:	220a      	movs	r2, #10
 801cc66:	4620      	mov	r0, r4
 801cc68:	f000 fdac 	bl	801d7c4 <__multadd>
 801cc6c:	4607      	mov	r7, r0
 801cc6e:	e7f1      	b.n	801cc54 <_dtoa_r+0xb04>
 801cc70:	9b03      	ldr	r3, [sp, #12]
 801cc72:	9302      	str	r3, [sp, #8]
 801cc74:	9d01      	ldr	r5, [sp, #4]
 801cc76:	ee18 0a10 	vmov	r0, s16
 801cc7a:	4631      	mov	r1, r6
 801cc7c:	f7ff f9dc 	bl	801c038 <quorem>
 801cc80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801cc84:	9b01      	ldr	r3, [sp, #4]
 801cc86:	f805 ab01 	strb.w	sl, [r5], #1
 801cc8a:	1aea      	subs	r2, r5, r3
 801cc8c:	9b02      	ldr	r3, [sp, #8]
 801cc8e:	4293      	cmp	r3, r2
 801cc90:	dd09      	ble.n	801cca6 <_dtoa_r+0xb56>
 801cc92:	ee18 1a10 	vmov	r1, s16
 801cc96:	2300      	movs	r3, #0
 801cc98:	220a      	movs	r2, #10
 801cc9a:	4620      	mov	r0, r4
 801cc9c:	f000 fd92 	bl	801d7c4 <__multadd>
 801cca0:	ee08 0a10 	vmov	s16, r0
 801cca4:	e7e7      	b.n	801cc76 <_dtoa_r+0xb26>
 801cca6:	9b02      	ldr	r3, [sp, #8]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	bfc8      	it	gt
 801ccac:	461d      	movgt	r5, r3
 801ccae:	9b01      	ldr	r3, [sp, #4]
 801ccb0:	bfd8      	it	le
 801ccb2:	2501      	movle	r5, #1
 801ccb4:	441d      	add	r5, r3
 801ccb6:	f04f 0800 	mov.w	r8, #0
 801ccba:	ee18 1a10 	vmov	r1, s16
 801ccbe:	2201      	movs	r2, #1
 801ccc0:	4620      	mov	r0, r4
 801ccc2:	f000 ff79 	bl	801dbb8 <__lshift>
 801ccc6:	4631      	mov	r1, r6
 801ccc8:	ee08 0a10 	vmov	s16, r0
 801cccc:	f000 ffe4 	bl	801dc98 <__mcmp>
 801ccd0:	2800      	cmp	r0, #0
 801ccd2:	dc91      	bgt.n	801cbf8 <_dtoa_r+0xaa8>
 801ccd4:	d102      	bne.n	801ccdc <_dtoa_r+0xb8c>
 801ccd6:	f01a 0f01 	tst.w	sl, #1
 801ccda:	d18d      	bne.n	801cbf8 <_dtoa_r+0xaa8>
 801ccdc:	462b      	mov	r3, r5
 801ccde:	461d      	mov	r5, r3
 801cce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cce4:	2a30      	cmp	r2, #48	; 0x30
 801cce6:	d0fa      	beq.n	801ccde <_dtoa_r+0xb8e>
 801cce8:	e6d7      	b.n	801ca9a <_dtoa_r+0x94a>
 801ccea:	9a01      	ldr	r2, [sp, #4]
 801ccec:	429a      	cmp	r2, r3
 801ccee:	d184      	bne.n	801cbfa <_dtoa_r+0xaaa>
 801ccf0:	9b00      	ldr	r3, [sp, #0]
 801ccf2:	3301      	adds	r3, #1
 801ccf4:	9300      	str	r3, [sp, #0]
 801ccf6:	2331      	movs	r3, #49	; 0x31
 801ccf8:	7013      	strb	r3, [r2, #0]
 801ccfa:	e6ce      	b.n	801ca9a <_dtoa_r+0x94a>
 801ccfc:	4b09      	ldr	r3, [pc, #36]	; (801cd24 <_dtoa_r+0xbd4>)
 801ccfe:	f7ff ba95 	b.w	801c22c <_dtoa_r+0xdc>
 801cd02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	f47f aa6e 	bne.w	801c1e6 <_dtoa_r+0x96>
 801cd0a:	4b07      	ldr	r3, [pc, #28]	; (801cd28 <_dtoa_r+0xbd8>)
 801cd0c:	f7ff ba8e 	b.w	801c22c <_dtoa_r+0xdc>
 801cd10:	9b02      	ldr	r3, [sp, #8]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	dcae      	bgt.n	801cc74 <_dtoa_r+0xb24>
 801cd16:	9b06      	ldr	r3, [sp, #24]
 801cd18:	2b02      	cmp	r3, #2
 801cd1a:	f73f aea8 	bgt.w	801ca6e <_dtoa_r+0x91e>
 801cd1e:	e7a9      	b.n	801cc74 <_dtoa_r+0xb24>
 801cd20:	0801f699 	.word	0x0801f699
 801cd24:	0801f4a8 	.word	0x0801f4a8
 801cd28:	0801f631 	.word	0x0801f631

0801cd2c <__env_lock>:
 801cd2c:	4801      	ldr	r0, [pc, #4]	; (801cd34 <__env_lock+0x8>)
 801cd2e:	f7fc beae 	b.w	8019a8e <__retarget_lock_acquire_recursive>
 801cd32:	bf00      	nop
 801cd34:	20009f7c 	.word	0x20009f7c

0801cd38 <__env_unlock>:
 801cd38:	4801      	ldr	r0, [pc, #4]	; (801cd40 <__env_unlock+0x8>)
 801cd3a:	f7fc bea9 	b.w	8019a90 <__retarget_lock_release_recursive>
 801cd3e:	bf00      	nop
 801cd40:	20009f7c 	.word	0x20009f7c

0801cd44 <__sflush_r>:
 801cd44:	898a      	ldrh	r2, [r1, #12]
 801cd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd4a:	4605      	mov	r5, r0
 801cd4c:	0710      	lsls	r0, r2, #28
 801cd4e:	460c      	mov	r4, r1
 801cd50:	d458      	bmi.n	801ce04 <__sflush_r+0xc0>
 801cd52:	684b      	ldr	r3, [r1, #4]
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	dc05      	bgt.n	801cd64 <__sflush_r+0x20>
 801cd58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	dc02      	bgt.n	801cd64 <__sflush_r+0x20>
 801cd5e:	2000      	movs	r0, #0
 801cd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cd66:	2e00      	cmp	r6, #0
 801cd68:	d0f9      	beq.n	801cd5e <__sflush_r+0x1a>
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cd70:	682f      	ldr	r7, [r5, #0]
 801cd72:	602b      	str	r3, [r5, #0]
 801cd74:	d032      	beq.n	801cddc <__sflush_r+0x98>
 801cd76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cd78:	89a3      	ldrh	r3, [r4, #12]
 801cd7a:	075a      	lsls	r2, r3, #29
 801cd7c:	d505      	bpl.n	801cd8a <__sflush_r+0x46>
 801cd7e:	6863      	ldr	r3, [r4, #4]
 801cd80:	1ac0      	subs	r0, r0, r3
 801cd82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cd84:	b10b      	cbz	r3, 801cd8a <__sflush_r+0x46>
 801cd86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cd88:	1ac0      	subs	r0, r0, r3
 801cd8a:	2300      	movs	r3, #0
 801cd8c:	4602      	mov	r2, r0
 801cd8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cd90:	6a21      	ldr	r1, [r4, #32]
 801cd92:	4628      	mov	r0, r5
 801cd94:	47b0      	blx	r6
 801cd96:	1c43      	adds	r3, r0, #1
 801cd98:	89a3      	ldrh	r3, [r4, #12]
 801cd9a:	d106      	bne.n	801cdaa <__sflush_r+0x66>
 801cd9c:	6829      	ldr	r1, [r5, #0]
 801cd9e:	291d      	cmp	r1, #29
 801cda0:	d82c      	bhi.n	801cdfc <__sflush_r+0xb8>
 801cda2:	4a2a      	ldr	r2, [pc, #168]	; (801ce4c <__sflush_r+0x108>)
 801cda4:	40ca      	lsrs	r2, r1
 801cda6:	07d6      	lsls	r6, r2, #31
 801cda8:	d528      	bpl.n	801cdfc <__sflush_r+0xb8>
 801cdaa:	2200      	movs	r2, #0
 801cdac:	6062      	str	r2, [r4, #4]
 801cdae:	04d9      	lsls	r1, r3, #19
 801cdb0:	6922      	ldr	r2, [r4, #16]
 801cdb2:	6022      	str	r2, [r4, #0]
 801cdb4:	d504      	bpl.n	801cdc0 <__sflush_r+0x7c>
 801cdb6:	1c42      	adds	r2, r0, #1
 801cdb8:	d101      	bne.n	801cdbe <__sflush_r+0x7a>
 801cdba:	682b      	ldr	r3, [r5, #0]
 801cdbc:	b903      	cbnz	r3, 801cdc0 <__sflush_r+0x7c>
 801cdbe:	6560      	str	r0, [r4, #84]	; 0x54
 801cdc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cdc2:	602f      	str	r7, [r5, #0]
 801cdc4:	2900      	cmp	r1, #0
 801cdc6:	d0ca      	beq.n	801cd5e <__sflush_r+0x1a>
 801cdc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cdcc:	4299      	cmp	r1, r3
 801cdce:	d002      	beq.n	801cdd6 <__sflush_r+0x92>
 801cdd0:	4628      	mov	r0, r5
 801cdd2:	f7fc feb5 	bl	8019b40 <_free_r>
 801cdd6:	2000      	movs	r0, #0
 801cdd8:	6360      	str	r0, [r4, #52]	; 0x34
 801cdda:	e7c1      	b.n	801cd60 <__sflush_r+0x1c>
 801cddc:	6a21      	ldr	r1, [r4, #32]
 801cdde:	2301      	movs	r3, #1
 801cde0:	4628      	mov	r0, r5
 801cde2:	47b0      	blx	r6
 801cde4:	1c41      	adds	r1, r0, #1
 801cde6:	d1c7      	bne.n	801cd78 <__sflush_r+0x34>
 801cde8:	682b      	ldr	r3, [r5, #0]
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d0c4      	beq.n	801cd78 <__sflush_r+0x34>
 801cdee:	2b1d      	cmp	r3, #29
 801cdf0:	d001      	beq.n	801cdf6 <__sflush_r+0xb2>
 801cdf2:	2b16      	cmp	r3, #22
 801cdf4:	d101      	bne.n	801cdfa <__sflush_r+0xb6>
 801cdf6:	602f      	str	r7, [r5, #0]
 801cdf8:	e7b1      	b.n	801cd5e <__sflush_r+0x1a>
 801cdfa:	89a3      	ldrh	r3, [r4, #12]
 801cdfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce00:	81a3      	strh	r3, [r4, #12]
 801ce02:	e7ad      	b.n	801cd60 <__sflush_r+0x1c>
 801ce04:	690f      	ldr	r7, [r1, #16]
 801ce06:	2f00      	cmp	r7, #0
 801ce08:	d0a9      	beq.n	801cd5e <__sflush_r+0x1a>
 801ce0a:	0793      	lsls	r3, r2, #30
 801ce0c:	680e      	ldr	r6, [r1, #0]
 801ce0e:	bf08      	it	eq
 801ce10:	694b      	ldreq	r3, [r1, #20]
 801ce12:	600f      	str	r7, [r1, #0]
 801ce14:	bf18      	it	ne
 801ce16:	2300      	movne	r3, #0
 801ce18:	eba6 0807 	sub.w	r8, r6, r7
 801ce1c:	608b      	str	r3, [r1, #8]
 801ce1e:	f1b8 0f00 	cmp.w	r8, #0
 801ce22:	dd9c      	ble.n	801cd5e <__sflush_r+0x1a>
 801ce24:	6a21      	ldr	r1, [r4, #32]
 801ce26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ce28:	4643      	mov	r3, r8
 801ce2a:	463a      	mov	r2, r7
 801ce2c:	4628      	mov	r0, r5
 801ce2e:	47b0      	blx	r6
 801ce30:	2800      	cmp	r0, #0
 801ce32:	dc06      	bgt.n	801ce42 <__sflush_r+0xfe>
 801ce34:	89a3      	ldrh	r3, [r4, #12]
 801ce36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce3a:	81a3      	strh	r3, [r4, #12]
 801ce3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce40:	e78e      	b.n	801cd60 <__sflush_r+0x1c>
 801ce42:	4407      	add	r7, r0
 801ce44:	eba8 0800 	sub.w	r8, r8, r0
 801ce48:	e7e9      	b.n	801ce1e <__sflush_r+0xda>
 801ce4a:	bf00      	nop
 801ce4c:	20400001 	.word	0x20400001

0801ce50 <_fflush_r>:
 801ce50:	b538      	push	{r3, r4, r5, lr}
 801ce52:	690b      	ldr	r3, [r1, #16]
 801ce54:	4605      	mov	r5, r0
 801ce56:	460c      	mov	r4, r1
 801ce58:	b913      	cbnz	r3, 801ce60 <_fflush_r+0x10>
 801ce5a:	2500      	movs	r5, #0
 801ce5c:	4628      	mov	r0, r5
 801ce5e:	bd38      	pop	{r3, r4, r5, pc}
 801ce60:	b118      	cbz	r0, 801ce6a <_fflush_r+0x1a>
 801ce62:	6983      	ldr	r3, [r0, #24]
 801ce64:	b90b      	cbnz	r3, 801ce6a <_fflush_r+0x1a>
 801ce66:	f7fc fd07 	bl	8019878 <__sinit>
 801ce6a:	4b14      	ldr	r3, [pc, #80]	; (801cebc <_fflush_r+0x6c>)
 801ce6c:	429c      	cmp	r4, r3
 801ce6e:	d11b      	bne.n	801cea8 <_fflush_r+0x58>
 801ce70:	686c      	ldr	r4, [r5, #4]
 801ce72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d0ef      	beq.n	801ce5a <_fflush_r+0xa>
 801ce7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ce7c:	07d0      	lsls	r0, r2, #31
 801ce7e:	d404      	bmi.n	801ce8a <_fflush_r+0x3a>
 801ce80:	0599      	lsls	r1, r3, #22
 801ce82:	d402      	bmi.n	801ce8a <_fflush_r+0x3a>
 801ce84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ce86:	f7fc fe02 	bl	8019a8e <__retarget_lock_acquire_recursive>
 801ce8a:	4628      	mov	r0, r5
 801ce8c:	4621      	mov	r1, r4
 801ce8e:	f7ff ff59 	bl	801cd44 <__sflush_r>
 801ce92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ce94:	07da      	lsls	r2, r3, #31
 801ce96:	4605      	mov	r5, r0
 801ce98:	d4e0      	bmi.n	801ce5c <_fflush_r+0xc>
 801ce9a:	89a3      	ldrh	r3, [r4, #12]
 801ce9c:	059b      	lsls	r3, r3, #22
 801ce9e:	d4dd      	bmi.n	801ce5c <_fflush_r+0xc>
 801cea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cea2:	f7fc fdf5 	bl	8019a90 <__retarget_lock_release_recursive>
 801cea6:	e7d9      	b.n	801ce5c <_fflush_r+0xc>
 801cea8:	4b05      	ldr	r3, [pc, #20]	; (801cec0 <_fflush_r+0x70>)
 801ceaa:	429c      	cmp	r4, r3
 801ceac:	d101      	bne.n	801ceb2 <_fflush_r+0x62>
 801ceae:	68ac      	ldr	r4, [r5, #8]
 801ceb0:	e7df      	b.n	801ce72 <_fflush_r+0x22>
 801ceb2:	4b04      	ldr	r3, [pc, #16]	; (801cec4 <_fflush_r+0x74>)
 801ceb4:	429c      	cmp	r4, r3
 801ceb6:	bf08      	it	eq
 801ceb8:	68ec      	ldreq	r4, [r5, #12]
 801ceba:	e7da      	b.n	801ce72 <_fflush_r+0x22>
 801cebc:	0801f454 	.word	0x0801f454
 801cec0:	0801f474 	.word	0x0801f474
 801cec4:	0801f434 	.word	0x0801f434

0801cec8 <fiprintf>:
 801cec8:	b40e      	push	{r1, r2, r3}
 801ceca:	b503      	push	{r0, r1, lr}
 801cecc:	4601      	mov	r1, r0
 801cece:	ab03      	add	r3, sp, #12
 801ced0:	4805      	ldr	r0, [pc, #20]	; (801cee8 <fiprintf+0x20>)
 801ced2:	f853 2b04 	ldr.w	r2, [r3], #4
 801ced6:	6800      	ldr	r0, [r0, #0]
 801ced8:	9301      	str	r3, [sp, #4]
 801ceda:	f001 fa87 	bl	801e3ec <_vfiprintf_r>
 801cede:	b002      	add	sp, #8
 801cee0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cee4:	b003      	add	sp, #12
 801cee6:	4770      	bx	lr
 801cee8:	2000008c 	.word	0x2000008c

0801ceec <rshift>:
 801ceec:	6903      	ldr	r3, [r0, #16]
 801ceee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801cef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801cefa:	f100 0414 	add.w	r4, r0, #20
 801cefe:	dd45      	ble.n	801cf8c <rshift+0xa0>
 801cf00:	f011 011f 	ands.w	r1, r1, #31
 801cf04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801cf08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801cf0c:	d10c      	bne.n	801cf28 <rshift+0x3c>
 801cf0e:	f100 0710 	add.w	r7, r0, #16
 801cf12:	4629      	mov	r1, r5
 801cf14:	42b1      	cmp	r1, r6
 801cf16:	d334      	bcc.n	801cf82 <rshift+0x96>
 801cf18:	1a9b      	subs	r3, r3, r2
 801cf1a:	009b      	lsls	r3, r3, #2
 801cf1c:	1eea      	subs	r2, r5, #3
 801cf1e:	4296      	cmp	r6, r2
 801cf20:	bf38      	it	cc
 801cf22:	2300      	movcc	r3, #0
 801cf24:	4423      	add	r3, r4
 801cf26:	e015      	b.n	801cf54 <rshift+0x68>
 801cf28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801cf2c:	f1c1 0820 	rsb	r8, r1, #32
 801cf30:	40cf      	lsrs	r7, r1
 801cf32:	f105 0e04 	add.w	lr, r5, #4
 801cf36:	46a1      	mov	r9, r4
 801cf38:	4576      	cmp	r6, lr
 801cf3a:	46f4      	mov	ip, lr
 801cf3c:	d815      	bhi.n	801cf6a <rshift+0x7e>
 801cf3e:	1a9a      	subs	r2, r3, r2
 801cf40:	0092      	lsls	r2, r2, #2
 801cf42:	3a04      	subs	r2, #4
 801cf44:	3501      	adds	r5, #1
 801cf46:	42ae      	cmp	r6, r5
 801cf48:	bf38      	it	cc
 801cf4a:	2200      	movcc	r2, #0
 801cf4c:	18a3      	adds	r3, r4, r2
 801cf4e:	50a7      	str	r7, [r4, r2]
 801cf50:	b107      	cbz	r7, 801cf54 <rshift+0x68>
 801cf52:	3304      	adds	r3, #4
 801cf54:	1b1a      	subs	r2, r3, r4
 801cf56:	42a3      	cmp	r3, r4
 801cf58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cf5c:	bf08      	it	eq
 801cf5e:	2300      	moveq	r3, #0
 801cf60:	6102      	str	r2, [r0, #16]
 801cf62:	bf08      	it	eq
 801cf64:	6143      	streq	r3, [r0, #20]
 801cf66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cf6a:	f8dc c000 	ldr.w	ip, [ip]
 801cf6e:	fa0c fc08 	lsl.w	ip, ip, r8
 801cf72:	ea4c 0707 	orr.w	r7, ip, r7
 801cf76:	f849 7b04 	str.w	r7, [r9], #4
 801cf7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cf7e:	40cf      	lsrs	r7, r1
 801cf80:	e7da      	b.n	801cf38 <rshift+0x4c>
 801cf82:	f851 cb04 	ldr.w	ip, [r1], #4
 801cf86:	f847 cf04 	str.w	ip, [r7, #4]!
 801cf8a:	e7c3      	b.n	801cf14 <rshift+0x28>
 801cf8c:	4623      	mov	r3, r4
 801cf8e:	e7e1      	b.n	801cf54 <rshift+0x68>

0801cf90 <__hexdig_fun>:
 801cf90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801cf94:	2b09      	cmp	r3, #9
 801cf96:	d802      	bhi.n	801cf9e <__hexdig_fun+0xe>
 801cf98:	3820      	subs	r0, #32
 801cf9a:	b2c0      	uxtb	r0, r0
 801cf9c:	4770      	bx	lr
 801cf9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801cfa2:	2b05      	cmp	r3, #5
 801cfa4:	d801      	bhi.n	801cfaa <__hexdig_fun+0x1a>
 801cfa6:	3847      	subs	r0, #71	; 0x47
 801cfa8:	e7f7      	b.n	801cf9a <__hexdig_fun+0xa>
 801cfaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801cfae:	2b05      	cmp	r3, #5
 801cfb0:	d801      	bhi.n	801cfb6 <__hexdig_fun+0x26>
 801cfb2:	3827      	subs	r0, #39	; 0x27
 801cfb4:	e7f1      	b.n	801cf9a <__hexdig_fun+0xa>
 801cfb6:	2000      	movs	r0, #0
 801cfb8:	4770      	bx	lr
	...

0801cfbc <__gethex>:
 801cfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc0:	ed2d 8b02 	vpush	{d8}
 801cfc4:	b089      	sub	sp, #36	; 0x24
 801cfc6:	ee08 0a10 	vmov	s16, r0
 801cfca:	9304      	str	r3, [sp, #16]
 801cfcc:	4bb4      	ldr	r3, [pc, #720]	; (801d2a0 <__gethex+0x2e4>)
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	9301      	str	r3, [sp, #4]
 801cfd2:	4618      	mov	r0, r3
 801cfd4:	468b      	mov	fp, r1
 801cfd6:	4690      	mov	r8, r2
 801cfd8:	f7e3 f90c 	bl	80001f4 <strlen>
 801cfdc:	9b01      	ldr	r3, [sp, #4]
 801cfde:	f8db 2000 	ldr.w	r2, [fp]
 801cfe2:	4403      	add	r3, r0
 801cfe4:	4682      	mov	sl, r0
 801cfe6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801cfea:	9305      	str	r3, [sp, #20]
 801cfec:	1c93      	adds	r3, r2, #2
 801cfee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801cff2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801cff6:	32fe      	adds	r2, #254	; 0xfe
 801cff8:	18d1      	adds	r1, r2, r3
 801cffa:	461f      	mov	r7, r3
 801cffc:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d000:	9100      	str	r1, [sp, #0]
 801d002:	2830      	cmp	r0, #48	; 0x30
 801d004:	d0f8      	beq.n	801cff8 <__gethex+0x3c>
 801d006:	f7ff ffc3 	bl	801cf90 <__hexdig_fun>
 801d00a:	4604      	mov	r4, r0
 801d00c:	2800      	cmp	r0, #0
 801d00e:	d13a      	bne.n	801d086 <__gethex+0xca>
 801d010:	9901      	ldr	r1, [sp, #4]
 801d012:	4652      	mov	r2, sl
 801d014:	4638      	mov	r0, r7
 801d016:	f7fd ff1b 	bl	801ae50 <strncmp>
 801d01a:	4605      	mov	r5, r0
 801d01c:	2800      	cmp	r0, #0
 801d01e:	d168      	bne.n	801d0f2 <__gethex+0x136>
 801d020:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d024:	eb07 060a 	add.w	r6, r7, sl
 801d028:	f7ff ffb2 	bl	801cf90 <__hexdig_fun>
 801d02c:	2800      	cmp	r0, #0
 801d02e:	d062      	beq.n	801d0f6 <__gethex+0x13a>
 801d030:	4633      	mov	r3, r6
 801d032:	7818      	ldrb	r0, [r3, #0]
 801d034:	2830      	cmp	r0, #48	; 0x30
 801d036:	461f      	mov	r7, r3
 801d038:	f103 0301 	add.w	r3, r3, #1
 801d03c:	d0f9      	beq.n	801d032 <__gethex+0x76>
 801d03e:	f7ff ffa7 	bl	801cf90 <__hexdig_fun>
 801d042:	2301      	movs	r3, #1
 801d044:	fab0 f480 	clz	r4, r0
 801d048:	0964      	lsrs	r4, r4, #5
 801d04a:	4635      	mov	r5, r6
 801d04c:	9300      	str	r3, [sp, #0]
 801d04e:	463a      	mov	r2, r7
 801d050:	4616      	mov	r6, r2
 801d052:	3201      	adds	r2, #1
 801d054:	7830      	ldrb	r0, [r6, #0]
 801d056:	f7ff ff9b 	bl	801cf90 <__hexdig_fun>
 801d05a:	2800      	cmp	r0, #0
 801d05c:	d1f8      	bne.n	801d050 <__gethex+0x94>
 801d05e:	9901      	ldr	r1, [sp, #4]
 801d060:	4652      	mov	r2, sl
 801d062:	4630      	mov	r0, r6
 801d064:	f7fd fef4 	bl	801ae50 <strncmp>
 801d068:	b980      	cbnz	r0, 801d08c <__gethex+0xd0>
 801d06a:	b94d      	cbnz	r5, 801d080 <__gethex+0xc4>
 801d06c:	eb06 050a 	add.w	r5, r6, sl
 801d070:	462a      	mov	r2, r5
 801d072:	4616      	mov	r6, r2
 801d074:	3201      	adds	r2, #1
 801d076:	7830      	ldrb	r0, [r6, #0]
 801d078:	f7ff ff8a 	bl	801cf90 <__hexdig_fun>
 801d07c:	2800      	cmp	r0, #0
 801d07e:	d1f8      	bne.n	801d072 <__gethex+0xb6>
 801d080:	1bad      	subs	r5, r5, r6
 801d082:	00ad      	lsls	r5, r5, #2
 801d084:	e004      	b.n	801d090 <__gethex+0xd4>
 801d086:	2400      	movs	r4, #0
 801d088:	4625      	mov	r5, r4
 801d08a:	e7e0      	b.n	801d04e <__gethex+0x92>
 801d08c:	2d00      	cmp	r5, #0
 801d08e:	d1f7      	bne.n	801d080 <__gethex+0xc4>
 801d090:	7833      	ldrb	r3, [r6, #0]
 801d092:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d096:	2b50      	cmp	r3, #80	; 0x50
 801d098:	d13b      	bne.n	801d112 <__gethex+0x156>
 801d09a:	7873      	ldrb	r3, [r6, #1]
 801d09c:	2b2b      	cmp	r3, #43	; 0x2b
 801d09e:	d02c      	beq.n	801d0fa <__gethex+0x13e>
 801d0a0:	2b2d      	cmp	r3, #45	; 0x2d
 801d0a2:	d02e      	beq.n	801d102 <__gethex+0x146>
 801d0a4:	1c71      	adds	r1, r6, #1
 801d0a6:	f04f 0900 	mov.w	r9, #0
 801d0aa:	7808      	ldrb	r0, [r1, #0]
 801d0ac:	f7ff ff70 	bl	801cf90 <__hexdig_fun>
 801d0b0:	1e43      	subs	r3, r0, #1
 801d0b2:	b2db      	uxtb	r3, r3
 801d0b4:	2b18      	cmp	r3, #24
 801d0b6:	d82c      	bhi.n	801d112 <__gethex+0x156>
 801d0b8:	f1a0 0210 	sub.w	r2, r0, #16
 801d0bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d0c0:	f7ff ff66 	bl	801cf90 <__hexdig_fun>
 801d0c4:	1e43      	subs	r3, r0, #1
 801d0c6:	b2db      	uxtb	r3, r3
 801d0c8:	2b18      	cmp	r3, #24
 801d0ca:	d91d      	bls.n	801d108 <__gethex+0x14c>
 801d0cc:	f1b9 0f00 	cmp.w	r9, #0
 801d0d0:	d000      	beq.n	801d0d4 <__gethex+0x118>
 801d0d2:	4252      	negs	r2, r2
 801d0d4:	4415      	add	r5, r2
 801d0d6:	f8cb 1000 	str.w	r1, [fp]
 801d0da:	b1e4      	cbz	r4, 801d116 <__gethex+0x15a>
 801d0dc:	9b00      	ldr	r3, [sp, #0]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	bf14      	ite	ne
 801d0e2:	2700      	movne	r7, #0
 801d0e4:	2706      	moveq	r7, #6
 801d0e6:	4638      	mov	r0, r7
 801d0e8:	b009      	add	sp, #36	; 0x24
 801d0ea:	ecbd 8b02 	vpop	{d8}
 801d0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0f2:	463e      	mov	r6, r7
 801d0f4:	4625      	mov	r5, r4
 801d0f6:	2401      	movs	r4, #1
 801d0f8:	e7ca      	b.n	801d090 <__gethex+0xd4>
 801d0fa:	f04f 0900 	mov.w	r9, #0
 801d0fe:	1cb1      	adds	r1, r6, #2
 801d100:	e7d3      	b.n	801d0aa <__gethex+0xee>
 801d102:	f04f 0901 	mov.w	r9, #1
 801d106:	e7fa      	b.n	801d0fe <__gethex+0x142>
 801d108:	230a      	movs	r3, #10
 801d10a:	fb03 0202 	mla	r2, r3, r2, r0
 801d10e:	3a10      	subs	r2, #16
 801d110:	e7d4      	b.n	801d0bc <__gethex+0x100>
 801d112:	4631      	mov	r1, r6
 801d114:	e7df      	b.n	801d0d6 <__gethex+0x11a>
 801d116:	1bf3      	subs	r3, r6, r7
 801d118:	3b01      	subs	r3, #1
 801d11a:	4621      	mov	r1, r4
 801d11c:	2b07      	cmp	r3, #7
 801d11e:	dc0b      	bgt.n	801d138 <__gethex+0x17c>
 801d120:	ee18 0a10 	vmov	r0, s16
 801d124:	f000 faec 	bl	801d700 <_Balloc>
 801d128:	4604      	mov	r4, r0
 801d12a:	b940      	cbnz	r0, 801d13e <__gethex+0x182>
 801d12c:	4b5d      	ldr	r3, [pc, #372]	; (801d2a4 <__gethex+0x2e8>)
 801d12e:	4602      	mov	r2, r0
 801d130:	21de      	movs	r1, #222	; 0xde
 801d132:	485d      	ldr	r0, [pc, #372]	; (801d2a8 <__gethex+0x2ec>)
 801d134:	f7fe ff52 	bl	801bfdc <__assert_func>
 801d138:	3101      	adds	r1, #1
 801d13a:	105b      	asrs	r3, r3, #1
 801d13c:	e7ee      	b.n	801d11c <__gethex+0x160>
 801d13e:	f100 0914 	add.w	r9, r0, #20
 801d142:	f04f 0b00 	mov.w	fp, #0
 801d146:	f1ca 0301 	rsb	r3, sl, #1
 801d14a:	f8cd 9008 	str.w	r9, [sp, #8]
 801d14e:	f8cd b000 	str.w	fp, [sp]
 801d152:	9306      	str	r3, [sp, #24]
 801d154:	42b7      	cmp	r7, r6
 801d156:	d340      	bcc.n	801d1da <__gethex+0x21e>
 801d158:	9802      	ldr	r0, [sp, #8]
 801d15a:	9b00      	ldr	r3, [sp, #0]
 801d15c:	f840 3b04 	str.w	r3, [r0], #4
 801d160:	eba0 0009 	sub.w	r0, r0, r9
 801d164:	1080      	asrs	r0, r0, #2
 801d166:	0146      	lsls	r6, r0, #5
 801d168:	6120      	str	r0, [r4, #16]
 801d16a:	4618      	mov	r0, r3
 801d16c:	f000 fbba 	bl	801d8e4 <__hi0bits>
 801d170:	1a30      	subs	r0, r6, r0
 801d172:	f8d8 6000 	ldr.w	r6, [r8]
 801d176:	42b0      	cmp	r0, r6
 801d178:	dd63      	ble.n	801d242 <__gethex+0x286>
 801d17a:	1b87      	subs	r7, r0, r6
 801d17c:	4639      	mov	r1, r7
 801d17e:	4620      	mov	r0, r4
 801d180:	f000 ff5e 	bl	801e040 <__any_on>
 801d184:	4682      	mov	sl, r0
 801d186:	b1a8      	cbz	r0, 801d1b4 <__gethex+0x1f8>
 801d188:	1e7b      	subs	r3, r7, #1
 801d18a:	1159      	asrs	r1, r3, #5
 801d18c:	f003 021f 	and.w	r2, r3, #31
 801d190:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d194:	f04f 0a01 	mov.w	sl, #1
 801d198:	fa0a f202 	lsl.w	r2, sl, r2
 801d19c:	420a      	tst	r2, r1
 801d19e:	d009      	beq.n	801d1b4 <__gethex+0x1f8>
 801d1a0:	4553      	cmp	r3, sl
 801d1a2:	dd05      	ble.n	801d1b0 <__gethex+0x1f4>
 801d1a4:	1eb9      	subs	r1, r7, #2
 801d1a6:	4620      	mov	r0, r4
 801d1a8:	f000 ff4a 	bl	801e040 <__any_on>
 801d1ac:	2800      	cmp	r0, #0
 801d1ae:	d145      	bne.n	801d23c <__gethex+0x280>
 801d1b0:	f04f 0a02 	mov.w	sl, #2
 801d1b4:	4639      	mov	r1, r7
 801d1b6:	4620      	mov	r0, r4
 801d1b8:	f7ff fe98 	bl	801ceec <rshift>
 801d1bc:	443d      	add	r5, r7
 801d1be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d1c2:	42ab      	cmp	r3, r5
 801d1c4:	da4c      	bge.n	801d260 <__gethex+0x2a4>
 801d1c6:	ee18 0a10 	vmov	r0, s16
 801d1ca:	4621      	mov	r1, r4
 801d1cc:	f000 fad8 	bl	801d780 <_Bfree>
 801d1d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d1d2:	2300      	movs	r3, #0
 801d1d4:	6013      	str	r3, [r2, #0]
 801d1d6:	27a3      	movs	r7, #163	; 0xa3
 801d1d8:	e785      	b.n	801d0e6 <__gethex+0x12a>
 801d1da:	1e73      	subs	r3, r6, #1
 801d1dc:	9a05      	ldr	r2, [sp, #20]
 801d1de:	9303      	str	r3, [sp, #12]
 801d1e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d1e4:	4293      	cmp	r3, r2
 801d1e6:	d019      	beq.n	801d21c <__gethex+0x260>
 801d1e8:	f1bb 0f20 	cmp.w	fp, #32
 801d1ec:	d107      	bne.n	801d1fe <__gethex+0x242>
 801d1ee:	9b02      	ldr	r3, [sp, #8]
 801d1f0:	9a00      	ldr	r2, [sp, #0]
 801d1f2:	f843 2b04 	str.w	r2, [r3], #4
 801d1f6:	9302      	str	r3, [sp, #8]
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	9300      	str	r3, [sp, #0]
 801d1fc:	469b      	mov	fp, r3
 801d1fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d202:	f7ff fec5 	bl	801cf90 <__hexdig_fun>
 801d206:	9b00      	ldr	r3, [sp, #0]
 801d208:	f000 000f 	and.w	r0, r0, #15
 801d20c:	fa00 f00b 	lsl.w	r0, r0, fp
 801d210:	4303      	orrs	r3, r0
 801d212:	9300      	str	r3, [sp, #0]
 801d214:	f10b 0b04 	add.w	fp, fp, #4
 801d218:	9b03      	ldr	r3, [sp, #12]
 801d21a:	e00d      	b.n	801d238 <__gethex+0x27c>
 801d21c:	9b03      	ldr	r3, [sp, #12]
 801d21e:	9a06      	ldr	r2, [sp, #24]
 801d220:	4413      	add	r3, r2
 801d222:	42bb      	cmp	r3, r7
 801d224:	d3e0      	bcc.n	801d1e8 <__gethex+0x22c>
 801d226:	4618      	mov	r0, r3
 801d228:	9901      	ldr	r1, [sp, #4]
 801d22a:	9307      	str	r3, [sp, #28]
 801d22c:	4652      	mov	r2, sl
 801d22e:	f7fd fe0f 	bl	801ae50 <strncmp>
 801d232:	9b07      	ldr	r3, [sp, #28]
 801d234:	2800      	cmp	r0, #0
 801d236:	d1d7      	bne.n	801d1e8 <__gethex+0x22c>
 801d238:	461e      	mov	r6, r3
 801d23a:	e78b      	b.n	801d154 <__gethex+0x198>
 801d23c:	f04f 0a03 	mov.w	sl, #3
 801d240:	e7b8      	b.n	801d1b4 <__gethex+0x1f8>
 801d242:	da0a      	bge.n	801d25a <__gethex+0x29e>
 801d244:	1a37      	subs	r7, r6, r0
 801d246:	4621      	mov	r1, r4
 801d248:	ee18 0a10 	vmov	r0, s16
 801d24c:	463a      	mov	r2, r7
 801d24e:	f000 fcb3 	bl	801dbb8 <__lshift>
 801d252:	1bed      	subs	r5, r5, r7
 801d254:	4604      	mov	r4, r0
 801d256:	f100 0914 	add.w	r9, r0, #20
 801d25a:	f04f 0a00 	mov.w	sl, #0
 801d25e:	e7ae      	b.n	801d1be <__gethex+0x202>
 801d260:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d264:	42a8      	cmp	r0, r5
 801d266:	dd72      	ble.n	801d34e <__gethex+0x392>
 801d268:	1b45      	subs	r5, r0, r5
 801d26a:	42ae      	cmp	r6, r5
 801d26c:	dc36      	bgt.n	801d2dc <__gethex+0x320>
 801d26e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d272:	2b02      	cmp	r3, #2
 801d274:	d02a      	beq.n	801d2cc <__gethex+0x310>
 801d276:	2b03      	cmp	r3, #3
 801d278:	d02c      	beq.n	801d2d4 <__gethex+0x318>
 801d27a:	2b01      	cmp	r3, #1
 801d27c:	d11c      	bne.n	801d2b8 <__gethex+0x2fc>
 801d27e:	42ae      	cmp	r6, r5
 801d280:	d11a      	bne.n	801d2b8 <__gethex+0x2fc>
 801d282:	2e01      	cmp	r6, #1
 801d284:	d112      	bne.n	801d2ac <__gethex+0x2f0>
 801d286:	9a04      	ldr	r2, [sp, #16]
 801d288:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d28c:	6013      	str	r3, [r2, #0]
 801d28e:	2301      	movs	r3, #1
 801d290:	6123      	str	r3, [r4, #16]
 801d292:	f8c9 3000 	str.w	r3, [r9]
 801d296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d298:	2762      	movs	r7, #98	; 0x62
 801d29a:	601c      	str	r4, [r3, #0]
 801d29c:	e723      	b.n	801d0e6 <__gethex+0x12a>
 801d29e:	bf00      	nop
 801d2a0:	0801f710 	.word	0x0801f710
 801d2a4:	0801f699 	.word	0x0801f699
 801d2a8:	0801f6aa 	.word	0x0801f6aa
 801d2ac:	1e71      	subs	r1, r6, #1
 801d2ae:	4620      	mov	r0, r4
 801d2b0:	f000 fec6 	bl	801e040 <__any_on>
 801d2b4:	2800      	cmp	r0, #0
 801d2b6:	d1e6      	bne.n	801d286 <__gethex+0x2ca>
 801d2b8:	ee18 0a10 	vmov	r0, s16
 801d2bc:	4621      	mov	r1, r4
 801d2be:	f000 fa5f 	bl	801d780 <_Bfree>
 801d2c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d2c4:	2300      	movs	r3, #0
 801d2c6:	6013      	str	r3, [r2, #0]
 801d2c8:	2750      	movs	r7, #80	; 0x50
 801d2ca:	e70c      	b.n	801d0e6 <__gethex+0x12a>
 801d2cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d1f2      	bne.n	801d2b8 <__gethex+0x2fc>
 801d2d2:	e7d8      	b.n	801d286 <__gethex+0x2ca>
 801d2d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d1d5      	bne.n	801d286 <__gethex+0x2ca>
 801d2da:	e7ed      	b.n	801d2b8 <__gethex+0x2fc>
 801d2dc:	1e6f      	subs	r7, r5, #1
 801d2de:	f1ba 0f00 	cmp.w	sl, #0
 801d2e2:	d131      	bne.n	801d348 <__gethex+0x38c>
 801d2e4:	b127      	cbz	r7, 801d2f0 <__gethex+0x334>
 801d2e6:	4639      	mov	r1, r7
 801d2e8:	4620      	mov	r0, r4
 801d2ea:	f000 fea9 	bl	801e040 <__any_on>
 801d2ee:	4682      	mov	sl, r0
 801d2f0:	117b      	asrs	r3, r7, #5
 801d2f2:	2101      	movs	r1, #1
 801d2f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d2f8:	f007 071f 	and.w	r7, r7, #31
 801d2fc:	fa01 f707 	lsl.w	r7, r1, r7
 801d300:	421f      	tst	r7, r3
 801d302:	4629      	mov	r1, r5
 801d304:	4620      	mov	r0, r4
 801d306:	bf18      	it	ne
 801d308:	f04a 0a02 	orrne.w	sl, sl, #2
 801d30c:	1b76      	subs	r6, r6, r5
 801d30e:	f7ff fded 	bl	801ceec <rshift>
 801d312:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d316:	2702      	movs	r7, #2
 801d318:	f1ba 0f00 	cmp.w	sl, #0
 801d31c:	d048      	beq.n	801d3b0 <__gethex+0x3f4>
 801d31e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d322:	2b02      	cmp	r3, #2
 801d324:	d015      	beq.n	801d352 <__gethex+0x396>
 801d326:	2b03      	cmp	r3, #3
 801d328:	d017      	beq.n	801d35a <__gethex+0x39e>
 801d32a:	2b01      	cmp	r3, #1
 801d32c:	d109      	bne.n	801d342 <__gethex+0x386>
 801d32e:	f01a 0f02 	tst.w	sl, #2
 801d332:	d006      	beq.n	801d342 <__gethex+0x386>
 801d334:	f8d9 0000 	ldr.w	r0, [r9]
 801d338:	ea4a 0a00 	orr.w	sl, sl, r0
 801d33c:	f01a 0f01 	tst.w	sl, #1
 801d340:	d10e      	bne.n	801d360 <__gethex+0x3a4>
 801d342:	f047 0710 	orr.w	r7, r7, #16
 801d346:	e033      	b.n	801d3b0 <__gethex+0x3f4>
 801d348:	f04f 0a01 	mov.w	sl, #1
 801d34c:	e7d0      	b.n	801d2f0 <__gethex+0x334>
 801d34e:	2701      	movs	r7, #1
 801d350:	e7e2      	b.n	801d318 <__gethex+0x35c>
 801d352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d354:	f1c3 0301 	rsb	r3, r3, #1
 801d358:	9315      	str	r3, [sp, #84]	; 0x54
 801d35a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d0f0      	beq.n	801d342 <__gethex+0x386>
 801d360:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d364:	f104 0314 	add.w	r3, r4, #20
 801d368:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d36c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d370:	f04f 0c00 	mov.w	ip, #0
 801d374:	4618      	mov	r0, r3
 801d376:	f853 2b04 	ldr.w	r2, [r3], #4
 801d37a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801d37e:	d01c      	beq.n	801d3ba <__gethex+0x3fe>
 801d380:	3201      	adds	r2, #1
 801d382:	6002      	str	r2, [r0, #0]
 801d384:	2f02      	cmp	r7, #2
 801d386:	f104 0314 	add.w	r3, r4, #20
 801d38a:	d13f      	bne.n	801d40c <__gethex+0x450>
 801d38c:	f8d8 2000 	ldr.w	r2, [r8]
 801d390:	3a01      	subs	r2, #1
 801d392:	42b2      	cmp	r2, r6
 801d394:	d10a      	bne.n	801d3ac <__gethex+0x3f0>
 801d396:	1171      	asrs	r1, r6, #5
 801d398:	2201      	movs	r2, #1
 801d39a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d39e:	f006 061f 	and.w	r6, r6, #31
 801d3a2:	fa02 f606 	lsl.w	r6, r2, r6
 801d3a6:	421e      	tst	r6, r3
 801d3a8:	bf18      	it	ne
 801d3aa:	4617      	movne	r7, r2
 801d3ac:	f047 0720 	orr.w	r7, r7, #32
 801d3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d3b2:	601c      	str	r4, [r3, #0]
 801d3b4:	9b04      	ldr	r3, [sp, #16]
 801d3b6:	601d      	str	r5, [r3, #0]
 801d3b8:	e695      	b.n	801d0e6 <__gethex+0x12a>
 801d3ba:	4299      	cmp	r1, r3
 801d3bc:	f843 cc04 	str.w	ip, [r3, #-4]
 801d3c0:	d8d8      	bhi.n	801d374 <__gethex+0x3b8>
 801d3c2:	68a3      	ldr	r3, [r4, #8]
 801d3c4:	459b      	cmp	fp, r3
 801d3c6:	db19      	blt.n	801d3fc <__gethex+0x440>
 801d3c8:	6861      	ldr	r1, [r4, #4]
 801d3ca:	ee18 0a10 	vmov	r0, s16
 801d3ce:	3101      	adds	r1, #1
 801d3d0:	f000 f996 	bl	801d700 <_Balloc>
 801d3d4:	4681      	mov	r9, r0
 801d3d6:	b918      	cbnz	r0, 801d3e0 <__gethex+0x424>
 801d3d8:	4b1a      	ldr	r3, [pc, #104]	; (801d444 <__gethex+0x488>)
 801d3da:	4602      	mov	r2, r0
 801d3dc:	2184      	movs	r1, #132	; 0x84
 801d3de:	e6a8      	b.n	801d132 <__gethex+0x176>
 801d3e0:	6922      	ldr	r2, [r4, #16]
 801d3e2:	3202      	adds	r2, #2
 801d3e4:	f104 010c 	add.w	r1, r4, #12
 801d3e8:	0092      	lsls	r2, r2, #2
 801d3ea:	300c      	adds	r0, #12
 801d3ec:	f7fc fb62 	bl	8019ab4 <memcpy>
 801d3f0:	4621      	mov	r1, r4
 801d3f2:	ee18 0a10 	vmov	r0, s16
 801d3f6:	f000 f9c3 	bl	801d780 <_Bfree>
 801d3fa:	464c      	mov	r4, r9
 801d3fc:	6923      	ldr	r3, [r4, #16]
 801d3fe:	1c5a      	adds	r2, r3, #1
 801d400:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d404:	6122      	str	r2, [r4, #16]
 801d406:	2201      	movs	r2, #1
 801d408:	615a      	str	r2, [r3, #20]
 801d40a:	e7bb      	b.n	801d384 <__gethex+0x3c8>
 801d40c:	6922      	ldr	r2, [r4, #16]
 801d40e:	455a      	cmp	r2, fp
 801d410:	dd0b      	ble.n	801d42a <__gethex+0x46e>
 801d412:	2101      	movs	r1, #1
 801d414:	4620      	mov	r0, r4
 801d416:	f7ff fd69 	bl	801ceec <rshift>
 801d41a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d41e:	3501      	adds	r5, #1
 801d420:	42ab      	cmp	r3, r5
 801d422:	f6ff aed0 	blt.w	801d1c6 <__gethex+0x20a>
 801d426:	2701      	movs	r7, #1
 801d428:	e7c0      	b.n	801d3ac <__gethex+0x3f0>
 801d42a:	f016 061f 	ands.w	r6, r6, #31
 801d42e:	d0fa      	beq.n	801d426 <__gethex+0x46a>
 801d430:	4453      	add	r3, sl
 801d432:	f1c6 0620 	rsb	r6, r6, #32
 801d436:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d43a:	f000 fa53 	bl	801d8e4 <__hi0bits>
 801d43e:	42b0      	cmp	r0, r6
 801d440:	dbe7      	blt.n	801d412 <__gethex+0x456>
 801d442:	e7f0      	b.n	801d426 <__gethex+0x46a>
 801d444:	0801f699 	.word	0x0801f699

0801d448 <L_shift>:
 801d448:	f1c2 0208 	rsb	r2, r2, #8
 801d44c:	0092      	lsls	r2, r2, #2
 801d44e:	b570      	push	{r4, r5, r6, lr}
 801d450:	f1c2 0620 	rsb	r6, r2, #32
 801d454:	6843      	ldr	r3, [r0, #4]
 801d456:	6804      	ldr	r4, [r0, #0]
 801d458:	fa03 f506 	lsl.w	r5, r3, r6
 801d45c:	432c      	orrs	r4, r5
 801d45e:	40d3      	lsrs	r3, r2
 801d460:	6004      	str	r4, [r0, #0]
 801d462:	f840 3f04 	str.w	r3, [r0, #4]!
 801d466:	4288      	cmp	r0, r1
 801d468:	d3f4      	bcc.n	801d454 <L_shift+0xc>
 801d46a:	bd70      	pop	{r4, r5, r6, pc}

0801d46c <__match>:
 801d46c:	b530      	push	{r4, r5, lr}
 801d46e:	6803      	ldr	r3, [r0, #0]
 801d470:	3301      	adds	r3, #1
 801d472:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d476:	b914      	cbnz	r4, 801d47e <__match+0x12>
 801d478:	6003      	str	r3, [r0, #0]
 801d47a:	2001      	movs	r0, #1
 801d47c:	bd30      	pop	{r4, r5, pc}
 801d47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d482:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d486:	2d19      	cmp	r5, #25
 801d488:	bf98      	it	ls
 801d48a:	3220      	addls	r2, #32
 801d48c:	42a2      	cmp	r2, r4
 801d48e:	d0f0      	beq.n	801d472 <__match+0x6>
 801d490:	2000      	movs	r0, #0
 801d492:	e7f3      	b.n	801d47c <__match+0x10>

0801d494 <__hexnan>:
 801d494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d498:	680b      	ldr	r3, [r1, #0]
 801d49a:	115e      	asrs	r6, r3, #5
 801d49c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d4a0:	f013 031f 	ands.w	r3, r3, #31
 801d4a4:	b087      	sub	sp, #28
 801d4a6:	bf18      	it	ne
 801d4a8:	3604      	addne	r6, #4
 801d4aa:	2500      	movs	r5, #0
 801d4ac:	1f37      	subs	r7, r6, #4
 801d4ae:	4690      	mov	r8, r2
 801d4b0:	6802      	ldr	r2, [r0, #0]
 801d4b2:	9301      	str	r3, [sp, #4]
 801d4b4:	4682      	mov	sl, r0
 801d4b6:	f846 5c04 	str.w	r5, [r6, #-4]
 801d4ba:	46b9      	mov	r9, r7
 801d4bc:	463c      	mov	r4, r7
 801d4be:	9502      	str	r5, [sp, #8]
 801d4c0:	46ab      	mov	fp, r5
 801d4c2:	7851      	ldrb	r1, [r2, #1]
 801d4c4:	1c53      	adds	r3, r2, #1
 801d4c6:	9303      	str	r3, [sp, #12]
 801d4c8:	b341      	cbz	r1, 801d51c <__hexnan+0x88>
 801d4ca:	4608      	mov	r0, r1
 801d4cc:	9205      	str	r2, [sp, #20]
 801d4ce:	9104      	str	r1, [sp, #16]
 801d4d0:	f7ff fd5e 	bl	801cf90 <__hexdig_fun>
 801d4d4:	2800      	cmp	r0, #0
 801d4d6:	d14f      	bne.n	801d578 <__hexnan+0xe4>
 801d4d8:	9904      	ldr	r1, [sp, #16]
 801d4da:	9a05      	ldr	r2, [sp, #20]
 801d4dc:	2920      	cmp	r1, #32
 801d4de:	d818      	bhi.n	801d512 <__hexnan+0x7e>
 801d4e0:	9b02      	ldr	r3, [sp, #8]
 801d4e2:	459b      	cmp	fp, r3
 801d4e4:	dd13      	ble.n	801d50e <__hexnan+0x7a>
 801d4e6:	454c      	cmp	r4, r9
 801d4e8:	d206      	bcs.n	801d4f8 <__hexnan+0x64>
 801d4ea:	2d07      	cmp	r5, #7
 801d4ec:	dc04      	bgt.n	801d4f8 <__hexnan+0x64>
 801d4ee:	462a      	mov	r2, r5
 801d4f0:	4649      	mov	r1, r9
 801d4f2:	4620      	mov	r0, r4
 801d4f4:	f7ff ffa8 	bl	801d448 <L_shift>
 801d4f8:	4544      	cmp	r4, r8
 801d4fa:	d950      	bls.n	801d59e <__hexnan+0x10a>
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	f1a4 0904 	sub.w	r9, r4, #4
 801d502:	f844 3c04 	str.w	r3, [r4, #-4]
 801d506:	f8cd b008 	str.w	fp, [sp, #8]
 801d50a:	464c      	mov	r4, r9
 801d50c:	461d      	mov	r5, r3
 801d50e:	9a03      	ldr	r2, [sp, #12]
 801d510:	e7d7      	b.n	801d4c2 <__hexnan+0x2e>
 801d512:	2929      	cmp	r1, #41	; 0x29
 801d514:	d156      	bne.n	801d5c4 <__hexnan+0x130>
 801d516:	3202      	adds	r2, #2
 801d518:	f8ca 2000 	str.w	r2, [sl]
 801d51c:	f1bb 0f00 	cmp.w	fp, #0
 801d520:	d050      	beq.n	801d5c4 <__hexnan+0x130>
 801d522:	454c      	cmp	r4, r9
 801d524:	d206      	bcs.n	801d534 <__hexnan+0xa0>
 801d526:	2d07      	cmp	r5, #7
 801d528:	dc04      	bgt.n	801d534 <__hexnan+0xa0>
 801d52a:	462a      	mov	r2, r5
 801d52c:	4649      	mov	r1, r9
 801d52e:	4620      	mov	r0, r4
 801d530:	f7ff ff8a 	bl	801d448 <L_shift>
 801d534:	4544      	cmp	r4, r8
 801d536:	d934      	bls.n	801d5a2 <__hexnan+0x10e>
 801d538:	f1a8 0204 	sub.w	r2, r8, #4
 801d53c:	4623      	mov	r3, r4
 801d53e:	f853 1b04 	ldr.w	r1, [r3], #4
 801d542:	f842 1f04 	str.w	r1, [r2, #4]!
 801d546:	429f      	cmp	r7, r3
 801d548:	d2f9      	bcs.n	801d53e <__hexnan+0xaa>
 801d54a:	1b3b      	subs	r3, r7, r4
 801d54c:	f023 0303 	bic.w	r3, r3, #3
 801d550:	3304      	adds	r3, #4
 801d552:	3401      	adds	r4, #1
 801d554:	3e03      	subs	r6, #3
 801d556:	42b4      	cmp	r4, r6
 801d558:	bf88      	it	hi
 801d55a:	2304      	movhi	r3, #4
 801d55c:	4443      	add	r3, r8
 801d55e:	2200      	movs	r2, #0
 801d560:	f843 2b04 	str.w	r2, [r3], #4
 801d564:	429f      	cmp	r7, r3
 801d566:	d2fb      	bcs.n	801d560 <__hexnan+0xcc>
 801d568:	683b      	ldr	r3, [r7, #0]
 801d56a:	b91b      	cbnz	r3, 801d574 <__hexnan+0xe0>
 801d56c:	4547      	cmp	r7, r8
 801d56e:	d127      	bne.n	801d5c0 <__hexnan+0x12c>
 801d570:	2301      	movs	r3, #1
 801d572:	603b      	str	r3, [r7, #0]
 801d574:	2005      	movs	r0, #5
 801d576:	e026      	b.n	801d5c6 <__hexnan+0x132>
 801d578:	3501      	adds	r5, #1
 801d57a:	2d08      	cmp	r5, #8
 801d57c:	f10b 0b01 	add.w	fp, fp, #1
 801d580:	dd06      	ble.n	801d590 <__hexnan+0xfc>
 801d582:	4544      	cmp	r4, r8
 801d584:	d9c3      	bls.n	801d50e <__hexnan+0x7a>
 801d586:	2300      	movs	r3, #0
 801d588:	f844 3c04 	str.w	r3, [r4, #-4]
 801d58c:	2501      	movs	r5, #1
 801d58e:	3c04      	subs	r4, #4
 801d590:	6822      	ldr	r2, [r4, #0]
 801d592:	f000 000f 	and.w	r0, r0, #15
 801d596:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d59a:	6022      	str	r2, [r4, #0]
 801d59c:	e7b7      	b.n	801d50e <__hexnan+0x7a>
 801d59e:	2508      	movs	r5, #8
 801d5a0:	e7b5      	b.n	801d50e <__hexnan+0x7a>
 801d5a2:	9b01      	ldr	r3, [sp, #4]
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d0df      	beq.n	801d568 <__hexnan+0xd4>
 801d5a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d5ac:	f1c3 0320 	rsb	r3, r3, #32
 801d5b0:	fa22 f303 	lsr.w	r3, r2, r3
 801d5b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d5b8:	401a      	ands	r2, r3
 801d5ba:	f846 2c04 	str.w	r2, [r6, #-4]
 801d5be:	e7d3      	b.n	801d568 <__hexnan+0xd4>
 801d5c0:	3f04      	subs	r7, #4
 801d5c2:	e7d1      	b.n	801d568 <__hexnan+0xd4>
 801d5c4:	2004      	movs	r0, #4
 801d5c6:	b007      	add	sp, #28
 801d5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d5cc <_localeconv_r>:
 801d5cc:	4800      	ldr	r0, [pc, #0]	; (801d5d0 <_localeconv_r+0x4>)
 801d5ce:	4770      	bx	lr
 801d5d0:	200001e4 	.word	0x200001e4

0801d5d4 <_lseek_r>:
 801d5d4:	b538      	push	{r3, r4, r5, lr}
 801d5d6:	4d07      	ldr	r5, [pc, #28]	; (801d5f4 <_lseek_r+0x20>)
 801d5d8:	4604      	mov	r4, r0
 801d5da:	4608      	mov	r0, r1
 801d5dc:	4611      	mov	r1, r2
 801d5de:	2200      	movs	r2, #0
 801d5e0:	602a      	str	r2, [r5, #0]
 801d5e2:	461a      	mov	r2, r3
 801d5e4:	f7e6 fe70 	bl	80042c8 <_lseek>
 801d5e8:	1c43      	adds	r3, r0, #1
 801d5ea:	d102      	bne.n	801d5f2 <_lseek_r+0x1e>
 801d5ec:	682b      	ldr	r3, [r5, #0]
 801d5ee:	b103      	cbz	r3, 801d5f2 <_lseek_r+0x1e>
 801d5f0:	6023      	str	r3, [r4, #0]
 801d5f2:	bd38      	pop	{r3, r4, r5, pc}
 801d5f4:	20009f88 	.word	0x20009f88

0801d5f8 <__swhatbuf_r>:
 801d5f8:	b570      	push	{r4, r5, r6, lr}
 801d5fa:	460e      	mov	r6, r1
 801d5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d600:	2900      	cmp	r1, #0
 801d602:	b096      	sub	sp, #88	; 0x58
 801d604:	4614      	mov	r4, r2
 801d606:	461d      	mov	r5, r3
 801d608:	da08      	bge.n	801d61c <__swhatbuf_r+0x24>
 801d60a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d60e:	2200      	movs	r2, #0
 801d610:	602a      	str	r2, [r5, #0]
 801d612:	061a      	lsls	r2, r3, #24
 801d614:	d410      	bmi.n	801d638 <__swhatbuf_r+0x40>
 801d616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d61a:	e00e      	b.n	801d63a <__swhatbuf_r+0x42>
 801d61c:	466a      	mov	r2, sp
 801d61e:	f001 f843 	bl	801e6a8 <_fstat_r>
 801d622:	2800      	cmp	r0, #0
 801d624:	dbf1      	blt.n	801d60a <__swhatbuf_r+0x12>
 801d626:	9a01      	ldr	r2, [sp, #4]
 801d628:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d62c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d630:	425a      	negs	r2, r3
 801d632:	415a      	adcs	r2, r3
 801d634:	602a      	str	r2, [r5, #0]
 801d636:	e7ee      	b.n	801d616 <__swhatbuf_r+0x1e>
 801d638:	2340      	movs	r3, #64	; 0x40
 801d63a:	2000      	movs	r0, #0
 801d63c:	6023      	str	r3, [r4, #0]
 801d63e:	b016      	add	sp, #88	; 0x58
 801d640:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d644 <__smakebuf_r>:
 801d644:	898b      	ldrh	r3, [r1, #12]
 801d646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d648:	079d      	lsls	r5, r3, #30
 801d64a:	4606      	mov	r6, r0
 801d64c:	460c      	mov	r4, r1
 801d64e:	d507      	bpl.n	801d660 <__smakebuf_r+0x1c>
 801d650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d654:	6023      	str	r3, [r4, #0]
 801d656:	6123      	str	r3, [r4, #16]
 801d658:	2301      	movs	r3, #1
 801d65a:	6163      	str	r3, [r4, #20]
 801d65c:	b002      	add	sp, #8
 801d65e:	bd70      	pop	{r4, r5, r6, pc}
 801d660:	ab01      	add	r3, sp, #4
 801d662:	466a      	mov	r2, sp
 801d664:	f7ff ffc8 	bl	801d5f8 <__swhatbuf_r>
 801d668:	9900      	ldr	r1, [sp, #0]
 801d66a:	4605      	mov	r5, r0
 801d66c:	4630      	mov	r0, r6
 801d66e:	f7fc fad3 	bl	8019c18 <_malloc_r>
 801d672:	b948      	cbnz	r0, 801d688 <__smakebuf_r+0x44>
 801d674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d678:	059a      	lsls	r2, r3, #22
 801d67a:	d4ef      	bmi.n	801d65c <__smakebuf_r+0x18>
 801d67c:	f023 0303 	bic.w	r3, r3, #3
 801d680:	f043 0302 	orr.w	r3, r3, #2
 801d684:	81a3      	strh	r3, [r4, #12]
 801d686:	e7e3      	b.n	801d650 <__smakebuf_r+0xc>
 801d688:	4b0d      	ldr	r3, [pc, #52]	; (801d6c0 <__smakebuf_r+0x7c>)
 801d68a:	62b3      	str	r3, [r6, #40]	; 0x28
 801d68c:	89a3      	ldrh	r3, [r4, #12]
 801d68e:	6020      	str	r0, [r4, #0]
 801d690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d694:	81a3      	strh	r3, [r4, #12]
 801d696:	9b00      	ldr	r3, [sp, #0]
 801d698:	6163      	str	r3, [r4, #20]
 801d69a:	9b01      	ldr	r3, [sp, #4]
 801d69c:	6120      	str	r0, [r4, #16]
 801d69e:	b15b      	cbz	r3, 801d6b8 <__smakebuf_r+0x74>
 801d6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d6a4:	4630      	mov	r0, r6
 801d6a6:	f001 f811 	bl	801e6cc <_isatty_r>
 801d6aa:	b128      	cbz	r0, 801d6b8 <__smakebuf_r+0x74>
 801d6ac:	89a3      	ldrh	r3, [r4, #12]
 801d6ae:	f023 0303 	bic.w	r3, r3, #3
 801d6b2:	f043 0301 	orr.w	r3, r3, #1
 801d6b6:	81a3      	strh	r3, [r4, #12]
 801d6b8:	89a0      	ldrh	r0, [r4, #12]
 801d6ba:	4305      	orrs	r5, r0
 801d6bc:	81a5      	strh	r5, [r4, #12]
 801d6be:	e7cd      	b.n	801d65c <__smakebuf_r+0x18>
 801d6c0:	08019811 	.word	0x08019811

0801d6c4 <__ascii_mbtowc>:
 801d6c4:	b082      	sub	sp, #8
 801d6c6:	b901      	cbnz	r1, 801d6ca <__ascii_mbtowc+0x6>
 801d6c8:	a901      	add	r1, sp, #4
 801d6ca:	b142      	cbz	r2, 801d6de <__ascii_mbtowc+0x1a>
 801d6cc:	b14b      	cbz	r3, 801d6e2 <__ascii_mbtowc+0x1e>
 801d6ce:	7813      	ldrb	r3, [r2, #0]
 801d6d0:	600b      	str	r3, [r1, #0]
 801d6d2:	7812      	ldrb	r2, [r2, #0]
 801d6d4:	1e10      	subs	r0, r2, #0
 801d6d6:	bf18      	it	ne
 801d6d8:	2001      	movne	r0, #1
 801d6da:	b002      	add	sp, #8
 801d6dc:	4770      	bx	lr
 801d6de:	4610      	mov	r0, r2
 801d6e0:	e7fb      	b.n	801d6da <__ascii_mbtowc+0x16>
 801d6e2:	f06f 0001 	mvn.w	r0, #1
 801d6e6:	e7f8      	b.n	801d6da <__ascii_mbtowc+0x16>

0801d6e8 <__malloc_lock>:
 801d6e8:	4801      	ldr	r0, [pc, #4]	; (801d6f0 <__malloc_lock+0x8>)
 801d6ea:	f7fc b9d0 	b.w	8019a8e <__retarget_lock_acquire_recursive>
 801d6ee:	bf00      	nop
 801d6f0:	20009f7d 	.word	0x20009f7d

0801d6f4 <__malloc_unlock>:
 801d6f4:	4801      	ldr	r0, [pc, #4]	; (801d6fc <__malloc_unlock+0x8>)
 801d6f6:	f7fc b9cb 	b.w	8019a90 <__retarget_lock_release_recursive>
 801d6fa:	bf00      	nop
 801d6fc:	20009f7d 	.word	0x20009f7d

0801d700 <_Balloc>:
 801d700:	b570      	push	{r4, r5, r6, lr}
 801d702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d704:	4604      	mov	r4, r0
 801d706:	460d      	mov	r5, r1
 801d708:	b976      	cbnz	r6, 801d728 <_Balloc+0x28>
 801d70a:	2010      	movs	r0, #16
 801d70c:	f7fc f9c2 	bl	8019a94 <malloc>
 801d710:	4602      	mov	r2, r0
 801d712:	6260      	str	r0, [r4, #36]	; 0x24
 801d714:	b920      	cbnz	r0, 801d720 <_Balloc+0x20>
 801d716:	4b18      	ldr	r3, [pc, #96]	; (801d778 <_Balloc+0x78>)
 801d718:	4818      	ldr	r0, [pc, #96]	; (801d77c <_Balloc+0x7c>)
 801d71a:	2166      	movs	r1, #102	; 0x66
 801d71c:	f7fe fc5e 	bl	801bfdc <__assert_func>
 801d720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d724:	6006      	str	r6, [r0, #0]
 801d726:	60c6      	str	r6, [r0, #12]
 801d728:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d72a:	68f3      	ldr	r3, [r6, #12]
 801d72c:	b183      	cbz	r3, 801d750 <_Balloc+0x50>
 801d72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d730:	68db      	ldr	r3, [r3, #12]
 801d732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d736:	b9b8      	cbnz	r0, 801d768 <_Balloc+0x68>
 801d738:	2101      	movs	r1, #1
 801d73a:	fa01 f605 	lsl.w	r6, r1, r5
 801d73e:	1d72      	adds	r2, r6, #5
 801d740:	0092      	lsls	r2, r2, #2
 801d742:	4620      	mov	r0, r4
 801d744:	f7fc f9e6 	bl	8019b14 <_calloc_r>
 801d748:	b160      	cbz	r0, 801d764 <_Balloc+0x64>
 801d74a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d74e:	e00e      	b.n	801d76e <_Balloc+0x6e>
 801d750:	2221      	movs	r2, #33	; 0x21
 801d752:	2104      	movs	r1, #4
 801d754:	4620      	mov	r0, r4
 801d756:	f7fc f9dd 	bl	8019b14 <_calloc_r>
 801d75a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d75c:	60f0      	str	r0, [r6, #12]
 801d75e:	68db      	ldr	r3, [r3, #12]
 801d760:	2b00      	cmp	r3, #0
 801d762:	d1e4      	bne.n	801d72e <_Balloc+0x2e>
 801d764:	2000      	movs	r0, #0
 801d766:	bd70      	pop	{r4, r5, r6, pc}
 801d768:	6802      	ldr	r2, [r0, #0]
 801d76a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d76e:	2300      	movs	r3, #0
 801d770:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d774:	e7f7      	b.n	801d766 <_Balloc+0x66>
 801d776:	bf00      	nop
 801d778:	0801f4d1 	.word	0x0801f4d1
 801d77c:	0801f724 	.word	0x0801f724

0801d780 <_Bfree>:
 801d780:	b570      	push	{r4, r5, r6, lr}
 801d782:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d784:	4605      	mov	r5, r0
 801d786:	460c      	mov	r4, r1
 801d788:	b976      	cbnz	r6, 801d7a8 <_Bfree+0x28>
 801d78a:	2010      	movs	r0, #16
 801d78c:	f7fc f982 	bl	8019a94 <malloc>
 801d790:	4602      	mov	r2, r0
 801d792:	6268      	str	r0, [r5, #36]	; 0x24
 801d794:	b920      	cbnz	r0, 801d7a0 <_Bfree+0x20>
 801d796:	4b09      	ldr	r3, [pc, #36]	; (801d7bc <_Bfree+0x3c>)
 801d798:	4809      	ldr	r0, [pc, #36]	; (801d7c0 <_Bfree+0x40>)
 801d79a:	218a      	movs	r1, #138	; 0x8a
 801d79c:	f7fe fc1e 	bl	801bfdc <__assert_func>
 801d7a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d7a4:	6006      	str	r6, [r0, #0]
 801d7a6:	60c6      	str	r6, [r0, #12]
 801d7a8:	b13c      	cbz	r4, 801d7ba <_Bfree+0x3a>
 801d7aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d7ac:	6862      	ldr	r2, [r4, #4]
 801d7ae:	68db      	ldr	r3, [r3, #12]
 801d7b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d7b4:	6021      	str	r1, [r4, #0]
 801d7b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d7ba:	bd70      	pop	{r4, r5, r6, pc}
 801d7bc:	0801f4d1 	.word	0x0801f4d1
 801d7c0:	0801f724 	.word	0x0801f724

0801d7c4 <__multadd>:
 801d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7c8:	690d      	ldr	r5, [r1, #16]
 801d7ca:	4607      	mov	r7, r0
 801d7cc:	460c      	mov	r4, r1
 801d7ce:	461e      	mov	r6, r3
 801d7d0:	f101 0c14 	add.w	ip, r1, #20
 801d7d4:	2000      	movs	r0, #0
 801d7d6:	f8dc 3000 	ldr.w	r3, [ip]
 801d7da:	b299      	uxth	r1, r3
 801d7dc:	fb02 6101 	mla	r1, r2, r1, r6
 801d7e0:	0c1e      	lsrs	r6, r3, #16
 801d7e2:	0c0b      	lsrs	r3, r1, #16
 801d7e4:	fb02 3306 	mla	r3, r2, r6, r3
 801d7e8:	b289      	uxth	r1, r1
 801d7ea:	3001      	adds	r0, #1
 801d7ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d7f0:	4285      	cmp	r5, r0
 801d7f2:	f84c 1b04 	str.w	r1, [ip], #4
 801d7f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d7fa:	dcec      	bgt.n	801d7d6 <__multadd+0x12>
 801d7fc:	b30e      	cbz	r6, 801d842 <__multadd+0x7e>
 801d7fe:	68a3      	ldr	r3, [r4, #8]
 801d800:	42ab      	cmp	r3, r5
 801d802:	dc19      	bgt.n	801d838 <__multadd+0x74>
 801d804:	6861      	ldr	r1, [r4, #4]
 801d806:	4638      	mov	r0, r7
 801d808:	3101      	adds	r1, #1
 801d80a:	f7ff ff79 	bl	801d700 <_Balloc>
 801d80e:	4680      	mov	r8, r0
 801d810:	b928      	cbnz	r0, 801d81e <__multadd+0x5a>
 801d812:	4602      	mov	r2, r0
 801d814:	4b0c      	ldr	r3, [pc, #48]	; (801d848 <__multadd+0x84>)
 801d816:	480d      	ldr	r0, [pc, #52]	; (801d84c <__multadd+0x88>)
 801d818:	21b5      	movs	r1, #181	; 0xb5
 801d81a:	f7fe fbdf 	bl	801bfdc <__assert_func>
 801d81e:	6922      	ldr	r2, [r4, #16]
 801d820:	3202      	adds	r2, #2
 801d822:	f104 010c 	add.w	r1, r4, #12
 801d826:	0092      	lsls	r2, r2, #2
 801d828:	300c      	adds	r0, #12
 801d82a:	f7fc f943 	bl	8019ab4 <memcpy>
 801d82e:	4621      	mov	r1, r4
 801d830:	4638      	mov	r0, r7
 801d832:	f7ff ffa5 	bl	801d780 <_Bfree>
 801d836:	4644      	mov	r4, r8
 801d838:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d83c:	3501      	adds	r5, #1
 801d83e:	615e      	str	r6, [r3, #20]
 801d840:	6125      	str	r5, [r4, #16]
 801d842:	4620      	mov	r0, r4
 801d844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d848:	0801f699 	.word	0x0801f699
 801d84c:	0801f724 	.word	0x0801f724

0801d850 <__s2b>:
 801d850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d854:	460c      	mov	r4, r1
 801d856:	4615      	mov	r5, r2
 801d858:	461f      	mov	r7, r3
 801d85a:	2209      	movs	r2, #9
 801d85c:	3308      	adds	r3, #8
 801d85e:	4606      	mov	r6, r0
 801d860:	fb93 f3f2 	sdiv	r3, r3, r2
 801d864:	2100      	movs	r1, #0
 801d866:	2201      	movs	r2, #1
 801d868:	429a      	cmp	r2, r3
 801d86a:	db09      	blt.n	801d880 <__s2b+0x30>
 801d86c:	4630      	mov	r0, r6
 801d86e:	f7ff ff47 	bl	801d700 <_Balloc>
 801d872:	b940      	cbnz	r0, 801d886 <__s2b+0x36>
 801d874:	4602      	mov	r2, r0
 801d876:	4b19      	ldr	r3, [pc, #100]	; (801d8dc <__s2b+0x8c>)
 801d878:	4819      	ldr	r0, [pc, #100]	; (801d8e0 <__s2b+0x90>)
 801d87a:	21ce      	movs	r1, #206	; 0xce
 801d87c:	f7fe fbae 	bl	801bfdc <__assert_func>
 801d880:	0052      	lsls	r2, r2, #1
 801d882:	3101      	adds	r1, #1
 801d884:	e7f0      	b.n	801d868 <__s2b+0x18>
 801d886:	9b08      	ldr	r3, [sp, #32]
 801d888:	6143      	str	r3, [r0, #20]
 801d88a:	2d09      	cmp	r5, #9
 801d88c:	f04f 0301 	mov.w	r3, #1
 801d890:	6103      	str	r3, [r0, #16]
 801d892:	dd16      	ble.n	801d8c2 <__s2b+0x72>
 801d894:	f104 0909 	add.w	r9, r4, #9
 801d898:	46c8      	mov	r8, r9
 801d89a:	442c      	add	r4, r5
 801d89c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d8a0:	4601      	mov	r1, r0
 801d8a2:	3b30      	subs	r3, #48	; 0x30
 801d8a4:	220a      	movs	r2, #10
 801d8a6:	4630      	mov	r0, r6
 801d8a8:	f7ff ff8c 	bl	801d7c4 <__multadd>
 801d8ac:	45a0      	cmp	r8, r4
 801d8ae:	d1f5      	bne.n	801d89c <__s2b+0x4c>
 801d8b0:	f1a5 0408 	sub.w	r4, r5, #8
 801d8b4:	444c      	add	r4, r9
 801d8b6:	1b2d      	subs	r5, r5, r4
 801d8b8:	1963      	adds	r3, r4, r5
 801d8ba:	42bb      	cmp	r3, r7
 801d8bc:	db04      	blt.n	801d8c8 <__s2b+0x78>
 801d8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8c2:	340a      	adds	r4, #10
 801d8c4:	2509      	movs	r5, #9
 801d8c6:	e7f6      	b.n	801d8b6 <__s2b+0x66>
 801d8c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d8cc:	4601      	mov	r1, r0
 801d8ce:	3b30      	subs	r3, #48	; 0x30
 801d8d0:	220a      	movs	r2, #10
 801d8d2:	4630      	mov	r0, r6
 801d8d4:	f7ff ff76 	bl	801d7c4 <__multadd>
 801d8d8:	e7ee      	b.n	801d8b8 <__s2b+0x68>
 801d8da:	bf00      	nop
 801d8dc:	0801f699 	.word	0x0801f699
 801d8e0:	0801f724 	.word	0x0801f724

0801d8e4 <__hi0bits>:
 801d8e4:	0c03      	lsrs	r3, r0, #16
 801d8e6:	041b      	lsls	r3, r3, #16
 801d8e8:	b9d3      	cbnz	r3, 801d920 <__hi0bits+0x3c>
 801d8ea:	0400      	lsls	r0, r0, #16
 801d8ec:	2310      	movs	r3, #16
 801d8ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d8f2:	bf04      	itt	eq
 801d8f4:	0200      	lsleq	r0, r0, #8
 801d8f6:	3308      	addeq	r3, #8
 801d8f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d8fc:	bf04      	itt	eq
 801d8fe:	0100      	lsleq	r0, r0, #4
 801d900:	3304      	addeq	r3, #4
 801d902:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d906:	bf04      	itt	eq
 801d908:	0080      	lsleq	r0, r0, #2
 801d90a:	3302      	addeq	r3, #2
 801d90c:	2800      	cmp	r0, #0
 801d90e:	db05      	blt.n	801d91c <__hi0bits+0x38>
 801d910:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d914:	f103 0301 	add.w	r3, r3, #1
 801d918:	bf08      	it	eq
 801d91a:	2320      	moveq	r3, #32
 801d91c:	4618      	mov	r0, r3
 801d91e:	4770      	bx	lr
 801d920:	2300      	movs	r3, #0
 801d922:	e7e4      	b.n	801d8ee <__hi0bits+0xa>

0801d924 <__lo0bits>:
 801d924:	6803      	ldr	r3, [r0, #0]
 801d926:	f013 0207 	ands.w	r2, r3, #7
 801d92a:	4601      	mov	r1, r0
 801d92c:	d00b      	beq.n	801d946 <__lo0bits+0x22>
 801d92e:	07da      	lsls	r2, r3, #31
 801d930:	d423      	bmi.n	801d97a <__lo0bits+0x56>
 801d932:	0798      	lsls	r0, r3, #30
 801d934:	bf49      	itett	mi
 801d936:	085b      	lsrmi	r3, r3, #1
 801d938:	089b      	lsrpl	r3, r3, #2
 801d93a:	2001      	movmi	r0, #1
 801d93c:	600b      	strmi	r3, [r1, #0]
 801d93e:	bf5c      	itt	pl
 801d940:	600b      	strpl	r3, [r1, #0]
 801d942:	2002      	movpl	r0, #2
 801d944:	4770      	bx	lr
 801d946:	b298      	uxth	r0, r3
 801d948:	b9a8      	cbnz	r0, 801d976 <__lo0bits+0x52>
 801d94a:	0c1b      	lsrs	r3, r3, #16
 801d94c:	2010      	movs	r0, #16
 801d94e:	b2da      	uxtb	r2, r3
 801d950:	b90a      	cbnz	r2, 801d956 <__lo0bits+0x32>
 801d952:	3008      	adds	r0, #8
 801d954:	0a1b      	lsrs	r3, r3, #8
 801d956:	071a      	lsls	r2, r3, #28
 801d958:	bf04      	itt	eq
 801d95a:	091b      	lsreq	r3, r3, #4
 801d95c:	3004      	addeq	r0, #4
 801d95e:	079a      	lsls	r2, r3, #30
 801d960:	bf04      	itt	eq
 801d962:	089b      	lsreq	r3, r3, #2
 801d964:	3002      	addeq	r0, #2
 801d966:	07da      	lsls	r2, r3, #31
 801d968:	d403      	bmi.n	801d972 <__lo0bits+0x4e>
 801d96a:	085b      	lsrs	r3, r3, #1
 801d96c:	f100 0001 	add.w	r0, r0, #1
 801d970:	d005      	beq.n	801d97e <__lo0bits+0x5a>
 801d972:	600b      	str	r3, [r1, #0]
 801d974:	4770      	bx	lr
 801d976:	4610      	mov	r0, r2
 801d978:	e7e9      	b.n	801d94e <__lo0bits+0x2a>
 801d97a:	2000      	movs	r0, #0
 801d97c:	4770      	bx	lr
 801d97e:	2020      	movs	r0, #32
 801d980:	4770      	bx	lr
	...

0801d984 <__i2b>:
 801d984:	b510      	push	{r4, lr}
 801d986:	460c      	mov	r4, r1
 801d988:	2101      	movs	r1, #1
 801d98a:	f7ff feb9 	bl	801d700 <_Balloc>
 801d98e:	4602      	mov	r2, r0
 801d990:	b928      	cbnz	r0, 801d99e <__i2b+0x1a>
 801d992:	4b05      	ldr	r3, [pc, #20]	; (801d9a8 <__i2b+0x24>)
 801d994:	4805      	ldr	r0, [pc, #20]	; (801d9ac <__i2b+0x28>)
 801d996:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d99a:	f7fe fb1f 	bl	801bfdc <__assert_func>
 801d99e:	2301      	movs	r3, #1
 801d9a0:	6144      	str	r4, [r0, #20]
 801d9a2:	6103      	str	r3, [r0, #16]
 801d9a4:	bd10      	pop	{r4, pc}
 801d9a6:	bf00      	nop
 801d9a8:	0801f699 	.word	0x0801f699
 801d9ac:	0801f724 	.word	0x0801f724

0801d9b0 <__multiply>:
 801d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9b4:	4691      	mov	r9, r2
 801d9b6:	690a      	ldr	r2, [r1, #16]
 801d9b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d9bc:	429a      	cmp	r2, r3
 801d9be:	bfb8      	it	lt
 801d9c0:	460b      	movlt	r3, r1
 801d9c2:	460c      	mov	r4, r1
 801d9c4:	bfbc      	itt	lt
 801d9c6:	464c      	movlt	r4, r9
 801d9c8:	4699      	movlt	r9, r3
 801d9ca:	6927      	ldr	r7, [r4, #16]
 801d9cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d9d0:	68a3      	ldr	r3, [r4, #8]
 801d9d2:	6861      	ldr	r1, [r4, #4]
 801d9d4:	eb07 060a 	add.w	r6, r7, sl
 801d9d8:	42b3      	cmp	r3, r6
 801d9da:	b085      	sub	sp, #20
 801d9dc:	bfb8      	it	lt
 801d9de:	3101      	addlt	r1, #1
 801d9e0:	f7ff fe8e 	bl	801d700 <_Balloc>
 801d9e4:	b930      	cbnz	r0, 801d9f4 <__multiply+0x44>
 801d9e6:	4602      	mov	r2, r0
 801d9e8:	4b44      	ldr	r3, [pc, #272]	; (801dafc <__multiply+0x14c>)
 801d9ea:	4845      	ldr	r0, [pc, #276]	; (801db00 <__multiply+0x150>)
 801d9ec:	f240 115d 	movw	r1, #349	; 0x15d
 801d9f0:	f7fe faf4 	bl	801bfdc <__assert_func>
 801d9f4:	f100 0514 	add.w	r5, r0, #20
 801d9f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d9fc:	462b      	mov	r3, r5
 801d9fe:	2200      	movs	r2, #0
 801da00:	4543      	cmp	r3, r8
 801da02:	d321      	bcc.n	801da48 <__multiply+0x98>
 801da04:	f104 0314 	add.w	r3, r4, #20
 801da08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801da0c:	f109 0314 	add.w	r3, r9, #20
 801da10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801da14:	9202      	str	r2, [sp, #8]
 801da16:	1b3a      	subs	r2, r7, r4
 801da18:	3a15      	subs	r2, #21
 801da1a:	f022 0203 	bic.w	r2, r2, #3
 801da1e:	3204      	adds	r2, #4
 801da20:	f104 0115 	add.w	r1, r4, #21
 801da24:	428f      	cmp	r7, r1
 801da26:	bf38      	it	cc
 801da28:	2204      	movcc	r2, #4
 801da2a:	9201      	str	r2, [sp, #4]
 801da2c:	9a02      	ldr	r2, [sp, #8]
 801da2e:	9303      	str	r3, [sp, #12]
 801da30:	429a      	cmp	r2, r3
 801da32:	d80c      	bhi.n	801da4e <__multiply+0x9e>
 801da34:	2e00      	cmp	r6, #0
 801da36:	dd03      	ble.n	801da40 <__multiply+0x90>
 801da38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d05a      	beq.n	801daf6 <__multiply+0x146>
 801da40:	6106      	str	r6, [r0, #16]
 801da42:	b005      	add	sp, #20
 801da44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da48:	f843 2b04 	str.w	r2, [r3], #4
 801da4c:	e7d8      	b.n	801da00 <__multiply+0x50>
 801da4e:	f8b3 a000 	ldrh.w	sl, [r3]
 801da52:	f1ba 0f00 	cmp.w	sl, #0
 801da56:	d024      	beq.n	801daa2 <__multiply+0xf2>
 801da58:	f104 0e14 	add.w	lr, r4, #20
 801da5c:	46a9      	mov	r9, r5
 801da5e:	f04f 0c00 	mov.w	ip, #0
 801da62:	f85e 2b04 	ldr.w	r2, [lr], #4
 801da66:	f8d9 1000 	ldr.w	r1, [r9]
 801da6a:	fa1f fb82 	uxth.w	fp, r2
 801da6e:	b289      	uxth	r1, r1
 801da70:	fb0a 110b 	mla	r1, sl, fp, r1
 801da74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801da78:	f8d9 2000 	ldr.w	r2, [r9]
 801da7c:	4461      	add	r1, ip
 801da7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801da82:	fb0a c20b 	mla	r2, sl, fp, ip
 801da86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801da8a:	b289      	uxth	r1, r1
 801da8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801da90:	4577      	cmp	r7, lr
 801da92:	f849 1b04 	str.w	r1, [r9], #4
 801da96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801da9a:	d8e2      	bhi.n	801da62 <__multiply+0xb2>
 801da9c:	9a01      	ldr	r2, [sp, #4]
 801da9e:	f845 c002 	str.w	ip, [r5, r2]
 801daa2:	9a03      	ldr	r2, [sp, #12]
 801daa4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801daa8:	3304      	adds	r3, #4
 801daaa:	f1b9 0f00 	cmp.w	r9, #0
 801daae:	d020      	beq.n	801daf2 <__multiply+0x142>
 801dab0:	6829      	ldr	r1, [r5, #0]
 801dab2:	f104 0c14 	add.w	ip, r4, #20
 801dab6:	46ae      	mov	lr, r5
 801dab8:	f04f 0a00 	mov.w	sl, #0
 801dabc:	f8bc b000 	ldrh.w	fp, [ip]
 801dac0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801dac4:	fb09 220b 	mla	r2, r9, fp, r2
 801dac8:	4492      	add	sl, r2
 801daca:	b289      	uxth	r1, r1
 801dacc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801dad0:	f84e 1b04 	str.w	r1, [lr], #4
 801dad4:	f85c 2b04 	ldr.w	r2, [ip], #4
 801dad8:	f8be 1000 	ldrh.w	r1, [lr]
 801dadc:	0c12      	lsrs	r2, r2, #16
 801dade:	fb09 1102 	mla	r1, r9, r2, r1
 801dae2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801dae6:	4567      	cmp	r7, ip
 801dae8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801daec:	d8e6      	bhi.n	801dabc <__multiply+0x10c>
 801daee:	9a01      	ldr	r2, [sp, #4]
 801daf0:	50a9      	str	r1, [r5, r2]
 801daf2:	3504      	adds	r5, #4
 801daf4:	e79a      	b.n	801da2c <__multiply+0x7c>
 801daf6:	3e01      	subs	r6, #1
 801daf8:	e79c      	b.n	801da34 <__multiply+0x84>
 801dafa:	bf00      	nop
 801dafc:	0801f699 	.word	0x0801f699
 801db00:	0801f724 	.word	0x0801f724

0801db04 <__pow5mult>:
 801db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db08:	4615      	mov	r5, r2
 801db0a:	f012 0203 	ands.w	r2, r2, #3
 801db0e:	4606      	mov	r6, r0
 801db10:	460f      	mov	r7, r1
 801db12:	d007      	beq.n	801db24 <__pow5mult+0x20>
 801db14:	4c25      	ldr	r4, [pc, #148]	; (801dbac <__pow5mult+0xa8>)
 801db16:	3a01      	subs	r2, #1
 801db18:	2300      	movs	r3, #0
 801db1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801db1e:	f7ff fe51 	bl	801d7c4 <__multadd>
 801db22:	4607      	mov	r7, r0
 801db24:	10ad      	asrs	r5, r5, #2
 801db26:	d03d      	beq.n	801dba4 <__pow5mult+0xa0>
 801db28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801db2a:	b97c      	cbnz	r4, 801db4c <__pow5mult+0x48>
 801db2c:	2010      	movs	r0, #16
 801db2e:	f7fb ffb1 	bl	8019a94 <malloc>
 801db32:	4602      	mov	r2, r0
 801db34:	6270      	str	r0, [r6, #36]	; 0x24
 801db36:	b928      	cbnz	r0, 801db44 <__pow5mult+0x40>
 801db38:	4b1d      	ldr	r3, [pc, #116]	; (801dbb0 <__pow5mult+0xac>)
 801db3a:	481e      	ldr	r0, [pc, #120]	; (801dbb4 <__pow5mult+0xb0>)
 801db3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801db40:	f7fe fa4c 	bl	801bfdc <__assert_func>
 801db44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801db48:	6004      	str	r4, [r0, #0]
 801db4a:	60c4      	str	r4, [r0, #12]
 801db4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801db50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801db54:	b94c      	cbnz	r4, 801db6a <__pow5mult+0x66>
 801db56:	f240 2171 	movw	r1, #625	; 0x271
 801db5a:	4630      	mov	r0, r6
 801db5c:	f7ff ff12 	bl	801d984 <__i2b>
 801db60:	2300      	movs	r3, #0
 801db62:	f8c8 0008 	str.w	r0, [r8, #8]
 801db66:	4604      	mov	r4, r0
 801db68:	6003      	str	r3, [r0, #0]
 801db6a:	f04f 0900 	mov.w	r9, #0
 801db6e:	07eb      	lsls	r3, r5, #31
 801db70:	d50a      	bpl.n	801db88 <__pow5mult+0x84>
 801db72:	4639      	mov	r1, r7
 801db74:	4622      	mov	r2, r4
 801db76:	4630      	mov	r0, r6
 801db78:	f7ff ff1a 	bl	801d9b0 <__multiply>
 801db7c:	4639      	mov	r1, r7
 801db7e:	4680      	mov	r8, r0
 801db80:	4630      	mov	r0, r6
 801db82:	f7ff fdfd 	bl	801d780 <_Bfree>
 801db86:	4647      	mov	r7, r8
 801db88:	106d      	asrs	r5, r5, #1
 801db8a:	d00b      	beq.n	801dba4 <__pow5mult+0xa0>
 801db8c:	6820      	ldr	r0, [r4, #0]
 801db8e:	b938      	cbnz	r0, 801dba0 <__pow5mult+0x9c>
 801db90:	4622      	mov	r2, r4
 801db92:	4621      	mov	r1, r4
 801db94:	4630      	mov	r0, r6
 801db96:	f7ff ff0b 	bl	801d9b0 <__multiply>
 801db9a:	6020      	str	r0, [r4, #0]
 801db9c:	f8c0 9000 	str.w	r9, [r0]
 801dba0:	4604      	mov	r4, r0
 801dba2:	e7e4      	b.n	801db6e <__pow5mult+0x6a>
 801dba4:	4638      	mov	r0, r7
 801dba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbaa:	bf00      	nop
 801dbac:	0801f870 	.word	0x0801f870
 801dbb0:	0801f4d1 	.word	0x0801f4d1
 801dbb4:	0801f724 	.word	0x0801f724

0801dbb8 <__lshift>:
 801dbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbbc:	460c      	mov	r4, r1
 801dbbe:	6849      	ldr	r1, [r1, #4]
 801dbc0:	6923      	ldr	r3, [r4, #16]
 801dbc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dbc6:	68a3      	ldr	r3, [r4, #8]
 801dbc8:	4607      	mov	r7, r0
 801dbca:	4691      	mov	r9, r2
 801dbcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dbd0:	f108 0601 	add.w	r6, r8, #1
 801dbd4:	42b3      	cmp	r3, r6
 801dbd6:	db0b      	blt.n	801dbf0 <__lshift+0x38>
 801dbd8:	4638      	mov	r0, r7
 801dbda:	f7ff fd91 	bl	801d700 <_Balloc>
 801dbde:	4605      	mov	r5, r0
 801dbe0:	b948      	cbnz	r0, 801dbf6 <__lshift+0x3e>
 801dbe2:	4602      	mov	r2, r0
 801dbe4:	4b2a      	ldr	r3, [pc, #168]	; (801dc90 <__lshift+0xd8>)
 801dbe6:	482b      	ldr	r0, [pc, #172]	; (801dc94 <__lshift+0xdc>)
 801dbe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801dbec:	f7fe f9f6 	bl	801bfdc <__assert_func>
 801dbf0:	3101      	adds	r1, #1
 801dbf2:	005b      	lsls	r3, r3, #1
 801dbf4:	e7ee      	b.n	801dbd4 <__lshift+0x1c>
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	f100 0114 	add.w	r1, r0, #20
 801dbfc:	f100 0210 	add.w	r2, r0, #16
 801dc00:	4618      	mov	r0, r3
 801dc02:	4553      	cmp	r3, sl
 801dc04:	db37      	blt.n	801dc76 <__lshift+0xbe>
 801dc06:	6920      	ldr	r0, [r4, #16]
 801dc08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dc0c:	f104 0314 	add.w	r3, r4, #20
 801dc10:	f019 091f 	ands.w	r9, r9, #31
 801dc14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dc18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801dc1c:	d02f      	beq.n	801dc7e <__lshift+0xc6>
 801dc1e:	f1c9 0e20 	rsb	lr, r9, #32
 801dc22:	468a      	mov	sl, r1
 801dc24:	f04f 0c00 	mov.w	ip, #0
 801dc28:	681a      	ldr	r2, [r3, #0]
 801dc2a:	fa02 f209 	lsl.w	r2, r2, r9
 801dc2e:	ea42 020c 	orr.w	r2, r2, ip
 801dc32:	f84a 2b04 	str.w	r2, [sl], #4
 801dc36:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc3a:	4298      	cmp	r0, r3
 801dc3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801dc40:	d8f2      	bhi.n	801dc28 <__lshift+0x70>
 801dc42:	1b03      	subs	r3, r0, r4
 801dc44:	3b15      	subs	r3, #21
 801dc46:	f023 0303 	bic.w	r3, r3, #3
 801dc4a:	3304      	adds	r3, #4
 801dc4c:	f104 0215 	add.w	r2, r4, #21
 801dc50:	4290      	cmp	r0, r2
 801dc52:	bf38      	it	cc
 801dc54:	2304      	movcc	r3, #4
 801dc56:	f841 c003 	str.w	ip, [r1, r3]
 801dc5a:	f1bc 0f00 	cmp.w	ip, #0
 801dc5e:	d001      	beq.n	801dc64 <__lshift+0xac>
 801dc60:	f108 0602 	add.w	r6, r8, #2
 801dc64:	3e01      	subs	r6, #1
 801dc66:	4638      	mov	r0, r7
 801dc68:	612e      	str	r6, [r5, #16]
 801dc6a:	4621      	mov	r1, r4
 801dc6c:	f7ff fd88 	bl	801d780 <_Bfree>
 801dc70:	4628      	mov	r0, r5
 801dc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc76:	f842 0f04 	str.w	r0, [r2, #4]!
 801dc7a:	3301      	adds	r3, #1
 801dc7c:	e7c1      	b.n	801dc02 <__lshift+0x4a>
 801dc7e:	3904      	subs	r1, #4
 801dc80:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc84:	f841 2f04 	str.w	r2, [r1, #4]!
 801dc88:	4298      	cmp	r0, r3
 801dc8a:	d8f9      	bhi.n	801dc80 <__lshift+0xc8>
 801dc8c:	e7ea      	b.n	801dc64 <__lshift+0xac>
 801dc8e:	bf00      	nop
 801dc90:	0801f699 	.word	0x0801f699
 801dc94:	0801f724 	.word	0x0801f724

0801dc98 <__mcmp>:
 801dc98:	b530      	push	{r4, r5, lr}
 801dc9a:	6902      	ldr	r2, [r0, #16]
 801dc9c:	690c      	ldr	r4, [r1, #16]
 801dc9e:	1b12      	subs	r2, r2, r4
 801dca0:	d10e      	bne.n	801dcc0 <__mcmp+0x28>
 801dca2:	f100 0314 	add.w	r3, r0, #20
 801dca6:	3114      	adds	r1, #20
 801dca8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801dcac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801dcb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801dcb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801dcb8:	42a5      	cmp	r5, r4
 801dcba:	d003      	beq.n	801dcc4 <__mcmp+0x2c>
 801dcbc:	d305      	bcc.n	801dcca <__mcmp+0x32>
 801dcbe:	2201      	movs	r2, #1
 801dcc0:	4610      	mov	r0, r2
 801dcc2:	bd30      	pop	{r4, r5, pc}
 801dcc4:	4283      	cmp	r3, r0
 801dcc6:	d3f3      	bcc.n	801dcb0 <__mcmp+0x18>
 801dcc8:	e7fa      	b.n	801dcc0 <__mcmp+0x28>
 801dcca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dcce:	e7f7      	b.n	801dcc0 <__mcmp+0x28>

0801dcd0 <__mdiff>:
 801dcd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcd4:	460c      	mov	r4, r1
 801dcd6:	4606      	mov	r6, r0
 801dcd8:	4611      	mov	r1, r2
 801dcda:	4620      	mov	r0, r4
 801dcdc:	4690      	mov	r8, r2
 801dcde:	f7ff ffdb 	bl	801dc98 <__mcmp>
 801dce2:	1e05      	subs	r5, r0, #0
 801dce4:	d110      	bne.n	801dd08 <__mdiff+0x38>
 801dce6:	4629      	mov	r1, r5
 801dce8:	4630      	mov	r0, r6
 801dcea:	f7ff fd09 	bl	801d700 <_Balloc>
 801dcee:	b930      	cbnz	r0, 801dcfe <__mdiff+0x2e>
 801dcf0:	4b3a      	ldr	r3, [pc, #232]	; (801dddc <__mdiff+0x10c>)
 801dcf2:	4602      	mov	r2, r0
 801dcf4:	f240 2132 	movw	r1, #562	; 0x232
 801dcf8:	4839      	ldr	r0, [pc, #228]	; (801dde0 <__mdiff+0x110>)
 801dcfa:	f7fe f96f 	bl	801bfdc <__assert_func>
 801dcfe:	2301      	movs	r3, #1
 801dd00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dd04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd08:	bfa4      	itt	ge
 801dd0a:	4643      	movge	r3, r8
 801dd0c:	46a0      	movge	r8, r4
 801dd0e:	4630      	mov	r0, r6
 801dd10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dd14:	bfa6      	itte	ge
 801dd16:	461c      	movge	r4, r3
 801dd18:	2500      	movge	r5, #0
 801dd1a:	2501      	movlt	r5, #1
 801dd1c:	f7ff fcf0 	bl	801d700 <_Balloc>
 801dd20:	b920      	cbnz	r0, 801dd2c <__mdiff+0x5c>
 801dd22:	4b2e      	ldr	r3, [pc, #184]	; (801dddc <__mdiff+0x10c>)
 801dd24:	4602      	mov	r2, r0
 801dd26:	f44f 7110 	mov.w	r1, #576	; 0x240
 801dd2a:	e7e5      	b.n	801dcf8 <__mdiff+0x28>
 801dd2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801dd30:	6926      	ldr	r6, [r4, #16]
 801dd32:	60c5      	str	r5, [r0, #12]
 801dd34:	f104 0914 	add.w	r9, r4, #20
 801dd38:	f108 0514 	add.w	r5, r8, #20
 801dd3c:	f100 0e14 	add.w	lr, r0, #20
 801dd40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801dd44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801dd48:	f108 0210 	add.w	r2, r8, #16
 801dd4c:	46f2      	mov	sl, lr
 801dd4e:	2100      	movs	r1, #0
 801dd50:	f859 3b04 	ldr.w	r3, [r9], #4
 801dd54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801dd58:	fa1f f883 	uxth.w	r8, r3
 801dd5c:	fa11 f18b 	uxtah	r1, r1, fp
 801dd60:	0c1b      	lsrs	r3, r3, #16
 801dd62:	eba1 0808 	sub.w	r8, r1, r8
 801dd66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801dd6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801dd6e:	fa1f f888 	uxth.w	r8, r8
 801dd72:	1419      	asrs	r1, r3, #16
 801dd74:	454e      	cmp	r6, r9
 801dd76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801dd7a:	f84a 3b04 	str.w	r3, [sl], #4
 801dd7e:	d8e7      	bhi.n	801dd50 <__mdiff+0x80>
 801dd80:	1b33      	subs	r3, r6, r4
 801dd82:	3b15      	subs	r3, #21
 801dd84:	f023 0303 	bic.w	r3, r3, #3
 801dd88:	3304      	adds	r3, #4
 801dd8a:	3415      	adds	r4, #21
 801dd8c:	42a6      	cmp	r6, r4
 801dd8e:	bf38      	it	cc
 801dd90:	2304      	movcc	r3, #4
 801dd92:	441d      	add	r5, r3
 801dd94:	4473      	add	r3, lr
 801dd96:	469e      	mov	lr, r3
 801dd98:	462e      	mov	r6, r5
 801dd9a:	4566      	cmp	r6, ip
 801dd9c:	d30e      	bcc.n	801ddbc <__mdiff+0xec>
 801dd9e:	f10c 0203 	add.w	r2, ip, #3
 801dda2:	1b52      	subs	r2, r2, r5
 801dda4:	f022 0203 	bic.w	r2, r2, #3
 801dda8:	3d03      	subs	r5, #3
 801ddaa:	45ac      	cmp	ip, r5
 801ddac:	bf38      	it	cc
 801ddae:	2200      	movcc	r2, #0
 801ddb0:	441a      	add	r2, r3
 801ddb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ddb6:	b17b      	cbz	r3, 801ddd8 <__mdiff+0x108>
 801ddb8:	6107      	str	r7, [r0, #16]
 801ddba:	e7a3      	b.n	801dd04 <__mdiff+0x34>
 801ddbc:	f856 8b04 	ldr.w	r8, [r6], #4
 801ddc0:	fa11 f288 	uxtah	r2, r1, r8
 801ddc4:	1414      	asrs	r4, r2, #16
 801ddc6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ddca:	b292      	uxth	r2, r2
 801ddcc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ddd0:	f84e 2b04 	str.w	r2, [lr], #4
 801ddd4:	1421      	asrs	r1, r4, #16
 801ddd6:	e7e0      	b.n	801dd9a <__mdiff+0xca>
 801ddd8:	3f01      	subs	r7, #1
 801ddda:	e7ea      	b.n	801ddb2 <__mdiff+0xe2>
 801dddc:	0801f699 	.word	0x0801f699
 801dde0:	0801f724 	.word	0x0801f724

0801dde4 <__ulp>:
 801dde4:	b082      	sub	sp, #8
 801dde6:	ed8d 0b00 	vstr	d0, [sp]
 801ddea:	9b01      	ldr	r3, [sp, #4]
 801ddec:	4912      	ldr	r1, [pc, #72]	; (801de38 <__ulp+0x54>)
 801ddee:	4019      	ands	r1, r3
 801ddf0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ddf4:	2900      	cmp	r1, #0
 801ddf6:	dd05      	ble.n	801de04 <__ulp+0x20>
 801ddf8:	2200      	movs	r2, #0
 801ddfa:	460b      	mov	r3, r1
 801ddfc:	ec43 2b10 	vmov	d0, r2, r3
 801de00:	b002      	add	sp, #8
 801de02:	4770      	bx	lr
 801de04:	4249      	negs	r1, r1
 801de06:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801de0a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801de0e:	f04f 0200 	mov.w	r2, #0
 801de12:	f04f 0300 	mov.w	r3, #0
 801de16:	da04      	bge.n	801de22 <__ulp+0x3e>
 801de18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801de1c:	fa41 f300 	asr.w	r3, r1, r0
 801de20:	e7ec      	b.n	801ddfc <__ulp+0x18>
 801de22:	f1a0 0114 	sub.w	r1, r0, #20
 801de26:	291e      	cmp	r1, #30
 801de28:	bfda      	itte	le
 801de2a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801de2e:	fa20 f101 	lsrle.w	r1, r0, r1
 801de32:	2101      	movgt	r1, #1
 801de34:	460a      	mov	r2, r1
 801de36:	e7e1      	b.n	801ddfc <__ulp+0x18>
 801de38:	7ff00000 	.word	0x7ff00000

0801de3c <__b2d>:
 801de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de3e:	6905      	ldr	r5, [r0, #16]
 801de40:	f100 0714 	add.w	r7, r0, #20
 801de44:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801de48:	1f2e      	subs	r6, r5, #4
 801de4a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801de4e:	4620      	mov	r0, r4
 801de50:	f7ff fd48 	bl	801d8e4 <__hi0bits>
 801de54:	f1c0 0320 	rsb	r3, r0, #32
 801de58:	280a      	cmp	r0, #10
 801de5a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801ded8 <__b2d+0x9c>
 801de5e:	600b      	str	r3, [r1, #0]
 801de60:	dc14      	bgt.n	801de8c <__b2d+0x50>
 801de62:	f1c0 0e0b 	rsb	lr, r0, #11
 801de66:	fa24 f10e 	lsr.w	r1, r4, lr
 801de6a:	42b7      	cmp	r7, r6
 801de6c:	ea41 030c 	orr.w	r3, r1, ip
 801de70:	bf34      	ite	cc
 801de72:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801de76:	2100      	movcs	r1, #0
 801de78:	3015      	adds	r0, #21
 801de7a:	fa04 f000 	lsl.w	r0, r4, r0
 801de7e:	fa21 f10e 	lsr.w	r1, r1, lr
 801de82:	ea40 0201 	orr.w	r2, r0, r1
 801de86:	ec43 2b10 	vmov	d0, r2, r3
 801de8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de8c:	42b7      	cmp	r7, r6
 801de8e:	bf3a      	itte	cc
 801de90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801de94:	f1a5 0608 	subcc.w	r6, r5, #8
 801de98:	2100      	movcs	r1, #0
 801de9a:	380b      	subs	r0, #11
 801de9c:	d017      	beq.n	801dece <__b2d+0x92>
 801de9e:	f1c0 0c20 	rsb	ip, r0, #32
 801dea2:	fa04 f500 	lsl.w	r5, r4, r0
 801dea6:	42be      	cmp	r6, r7
 801dea8:	fa21 f40c 	lsr.w	r4, r1, ip
 801deac:	ea45 0504 	orr.w	r5, r5, r4
 801deb0:	bf8c      	ite	hi
 801deb2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801deb6:	2400      	movls	r4, #0
 801deb8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801debc:	fa01 f000 	lsl.w	r0, r1, r0
 801dec0:	fa24 f40c 	lsr.w	r4, r4, ip
 801dec4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801dec8:	ea40 0204 	orr.w	r2, r0, r4
 801decc:	e7db      	b.n	801de86 <__b2d+0x4a>
 801dece:	ea44 030c 	orr.w	r3, r4, ip
 801ded2:	460a      	mov	r2, r1
 801ded4:	e7d7      	b.n	801de86 <__b2d+0x4a>
 801ded6:	bf00      	nop
 801ded8:	3ff00000 	.word	0x3ff00000

0801dedc <__d2b>:
 801dedc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dee0:	4689      	mov	r9, r1
 801dee2:	2101      	movs	r1, #1
 801dee4:	ec57 6b10 	vmov	r6, r7, d0
 801dee8:	4690      	mov	r8, r2
 801deea:	f7ff fc09 	bl	801d700 <_Balloc>
 801deee:	4604      	mov	r4, r0
 801def0:	b930      	cbnz	r0, 801df00 <__d2b+0x24>
 801def2:	4602      	mov	r2, r0
 801def4:	4b25      	ldr	r3, [pc, #148]	; (801df8c <__d2b+0xb0>)
 801def6:	4826      	ldr	r0, [pc, #152]	; (801df90 <__d2b+0xb4>)
 801def8:	f240 310a 	movw	r1, #778	; 0x30a
 801defc:	f7fe f86e 	bl	801bfdc <__assert_func>
 801df00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801df04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801df08:	bb35      	cbnz	r5, 801df58 <__d2b+0x7c>
 801df0a:	2e00      	cmp	r6, #0
 801df0c:	9301      	str	r3, [sp, #4]
 801df0e:	d028      	beq.n	801df62 <__d2b+0x86>
 801df10:	4668      	mov	r0, sp
 801df12:	9600      	str	r6, [sp, #0]
 801df14:	f7ff fd06 	bl	801d924 <__lo0bits>
 801df18:	9900      	ldr	r1, [sp, #0]
 801df1a:	b300      	cbz	r0, 801df5e <__d2b+0x82>
 801df1c:	9a01      	ldr	r2, [sp, #4]
 801df1e:	f1c0 0320 	rsb	r3, r0, #32
 801df22:	fa02 f303 	lsl.w	r3, r2, r3
 801df26:	430b      	orrs	r3, r1
 801df28:	40c2      	lsrs	r2, r0
 801df2a:	6163      	str	r3, [r4, #20]
 801df2c:	9201      	str	r2, [sp, #4]
 801df2e:	9b01      	ldr	r3, [sp, #4]
 801df30:	61a3      	str	r3, [r4, #24]
 801df32:	2b00      	cmp	r3, #0
 801df34:	bf14      	ite	ne
 801df36:	2202      	movne	r2, #2
 801df38:	2201      	moveq	r2, #1
 801df3a:	6122      	str	r2, [r4, #16]
 801df3c:	b1d5      	cbz	r5, 801df74 <__d2b+0x98>
 801df3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801df42:	4405      	add	r5, r0
 801df44:	f8c9 5000 	str.w	r5, [r9]
 801df48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801df4c:	f8c8 0000 	str.w	r0, [r8]
 801df50:	4620      	mov	r0, r4
 801df52:	b003      	add	sp, #12
 801df54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801df58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801df5c:	e7d5      	b.n	801df0a <__d2b+0x2e>
 801df5e:	6161      	str	r1, [r4, #20]
 801df60:	e7e5      	b.n	801df2e <__d2b+0x52>
 801df62:	a801      	add	r0, sp, #4
 801df64:	f7ff fcde 	bl	801d924 <__lo0bits>
 801df68:	9b01      	ldr	r3, [sp, #4]
 801df6a:	6163      	str	r3, [r4, #20]
 801df6c:	2201      	movs	r2, #1
 801df6e:	6122      	str	r2, [r4, #16]
 801df70:	3020      	adds	r0, #32
 801df72:	e7e3      	b.n	801df3c <__d2b+0x60>
 801df74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801df78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801df7c:	f8c9 0000 	str.w	r0, [r9]
 801df80:	6918      	ldr	r0, [r3, #16]
 801df82:	f7ff fcaf 	bl	801d8e4 <__hi0bits>
 801df86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801df8a:	e7df      	b.n	801df4c <__d2b+0x70>
 801df8c:	0801f699 	.word	0x0801f699
 801df90:	0801f724 	.word	0x0801f724

0801df94 <__ratio>:
 801df94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df98:	4688      	mov	r8, r1
 801df9a:	4669      	mov	r1, sp
 801df9c:	4681      	mov	r9, r0
 801df9e:	f7ff ff4d 	bl	801de3c <__b2d>
 801dfa2:	a901      	add	r1, sp, #4
 801dfa4:	4640      	mov	r0, r8
 801dfa6:	ec55 4b10 	vmov	r4, r5, d0
 801dfaa:	f7ff ff47 	bl	801de3c <__b2d>
 801dfae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dfb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801dfb6:	eba3 0c02 	sub.w	ip, r3, r2
 801dfba:	e9dd 3200 	ldrd	r3, r2, [sp]
 801dfbe:	1a9b      	subs	r3, r3, r2
 801dfc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801dfc4:	ec51 0b10 	vmov	r0, r1, d0
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	bfd6      	itet	le
 801dfcc:	460a      	movle	r2, r1
 801dfce:	462a      	movgt	r2, r5
 801dfd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801dfd4:	468b      	mov	fp, r1
 801dfd6:	462f      	mov	r7, r5
 801dfd8:	bfd4      	ite	le
 801dfda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801dfde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801dfe2:	4620      	mov	r0, r4
 801dfe4:	ee10 2a10 	vmov	r2, s0
 801dfe8:	465b      	mov	r3, fp
 801dfea:	4639      	mov	r1, r7
 801dfec:	f7e2 fc46 	bl	800087c <__aeabi_ddiv>
 801dff0:	ec41 0b10 	vmov	d0, r0, r1
 801dff4:	b003      	add	sp, #12
 801dff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dffa <__copybits>:
 801dffa:	3901      	subs	r1, #1
 801dffc:	b570      	push	{r4, r5, r6, lr}
 801dffe:	1149      	asrs	r1, r1, #5
 801e000:	6914      	ldr	r4, [r2, #16]
 801e002:	3101      	adds	r1, #1
 801e004:	f102 0314 	add.w	r3, r2, #20
 801e008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e00c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e010:	1f05      	subs	r5, r0, #4
 801e012:	42a3      	cmp	r3, r4
 801e014:	d30c      	bcc.n	801e030 <__copybits+0x36>
 801e016:	1aa3      	subs	r3, r4, r2
 801e018:	3b11      	subs	r3, #17
 801e01a:	f023 0303 	bic.w	r3, r3, #3
 801e01e:	3211      	adds	r2, #17
 801e020:	42a2      	cmp	r2, r4
 801e022:	bf88      	it	hi
 801e024:	2300      	movhi	r3, #0
 801e026:	4418      	add	r0, r3
 801e028:	2300      	movs	r3, #0
 801e02a:	4288      	cmp	r0, r1
 801e02c:	d305      	bcc.n	801e03a <__copybits+0x40>
 801e02e:	bd70      	pop	{r4, r5, r6, pc}
 801e030:	f853 6b04 	ldr.w	r6, [r3], #4
 801e034:	f845 6f04 	str.w	r6, [r5, #4]!
 801e038:	e7eb      	b.n	801e012 <__copybits+0x18>
 801e03a:	f840 3b04 	str.w	r3, [r0], #4
 801e03e:	e7f4      	b.n	801e02a <__copybits+0x30>

0801e040 <__any_on>:
 801e040:	f100 0214 	add.w	r2, r0, #20
 801e044:	6900      	ldr	r0, [r0, #16]
 801e046:	114b      	asrs	r3, r1, #5
 801e048:	4298      	cmp	r0, r3
 801e04a:	b510      	push	{r4, lr}
 801e04c:	db11      	blt.n	801e072 <__any_on+0x32>
 801e04e:	dd0a      	ble.n	801e066 <__any_on+0x26>
 801e050:	f011 011f 	ands.w	r1, r1, #31
 801e054:	d007      	beq.n	801e066 <__any_on+0x26>
 801e056:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e05a:	fa24 f001 	lsr.w	r0, r4, r1
 801e05e:	fa00 f101 	lsl.w	r1, r0, r1
 801e062:	428c      	cmp	r4, r1
 801e064:	d10b      	bne.n	801e07e <__any_on+0x3e>
 801e066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e06a:	4293      	cmp	r3, r2
 801e06c:	d803      	bhi.n	801e076 <__any_on+0x36>
 801e06e:	2000      	movs	r0, #0
 801e070:	bd10      	pop	{r4, pc}
 801e072:	4603      	mov	r3, r0
 801e074:	e7f7      	b.n	801e066 <__any_on+0x26>
 801e076:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e07a:	2900      	cmp	r1, #0
 801e07c:	d0f5      	beq.n	801e06a <__any_on+0x2a>
 801e07e:	2001      	movs	r0, #1
 801e080:	e7f6      	b.n	801e070 <__any_on+0x30>

0801e082 <_realloc_r>:
 801e082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e086:	4680      	mov	r8, r0
 801e088:	4614      	mov	r4, r2
 801e08a:	460e      	mov	r6, r1
 801e08c:	b921      	cbnz	r1, 801e098 <_realloc_r+0x16>
 801e08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e092:	4611      	mov	r1, r2
 801e094:	f7fb bdc0 	b.w	8019c18 <_malloc_r>
 801e098:	b92a      	cbnz	r2, 801e0a6 <_realloc_r+0x24>
 801e09a:	f7fb fd51 	bl	8019b40 <_free_r>
 801e09e:	4625      	mov	r5, r4
 801e0a0:	4628      	mov	r0, r5
 801e0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0a6:	f000 fb21 	bl	801e6ec <_malloc_usable_size_r>
 801e0aa:	4284      	cmp	r4, r0
 801e0ac:	4607      	mov	r7, r0
 801e0ae:	d802      	bhi.n	801e0b6 <_realloc_r+0x34>
 801e0b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e0b4:	d812      	bhi.n	801e0dc <_realloc_r+0x5a>
 801e0b6:	4621      	mov	r1, r4
 801e0b8:	4640      	mov	r0, r8
 801e0ba:	f7fb fdad 	bl	8019c18 <_malloc_r>
 801e0be:	4605      	mov	r5, r0
 801e0c0:	2800      	cmp	r0, #0
 801e0c2:	d0ed      	beq.n	801e0a0 <_realloc_r+0x1e>
 801e0c4:	42bc      	cmp	r4, r7
 801e0c6:	4622      	mov	r2, r4
 801e0c8:	4631      	mov	r1, r6
 801e0ca:	bf28      	it	cs
 801e0cc:	463a      	movcs	r2, r7
 801e0ce:	f7fb fcf1 	bl	8019ab4 <memcpy>
 801e0d2:	4631      	mov	r1, r6
 801e0d4:	4640      	mov	r0, r8
 801e0d6:	f7fb fd33 	bl	8019b40 <_free_r>
 801e0da:	e7e1      	b.n	801e0a0 <_realloc_r+0x1e>
 801e0dc:	4635      	mov	r5, r6
 801e0de:	e7df      	b.n	801e0a0 <_realloc_r+0x1e>

0801e0e0 <__ssputs_r>:
 801e0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0e4:	688e      	ldr	r6, [r1, #8]
 801e0e6:	429e      	cmp	r6, r3
 801e0e8:	4682      	mov	sl, r0
 801e0ea:	460c      	mov	r4, r1
 801e0ec:	4690      	mov	r8, r2
 801e0ee:	461f      	mov	r7, r3
 801e0f0:	d838      	bhi.n	801e164 <__ssputs_r+0x84>
 801e0f2:	898a      	ldrh	r2, [r1, #12]
 801e0f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e0f8:	d032      	beq.n	801e160 <__ssputs_r+0x80>
 801e0fa:	6825      	ldr	r5, [r4, #0]
 801e0fc:	6909      	ldr	r1, [r1, #16]
 801e0fe:	eba5 0901 	sub.w	r9, r5, r1
 801e102:	6965      	ldr	r5, [r4, #20]
 801e104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e10c:	3301      	adds	r3, #1
 801e10e:	444b      	add	r3, r9
 801e110:	106d      	asrs	r5, r5, #1
 801e112:	429d      	cmp	r5, r3
 801e114:	bf38      	it	cc
 801e116:	461d      	movcc	r5, r3
 801e118:	0553      	lsls	r3, r2, #21
 801e11a:	d531      	bpl.n	801e180 <__ssputs_r+0xa0>
 801e11c:	4629      	mov	r1, r5
 801e11e:	f7fb fd7b 	bl	8019c18 <_malloc_r>
 801e122:	4606      	mov	r6, r0
 801e124:	b950      	cbnz	r0, 801e13c <__ssputs_r+0x5c>
 801e126:	230c      	movs	r3, #12
 801e128:	f8ca 3000 	str.w	r3, [sl]
 801e12c:	89a3      	ldrh	r3, [r4, #12]
 801e12e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e132:	81a3      	strh	r3, [r4, #12]
 801e134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e13c:	6921      	ldr	r1, [r4, #16]
 801e13e:	464a      	mov	r2, r9
 801e140:	f7fb fcb8 	bl	8019ab4 <memcpy>
 801e144:	89a3      	ldrh	r3, [r4, #12]
 801e146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e14e:	81a3      	strh	r3, [r4, #12]
 801e150:	6126      	str	r6, [r4, #16]
 801e152:	6165      	str	r5, [r4, #20]
 801e154:	444e      	add	r6, r9
 801e156:	eba5 0509 	sub.w	r5, r5, r9
 801e15a:	6026      	str	r6, [r4, #0]
 801e15c:	60a5      	str	r5, [r4, #8]
 801e15e:	463e      	mov	r6, r7
 801e160:	42be      	cmp	r6, r7
 801e162:	d900      	bls.n	801e166 <__ssputs_r+0x86>
 801e164:	463e      	mov	r6, r7
 801e166:	6820      	ldr	r0, [r4, #0]
 801e168:	4632      	mov	r2, r6
 801e16a:	4641      	mov	r1, r8
 801e16c:	f7fb fcb0 	bl	8019ad0 <memmove>
 801e170:	68a3      	ldr	r3, [r4, #8]
 801e172:	1b9b      	subs	r3, r3, r6
 801e174:	60a3      	str	r3, [r4, #8]
 801e176:	6823      	ldr	r3, [r4, #0]
 801e178:	4433      	add	r3, r6
 801e17a:	6023      	str	r3, [r4, #0]
 801e17c:	2000      	movs	r0, #0
 801e17e:	e7db      	b.n	801e138 <__ssputs_r+0x58>
 801e180:	462a      	mov	r2, r5
 801e182:	f7ff ff7e 	bl	801e082 <_realloc_r>
 801e186:	4606      	mov	r6, r0
 801e188:	2800      	cmp	r0, #0
 801e18a:	d1e1      	bne.n	801e150 <__ssputs_r+0x70>
 801e18c:	6921      	ldr	r1, [r4, #16]
 801e18e:	4650      	mov	r0, sl
 801e190:	f7fb fcd6 	bl	8019b40 <_free_r>
 801e194:	e7c7      	b.n	801e126 <__ssputs_r+0x46>
	...

0801e198 <_svfiprintf_r>:
 801e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e19c:	4698      	mov	r8, r3
 801e19e:	898b      	ldrh	r3, [r1, #12]
 801e1a0:	061b      	lsls	r3, r3, #24
 801e1a2:	b09d      	sub	sp, #116	; 0x74
 801e1a4:	4607      	mov	r7, r0
 801e1a6:	460d      	mov	r5, r1
 801e1a8:	4614      	mov	r4, r2
 801e1aa:	d50e      	bpl.n	801e1ca <_svfiprintf_r+0x32>
 801e1ac:	690b      	ldr	r3, [r1, #16]
 801e1ae:	b963      	cbnz	r3, 801e1ca <_svfiprintf_r+0x32>
 801e1b0:	2140      	movs	r1, #64	; 0x40
 801e1b2:	f7fb fd31 	bl	8019c18 <_malloc_r>
 801e1b6:	6028      	str	r0, [r5, #0]
 801e1b8:	6128      	str	r0, [r5, #16]
 801e1ba:	b920      	cbnz	r0, 801e1c6 <_svfiprintf_r+0x2e>
 801e1bc:	230c      	movs	r3, #12
 801e1be:	603b      	str	r3, [r7, #0]
 801e1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e1c4:	e0d1      	b.n	801e36a <_svfiprintf_r+0x1d2>
 801e1c6:	2340      	movs	r3, #64	; 0x40
 801e1c8:	616b      	str	r3, [r5, #20]
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	9309      	str	r3, [sp, #36]	; 0x24
 801e1ce:	2320      	movs	r3, #32
 801e1d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e1d4:	f8cd 800c 	str.w	r8, [sp, #12]
 801e1d8:	2330      	movs	r3, #48	; 0x30
 801e1da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e384 <_svfiprintf_r+0x1ec>
 801e1de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e1e2:	f04f 0901 	mov.w	r9, #1
 801e1e6:	4623      	mov	r3, r4
 801e1e8:	469a      	mov	sl, r3
 801e1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e1ee:	b10a      	cbz	r2, 801e1f4 <_svfiprintf_r+0x5c>
 801e1f0:	2a25      	cmp	r2, #37	; 0x25
 801e1f2:	d1f9      	bne.n	801e1e8 <_svfiprintf_r+0x50>
 801e1f4:	ebba 0b04 	subs.w	fp, sl, r4
 801e1f8:	d00b      	beq.n	801e212 <_svfiprintf_r+0x7a>
 801e1fa:	465b      	mov	r3, fp
 801e1fc:	4622      	mov	r2, r4
 801e1fe:	4629      	mov	r1, r5
 801e200:	4638      	mov	r0, r7
 801e202:	f7ff ff6d 	bl	801e0e0 <__ssputs_r>
 801e206:	3001      	adds	r0, #1
 801e208:	f000 80aa 	beq.w	801e360 <_svfiprintf_r+0x1c8>
 801e20c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e20e:	445a      	add	r2, fp
 801e210:	9209      	str	r2, [sp, #36]	; 0x24
 801e212:	f89a 3000 	ldrb.w	r3, [sl]
 801e216:	2b00      	cmp	r3, #0
 801e218:	f000 80a2 	beq.w	801e360 <_svfiprintf_r+0x1c8>
 801e21c:	2300      	movs	r3, #0
 801e21e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e226:	f10a 0a01 	add.w	sl, sl, #1
 801e22a:	9304      	str	r3, [sp, #16]
 801e22c:	9307      	str	r3, [sp, #28]
 801e22e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e232:	931a      	str	r3, [sp, #104]	; 0x68
 801e234:	4654      	mov	r4, sl
 801e236:	2205      	movs	r2, #5
 801e238:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e23c:	4851      	ldr	r0, [pc, #324]	; (801e384 <_svfiprintf_r+0x1ec>)
 801e23e:	f7e1 ffe7 	bl	8000210 <memchr>
 801e242:	9a04      	ldr	r2, [sp, #16]
 801e244:	b9d8      	cbnz	r0, 801e27e <_svfiprintf_r+0xe6>
 801e246:	06d0      	lsls	r0, r2, #27
 801e248:	bf44      	itt	mi
 801e24a:	2320      	movmi	r3, #32
 801e24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e250:	0711      	lsls	r1, r2, #28
 801e252:	bf44      	itt	mi
 801e254:	232b      	movmi	r3, #43	; 0x2b
 801e256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e25a:	f89a 3000 	ldrb.w	r3, [sl]
 801e25e:	2b2a      	cmp	r3, #42	; 0x2a
 801e260:	d015      	beq.n	801e28e <_svfiprintf_r+0xf6>
 801e262:	9a07      	ldr	r2, [sp, #28]
 801e264:	4654      	mov	r4, sl
 801e266:	2000      	movs	r0, #0
 801e268:	f04f 0c0a 	mov.w	ip, #10
 801e26c:	4621      	mov	r1, r4
 801e26e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e272:	3b30      	subs	r3, #48	; 0x30
 801e274:	2b09      	cmp	r3, #9
 801e276:	d94e      	bls.n	801e316 <_svfiprintf_r+0x17e>
 801e278:	b1b0      	cbz	r0, 801e2a8 <_svfiprintf_r+0x110>
 801e27a:	9207      	str	r2, [sp, #28]
 801e27c:	e014      	b.n	801e2a8 <_svfiprintf_r+0x110>
 801e27e:	eba0 0308 	sub.w	r3, r0, r8
 801e282:	fa09 f303 	lsl.w	r3, r9, r3
 801e286:	4313      	orrs	r3, r2
 801e288:	9304      	str	r3, [sp, #16]
 801e28a:	46a2      	mov	sl, r4
 801e28c:	e7d2      	b.n	801e234 <_svfiprintf_r+0x9c>
 801e28e:	9b03      	ldr	r3, [sp, #12]
 801e290:	1d19      	adds	r1, r3, #4
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	9103      	str	r1, [sp, #12]
 801e296:	2b00      	cmp	r3, #0
 801e298:	bfbb      	ittet	lt
 801e29a:	425b      	neglt	r3, r3
 801e29c:	f042 0202 	orrlt.w	r2, r2, #2
 801e2a0:	9307      	strge	r3, [sp, #28]
 801e2a2:	9307      	strlt	r3, [sp, #28]
 801e2a4:	bfb8      	it	lt
 801e2a6:	9204      	strlt	r2, [sp, #16]
 801e2a8:	7823      	ldrb	r3, [r4, #0]
 801e2aa:	2b2e      	cmp	r3, #46	; 0x2e
 801e2ac:	d10c      	bne.n	801e2c8 <_svfiprintf_r+0x130>
 801e2ae:	7863      	ldrb	r3, [r4, #1]
 801e2b0:	2b2a      	cmp	r3, #42	; 0x2a
 801e2b2:	d135      	bne.n	801e320 <_svfiprintf_r+0x188>
 801e2b4:	9b03      	ldr	r3, [sp, #12]
 801e2b6:	1d1a      	adds	r2, r3, #4
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	9203      	str	r2, [sp, #12]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	bfb8      	it	lt
 801e2c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e2c4:	3402      	adds	r4, #2
 801e2c6:	9305      	str	r3, [sp, #20]
 801e2c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e394 <_svfiprintf_r+0x1fc>
 801e2cc:	7821      	ldrb	r1, [r4, #0]
 801e2ce:	2203      	movs	r2, #3
 801e2d0:	4650      	mov	r0, sl
 801e2d2:	f7e1 ff9d 	bl	8000210 <memchr>
 801e2d6:	b140      	cbz	r0, 801e2ea <_svfiprintf_r+0x152>
 801e2d8:	2340      	movs	r3, #64	; 0x40
 801e2da:	eba0 000a 	sub.w	r0, r0, sl
 801e2de:	fa03 f000 	lsl.w	r0, r3, r0
 801e2e2:	9b04      	ldr	r3, [sp, #16]
 801e2e4:	4303      	orrs	r3, r0
 801e2e6:	3401      	adds	r4, #1
 801e2e8:	9304      	str	r3, [sp, #16]
 801e2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2ee:	4826      	ldr	r0, [pc, #152]	; (801e388 <_svfiprintf_r+0x1f0>)
 801e2f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e2f4:	2206      	movs	r2, #6
 801e2f6:	f7e1 ff8b 	bl	8000210 <memchr>
 801e2fa:	2800      	cmp	r0, #0
 801e2fc:	d038      	beq.n	801e370 <_svfiprintf_r+0x1d8>
 801e2fe:	4b23      	ldr	r3, [pc, #140]	; (801e38c <_svfiprintf_r+0x1f4>)
 801e300:	bb1b      	cbnz	r3, 801e34a <_svfiprintf_r+0x1b2>
 801e302:	9b03      	ldr	r3, [sp, #12]
 801e304:	3307      	adds	r3, #7
 801e306:	f023 0307 	bic.w	r3, r3, #7
 801e30a:	3308      	adds	r3, #8
 801e30c:	9303      	str	r3, [sp, #12]
 801e30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e310:	4433      	add	r3, r6
 801e312:	9309      	str	r3, [sp, #36]	; 0x24
 801e314:	e767      	b.n	801e1e6 <_svfiprintf_r+0x4e>
 801e316:	fb0c 3202 	mla	r2, ip, r2, r3
 801e31a:	460c      	mov	r4, r1
 801e31c:	2001      	movs	r0, #1
 801e31e:	e7a5      	b.n	801e26c <_svfiprintf_r+0xd4>
 801e320:	2300      	movs	r3, #0
 801e322:	3401      	adds	r4, #1
 801e324:	9305      	str	r3, [sp, #20]
 801e326:	4619      	mov	r1, r3
 801e328:	f04f 0c0a 	mov.w	ip, #10
 801e32c:	4620      	mov	r0, r4
 801e32e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e332:	3a30      	subs	r2, #48	; 0x30
 801e334:	2a09      	cmp	r2, #9
 801e336:	d903      	bls.n	801e340 <_svfiprintf_r+0x1a8>
 801e338:	2b00      	cmp	r3, #0
 801e33a:	d0c5      	beq.n	801e2c8 <_svfiprintf_r+0x130>
 801e33c:	9105      	str	r1, [sp, #20]
 801e33e:	e7c3      	b.n	801e2c8 <_svfiprintf_r+0x130>
 801e340:	fb0c 2101 	mla	r1, ip, r1, r2
 801e344:	4604      	mov	r4, r0
 801e346:	2301      	movs	r3, #1
 801e348:	e7f0      	b.n	801e32c <_svfiprintf_r+0x194>
 801e34a:	ab03      	add	r3, sp, #12
 801e34c:	9300      	str	r3, [sp, #0]
 801e34e:	462a      	mov	r2, r5
 801e350:	4b0f      	ldr	r3, [pc, #60]	; (801e390 <_svfiprintf_r+0x1f8>)
 801e352:	a904      	add	r1, sp, #16
 801e354:	4638      	mov	r0, r7
 801e356:	f7fb fd73 	bl	8019e40 <_printf_float>
 801e35a:	1c42      	adds	r2, r0, #1
 801e35c:	4606      	mov	r6, r0
 801e35e:	d1d6      	bne.n	801e30e <_svfiprintf_r+0x176>
 801e360:	89ab      	ldrh	r3, [r5, #12]
 801e362:	065b      	lsls	r3, r3, #25
 801e364:	f53f af2c 	bmi.w	801e1c0 <_svfiprintf_r+0x28>
 801e368:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e36a:	b01d      	add	sp, #116	; 0x74
 801e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e370:	ab03      	add	r3, sp, #12
 801e372:	9300      	str	r3, [sp, #0]
 801e374:	462a      	mov	r2, r5
 801e376:	4b06      	ldr	r3, [pc, #24]	; (801e390 <_svfiprintf_r+0x1f8>)
 801e378:	a904      	add	r1, sp, #16
 801e37a:	4638      	mov	r0, r7
 801e37c:	f7fc f804 	bl	801a388 <_printf_i>
 801e380:	e7eb      	b.n	801e35a <_svfiprintf_r+0x1c2>
 801e382:	bf00      	nop
 801e384:	0801f87c 	.word	0x0801f87c
 801e388:	0801f886 	.word	0x0801f886
 801e38c:	08019e41 	.word	0x08019e41
 801e390:	0801e0e1 	.word	0x0801e0e1
 801e394:	0801f882 	.word	0x0801f882

0801e398 <__sfputc_r>:
 801e398:	6893      	ldr	r3, [r2, #8]
 801e39a:	3b01      	subs	r3, #1
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	b410      	push	{r4}
 801e3a0:	6093      	str	r3, [r2, #8]
 801e3a2:	da08      	bge.n	801e3b6 <__sfputc_r+0x1e>
 801e3a4:	6994      	ldr	r4, [r2, #24]
 801e3a6:	42a3      	cmp	r3, r4
 801e3a8:	db01      	blt.n	801e3ae <__sfputc_r+0x16>
 801e3aa:	290a      	cmp	r1, #10
 801e3ac:	d103      	bne.n	801e3b6 <__sfputc_r+0x1e>
 801e3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e3b2:	f7fd bd41 	b.w	801be38 <__swbuf_r>
 801e3b6:	6813      	ldr	r3, [r2, #0]
 801e3b8:	1c58      	adds	r0, r3, #1
 801e3ba:	6010      	str	r0, [r2, #0]
 801e3bc:	7019      	strb	r1, [r3, #0]
 801e3be:	4608      	mov	r0, r1
 801e3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e3c4:	4770      	bx	lr

0801e3c6 <__sfputs_r>:
 801e3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3c8:	4606      	mov	r6, r0
 801e3ca:	460f      	mov	r7, r1
 801e3cc:	4614      	mov	r4, r2
 801e3ce:	18d5      	adds	r5, r2, r3
 801e3d0:	42ac      	cmp	r4, r5
 801e3d2:	d101      	bne.n	801e3d8 <__sfputs_r+0x12>
 801e3d4:	2000      	movs	r0, #0
 801e3d6:	e007      	b.n	801e3e8 <__sfputs_r+0x22>
 801e3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3dc:	463a      	mov	r2, r7
 801e3de:	4630      	mov	r0, r6
 801e3e0:	f7ff ffda 	bl	801e398 <__sfputc_r>
 801e3e4:	1c43      	adds	r3, r0, #1
 801e3e6:	d1f3      	bne.n	801e3d0 <__sfputs_r+0xa>
 801e3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e3ec <_vfiprintf_r>:
 801e3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3f0:	460d      	mov	r5, r1
 801e3f2:	b09d      	sub	sp, #116	; 0x74
 801e3f4:	4614      	mov	r4, r2
 801e3f6:	4698      	mov	r8, r3
 801e3f8:	4606      	mov	r6, r0
 801e3fa:	b118      	cbz	r0, 801e404 <_vfiprintf_r+0x18>
 801e3fc:	6983      	ldr	r3, [r0, #24]
 801e3fe:	b90b      	cbnz	r3, 801e404 <_vfiprintf_r+0x18>
 801e400:	f7fb fa3a 	bl	8019878 <__sinit>
 801e404:	4b89      	ldr	r3, [pc, #548]	; (801e62c <_vfiprintf_r+0x240>)
 801e406:	429d      	cmp	r5, r3
 801e408:	d11b      	bne.n	801e442 <_vfiprintf_r+0x56>
 801e40a:	6875      	ldr	r5, [r6, #4]
 801e40c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e40e:	07d9      	lsls	r1, r3, #31
 801e410:	d405      	bmi.n	801e41e <_vfiprintf_r+0x32>
 801e412:	89ab      	ldrh	r3, [r5, #12]
 801e414:	059a      	lsls	r2, r3, #22
 801e416:	d402      	bmi.n	801e41e <_vfiprintf_r+0x32>
 801e418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e41a:	f7fb fb38 	bl	8019a8e <__retarget_lock_acquire_recursive>
 801e41e:	89ab      	ldrh	r3, [r5, #12]
 801e420:	071b      	lsls	r3, r3, #28
 801e422:	d501      	bpl.n	801e428 <_vfiprintf_r+0x3c>
 801e424:	692b      	ldr	r3, [r5, #16]
 801e426:	b9eb      	cbnz	r3, 801e464 <_vfiprintf_r+0x78>
 801e428:	4629      	mov	r1, r5
 801e42a:	4630      	mov	r0, r6
 801e42c:	f7fd fd68 	bl	801bf00 <__swsetup_r>
 801e430:	b1c0      	cbz	r0, 801e464 <_vfiprintf_r+0x78>
 801e432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e434:	07dc      	lsls	r4, r3, #31
 801e436:	d50e      	bpl.n	801e456 <_vfiprintf_r+0x6a>
 801e438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e43c:	b01d      	add	sp, #116	; 0x74
 801e43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e442:	4b7b      	ldr	r3, [pc, #492]	; (801e630 <_vfiprintf_r+0x244>)
 801e444:	429d      	cmp	r5, r3
 801e446:	d101      	bne.n	801e44c <_vfiprintf_r+0x60>
 801e448:	68b5      	ldr	r5, [r6, #8]
 801e44a:	e7df      	b.n	801e40c <_vfiprintf_r+0x20>
 801e44c:	4b79      	ldr	r3, [pc, #484]	; (801e634 <_vfiprintf_r+0x248>)
 801e44e:	429d      	cmp	r5, r3
 801e450:	bf08      	it	eq
 801e452:	68f5      	ldreq	r5, [r6, #12]
 801e454:	e7da      	b.n	801e40c <_vfiprintf_r+0x20>
 801e456:	89ab      	ldrh	r3, [r5, #12]
 801e458:	0598      	lsls	r0, r3, #22
 801e45a:	d4ed      	bmi.n	801e438 <_vfiprintf_r+0x4c>
 801e45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e45e:	f7fb fb17 	bl	8019a90 <__retarget_lock_release_recursive>
 801e462:	e7e9      	b.n	801e438 <_vfiprintf_r+0x4c>
 801e464:	2300      	movs	r3, #0
 801e466:	9309      	str	r3, [sp, #36]	; 0x24
 801e468:	2320      	movs	r3, #32
 801e46a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e46e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e472:	2330      	movs	r3, #48	; 0x30
 801e474:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e638 <_vfiprintf_r+0x24c>
 801e478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e47c:	f04f 0901 	mov.w	r9, #1
 801e480:	4623      	mov	r3, r4
 801e482:	469a      	mov	sl, r3
 801e484:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e488:	b10a      	cbz	r2, 801e48e <_vfiprintf_r+0xa2>
 801e48a:	2a25      	cmp	r2, #37	; 0x25
 801e48c:	d1f9      	bne.n	801e482 <_vfiprintf_r+0x96>
 801e48e:	ebba 0b04 	subs.w	fp, sl, r4
 801e492:	d00b      	beq.n	801e4ac <_vfiprintf_r+0xc0>
 801e494:	465b      	mov	r3, fp
 801e496:	4622      	mov	r2, r4
 801e498:	4629      	mov	r1, r5
 801e49a:	4630      	mov	r0, r6
 801e49c:	f7ff ff93 	bl	801e3c6 <__sfputs_r>
 801e4a0:	3001      	adds	r0, #1
 801e4a2:	f000 80aa 	beq.w	801e5fa <_vfiprintf_r+0x20e>
 801e4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e4a8:	445a      	add	r2, fp
 801e4aa:	9209      	str	r2, [sp, #36]	; 0x24
 801e4ac:	f89a 3000 	ldrb.w	r3, [sl]
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	f000 80a2 	beq.w	801e5fa <_vfiprintf_r+0x20e>
 801e4b6:	2300      	movs	r3, #0
 801e4b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e4c0:	f10a 0a01 	add.w	sl, sl, #1
 801e4c4:	9304      	str	r3, [sp, #16]
 801e4c6:	9307      	str	r3, [sp, #28]
 801e4c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e4cc:	931a      	str	r3, [sp, #104]	; 0x68
 801e4ce:	4654      	mov	r4, sl
 801e4d0:	2205      	movs	r2, #5
 801e4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4d6:	4858      	ldr	r0, [pc, #352]	; (801e638 <_vfiprintf_r+0x24c>)
 801e4d8:	f7e1 fe9a 	bl	8000210 <memchr>
 801e4dc:	9a04      	ldr	r2, [sp, #16]
 801e4de:	b9d8      	cbnz	r0, 801e518 <_vfiprintf_r+0x12c>
 801e4e0:	06d1      	lsls	r1, r2, #27
 801e4e2:	bf44      	itt	mi
 801e4e4:	2320      	movmi	r3, #32
 801e4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e4ea:	0713      	lsls	r3, r2, #28
 801e4ec:	bf44      	itt	mi
 801e4ee:	232b      	movmi	r3, #43	; 0x2b
 801e4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e4f4:	f89a 3000 	ldrb.w	r3, [sl]
 801e4f8:	2b2a      	cmp	r3, #42	; 0x2a
 801e4fa:	d015      	beq.n	801e528 <_vfiprintf_r+0x13c>
 801e4fc:	9a07      	ldr	r2, [sp, #28]
 801e4fe:	4654      	mov	r4, sl
 801e500:	2000      	movs	r0, #0
 801e502:	f04f 0c0a 	mov.w	ip, #10
 801e506:	4621      	mov	r1, r4
 801e508:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e50c:	3b30      	subs	r3, #48	; 0x30
 801e50e:	2b09      	cmp	r3, #9
 801e510:	d94e      	bls.n	801e5b0 <_vfiprintf_r+0x1c4>
 801e512:	b1b0      	cbz	r0, 801e542 <_vfiprintf_r+0x156>
 801e514:	9207      	str	r2, [sp, #28]
 801e516:	e014      	b.n	801e542 <_vfiprintf_r+0x156>
 801e518:	eba0 0308 	sub.w	r3, r0, r8
 801e51c:	fa09 f303 	lsl.w	r3, r9, r3
 801e520:	4313      	orrs	r3, r2
 801e522:	9304      	str	r3, [sp, #16]
 801e524:	46a2      	mov	sl, r4
 801e526:	e7d2      	b.n	801e4ce <_vfiprintf_r+0xe2>
 801e528:	9b03      	ldr	r3, [sp, #12]
 801e52a:	1d19      	adds	r1, r3, #4
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	9103      	str	r1, [sp, #12]
 801e530:	2b00      	cmp	r3, #0
 801e532:	bfbb      	ittet	lt
 801e534:	425b      	neglt	r3, r3
 801e536:	f042 0202 	orrlt.w	r2, r2, #2
 801e53a:	9307      	strge	r3, [sp, #28]
 801e53c:	9307      	strlt	r3, [sp, #28]
 801e53e:	bfb8      	it	lt
 801e540:	9204      	strlt	r2, [sp, #16]
 801e542:	7823      	ldrb	r3, [r4, #0]
 801e544:	2b2e      	cmp	r3, #46	; 0x2e
 801e546:	d10c      	bne.n	801e562 <_vfiprintf_r+0x176>
 801e548:	7863      	ldrb	r3, [r4, #1]
 801e54a:	2b2a      	cmp	r3, #42	; 0x2a
 801e54c:	d135      	bne.n	801e5ba <_vfiprintf_r+0x1ce>
 801e54e:	9b03      	ldr	r3, [sp, #12]
 801e550:	1d1a      	adds	r2, r3, #4
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	9203      	str	r2, [sp, #12]
 801e556:	2b00      	cmp	r3, #0
 801e558:	bfb8      	it	lt
 801e55a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e55e:	3402      	adds	r4, #2
 801e560:	9305      	str	r3, [sp, #20]
 801e562:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e648 <_vfiprintf_r+0x25c>
 801e566:	7821      	ldrb	r1, [r4, #0]
 801e568:	2203      	movs	r2, #3
 801e56a:	4650      	mov	r0, sl
 801e56c:	f7e1 fe50 	bl	8000210 <memchr>
 801e570:	b140      	cbz	r0, 801e584 <_vfiprintf_r+0x198>
 801e572:	2340      	movs	r3, #64	; 0x40
 801e574:	eba0 000a 	sub.w	r0, r0, sl
 801e578:	fa03 f000 	lsl.w	r0, r3, r0
 801e57c:	9b04      	ldr	r3, [sp, #16]
 801e57e:	4303      	orrs	r3, r0
 801e580:	3401      	adds	r4, #1
 801e582:	9304      	str	r3, [sp, #16]
 801e584:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e588:	482c      	ldr	r0, [pc, #176]	; (801e63c <_vfiprintf_r+0x250>)
 801e58a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e58e:	2206      	movs	r2, #6
 801e590:	f7e1 fe3e 	bl	8000210 <memchr>
 801e594:	2800      	cmp	r0, #0
 801e596:	d03f      	beq.n	801e618 <_vfiprintf_r+0x22c>
 801e598:	4b29      	ldr	r3, [pc, #164]	; (801e640 <_vfiprintf_r+0x254>)
 801e59a:	bb1b      	cbnz	r3, 801e5e4 <_vfiprintf_r+0x1f8>
 801e59c:	9b03      	ldr	r3, [sp, #12]
 801e59e:	3307      	adds	r3, #7
 801e5a0:	f023 0307 	bic.w	r3, r3, #7
 801e5a4:	3308      	adds	r3, #8
 801e5a6:	9303      	str	r3, [sp, #12]
 801e5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5aa:	443b      	add	r3, r7
 801e5ac:	9309      	str	r3, [sp, #36]	; 0x24
 801e5ae:	e767      	b.n	801e480 <_vfiprintf_r+0x94>
 801e5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 801e5b4:	460c      	mov	r4, r1
 801e5b6:	2001      	movs	r0, #1
 801e5b8:	e7a5      	b.n	801e506 <_vfiprintf_r+0x11a>
 801e5ba:	2300      	movs	r3, #0
 801e5bc:	3401      	adds	r4, #1
 801e5be:	9305      	str	r3, [sp, #20]
 801e5c0:	4619      	mov	r1, r3
 801e5c2:	f04f 0c0a 	mov.w	ip, #10
 801e5c6:	4620      	mov	r0, r4
 801e5c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e5cc:	3a30      	subs	r2, #48	; 0x30
 801e5ce:	2a09      	cmp	r2, #9
 801e5d0:	d903      	bls.n	801e5da <_vfiprintf_r+0x1ee>
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d0c5      	beq.n	801e562 <_vfiprintf_r+0x176>
 801e5d6:	9105      	str	r1, [sp, #20]
 801e5d8:	e7c3      	b.n	801e562 <_vfiprintf_r+0x176>
 801e5da:	fb0c 2101 	mla	r1, ip, r1, r2
 801e5de:	4604      	mov	r4, r0
 801e5e0:	2301      	movs	r3, #1
 801e5e2:	e7f0      	b.n	801e5c6 <_vfiprintf_r+0x1da>
 801e5e4:	ab03      	add	r3, sp, #12
 801e5e6:	9300      	str	r3, [sp, #0]
 801e5e8:	462a      	mov	r2, r5
 801e5ea:	4b16      	ldr	r3, [pc, #88]	; (801e644 <_vfiprintf_r+0x258>)
 801e5ec:	a904      	add	r1, sp, #16
 801e5ee:	4630      	mov	r0, r6
 801e5f0:	f7fb fc26 	bl	8019e40 <_printf_float>
 801e5f4:	4607      	mov	r7, r0
 801e5f6:	1c78      	adds	r0, r7, #1
 801e5f8:	d1d6      	bne.n	801e5a8 <_vfiprintf_r+0x1bc>
 801e5fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e5fc:	07d9      	lsls	r1, r3, #31
 801e5fe:	d405      	bmi.n	801e60c <_vfiprintf_r+0x220>
 801e600:	89ab      	ldrh	r3, [r5, #12]
 801e602:	059a      	lsls	r2, r3, #22
 801e604:	d402      	bmi.n	801e60c <_vfiprintf_r+0x220>
 801e606:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e608:	f7fb fa42 	bl	8019a90 <__retarget_lock_release_recursive>
 801e60c:	89ab      	ldrh	r3, [r5, #12]
 801e60e:	065b      	lsls	r3, r3, #25
 801e610:	f53f af12 	bmi.w	801e438 <_vfiprintf_r+0x4c>
 801e614:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e616:	e711      	b.n	801e43c <_vfiprintf_r+0x50>
 801e618:	ab03      	add	r3, sp, #12
 801e61a:	9300      	str	r3, [sp, #0]
 801e61c:	462a      	mov	r2, r5
 801e61e:	4b09      	ldr	r3, [pc, #36]	; (801e644 <_vfiprintf_r+0x258>)
 801e620:	a904      	add	r1, sp, #16
 801e622:	4630      	mov	r0, r6
 801e624:	f7fb feb0 	bl	801a388 <_printf_i>
 801e628:	e7e4      	b.n	801e5f4 <_vfiprintf_r+0x208>
 801e62a:	bf00      	nop
 801e62c:	0801f454 	.word	0x0801f454
 801e630:	0801f474 	.word	0x0801f474
 801e634:	0801f434 	.word	0x0801f434
 801e638:	0801f87c 	.word	0x0801f87c
 801e63c:	0801f886 	.word	0x0801f886
 801e640:	08019e41 	.word	0x08019e41
 801e644:	0801e3c7 	.word	0x0801e3c7
 801e648:	0801f882 	.word	0x0801f882

0801e64c <_read_r>:
 801e64c:	b538      	push	{r3, r4, r5, lr}
 801e64e:	4d07      	ldr	r5, [pc, #28]	; (801e66c <_read_r+0x20>)
 801e650:	4604      	mov	r4, r0
 801e652:	4608      	mov	r0, r1
 801e654:	4611      	mov	r1, r2
 801e656:	2200      	movs	r2, #0
 801e658:	602a      	str	r2, [r5, #0]
 801e65a:	461a      	mov	r2, r3
 801e65c:	f7e5 fdd4 	bl	8004208 <_read>
 801e660:	1c43      	adds	r3, r0, #1
 801e662:	d102      	bne.n	801e66a <_read_r+0x1e>
 801e664:	682b      	ldr	r3, [r5, #0]
 801e666:	b103      	cbz	r3, 801e66a <_read_r+0x1e>
 801e668:	6023      	str	r3, [r4, #0]
 801e66a:	bd38      	pop	{r3, r4, r5, pc}
 801e66c:	20009f88 	.word	0x20009f88

0801e670 <nan>:
 801e670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e678 <nan+0x8>
 801e674:	4770      	bx	lr
 801e676:	bf00      	nop
 801e678:	00000000 	.word	0x00000000
 801e67c:	7ff80000 	.word	0x7ff80000

0801e680 <__ascii_wctomb>:
 801e680:	b149      	cbz	r1, 801e696 <__ascii_wctomb+0x16>
 801e682:	2aff      	cmp	r2, #255	; 0xff
 801e684:	bf85      	ittet	hi
 801e686:	238a      	movhi	r3, #138	; 0x8a
 801e688:	6003      	strhi	r3, [r0, #0]
 801e68a:	700a      	strbls	r2, [r1, #0]
 801e68c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801e690:	bf98      	it	ls
 801e692:	2001      	movls	r0, #1
 801e694:	4770      	bx	lr
 801e696:	4608      	mov	r0, r1
 801e698:	4770      	bx	lr

0801e69a <abort>:
 801e69a:	b508      	push	{r3, lr}
 801e69c:	2006      	movs	r0, #6
 801e69e:	f000 f855 	bl	801e74c <raise>
 801e6a2:	2001      	movs	r0, #1
 801e6a4:	f7e5 fda6 	bl	80041f4 <_exit>

0801e6a8 <_fstat_r>:
 801e6a8:	b538      	push	{r3, r4, r5, lr}
 801e6aa:	4d07      	ldr	r5, [pc, #28]	; (801e6c8 <_fstat_r+0x20>)
 801e6ac:	2300      	movs	r3, #0
 801e6ae:	4604      	mov	r4, r0
 801e6b0:	4608      	mov	r0, r1
 801e6b2:	4611      	mov	r1, r2
 801e6b4:	602b      	str	r3, [r5, #0]
 801e6b6:	f7e5 fdec 	bl	8004292 <_fstat>
 801e6ba:	1c43      	adds	r3, r0, #1
 801e6bc:	d102      	bne.n	801e6c4 <_fstat_r+0x1c>
 801e6be:	682b      	ldr	r3, [r5, #0]
 801e6c0:	b103      	cbz	r3, 801e6c4 <_fstat_r+0x1c>
 801e6c2:	6023      	str	r3, [r4, #0]
 801e6c4:	bd38      	pop	{r3, r4, r5, pc}
 801e6c6:	bf00      	nop
 801e6c8:	20009f88 	.word	0x20009f88

0801e6cc <_isatty_r>:
 801e6cc:	b538      	push	{r3, r4, r5, lr}
 801e6ce:	4d06      	ldr	r5, [pc, #24]	; (801e6e8 <_isatty_r+0x1c>)
 801e6d0:	2300      	movs	r3, #0
 801e6d2:	4604      	mov	r4, r0
 801e6d4:	4608      	mov	r0, r1
 801e6d6:	602b      	str	r3, [r5, #0]
 801e6d8:	f7e5 fdeb 	bl	80042b2 <_isatty>
 801e6dc:	1c43      	adds	r3, r0, #1
 801e6de:	d102      	bne.n	801e6e6 <_isatty_r+0x1a>
 801e6e0:	682b      	ldr	r3, [r5, #0]
 801e6e2:	b103      	cbz	r3, 801e6e6 <_isatty_r+0x1a>
 801e6e4:	6023      	str	r3, [r4, #0]
 801e6e6:	bd38      	pop	{r3, r4, r5, pc}
 801e6e8:	20009f88 	.word	0x20009f88

0801e6ec <_malloc_usable_size_r>:
 801e6ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e6f0:	1f18      	subs	r0, r3, #4
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	bfbc      	itt	lt
 801e6f6:	580b      	ldrlt	r3, [r1, r0]
 801e6f8:	18c0      	addlt	r0, r0, r3
 801e6fa:	4770      	bx	lr

0801e6fc <_raise_r>:
 801e6fc:	291f      	cmp	r1, #31
 801e6fe:	b538      	push	{r3, r4, r5, lr}
 801e700:	4604      	mov	r4, r0
 801e702:	460d      	mov	r5, r1
 801e704:	d904      	bls.n	801e710 <_raise_r+0x14>
 801e706:	2316      	movs	r3, #22
 801e708:	6003      	str	r3, [r0, #0]
 801e70a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e70e:	bd38      	pop	{r3, r4, r5, pc}
 801e710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e712:	b112      	cbz	r2, 801e71a <_raise_r+0x1e>
 801e714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e718:	b94b      	cbnz	r3, 801e72e <_raise_r+0x32>
 801e71a:	4620      	mov	r0, r4
 801e71c:	f000 f830 	bl	801e780 <_getpid_r>
 801e720:	462a      	mov	r2, r5
 801e722:	4601      	mov	r1, r0
 801e724:	4620      	mov	r0, r4
 801e726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e72a:	f000 b817 	b.w	801e75c <_kill_r>
 801e72e:	2b01      	cmp	r3, #1
 801e730:	d00a      	beq.n	801e748 <_raise_r+0x4c>
 801e732:	1c59      	adds	r1, r3, #1
 801e734:	d103      	bne.n	801e73e <_raise_r+0x42>
 801e736:	2316      	movs	r3, #22
 801e738:	6003      	str	r3, [r0, #0]
 801e73a:	2001      	movs	r0, #1
 801e73c:	e7e7      	b.n	801e70e <_raise_r+0x12>
 801e73e:	2400      	movs	r4, #0
 801e740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e744:	4628      	mov	r0, r5
 801e746:	4798      	blx	r3
 801e748:	2000      	movs	r0, #0
 801e74a:	e7e0      	b.n	801e70e <_raise_r+0x12>

0801e74c <raise>:
 801e74c:	4b02      	ldr	r3, [pc, #8]	; (801e758 <raise+0xc>)
 801e74e:	4601      	mov	r1, r0
 801e750:	6818      	ldr	r0, [r3, #0]
 801e752:	f7ff bfd3 	b.w	801e6fc <_raise_r>
 801e756:	bf00      	nop
 801e758:	2000008c 	.word	0x2000008c

0801e75c <_kill_r>:
 801e75c:	b538      	push	{r3, r4, r5, lr}
 801e75e:	4d07      	ldr	r5, [pc, #28]	; (801e77c <_kill_r+0x20>)
 801e760:	2300      	movs	r3, #0
 801e762:	4604      	mov	r4, r0
 801e764:	4608      	mov	r0, r1
 801e766:	4611      	mov	r1, r2
 801e768:	602b      	str	r3, [r5, #0]
 801e76a:	f7e5 fd33 	bl	80041d4 <_kill>
 801e76e:	1c43      	adds	r3, r0, #1
 801e770:	d102      	bne.n	801e778 <_kill_r+0x1c>
 801e772:	682b      	ldr	r3, [r5, #0]
 801e774:	b103      	cbz	r3, 801e778 <_kill_r+0x1c>
 801e776:	6023      	str	r3, [r4, #0]
 801e778:	bd38      	pop	{r3, r4, r5, pc}
 801e77a:	bf00      	nop
 801e77c:	20009f88 	.word	0x20009f88

0801e780 <_getpid_r>:
 801e780:	f7e5 bd20 	b.w	80041c4 <_getpid>

0801e784 <_init>:
 801e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e786:	bf00      	nop
 801e788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e78a:	bc08      	pop	{r3}
 801e78c:	469e      	mov	lr, r3
 801e78e:	4770      	bx	lr

0801e790 <_fini>:
 801e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e792:	bf00      	nop
 801e794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e796:	bc08      	pop	{r3}
 801e798:	469e      	mov	lr, r3
 801e79a:	4770      	bx	lr
